/*
 * catberry-example: 0.0.0
 * Build Date: Thu Jan 14 2016 15:43:30 GMT+0400 (SAMT)
 */

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

/**
 * This module is a template and it is used only with some string replaces
 * by BrowserBundleBuilder module. It does not work by itself.
 */

'use strict';

var stores = [

{name: 'Breadcrumps', constructor: require('./catberry_stores/Breadcrumps.js')},
{name: 'Pages', constructor: require('./catberry_stores/Pages.js')},
{name: 'Paginator', constructor: require('./catberry_stores/Paginator.js')},
{name: 'Tag', constructor: require('./catberry_stores/Tag.js')},
{name: 'master/MasterItem', constructor: require('./catberry_stores/master/MasterItem.js')},
{name: 'master/MasterList', constructor: require('./catberry_stores/master/MasterList.js')},
{name: 'master/MasterSovety', constructor: require('./catberry_stores/master/MasterSovety.js')},
{name: 'master/MasterVideo', constructor: require('./catberry_stores/master/MasterVideo.js')},
{name: 'master/Recommended', constructor: require('./catberry_stores/master/Recommended.js')},
{name: 'other/News', constructor: require('./catberry_stores/other/News.js')},
{name: 'other/NewsItem', constructor: require('./catberry_stores/other/NewsItem.js')},
{name: 'other/Recommendation', constructor: require('./catberry_stores/other/Recommendation.js')},
{name: 'other/Vacancy', constructor: require('./catberry_stores/other/Vacancy.js')},
{name: 'other/VacancyItem', constructor: require('./catberry_stores/other/VacancyItem.js')},
{name: 'rubrika/Rubrika', constructor: require('./catberry_stores/rubrika/Rubrika.js')},
{name: 'rubrika/Rubrikator', constructor: require('./catberry_stores/rubrika/Rubrikator.js')},
{name: 'rubrika/RubrikatorCompany', constructor: require('./catberry_stores/rubrika/RubrikatorCompany.js')},
{name: 'rubrika/RubrikatorParent', constructor: require('./catberry_stores/rubrika/RubrikatorParent.js')},
{name: 'Head', constructor: require('./catberry_stores/Head.js')}
];

var components = [

{name: 'breadcrumps', constructor: require('./catberry_components/breadcrumps/index.js'), properties: {"name":"breadcrumps","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <span class=\\"breadcrumbs__icon\\">\\n            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "arrow-breadcrumbs", {"name":"icon","hash":{},"data":data})))\n    + "\\n        </span>\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.url : depth0), {"name":"if","hash":{},"fn":this.program(2, data),"inverse":this.program(7, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.links : depth0), {"name":"if","hash":{},"fn":this.program(9, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"2":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.links : depth0), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"3":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                <a class=\\"breadcrumbs__level breadcrumbs__level_link js-parent-rub\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</a>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                <a class=\\"breadcrumbs__level breadcrumbs__level_link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</a>\\n";\n},"7":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "            <span class=\\"breadcrumbs__level\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</span>\\n";\n},"9":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "            <div class=\\"breadcrumbs__list-container js-breadcrumbs-list\\">\\n                <ul class=\\"breadcrumbs__list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.links : depth0), {"name":"each","hash":{},"fn":this.program(10, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </ul>\\n            </div>\\n";\n},"10":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        <li class=\\"breadcrumbs__list-item\\">\\n                            <span class=\\"breadcrumbs__icon\\"></span>\\n                            <a class=\\"breadcrumbs__level breadcrumbs__level_link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</a>\\n                        </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"breadcrumbs\\">\\n    <span class=\\"breadcrumbs__header\\">Вы находитесь: </span>\\n";\n  stack1 = helpers.each.call(depth0, depth0, {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'catalog-list', constructor: require('./catberry_components/catalog-list/index.js'), properties: {"name":"catalog-list","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <li class=\\"catalog-list__item\\">\\n            <a class=\\"catalog-list__item-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n                <span class=\\"catalog-list__icon\\">\\n                    "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, (depth0 != null ? depth0.ico : depth0), {"name":"icon","hash":{},"data":data})))\n    + "\\n                </span>\\n                ";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n            </a>\\n        </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<ul class=\\"catalog-list_"\n    + escapeExpression(((helper = (helper = helpers[\'data-mod\'] || (depth0 != null ? depth0[\'data-mod\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"data-mod","hash":{},"data":data}) : helper)))\n    + " catalog-list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.catalogs : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</ul>\\n\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'document', constructor: require('./catberry_components/document/index.js'), properties: {"name":"document","template":"./template.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<head cat-store=\\"Head\\"></head>\\n<body>\\n\t<cat-pages-header id=\\"pages-header\\" cat-store=\\"Pages\\"></cat-pages-header>\\n\t<cat-pages-content id=\\"pages-content\\" cat-store=\\"Pages\\"></cat-pages-content>\\n    <cat-pages-footer id=\\"pages-footer\\" cat-store=\\"Pages\\"></cat-pages-footer>\\n</body>\\n</html>\\n";\n  },"useData":true}', errorTemplateSource: null},
{name: 'head', constructor: require('./catberry_components/head/index.js'), properties: {"name":"head","template":"./template.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "<meta charset=\\"UTF-8\\">\\n<title>"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</title>\\n<meta content=\\""\n    + escapeExpression(((helper = (helper = helpers.description || (depth0 != null ? depth0.description : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"description","hash":{},"data":data}) : helper)))\n    + "\\" name=\\"description\\">\\n<meta content=\\""\n    + escapeExpression(((helper = (helper = helpers.keywords || (depth0 != null ? depth0.keywords : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"keywords","hash":{},"data":data}) : helper)))\n    + "\\" name=\\"keywords\\">\\n<meta content=\\"telephone=no\\" name=\\"format-detection\\">\\n<meta name=\\"robots\\" content=\\"noodp, noydir\\">\\n\\n<meta name=\\"HandheldFriendly\\" content=\\"true\\">\\n<meta http-equiv=\\"X-UA-Compatible\\" content=\\"IE=edge\\">\\n<meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">\\n\\n<meta property=\\"og:title\\" content=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.social : depth0)) != null ? stack1.title : stack1), depth0))\n    + "\\">\\n<meta property=\\"og:url\\" content=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.social : depth0)) != null ? stack1.url : stack1), depth0))\n    + "\\">\\n<meta property=\\"og:description\\" content=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.social : depth0)) != null ? stack1.description : stack1), depth0))\n    + "\\">\\n<meta property=\\"og:image\\" content=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.social : depth0)) != null ? stack1.img : stack1), depth0))\n    + "\\">\\n<meta property=\\"og:image:type\\" content=\\"image/jpeg\\">\\n<meta property=\\"og:image:width\\" content=\\"500\\">\\n<meta property=\\"og:image:height\\" content=\\"300\\">\\n<meta property=\\"twitter:description\\" content=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.social : depth0)) != null ? stack1.description : stack1), depth0))\n    + "\\">\\n<link rel=\\"image_src\\" href=\\"\\">\\n<link rel=\\"icon\\" type=\\"image/png\\" href=\\"/img/icon.ico\\">\\n\\n<link href=\\"/css/main.css\\" rel=\\"stylesheet\\">\\n<link href=\\"/css/vendor.min.css\\" rel=\\"stylesheet\\">\\n<script src=\\"/vendor.min.js\\"></script>\\n<script src=\\"/bundle.js\\"></script>\\n<script>svg4everybody();</script>\\n\\n<!--[if lt IE 9 ]><!--<script src=\\"/separate-js/html5shiv-3.7.2.min.js\\" type=\\"text/javascript\\"></script><meta content=\\"no\\" http-equiv=\\"imagetoolbar\\">--><![endif]-->\\n";\n},"useData":true}', errorTemplateSource: null},
{name: 'loader', constructor: require('./catberry_components/loader/index.js'), properties: {"name":"loader","template":"./template.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"loading\\"></div>\\n\\n";\n  },"useData":true}', errorTemplateSource: null},
{name: 'search', constructor: require('./catberry_components/search/index.js'), properties: {"name":"search","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return " search_"\n    + escapeExpression(((helper = (helper = helpers.modificator || (depth0 != null ? depth0.modificator : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"modificator","hash":{},"data":data}) : helper)))\n    + " ";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<div class=\\"search ";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.modificator : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\">\\n    <form class=\\"search__form\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\">\\n        <div class=\\"search__title\\">\\n            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "search", {"name":"icon","hash":{},"data":data})))\n    + "\\n        </div>\\n        <div class=\\"search__field\\">\\n            <input class=\\"search__field-input input-text\\" type=\\"text\\" name=\\"search\\">\\n        </div>\\n        <div class=\\"search__button\\">\\n            <button class=\\"search__button-submit\\" type=\\"submit\\">найди услугу</button>\\n        </div>\\n    </form>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'service-request', constructor: require('./catberry_components/service-request/index.js'), properties: {"name":"service-request","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'social', constructor: require('./catberry_components/social/index.js'), properties: {"name":"social","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "    <li class=\\"social__item\\">\\n        <a class=\\"social__item-link link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\" target=\\"_blank\\">\\n            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, (depth0 != null ? depth0.ico : depth0), "icon_white", {"name":"icon","hash":{},"data":data})))\n    + "\\n        </a>\\n    </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<ul class=\\"social\\">\\n";\n  stack1 = helpers.each.call(depth0, depth0, {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</ul>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'common-h1', constructor: require('./catberry_components/_common/common-h1/index.js'), properties: {"name":"common-h1","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<h1 class=\\"h1 h1_style\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</h1>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'common-paginator', constructor: require('./catberry_components/_common/common-paginator/index.js'), properties: {"name":"common-paginator","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, buffer = "    <div class=\\"paginator\\">\\n        <span class=\\"paginator__title\\">Перейти к странице: </span>\\n        <ul class=\\"paginator__list\\">\\n            <li class=\\"paginator__page paginator__page_previous\\">\\n                <a class=\\"paginator__number\\" href=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.start : depth0)) != null ? stack1.url : stack1), depth0))\n    + "\\">&lt;</a>\\n            </li>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.list : depth0), {"name":"each","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            <li class=\\"paginator__page paginator__page_next\\">\\n                <a class=\\"paginator__number\\" href=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.end : depth0)) != null ? stack1.url : stack1), depth0))\n    + "\\">&gt;</a>\\n            </li>\\n        </ul>\\n    </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0[\'is-selected\'] : depth0), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"3":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                    <li class=\\"paginator__page paginator__page_selected\\"><span class=\\"paginator__number\\">"\n    + escapeExpression(((helper = (helper = helpers.number || (depth0 != null ? depth0.number : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"number","hash":{},"data":data}) : helper)))\n    + "</span></li>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                    <li class=\\"paginator__page\\"><a class=\\"paginator__number\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.number || (depth0 != null ? depth0.number : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"number","hash":{},"data":data}) : helper)))\n    + "</a></li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1;\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0[\'is-paginator\'] : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { return stack1; }\n  else { return \'\'; }\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-filter', constructor: require('./catberry_components/master/master-filter/index.js'), properties: {"name":"master-filter","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <div class=\\"filter-section\\">\\n            <a class=\\"filter-section__title filter-section__title_"\n    + escapeExpression(((helper = (helper = helpers.sectionName || (depth0 != null ? depth0.sectionName : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"sectionName","hash":{},"data":data}) : helper)))\n    + " ";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.openSection : depth0), {"name":"if","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += " js-filter-toggle-btn\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n                <div class=\\"filter-section__icon\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.openSection : depth0), {"name":"if","hash":{},"fn":this.program(4, data),"inverse":this.program(6, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </div>\\n\\n                "\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\n\\n                <div class=\\"filter-section__arrow\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.openSection : depth0), {"name":"if","hash":{},"fn":this.program(8, data),"inverse":this.program(10, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </div>\\n            </a>\\n\\n";\n  stack1 = helpers[\'with\'].call(depth0, (depth0 != null ? depth0.openSection : depth0), {"name":"with","hash":{},"fn":this.program(12, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "        </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  return "active";\n  },"4":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, (depth0 != null ? depth0.ico : depth0), "icon_white", {"name":"icon","hash":{},"data":data})))\n    + "\\n";\n},"6":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, (depth0 != null ? depth0.ico : depth0), {"name":"icon","hash":{},"data":data})))\n    + "\\n";\n},"8":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", "down", {"name":"icon","hash":{},"data":data})))\n    + "\\n";\n},"10":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "\\n";\n},"12":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                <div class=\\"filter-section__section js-filter-toggle-section\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.sortBy : depth0), {"name":"if","hash":{},"fn":this.program(13, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.tagsGroup : depth0), {"name":"if","hash":{},"fn":this.program(15, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </div>\\n";\n},"13":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                        <div class=\\"sort-by\\">\\n                            <p class=\\"sort-by__title\\">Отсортировать: </p>\\n\\n                            <form class=\\"sort-by__form\\" action=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.sortBy : depth0)) != null ? stack1.url : stack1), depth0))\n    + "\\" method=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.sortBy : depth0)) != null ? stack1.method : stack1), depth0))\n    + "\\">\\n                                <div class=\\"filter-radio\\">\\n                                    <input class=\\"filter-radio__input\\" type=\\"radio\\" name=\\"sort-by\\" value=\\"name\\" id=\\"sort-by-name\\">\\n                                    <label class=\\"filter-radio__label\\" for=\\"sort-by-name\\">по фамилии по алфавиту</label>\\n                                </div>\\n                                <div class=\\"filter-radio\\">\\n                                    <input class=\\"filter-radio__input\\" type=\\"radio\\" name=\\"sort-by\\" value=\\"recommendation\\" id=\\"sort-by-recommendation\\">\\n                                    <label class=\\"filter-radio__label\\" for=\\"sort-by-recommendation\\">по количеству\\n                                        рекомендаций</label>\\n                                </div>\\n                            </form>\\n                        </div>\\n";\n},"15":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                        <div class=\\"filter-by\\">\\n                            <p class=\\"filter-by__title\\">Отфильтровать:</p>\\n\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tagsGroup : depth0), {"name":"each","hash":{},"fn":this.program(16, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n                        </div>\\n";\n},"16":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.title : depth0), {"name":"if","hash":{},"fn":this.program(17, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tags : depth0), {"name":"each","hash":{},"fn":this.program(19, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"17":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                                    <p class=\\"filter-by__title\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</p>\\n";\n},"19":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.isActive : depth0), {"name":"if","hash":{},"fn":this.program(20, data),"inverse":this.program(22, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"20":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                                        <span class=\\"filter-by__tag-active\\">\\n                                            "\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\n                                            <div class=\\"filter-by__close\\">\\n                                                <a class=\\"filter-by__close-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.urlBack || (depth0 != null ? depth0.urlBack : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"urlBack","hash":{},"data":data}) : helper)))\n    + "\\">\\n                                                    <div class=\\"filter-by__close-icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "close", {"name":"icon","hash":{},"data":data})))\n    + "</div>\\n                                                </a>\\n                                            </div>\\n                                        </span>\\n";\n},"22":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                                        <a class=\\"filter-by__tag\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.path || (depth0 != null ? depth0.path : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"path","hash":{},"data":data}) : helper)))\n    + "\\">\\n                                            "\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\n                                        </a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"filter\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.filterSection : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-list', constructor: require('./catberry_components/master/master-list/index.js'), properties: {"name":"master-list","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "        <div class=\\"master-list__item\\">\\n            <cat-master-minicard id=\\"master-minicard-"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\" master-id=\\""\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\"></cat-master-minicard>\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"master-list\\">\\n";\n  stack1 = helpers.each.call(depth0, depth0, {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div><!--master-list-->";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-page', constructor: require('./catberry_components/master/master-page/index.js'), properties: {"name":"master-page","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "                <p class=\\"master-card-mp__company\\">\\n                    <span><img class=\\"master-card-mp__logo\\" src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, ((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.imgID : stack1), (depth0 != null ? depth0.null : depth0), 70, {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.name : stack1), depth0))\n    + "\\"></span>\\n                    <span>"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.name : stack1), depth0))\n    + "</span>\\n                </p>\\n";\n},"3":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "                        <li><i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "phone", {"name":"icon","hash":{},"data":data})))\n    + "</i><span>"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.phone : stack1), depth0))\n    + "</span></li>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "                        <li><i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "email", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                            <a class=\\"contacts-mp__anch\\" href=\\"mailto:"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.email : stack1), depth0))\n    + "\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.email : stack1), depth0))\n    + "</a>\\n                        </li>\\n";\n},"7":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "                        <li><i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "skype", {"name":"icon","hash":{},"data":data})))\n    + "</i>"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.skype : stack1), depth0))\n    + "</li>\\n";\n},"9":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "                        <li><i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "icq", {"name":"icon","hash":{},"data":data})))\n    + "</i>"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.icq : stack1), depth0))\n    + "</li>\\n";\n},"11":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "                        <li><i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "placemark", {"name":"icon","hash":{},"data":data})))\n    + "</i>"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.addr : stack1), depth0))\n    + "<br>\\n                            <span class=\\"contacts-mp__onmap\\"><a class=\\"contacts-mp__anch\\" href=\\"#\\">на карте</a> →</span>\\n                        </li>\\n";\n},"13":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.access : depth0), {"name":"if","hash":{},"fn":this.program(14, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"14":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                <li>";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.active : depth0), {"name":"if","hash":{},"fn":this.program(15, data),"inverse":this.program(17, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</li>\\n";\n},"15":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<a href=\\"#\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</a>";\n},"17":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<span>"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</span>";\n},"19":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.access : depth0), {"name":"if","hash":{},"fn":this.program(20, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"20":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.active : depth0), {"name":"if","hash":{},"fn":this.program(21, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"21":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "                    <p class=\\"master-page__section-title\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</p>\\n                    <div class=\\"master-page__section-cont\\">\\n                        <cat-master-block-"\n    + escapeExpression(lambda((data && data.key), depth0))\n    + " id=\\"master-block-"\n    + escapeExpression(lambda((data && data.key), depth0))\n    + "\\" cat-store=\\"master/MasterItem\\" master-page=\\"true\\"></cat-master-block-"\n    + escapeExpression(lambda((data && data.key), depth0))\n    + ">\\n                    </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function", lambda=this.lambda, buffer = "<div class=\\"master-page\\"><!-- mp - master-page -->\\n    <div class=\\"master-page__row\\">\\n\\n        <div class=\\"master-page__master-card\\">\\n\\n            <div class=\\"master-page__avatar-cont\\">\\n                <img src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\">\\n            </div>\\n\\n            <div class=\\"master-card-mp\\">\\n                <h1 class=\\"master-card-mp__name\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</h1>\\n\\n                <p class=\\"master-card-mp__spec\\">"\n    + escapeExpression(((helper = (helper = helpers.spec || (depth0 != null ? depth0.spec : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"spec","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.company : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n\\n                <div class=\\"master-card-mp__master-number\\">\\n                    <p class=\\"master-number\\">\\n                        <span class=\\"master-number__title\\">личный номер Мастера</span>\\n                        <span class=\\"master-number__number\\">№"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.number : stack1), depth0))\n    + "</span>\\n                        <span class=\\"master-number__print\\"><a class=\\"master-number__print\\" href=\\"#\\">распечатать визитку</a></span>\\n                    </p>\\n                </div>\\n\\n            </div>\\n\\n        </div>\\n\\n        <div class=\\"master-page__contact-cont\\">\\n            <div class=\\"contacts-mp\\">\\n                <div class=\\"contacts-mp__cap\\" style=\\"display: none\\">\\n                    <p>\\n                        <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "phone", {"name":"icon","hash":{},"data":data})))\n    + "</i><br>\\n                        <span>+7 (***) ***-**-**</span>\\n                    </p>\\n\\n                    <a class=\\"contacts-mp__show-contact\\" href=\\"#\\">Показать контакты</a>\\n                </div>\\n\\n\\n                <ul class=\\"contacts-mp__list\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.phone : stack1), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.email : stack1), {"name":"if","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.skype : stack1), {"name":"if","hash":{},"fn":this.program(7, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.icq : stack1), {"name":"if","hash":{},"fn":this.program(9, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.addr : stack1), {"name":"if","hash":{},"fn":this.program(11, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </ul>\\n\\n                "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.links : stack1), depth0))\n    + "\\n\\n                <a class=\\"contacts-mp__a-callback\\" href=\\"#\\">заказать звонок</a>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <ul class=\\"menu-mp\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.isBlock : depth0), {"name":"each","hash":{},"fn":this.program(13, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "    </ul><!-- menu-mp -->\\n\\n    <div class=\\"master-page__content\\">\\n\\n        <!-- Удалить когда заработают услуги -->\\n        <p class=\\"master-page__section-title\\">Услуги</p>\\n        <div class=\\"master-page__section-cont\\">\\n            <cat-master-block-service id=\\"master-block-service\\" cat-store=\\"master/MasterItem\\" master-page=\\"true\\"></cat-master-block-service>\\n        </div>\\n        <!-- Удалить когда заработают услуги - конец -->\\n\\n\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.isBlock : depth0), {"name":"each","hash":{},"fn":this.program(19, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    </div>\\n</div>\\n<!-- master-page -->";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-recommended', constructor: require('./catberry_components/master/master-recommended/index.js'), properties: {"name":"master-recommended","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "    <div class=\\"master_recommended\\">\\n        <h2 class=\\"master_recommended__title\\">\\n            Этих<br>\\n            Мастеров<br>\\n            рекомендуют\\n        </h2>\\n\\n        <div class=\\"master_recommended__slider\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0[\'recommended-master\'] : depth0), {"name":"each","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "        </div>\\n    </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                <a class=\\"master_recommended__master\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers[\'master-url\'] || (depth0 != null ? depth0[\'master-url\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"master-url","hash":{},"data":data}) : helper)))\n    + "\\">\\n                    <img class=\\"master_recommended__master-photo\\" src=\\""\n    + escapeExpression(((helper = (helper = helpers.src || (depth0 != null ? depth0.src : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"src","hash":{},"data":data}) : helper)))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.alt || (depth0 != null ? depth0.alt : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"alt","hash":{},"data":data}) : helper)))\n    + "\\">\\n\\n                    <p class=\\"master_recommended__master-name\\">\\n                        "\n    + escapeExpression(((helper = (helper = helpers[\'master-name\'] || (depth0 != null ? depth0[\'master-name\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"master-name","hash":{},"data":data}) : helper)))\n    + "\\n                    </p>\\n\\n                    <p class=\\"master_recommended__master-recommendations\\">\\n                        "\n    + escapeExpression(((helper = (helper = helpers[\'recommendation-number\'] || (depth0 != null ? depth0[\'recommendation-number\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"recommendation-number","hash":{},"data":data}) : helper)))\n    + "\\n                    </p>\\n                </a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1;\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0[\'is-recommended-masters\'] : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { return stack1; }\n  else { return \'\'; }\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-rubrika', constructor: require('./catberry_components/master/master-rubrika/index.js'), properties: {"name":"master-rubrika","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, buffer = "        <div class=\\"seo-text\\">\\n            <div class=\\"seo-text__text format\\">\\n                ";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.currentSeo : depth0)) != null ? stack1.text : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n            </div>\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, buffer = "<div class=\\"inner-top\\">\\n    <div class=\\"inner-top__title\\">\\n        <cat-common-h1 id=\\"common-h1\\" name=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.currentSeo : depth0)) != null ? stack1.pageTitle : stack1), depth0))\n    + "\\"></cat-common-h1>\\n    </div>\\n\\n    <div class=\\"inner-top__search\\">\\n        <cat-search id=\\"search\\" modificator=\\"inner\\"></cat-search>\\n    </div>\\n    <div class=\\"inner-top__callback\\">\\n        <a class=\\"request\\" href=\\"/request\\">\\n            <div class=\\"request__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "star-in-sun", {"name":"icon","hash":{},"data":data})))\n    + "</div>\\n            Отправить задание мастерам\\n        </a>\\n    </div>\\n</div>\\n<div class=\\"inner-content\\">\\n    <div class=\\"inner-content__left-side\\">\\n        <cat-master-filter id=\\"master-filter\\" cat-store=\\"Tag\\"></cat-master-filter>\\n        { {> banner/banner_side/banner_side banner_side} }\\n    </div>\\n    <div class=\\"inner-content__right-side\\">\\n        <cat-master-recommended id=\\"master-recommended\\" cat-store=\\"master/Recommended\\"></cat-master-recommended>\\n        <cat-master-list id=\\"master-list\\"></cat-master-list> <!-- Добавил -->\\n    </div>\\n</div>\\n<div class=\\"row\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.currentSeo : depth0)) != null ? stack1.text : stack1), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'other-news', constructor: require('./catberry_components/other/other-news/index.js'), properties: {"name":"other-news","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <div class=\\"news\\">\\n            <div class=\\"news__inner\\">\\n                <div class=\\"news__img-wr\\">\\n                    <img class=\\"news__img\\" src=\\""\n    + escapeExpression(((helper = (helper = helpers.src || (depth0 != null ? depth0.src : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"src","hash":{},"data":data}) : helper)))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\">\\n                </div>\\n                <div class=\\"news__content\\">\\n                    <p class=\\"news__title\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n                    <p class=\\"news__intro\\">";\n  stack1 = ((helpers.stripTags || (depth0 && depth0.stripTags) || helperMissing).call(depth0, (depth0 != null ? depth0.preview : depth0), {"name":"stripTags","hash":{},"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</p>\\n\\n                    <p class=\\"news__date\\">"\n    + escapeExpression(((helpers.formatDate || (depth0 && depth0.formatDate) || helperMissing).call(depth0, (depth0 != null ? depth0.date : depth0), "%d %Z %Y", {"name":"formatDate","hash":{},"data":data})))\n    + "</p>\\n\\n                    <a class=\\"news__more\\" href=\\"/news/item/"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">\\n                        подробнее\\n                        <i class=\\"news__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                    </a>\\n                </div>\\n                <div class=\\"news__autor\\">\\n                    <p>\\n                        Новость добавил: <br> ERROR\\n                        "\n    + escapeExpression(((helper = (helper = helpers.autor || (depth0 != null ? depth0.autor : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"autor","hash":{},"data":data}) : helper)))\n    + "\\n                    </p>\\n                </div>\\n            </div>\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"news-list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.data : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'other-news-item', constructor: require('./catberry_components/other/other-news-item/index.js'), properties: {"name":"other-news-item","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "\\n<cat-common-h1 id=\\"common-h1\\" name=\\""\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\"></cat-common-h1>\\n"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\n"\n    + escapeExpression(((helper = (helper = helpers.img || (depth0 != null ? depth0.img : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"img","hash":{},"data":data}) : helper)))\n    + "\\n"\n    + escapeExpression(((helper = (helper = helpers.date || (depth0 != null ? depth0.date : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"date","hash":{},"data":data}) : helper)))\n    + "\\n"\n    + escapeExpression(((helper = (helper = helpers.preview || (depth0 != null ? depth0.preview : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"preview","hash":{},"data":data}) : helper)))\n    + "\\n";\n  stack1 = ((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"text","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'other-recommendation', constructor: require('./catberry_components/other/other-recommendation/index.js'), properties: {"name":"other-recommendation","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <div class=\\"recommendation\\">\\n            <div class=\\"recommendation__inner\\">\\n                <div class=\\"recommendation__img-wr\\">\\n                    <img class=\\"recommendation__img\\" src=\\""\n    + escapeExpression(((helper = (helper = helpers.photo || (depth0 != null ? depth0.photo : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"photo","hash":{},"data":data}) : helper)))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\">\\n                </div>\\n                <div class=\\"recommendation__content\\">\\n                    <p class=\\"recommendation__title\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n                    <div class=\\"recommendation__intro\\">";\n  stack1 = ((helpers.stripStyle || (depth0 && depth0.stripStyle) || helperMissing).call(depth0, (depth0 != null ? depth0.text : depth0), {"name":"stripStyle","hash":{},"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>\\n\\n                    <p class=\\"recommendation__date\\">ERROR"\n    + escapeExpression(((helper = (helper = helpers.date || (depth0 != null ? depth0.date : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"date","hash":{},"data":data}) : helper)))\n    + "</p>\\n                </div>\\n            </div>\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"recommendation-list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.data : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "ERROR\\n";\n  },"useData":true}'},
{name: 'other-vacancy', constructor: require('./catberry_components/other/other-vacancy/index.js'), properties: {"name":"other-vacancy","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  return "    <p><strong>Сейчас открыты вакансии:</strong></p>\\n";\n  },"3":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "    <p><a href=\\"/vacancy/item/"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.post || (depth0 != null ? depth0.post : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"post","hash":{},"data":data}) : helper)))\n    + "</a></p>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  return "    <p><strong>Сейчас открытых вакансий нет.</strong></p>\\n";\n  },"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.vacancy : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.vacancy : depth0), {"name":"each","hash":{},"fn":this.program(3, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'other-vacancy-item', constructor: require('./catberry_components/other/other-vacancy-item/index.js'), properties: {"name":"other-vacancy-item","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<div class=\\"vacancy-one-page\\">\\n    <h1 class=\\"h1 h1_style\\">"\n    + escapeExpression(((helper = (helper = helpers.post || (depth0 != null ? depth0.post : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"post","hash":{},"data":data}) : helper)))\n    + "</h1>\\n    <img class=\\"vacancy-one-page__img\\" src=\\"/img/other/vacancy.png\\" alt=\\"Наши вакансии\\">\\n    <div class=\\"vacancy-one-page__text format\\">\\n        ";\n  stack1 = ((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"text","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n    </div>\\n    <div class=\\"vacancy-one-page__contact format\\">\\n\\n        <!-- ERROR -->\\n        ";\n  stack1 = ((helper = (helper = helpers.contact || (depth0 != null ? depth0.contact : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"contact","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n        <p style=\\"color: red; font-weight: bold\\">------ ERROR! (нет поля contact) ------</p>\\n        <!-- ERROR -->\\n\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'pages-content', constructor: require('./catberry_components/pages/pages-content/index.js'), properties: {"name":"pages-content","template":"./template.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  return "            <cat-breadcrumps id=\\"breadcrumps\\" cat-store=\\"Breadcrumps\\"></cat-breadcrumps>\\n";\n  },"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<div class=\\"page container\\">\\n    <div class=\\"page__row\\">\\n        <cat-loader id=\\"pages-content-loader\\"></cat-loader>\\n\\n";\n  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 != null ? depth0.isActive : depth0)) != null ? stack1.main : stack1), {"name":"unless","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n        <div class=\\"content\\">\\n            <cat-page-"\n    + escapeExpression(((helper = (helper = helpers.current || (depth0 != null ? depth0.current : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"current","hash":{},"data":data}) : helper)))\n    + " id=\\"page-current-"\n    + escapeExpression(((helper = (helper = helpers.current || (depth0 != null ? depth0.current : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"current","hash":{},"data":data}) : helper)))\n    + "\\"></cat-page-"\n    + escapeExpression(((helper = (helper = helpers.current || (depth0 != null ? depth0.current : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"current","hash":{},"data":data}) : helper)))\n    + ">\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: null},
{name: 'pages-footer', constructor: require('./catberry_components/pages/pages-footer/index.js'), properties: {"name":"pages-footer","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                    <a class=\\"footer__links-a\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</a>&nbsp;\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<footer class=\\"footer\\">\\n    <div class=\\"container\\">\\n        { {> _common/totop-btn/totop-btn} }\\n        <div class=\\"row\\">\\n            <div class=\\"footer__coordinator\\">Координатор сайта: "\n    + escapeExpression(((helper = (helper = helpers.phone || (depth0 != null ? depth0.phone : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"phone","hash":{},"data":data}) : helper)))\n    + "</div>\\n\\n            <div class=\\"footer__copyright\\">\\n                <p class=\\"footer__copyright-who\\">© FaceMaster — Фейсмастер</p>\\n                <p class=\\"footer__copyright-text\\">При полном или частичном воспроизведении информации\\n                    активная ссылка на Фейсмастер обязательна.</p>\\n            </div>\\n\\n\\n            <div class=\\"footer__links\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.links : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            </div>\\n\\n\\n            <div class=\\"footer__counters\\">\\n                <!--{ { > footer/counters/counters counters} }-->\\n            </div>\\n        </div>\\n    </div>\\n</footer>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'pages-header', constructor: require('./catberry_components/pages/pages-header/index.js'), properties: {"name":"pages-header","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  return "                    <div class=\\"login\\">\\n                        <a class=\\"login__btn btn\\" href=\\"/login\\">Вход для Мастеров</a>\\n                    </div>\\n";\n  },"3":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                    <div class=\\"login\\">\\n                        <a class=\\"login__btn btn\\" href=\\"<!--ERROR-->\\"><!--ERROR - username--></a>\\n\\n                        <div class=\\"menu-user\\">\\n                            <ul class=\\"menu-user__ul\\">\\n                                <!--ERROR MENUUSER-->\\n";\n  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 != null ? depth0.authData : depth0)) != null ? stack1.menuUser : stack1), {"name":"each","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                            </ul>\\n                        </div>\\n                    </div>\\n";\n},"4":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                                    <li class=\\"menu-user__item\\">\\n                                        <a class=\\"menu-user__item-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</a>\\n                                    </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<header class=\\"header\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <div class=\\"header__left-col\\">\\n                <div class=\\"logo\\">\\n                    <div class=\\"logo__img\\">\\n                        <a class=\\"logo__link\\" href=\\"/main\\">\\n                            <img alt=\\"Facemaster.ru Logo\\" src=\\"/img/logo.svg\\" width=\\"100%\\">\\n                        </a>\\n                    </div>\\n                    <div class=\\"visitor\\">\\n                        <p class=\\"visitor__count\\">"\n    + escapeExpression(((helper = (helper = helpers.visitCount || (depth0 != null ? depth0.visitCount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"visitCount","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n                        <p class=\\"visitor__mera\\">в неделю</p>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"header__title\\">\\n                <a class=\\"title\\" href=\\"/main\\">\\n                    <p class=\\"title__text h1\\">ПОИСК МАСТЕРОВ В СФЕРЕ УСЛУГ</p>\\n                </a>\\n            </div>\\n            <div class=\\"header__login\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.isGuest : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.program(3, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            </div>\\n            <div class=\\"header__menu\\">\\n                <cat-pages-navigation id=\\"pages-navigation\\"></cat-pages-navigation>\\n            </div>\\n            <div class=\\"header__social\\">\\n                <cat-social id=\\"social\\"></cat-social>\\n            </div>\\n        </div>\\n    </div>\\n</header>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'pages-navigation', constructor: require('./catberry_components/pages/pages-navigation/index.js'), properties: {"name":"pages-navigation","template":"./template.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "            <li class=\\"main-menu__item\\">\\n                <a class=\\"main-menu__item-link link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.link || (depth0 != null ? depth0.link : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"link","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</a>\\n            </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<nav class=\\"menu\\">\\n    <ul class=\\"main-menu\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.menu : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    </ul>\\n</nav>\\n";\n},"useData":true}', errorTemplateSource: null},
{name: 'page-catalog', constructor: require('./catberry_components/page/page-catalog/index.js'), properties: {"name":"page-catalog","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"master-rubrikator-page master-rubrikator-page_collapsed\\">\\n\\n    <cat-common-h1 id=\\"common-h1\\" name=\\"Каталог услуг\\"></cat-common-h1>\\n\\n    <div class=\\"row\\">\\n        <div class=\\"master-rubrikator-page__rubriks-columns\\">\\n            <div class=\\"row\\">\\n                <cat-rubrikator-list id=\\"rubrikator-list\\" cat-store=\\"rubrika/Rubrikator\\"></cat-rubrikator-list>\\n            </div>\\n        </div>\\n        <div class=\\"master-rubrikator-page__dop\\">\\n            <p class=\\"master-rubrikator-page__dop-title\\">Другие возможности\\n                в подборе мастера</p>\\n\\n            <div class=\\"master-rubrikator-page__dop-catalogs\\">\\n                <cat-catalog-list id=\\"catalog-list\\" data-mod=\\"page_rubrikator\\"></cat-catalog-list>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-contact', constructor: require('./catberry_components/page/page-contact/index.js'), properties: {"name":"page-contact","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"contact-page\\">\\n    <h1 class=\\"h1 h1_style\\">Контакты</h1>\\n\\n    <div class=\\"contact-block\\">\\n        <p class=\\"contact-block__phone\\"><span class=\\"contact-block__name\\">Телефон:</span> "\n    + escapeExpression(((helper = (helper = helpers.phone || (depth0 != null ? depth0.phone : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"phone","hash":{},"data":data}) : helper)))\n    + "</p>\\n        <p class=\\"contact-block__email\\"><span class=\\"contact-block__name\\">E-mail:</span> <a href=\\"mailto:"\n    + escapeExpression(((helper = (helper = helpers.email || (depth0 != null ? depth0.email : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"email","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.email || (depth0 != null ? depth0.email : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"email","hash":{},"data":data}) : helper)))\n    + "</a></p>\\n        <p class=\\"contact-block__adress\\"><span class=\\"contact-block__name\\">Адрес:</span> "\n    + escapeExpression(((helper = (helper = helpers.adress || (depth0 != null ? depth0.adress : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"adress","hash":{},"data":data}) : helper)))\n    + "</p>\\n    </div>\\n\\n</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-feedback', constructor: require('./catberry_components/page/page-feedback/index.js'), properties: {"name":"page-feedback","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"feedback-page\\">\\n    <h1 class=\\"h1 h1_style\\">Обратная связь</h1>\\n\\n    <div class=\\"feedback-block\\">\\n        <form class=\\"feedback-block__form\\" id=\\"feedback-form\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\">\\n            <label>\\n                <span>Ваше имя</span>\\n                <input type=\\"text\\" name=\\"feedback[name]\\" autofocus>\\n            </label>\\n\\n            <label>\\n                <span>Ваш e-mail</span>\\n                <input type=\\"text\\" name=\\"feedback[email]\\">\\n            </label>\\n\\n            <label>\\n                <span>Ваше сообщение</span>\\n                <textarea name=\\"feedback[text]\\"></textarea>\\n            </label>\\n\\n            <input class=\\"btn-accent\\" type=\\"submit\\" value=\\"Отправить\\">\\n        </form>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-login', constructor: require('./catberry_components/page/page-login/index.js'), properties: {"name":"page-login","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "<div class=\\"page-login\\">\\n    <h1 class=\\"h1 h1_style\\">Вход / регистрация</h1>\\n\\n    <form class=\\"login-form\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n        <input class=\\"login-form__input-text\\" type=\\"text\\" placeholder=\\"Эл. почта или телефон\\" name=\\"loginForm[login]\\">\\n        <input class=\\"login-form__input-text\\" type=\\"password\\" placeholder=\\"Пароль\\" name=\\"loginForm[password]\\">\\n        <label class=\\"login-form__label-checkbox\\"><input type=\\"checkbox\\" id=\\"remember-me\\"><span>Запомнить меня</span></label>\\n        <input class=\\"login-form__btn\\" type=\\"submit\\" value=\\"Войти\\">\\n\\n        <p class=\\"login-form__href-cont\\">\\n            <a class=\\"login-form__recovery\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers[\'recovery-url\'] || (depth0 != null ? depth0[\'recovery-url\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"recovery-url","hash":{},"data":data}) : helper)))\n    + "\\">Забыли пароль?</a>\\n            <a class=\\"login-form__registration\\" href=\\"#\\" id=\\"reg-link\\">Регистрация</a>\\n            <br>\\n        </p>\\n    </form>\\n\\n    <form class=\\"registration-form\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n        <input class=\\"registration-form__input-text\\" type=\\"email\\" placeholder=\\"Эл. почта\\" name=\\"regForm[login]\\">\\n        <input class=\\"registration-form__input-text\\" type=\\"text\\" placeholder=\\"Имя Фамилия\\" name=\\"regForm[name]\\">\\n        <input class=\\"registration-form__input-text\\" type=\\"password\\" placeholder=\\"Пароль\\" name=\\"regForm[password]\\">\\n\\n        <div class=\\"registration-form__capcha registration-form__capcha_registration\\">\\n            <div class=\\"registration-form__code-img\\">\\n                <img src=\\"img/assets/recovery-password/captcha.png\\" alt=\\"capcha\\">\\n            </div>\\n            <a class=\\"registration-form__reload-link\\" href=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.capcha : depth0)) != null ? stack1[\'reload-url\'] : stack1), depth0))\n    + "\\">Получить новый код</a>\\n        </div>\\n\\n        <input class=\\"registration-form__input-text\\" type=\\"text\\" placeholder=\\"Код с картинки\\" name=\\"regForm[code]\\">\\n        <input class=\\"registration-form__btn registration-form__btn_long-text\\" type=\\"submit\\" value=\\"Зарегистрироваться\\">\\n        <p class=\\"registration-form__entry\\"><a href=\\"#\\" id=\\"entry-link\\">Войти</a></p>\\n    </form>\\n\\n    <form class=\\"recovery-pass-form\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n        <input class=\\"recovery-pass-form__input-text\\" type=\\"text\\" placeholder=\\"Эл. почта или телефон\\" name=\\"recovery-password[login]\\" autofocus>\\n\\n        <div class=\\"recovery-pass-form__capcha recovery-pass-form__capcha_registration\\">\\n            <div class=\\"recovery-pass-form__code-img\\">\\n                <img src=\\"img/assets/recovery-password/captcha.png\\" alt=\\"capcha\\">\\n            </div>\\n            <a class=\\"recovery-pass-form__reload-link\\" href=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.capcha : depth0)) != null ? stack1[\'reload-url\'] : stack1), depth0))\n    + "\\">Получить новый код</a>\\n        </div>\\n\\n        <input class=\\"recovery-pass-form__input-text\\" type=\\"text\\" placeholder=\\"Код с картинки\\" name=\\"recovery-password[code]\\">\\n        <input class=\\"recovery-pass-form__btn\\" type=\\"submit\\" value=\\"Восстановить\\">\\n    </form>\\n\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-main', constructor: require('./catberry_components/page/page-main/index.js'), properties: {"name":"page-main","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"main-page\\">\\n    <cat-main-function id=\\"main-function\\"></cat-main-function>\\n    <cat-dop-function id=\\"dop-function\\"></cat-dop-function>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-master-page', constructor: require('./catberry_components/page/page-master-page/index.js'), properties: {"name":"page-master-page","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<h1 class=\\"h1 h1_style\\">Страница Мастера</h1>\\n<cat-master-page id=\\"master-page\\" cat-store=\\"master/MasterItem\\"></cat-master-page>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-master-rubrika', constructor: require('./catberry_components/page/page-master-rubrika/index.js'), properties: {"name":"page-master-rubrika","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"container\\">\\n    <cat-master-rubrika id=\\"master-rubrika\\" cat-store=\\"Tag\\"></cat-master-rubrika>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-news', constructor: require('./catberry_components/page/page-news/index.js'), properties: {"name":"page-news","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"page_oth_news\\">\\n    <cat-common-h1 id=\\"common-h1\\" name=\\"Новости\\"></cat-common-h1>\\n\\n    <div class=\\"page_oth_news__list\\">\\n        <cat-other-news id=\\"other-news\\" cat-store=\\"other/News\\"></cat-other-news>\\n        <cat-common-paginator id=\\"common-paginator\\" cat-store=\\"Paginator\\" model=\\"other/News\\"></cat-common-paginator>\\n    </div>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-news-item', constructor: require('./catberry_components/page/page-news-item/index.js'), properties: {"name":"page-news-item","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"page_oth_news\\">\\n    <cat-other-news-item id=\\"other-news\\" cat-store=\\"other/NewsItem\\"></cat-other-news-item>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-oferta', constructor: require('./catberry_components/page/page-oferta/index.js'), properties: {"name":"page-oferta","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"oferta-page\\">\\n\\n    <h1 class=\\"h1 h1_style\\">ОФЕРТА от 01.03.2015 </h1>\\n\\n    <div class=\\"oferta\\">\\n        <p><strong>на пользование Услугами Сайта www.facemaster.ru</strong></p>\\n\\n        <p>ЗАО «ФейсМастер.ру», именуемое в дальнейшем «Компания», предоставляет любому лицу услуги по использованию\\n            сайта Компании в личных целях посредством предоставления сервисов сайта на приведенных ниже условиях.</p>\\n\\n        <p>Безусловным принятием (акцептом) условий настоящей оферты считается пользование Сайтом <strong>http://www.facemaster.ru</strong>,\\n            включая просмотр страниц Сайта, не зависимо от прохождения процедуры Регистрации.</p>\\n\\n        <p>Настоящая Оферта может быть изменена по усмотрению Компании в любое время без какого-либо специального\\n            уведомления об этом Пользователя. Новая редакция Оферты, изменения и дополнения к ней вступают в силу с\\n            момента их размещения на Сайте. Регулярное ознакомление с действующей редакцией Оферты является обязанностью\\n            Пользователя. Пользование Сайтом после вступления в силу новой редакции Оферты, дополнений и изменений к ней\\n            означает согласие Пользователя со всеми такими изменениями или дополнениями, новой редакцией Оферты.</p>\\n\\n        <br>\\n\\n        <p><strong>1. ТЕРМИНЫ и ОБОЗНАЧЕНИЯ</strong></p>\\n\\n        <p><strong>Компания</strong> – ЗАО «ФейсМастер.ру»: ОГРН 1136320020825 ИНН 6321323406, Юридический адрес:\\n            445056, г.Тольятти, ул.Автостроителей, 41А, корп.1<br>\\n            <br>\\n            <strong>Пользователь/Клиент</strong> – дееспособное, в возрасте от 18 лет, физическое лицо/правоспособное\\n            юридическое лицо, прошедшие Регистрацию на сайте Компании, имеющие все правовые полномочия в соответствии с\\n            действующим законодательством РФ на заключение Оферты и иных сопутствующих документов для использования\\n            возможностей Сайта Компании.<br>\\n            <br>\\n            <strong>Сайт</strong> – Интернет-сайт, размещенный в сети Интернет по адресу: www.facemaster.ru, включающий\\n            в себя комплекс элементов: программы для ЭВМ, базы данных, интерфейс (дизайн), как в совокупности, так и\\n            отдельные элементы дизайна, и др.<br>\\n            <br>\\n            <strong>Гость</strong> – любое лицо, не прошедшее Регистрацию, имеющее возможность просматривать страницы\\n            Сайта и Информацию, размещенную Пользователями для общего доступа.<br>\\n            <br>\\n            <strong>Регистрация</strong> – комплекс действий по принятию оферты, размещенной на Сайте, созданию Личного\\n            кабинета, путем ввода учетных данных и иных необходимых сведений, и получению права на пользование Услугами\\n            Интернет-сайта.<br>\\n            <br>\\n            <strong>Учетные данные </strong>— уникальный логин (номер телефона) и пароль, создаваемые в процессе\\n            Регистрации на Сайте, используемые для доступа Пользователя/Клиента в Личный кабинет путем Авторизации.<br>\\n            <br>\\n            <strong>Авторизация</strong> — идентификация Пользователя/Клиента посредством введения в соответствующие\\n            поля на Сайте Учетных данных.<br>\\n            <br>\\n            <strong>Личный кабинет </strong>— персональная страница Пользователя/Клиента, формируемая после Регистрации,\\n            доступ к которой предоставляется Пользователю/Клиенту в результате Авторизации.<br>\\n            <br>\\n            <strong>Оферта</strong> – настоящее предложение Компании, адресованное неопределенному кругу лиц, содержащее\\n            правила и условия пользования Услугами Сайта, а также права и обязанности Пользователей/Клиентов\\n            обязательные для исполнения при размещении Информации на Сайте для общего доступа.<br>\\n            <br>\\n            <strong>Услуги</strong> - возможности (права), предоставляемые Компанией и позволяющие\\n            Пользователю/Клиенту/Гостю размещать, осуществлять поиск и просмотр Информации, а также любые иные\\n            возможности и функции, доступные на Сайте. <strong>Бесплатные услуги</strong> – базовый набор услуг,\\n            предоставляемый без взимания платы. <strong>Платные услуги</strong> – набор дополнительных услуг, за\\n            использование которых взимается плата согласно тарифам Компании.</p>\\n\\n        <p><strong>Информация – </strong>услуги и предложения Пользователя/Клиента, сведения о которых он размещает на\\n            Сайте, адресованные и доступные неопределенному кругу лиц (Гостям и/или другим Пользователям).<br>\\n            <br>\\n            <strong>Договор</strong> – соглашение, формируемое при Регистрации Пользователя/Клиента и вступающее в силу\\n            в момент оплаты первого счета за Услуги.</p>\\n\\n        <br>\\n\\n        <p><strong>2. ОБЩИЕ ПОЛОЖЕНИЯ</strong></p>\\n\\n        <p>2.1 Компания предоставляет Пользователю/Клиенту/Гостю на условиях настоящей Оферты, Договора и Дополнительных\\n            соглашений, приложений право на пользование Услугами Сайта с возможностью размещать, осуществлять поиск и\\n            просмотр Информации других Пользователей\\\Клиентов.<br>\\n            2.2 Все сделки: «Пользователь/Клиент – Пользователь/Клиент» либо «Пользователь/Клиент – Гость» заключаются\\n            напрямую. При этом, Компания не является участником таких сделок, а предоставляет лишь коммуникационную\\n            платформу для Информации Пользователей/Клиентов.<br>\\n            2.3 Услуги не предоставляются и не должны использоваться лицами младше 18 лет, лицами признанными\\n            недееспособными, а также ограниченно дееспособными лицами. Лица, не достигшие 18 лет, или лица, признанные\\n            недееспособными или ограничено дееспособными, могут пользоваться Услугами только с согласия своих законных\\n            представителей.</p>\\n\\n        <br>\\n\\n        <p><strong>3. ПРАВИЛА ПОЛЬЗОВАНИЯ САЙТОМ</strong></p>\\n\\n        <p>3.1. Гость вправе просматривать Информацию Пользователей/Клиентов, находящуюся в открытом доступе, и\\n            воспользоваться услугами, содержащимися в Информации, без Регистрации на Сайте.<br>\\n            3.2. Пользователь/Клиент получает право воспользоваться Услугами Сайта по размещению Информации для доступа\\n            к ней неопределенного круга лиц, после прохождения процедуры Регистрации – для Бесплатных Услуг, а также,\\n            дополнительно, после оформления Договора, листа заказа и оплаты счета - для Платных Услуг.<br>\\n            3.3. При Регистрации, а также оформлении договора и листа заказа Пользователь/Клиент заполняет все\\n            необходимые поля специальных форм. Не заполнение хотя бы одного обязательного поля (в т.ч. ввод некорректных\\n            данных) влечет недействительность регистрации либо листа заказа.<br>\\n            3.4. После прохождения Регистрации Пользователь/Клиент получает на указанный им номер мобильного телефона\\n            ПАРОЛЬ, который в дальнейшем используется Пользователем/Клиентом для Авторизации и входа в Личный\\n            кабинет.<br>\\n            3.5. Пользователь/Клиент несет полную ответственность за все действия с использованием его Логина (номер\\n            мобильного телефона) и Пароля. Пользователь/Клиент имеет право пользоваться Услугами Сайта только при помощи\\n            собственного номера мобильного телефона и пароля.<br>\\n            3.6. При пользовании Сайтом <strong>ЗАПРЕЩЕНО:</strong><br>\\n            - использовать автоматические программы для получения доступа на Сайт;<br>\\n            - использовать компьютерные программы, позволяющие размещать на Сайте Информацию, минуя обычный порядок\\n            размещения (к примеру использование программ по автозагрузке Информации);<br>\\n            - предпринимать какие-либо действия, которые могут привести к непропорционально большой нагрузке на\\n            инфраструктуру Сайта;<br>\\n            - копировать, воспроизводить, изменять, распространять и представлять общественности любую информацию,\\n            содержащуюся на Сайте (кроме Сведений, предоставленных самим Пользователем/Клиентом) без предварительного\\n            письменного разрешения Компании;<br>\\n            - препятствовать работе Сайта, а также препятствовать действию автоматических систем или процессов, с целью\\n            воспрепятствовать или ограничить доступ на Сайт;<br>\\n            - использовать сведения, предоставленные другим Пользователем/Клиентом, без письменного разрешения\\n            Пользователя/Клиента, разместившего такие сведения, или без подтверждения каким-либо другим способом права\\n            использовать такие сведения. Все сведения, полученные Пользователем/Клиентом о других Пользователях в связи\\n            с использованием Сайта, могут быть использованы только для совершения и исполнения сделок в отношении услуг,\\n            содержащихся в Информации Пользователей/Клиентов. Таким образом, Пользователю/Клиенту не разрешается\\n            использовать электронный адрес, ровно, как и номер телефона другого Пользователя/Клиента для целей прямой\\n            рекламной рассылки или другой рассылки нежелательных электронных сообщений, а также для иных противоправных\\n            действий или действий, совершаемых без ведома и/или согласия другой стороны;<br>\\n            - нарушать информационную безопасность Сайта;<br>\\n            - внедрять исполняемый код на стороне Пользователя/Клиента, любые внедряемые объекты, использовать frame и\\n            iframe, каскадные таблицы стилей, html-код;<br>\\n            - представляться чужим именем или от чужого имени — зарегистрированного на Сайте Пользователя/Клиента,\\n            сотрудника Компании. Вводить в заблуждение других Пользователей\\\Клиентов и администрацию Сайта относительно\\n            своей идентификации любым иным способом<br>\\n            - размещать дублирующую Информацию одного Пользователя/Клиента с использованием разных E-mail и номеров\\n            мобильных телефонов;<br>\\n            - использовать Услуги Сайта для незаконной деятельности либо деятельности, которая может привести к\\n            нарушению Компанией и/или Пользователем/Клиентом действующего законодательства РФ.</p>\\n\\n        <br>\\n\\n        <p><strong>4. ПРАВА И ОБЯЗАННОСТИ ПОЛЬЗОВАТЕЛЯ/КЛИЕНТА</strong></p>\\n\\n        <p>4.1.&nbsp;&nbsp;&nbsp; Пользователь/Клиент обязуется:<br>\\n            4.1.1. Соблюдать требования, определенные в настоящей Оферте, Договоре, листе заказа и иных документах,\\n            определяющих пользование Сайтом.<br>\\n            4.1.2. При Регистрации на Сайте использовать только реальные данные о себе и размещаемой Информации.<br>\\n            4.1.3. Следить за сохранностью своего Пароля и не раскрывать его посторонним лицам.<br>\\n            4.1.4. Не передавать или продавать свои Учетные данные для Авторизации на Сайте третьим лицам.<br>\\n            4.1.5. При размещении Информации соблюдать требования действующего законодательства РФ, в т.ч. ФЗ «О\\n            рекламе» от 13.03.2006г. № 38-ФЗ.<br>\\n            4.1.6. Предоставить, по требованию Компании, документально подтверждённые сведения о соответствии Информации\\n            требованиям действующего законодательства РФ, в том числе надлежащим образом заверенные копии дипломов,\\n            лицензий, сертификатов, свидетельств о регистрации, в случае если услуги подлежат лицензированию,\\n            обязательной сертификации, государственной регистрации.<br>\\n            4.1.7. Не размещать Информацию, входящую в «Список запрещенной к размещению Информации».<br>\\n            4.1.8. Не уничтожать и/или не изменять любые материалы на Сайте, автором которых Пользователь/Клиент не\\n            является.<br>\\n            4.1.9. Заполнить все необходимые формы и предоставить только свое Фото (Пользователя)/Логотип (Клиента).\\n            Информация, содержащая лицензируемые виды деятельности, должна содержать номер лицензии. 4.1.10. Размещать\\n            Информацию, соответствующую по содержанию выбранной Рубрике/подрубрике.<br>\\n            4.1.11. Оплачивать Платные Услуги Компании в порядке и сроки, определенные Офертой, Договором и листом\\n            заказа.<br>\\n            4.2.  Пользователь/Клиент имеет право:<br>\\n            4.2.1 Получать право воспользоваться Платными Услугами Сайта после полной оплаты счета, выставленного при\\n            оформлении листа заказа на данные Услуги.<br>\\n            4.2.2. Воспользоваться услугами менеджеров Компании для оказания помощи при Регистрации, как по телефону: +7\\n            (8482) 74-44-19, так и непосредственно при встрече.<br>\\n            4.2.3. Размещать Информацию об услугах, которые Пользователь/Клиент может оказывать, имея соответствующие\\n            навыки, образование и разрешения. 4.2.4. Разрешить оплату счета за Платные Услуги третьему лицу\\n            (Плательщику) с учетом требований действующего законодательства и оформленного договора. 4.3. Компания\\n            обязуется:<br>\\n            4.3.1. Предоставить Пользователю/Клиенту право пользоваться Услугами Сайта в порядке и сроки, определенными\\n            в Оферте, Договоре и листе заказа.<br>\\n            4.3.2. Предоставить возможность Пользователям/Клиентам управлять доступом к своим персональным данным и\\n            размещенной Информации.<br>\\n            4.4.&nbsp;&nbsp;&nbsp;  Компания имеет право:<br>\\n            4.4.1. Удалить Информацию, заблокировать доступ/удалить Учетные данные Пользователей/Клиентов, нарушивших\\n            положения настоящей Оферты, Договора и листа заказа, без извещения Пользователя/Клиента.</p>\\n\\n        <br>\\n\\n        <p><strong>5. ИНФОРМАЦИЯ, ЗАПРЕЩЕННАЯ К РАЗМЕЩЕНИЮ</strong></p>\\n\\n        <p>5.1. Пользователю/Клиенту запрещено размещать, а в случае размещения, подлежит удалению Информация,\\n            содержащая:</p>\\n\\n        <ul>\\n            <li>\\n                <p>ложные, неточные или вводящие в заблуждение сведения;</p>\\n            </li>\\n            <li>\\n                <p>сведения, способствующие мошенничеству, обману или злоупотреблению доверием;</p>\\n            </li>\\n            <li>\\n                <p>оскорбления чьей-либо чести, достоинства или деловой репутации, нарушения частной жизни;</p>\\n            </li>\\n            <li>\\n                <p>клевету или угрозы кому бы то ни было;</p>\\n            </li>\\n            <li>\\n                <p>нарушения интеллектуальных прав третьих лиц, прав на изображение гражданина, и иные права третьих\\n                    лиц;</p>\\n            </li>\\n            <li>\\n                <p>призывы к совершению преступления и разжиганию межнациональной розни;</p>\\n            </li>\\n            <li>\\n                <p>сведения, способствующие, поддерживающие или призывающие к террористической и экстремистской\\n                    деятельности;</p>\\n            </li>\\n            <li>\\n                <p>сведения непристойные, либо носящие характер порнографии;</p>\\n            </li>\\n            <li>\\n                <p>компьютерные вирусы, а также иные компьютерные программы, направленные, в частности, на нанесение\\n                    вреда, неуполномоченное вторжение, тайный перехват либо присвоение данных любой системы либо самой\\n                    системы, либо ее части, либо личной информации или иных данных (включая данные Компании);</p>\\n            </li>\\n            <li>\\n                <p>Сведения, причиняющие вред Компании, став причиной полной либо частичной потери Компанией услуг\\n                    провайдеров сети интернет, либо услуг любых иных лиц;</p>\\n            </li>\\n            <li>\\n                <p>сведения, иным образом нарушающие действующее законодательство РФ.</p>\\n            </li>\\n        </ul>\\n\\n        <p>5.2. Удаление Информации производится Компанией в любое время без извещения Пользователя/Клиента.</p>\\n\\n        <br>\\n\\n        <p><strong>6. ОПЛАТА ПЛАТНЫХ УСЛУГ</strong></p>\\n\\n        <p>6.1. После оформления листа заказа на пользование Платными Услугами Сайта Пользователь/Клиент либо Плательщик\\n            (при наличии), получает счет и выбирает способ его оплаты из предложенного на Сайте списка. Счет необходимо\\n            оплатить в указанный в нем срок. 6.2. Срок пользования Платными Услугами начинается с даты оплаты счета.\\n            Если при Регистрации не были заполнены обязательные поля или поля были заполнены некорректно, не была\\n            загружена фотография или иным образом нарушены правила Регистрации, Информация не отражается на Сайте до\\n            момента внесения соответствующих исправлений, при этом срок начала пользования Платными Услугами не\\n            продляется на срок, в течение которого Информация не отображалась на Сайте по вине Пользователя/Клиента.\\n            6.3. Каждый способ оплаты сопровождается подробной инструкцией, размещенной на Сайте. При этом Компания не\\n            несет ответственность за действия Пользователя/Клиента/Плательшика при оплате счета, в следствие которых\\n            денежные средства не поступили на счет Компании, и эти суммы Компания не компенсирует и не возвращает.<br>\\n            6.4. Оплата Услуг сайта производится в порядке 100% предоплаты. Услуги считаются оплаченными в момент\\n            извещения Компании об оплате счета. Валютой расчетов является Российский рубль.<br>\\n            6.5. В случае отказа Пользователя/Клиента от оплаченных Услуг Сайта до окончания срока пользования денежные\\n            средства не возвращаются.</p>\\n\\n        <br>\\n\\n        <p><strong>7. ОГРАНИЧЕНИЯ ОТВЕТСТВЕННОСТИ</strong></p>\\n\\n        <p>7.1. В соответствии с требованиями Федерального закона от 27.07.2006 г. № 152-ФЗ «О персональных данных»: в\\n            процессе пользования Услугами Сайта (в том числе при Регистрации, взаимодействии с другими\\n            Пользователями/Клиентами через интерфейс Сайта, размещении Информации, просмотре страниц Сайта и т.п.),\\n            Пользователь самостоятельно добровольно принимает решение о предоставлении Компании персональных и иных\\n            данных о Пользователе (фамилия, имя, отчество, адрес электронной почты, номер мобильного телефона, а также\\n            любая иная информация, предоставленная Пользователем, информация о действиях Пользователя на Сайте и пр.)\\n            для целей исполнения Оферты, а также настоящим заявляет о своем согласии на обработку и хранение Компанией\\n            персональных и иных данных Пользователя, их передачу для обработки другим Пользователям и/или третьим лицам,\\n            действующим по поручению Компании, в том числе для целей: получения статистических и аналитических данных\\n            для улучшения функционирования Сайта и/или Услуг, расширения спектра оказываемых Услуг, получения\\n            информационных и/или рекламных сообщений Компании или третьих лиц, предупреждения или пресечения незаконных\\n            и/или несанкционированных действий Пользователей или третьих лиц, обеспечения соблюдения требований\\n            действующего законодательства Российской Федерации. Компания принимает все необходимые меры для защиты\\n            персональных данных Пользователя от несанкционированного доступа третьих лиц<br>\\n            7.2. Компания не отвечает за возможное нецелевое использование информации с Сайта Пользователями/Клиентами\\n            или иными лицами и/или организациями, которое произошло без уведомления Компании с нарушением или без\\n            информационной безопасности Сайта.<br>\\n            7.3. Компания прилагает все возможные усилия для того, чтобы избежать несанкционированного использования\\n            третьими лицами персональных данных Пользователей/Клиентов. Но Компания также не несет ответственности за\\n            возможное нецелевое использование персональных данных пользователей/Клиентов, произошедшее в случае:<br>\\n            - технических неполадок в программном обеспечении, серверах или компьютерных сетях, находящихся вне контроля\\n            Компании;<br>\\n            - перебоев в работе Сайта, связанных с намеренным или ненамеренным использованием Сайта не по назначению\\n            третьими лицами;<br>\\n            - передачи паролей или информации с Сайта Пользователями/Клиентами другим лицам, не являющимися\\n            зарегистрированными пользователями Сайта или другим пользователям, не имеющим доступа к данной информации в\\n            силу условий регистрации и заключенных договоров с Компанией.<br>\\n            7.4. Каждый Пользователь/Клиент отвечает за Информацию, размещаемую от его имени, и за последствия этого\\n            размещения.<br>\\n            7.5. Пользователь/Клиент самостоятельно, по своему усмотрению и вне контроля со стороны Компании размещает\\n            Информацию на Сайте, Пользователь/Клиент несет ответственность как рекламодатель и рекламораспространитель в\\n            отношении всей размещенной им Информации в соответствии с ФЗ \\"О рекламе\\" и КоАП РФ.<br>\\n            7.6. Пользователь/Клиент самостоятельно несет ответственность за достоверность размещаемой Информации и\\n            качество предоставляемых им услуг, которые содержатся в Информации, а также освобождает Компанию от всех\\n            требований, обязательств, компенсаций по возмещению ущерба, убытков, затрат и издержек, включая судебные и\\n            иные расходы, возникшие в результате или в связи с требованиями третьих лиц.</p>\\n\\n        <br>\\n\\n        <p><strong>8. ЗАКЛЮЧИТЕЛЬНЫЕ ПОЛОЖЕНИЯ</strong></p>\\n\\n        <p>8.1 Пользователь/Клиент предоставляет Компании право использовать сведения, содержащиеся в Информации\\n            Пользователя/Клиента, для целей оказания Услуг, путем передачи Компании не эксклюзивного, действующего\\n            повсеместно, бессрочного права относительно авторских прав, торговых марок, логотипов, публикаций и баз\\n            данных, которое имеет Пользователь/Клиент и предоставленных им на всех известных или не известных\\n            информационных носителях.<br>\\n            8.2. Настоящая Оферта начинает действовать и, считается, безусловно принятой\\n            Пользователем\\\Клиентом\\\Гостем\\\плательщиком с момента начала пользования Услугам Сайта, независимо от факта\\n            Регистрации, и действует бессрочно.<br>\\n            8.3. Пользователь/Клиент вправе отказаться от пользования Услугами Сайта, после чего размещение Информации\\n            на Сайте от данного Пользователя/Клиента невозможно.<br>\\n            8.4. Компания оставляет за собой право по собственному усмотрению прекратить доступ к Услугам\\n            Пользователя/Клиента, нарушающего Оферту, Договор либо лист заказа. Пользователь/Клиент, доступ которого к\\n            Услугам был прекращен, или Информация которого перестала быть действительной, не имеет права\\n            регистрироваться повторно без соответствующего согласия Компании, а также такой Пользователь/Клиент не имеет\\n            права использовать для доступа на Сайт Учетные данные другого Пользователя/Клиента.<br>\\n            8.5. Споры, возникающие в ходе пользования Сайтом, разрешаются с соблюдением обязательного претензионного\\n            порядка. Срок ответа на претензию 15 дней со дня получения претензии. В случае неудовлетворения претензии\\n            полностью или в какой-либо части, а также в случае неполучения ответа на претензию в установленный срок,\\n            заинтересованная сторона вправе обратиться за разрешением спора в суд с территориальной подсудностью\\n            Компании.<br>\\n            8.6. В случае признания судом отдельных положений настоящей Оферты недействительными, остальные условия\\n            Оферты продолжают действовать.\\n        </p>\\n        <br>\\n    </div>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-recommendation', constructor: require('./catberry_components/page/page-recommendation/index.js'), properties: {"name":"page-recommendation","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"page_oht_recommendation\\">\\n    <cat-common-h1 id=\\"common-h1\\" name=\\"Мастера о сайте\\"></cat-common-h1>\\n\\n    <div class=\\"page_oht_recommendation__list\\">\\n\\n        <cat-other-recommendation id=\\"other-recommendation\\" cat-store=\\"other/Recommendation\\"></cat-other-recommendation>\\n        <cat-common-paginator id=\\"common-paginator\\" cat-store=\\"Paginator\\" model=\\"other/Recommendation\\"></cat-common-paginator>\\n\\n    </div>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-registration', constructor: require('./catberry_components/page/page-registration/index.js'), properties: {"name":"page-registration","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<cat-registration-header id=\\"registration-header\\"></cat-registration-header>\\n<div id=\\"form1\\">\\n    <cat-registration-form id=\\"registration-form-1\\"></cat-registration-form>\\n</div>\\n<cat-registration-about id=\\"registration-about\\"></cat-registration-about>\\n<cat-registration-why-we id=\\"registration-why-we\\"></cat-registration-why-we>\\n<cat-registration-price id=\\"registration-price\\"></cat-registration-price>\\n<div id=\\"form2\\">\\n    <cat-registration-form id=\\"registration-form-2\\"></cat-registration-form>\\n</div>\\n<cat-registration-more-page id=\\"registration-more-page\\"></cat-registration-more-page>\\n<cat-registration-faq id=\\"registration-faq\\"></cat-registration-faq>\\n<div id=\\"form3\\">\\n    <cat-registration-form id=\\"registration-form-3\\"></cat-registration-form>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-request', constructor: require('./catberry_components/page/page-request/index.js'), properties: {"name":"page-request","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"callback_request\\">\\n<h1 class=\\"h1 h1_style\\">Заявка мастеру</h1>\\n\\n    <form class=\\"callback_request__form\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\" id=\\"callback-request-form\\">\\n        <p class=\\"callback_request__intro\\">Опишите вашу задачу</p>\\n\\n        <div class=\\"callback_request__input\\">\\n            <textarea class=\\"textarea\\" placeholder=\\"Я хочу (отремонтировать, организовать, установить, доставить)\\" name=\\"callbackRequestForm[text]\\"></textarea>\\n        </div>\\n        <p class=\\"callback_request__intro\\">\\n            Оставьте ваши контакты\\n        </p>\\n\\n        <div class=\\"callback_request__input\\">\\n            <input class=\\"input-text\\" type=\\"text\\" placeholder=\\"Ваше имя\\" name=\\"callbackRequestForm[name]\\">\\n        </div>\\n        <div class=\\"callback_request__input\\">\\n            <input class=\\"input-text\\" type=\\"text\\" placeholder=\\"Ваш телефон\\" name=\\"callbackRequestForm[phone]\\">\\n        </div>\\n        <div class=\\"callback_request__input\\">\\n            <input class=\\"input-text\\" type=\\"text\\" placeholder=\\"Ваш email\\" name=\\"callbackRequestForm[email]\\">\\n        </div>\\n        <div class=\\"callback_request__submit\\">\\n            <input class=\\"btn-accent\\" type=\\"submit\\" value=\\"отправить заявку\\">\\n        </div>\\n    </form>\\n    <div class=\\"success_response\\">Ваша заявка отправлена</div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-sale', constructor: require('./catberry_components/page/page-sale/index.js'), properties: {"name":"page-sale","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\nСкидки каталог";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-sovety', constructor: require('./catberry_components/page/page-sovety/index.js'), properties: {"name":"page-sovety","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\nСоветы каталог";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-vacancy', constructor: require('./catberry_components/page/page-vacancy/index.js'), properties: {"name":"page-vacancy","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"vacancy-page\\">\\n    <h1 class=\\"h1 h1_style\\">Наши вакансии</h1>\\n    <img class=\\"vacancy-page__img\\" src=\\"/img/other/vacancy.png\\" alt=\\"Наши вакансии\\">\\n\\n    <p class=\\"vacancy-page__text\\">\\n        Мы - молодой коллектив единомышленников, если у Вас есть желание работать в нашей компании, то присоединяйтесь к\\n        нам, участвуйте в создании нового интересного продукта. Вместе с нами вы сможете воплотить свои самые смелые\\n        идеи, раскрыть свой творческий потенциал и реализоваться в карьерном плане. Мы ищем целеустремленных и уверенных\\n        специалистов, которые верят в свои силы и успех.\\n    </p>\\n\\n    <cat-other-vacancy id=\\"other-vacancy\\" cat-store=\\"other/Vacancy\\"></cat-other-vacancy>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-vacancy-item', constructor: require('./catberry_components/page/page-vacancy-item/index.js'), properties: {"name":"page-vacancy-item","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<cat-other-vacancy-item id=\\"other-vacancy-item\\" cat-store=\\"other/VacancyItem\\"></cat-other-vacancy-item>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-video', constructor: require('./catberry_components/page/page-video/index.js'), properties: {"name":"page-video","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\nВидео каталог\\n\\n<cat-common-paginator id=\\"common-paginator\\" cat-store=\\"Paginator\\" model=\\"master/MasterVideo\\"></cat-common-paginator>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-about', constructor: require('./catberry_components/registration/registration-about/index.js'), properties: {"name":"registration-about","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"about-wr\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <section class=\\"about\\">\\n                <ul class=\\"about__list row\\">\\n                    <li class=\\"about-list-item\\">\\n                        <p class=\\"about-list-item__text\\">\\n                            <span class=\\"about-list-item__text-ver-al\\">\\n                                ЗАРЕГИСТРИРУЙСЯ<br>НА САЙТЕ\\n                            </span>\\n                        </p>\\n\\n                        <div class=\\"about-list-item__icon-wr\\">\\n                            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "add-page", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        </div>\\n\\n                        <div class=\\"about-list-item__arrow\\">\\n                            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "arrow", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        </div>\\n                    </li>\\n                    <li class=\\"about-list-item\\">\\n                        <p class=\\"about-list-item__text\\">\\n                            <span class=\\"about-list-item__text-ver-al\\">\\n                                ОПУБЛИКУЙСЯ\\n                            </span>\\n                        </p>\\n\\n                        <div class=\\"about-list-item__icon-wr\\">\\n                            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "picture", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        </div>\\n                        <div class=\\"about-list-item__arrow\\">\\n                            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "arrow", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        </div>\\n                    </li>\\n                    <li class=\\"about-list-item\\">\\n                        <p class=\\"about-list-item__text\\">\\n                            <span class=\\"about-list-item__text-ver-al\\">\\n                                ПОЛУЧАЙ<br>КЛИЕНТОВ\\n                            </span>\\n                        </p>\\n\\n                        <div class=\\"about-list-item__icon-wr\\">\\n                            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "people", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        </div>\\n                    </li>\\n                </ul>\\n            </section>\\n        </div>\\n    </div>\\n</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-faq', constructor: require('./catberry_components/registration/registration-faq/index.js'), properties: {"name":"registration-faq","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n<div class=\\"container corner corner_bg\\">\\n    <div class=\\"row\\">\\n        <section class=\\"faq\\">\\n            <p class=\\"page-title page-title_landing\\">Частые вопросы:</p>\\n\\n            <div class=\\"faq__block\\">\\n                <div class=\\"faq__item\\">\\n                    <p class=\\"faq__item-title\\"><span class=\\"faq__item-title-inner\\">Как оплатить сервис?</span></p>\\n\\n                    <p class=\\"faq__item-text\\">На данный момент, чтобы совершить оплату,\\n                        вам нужно приехать в наш офис по адресу Автостроителей 41А к.1 с 9:00 до 17:00 (пн-пт).\\n                        Менеджер предоставит вам всю необходимую информацию по выбору\\n                        тарифного плана и проведению оплаты. Также мы работаем над системой\\n                        электронных платежей.\\n                    </p>\\n                </div>\\n                <div class=\\"faq__item\\">\\n                    <p class=\\"faq__item-title\\"><span class=\\"faq__item-title-inner\\">Что будет, когда закончится месяц?</span></p>\\n\\n                    <p class=\\"faq__item-text\\">Вы получите уведомление на ваш e-mail, зарегистрированный в системе, с предложением продлить действующий тарифный план или перейти на новый. Если в течение 30 дней вы ни разу не совершили вход в кабинет сайта FaceMaster, то ваш кабинет будет удалён.</p>\\n                </div>\\n            </div>\\n            <div class=\\"faq__block\\">\\n                <div class=\\"faq__item\\">\\n                    <p class=\\"faq__item-title\\"><span class=\\"faq__item-title-inner\\">Могу ли я изменить тарифный план?</span></p>\\n\\n                    <p class=\\"faq__item-text\\">Если вы пользуетесь бесплатной мини-страницей, то получить все возможности эффективного продвижения на сайте FaceMaster вы можете в любое время, выбрав тарифный план и оплатив его. Если вы уже совершили оплату и хотите поменять один тарифный план на другой, то вам нужно подождать, пока закончится первый.</p>\\n                </div>\\n                <div class=\\"faq__item\\">\\n                    <p class=\\"faq__item-title\\"><span class=\\"faq__item-title-inner\\">У меня есть вопрос!</span></p>\\n\\n                    <p class=\\"faq__item-text\\">Будем рады представить вам\\n                        дополнительную информацию о работе платформы и о ценах по телефону (8482) 74-44-19.</p>\\n                </div>\\n            </div>\\n        </section>\\n    </div>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-form', constructor: require('./catberry_components/registration/registration-form/index.js'), properties: {"name":"registration-form","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"section-reg\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <section class=\\"form form_reg-master\\">\\n                <div class=\\"form__cont\\">\\n                    <h2 class=\\"form__title\\">Начать регистрацию</h2>\\n\\n                    <form class=\\"form__form\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\" data-url-lk=\\""\n    + escapeExpression(((helper = (helper = helpers.urlLK || (depth0 != null ? depth0.urlLK : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"urlLK","hash":{},"data":data}) : helper)))\n    + "\\">\\n                        <div class=\\"form__row\\">\\n                            <input type=\\"text\\" placeholder=\\"Как Вас зовут?\\" name=\\"regmaster[name]\\">\\n                        </div>\\n                        <div class=\\"form__row row\\">\\n                            <div class=\\"form__row_half\\">\\n                                <input type=\\"text\\" placeholder=\\"Укажите Ваш телефон\\" name=\\"regmaster[phone]\\">\\n                            </div>\\n                            <div class=\\"form__row_half\\">\\n                                <input type=\\"password\\" placeholder=\\"Придумайте пароль\\" name=\\"regmaster[password]\\">\\n                            </div>\\n                        </div>\\n                        <div class=\\"form__row\\">\\n                            <input class=\\"form__btn btn\\" type=\\"submit\\" value=\\"ЗАРАГИСТРИРОВАТЬСЯ\\">\\n                        </div>\\n                        <div class=\\"form__row\\">\\n                            <label><input type=\\"checkbox\\" checked value=\\"true\\">я согласен с <a href=\\"/oferta\\">условиями</a> </label>\\n                        </div>\\n                    </form>\\n                </div>\\n            </section>\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-header', constructor: require('./catberry_components/registration/registration-header/index.js'), properties: {"name":"registration-header","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"container\\">\\n    <div class=\\"row\\">\\n        <section class=\\"landing-header\\">\\n            <h1 class=\\"page-title page-title_landing\\">FaceMaster — сайт поиска специалистов\\n                в сфере услуг в Тольятти</h1>\\n        </section>\\n    </div>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-more-page', constructor: require('./catberry_components/registration/registration-more-page/index.js'), properties: {"name":"registration-more-page","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"more-page-wr\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <section class=\\"more-page\\">\\n                <p class=\\"page-title page-title_landing\\">Подробнее о страницах:</p>\\n\\n                <div class=\\"more-page__item\\">\\n                    <div class=\\"more-page__pic\\">\\n                        <img class=\\"more-page__pic-img\\" alt=\\"страница и мини-страница\\" src=\\"/img/registration/1.png\\" width=\\"100%\\">\\n                    </div>\\n                    <div class=\\"more-page__text\\">\\n                        <div class=\\"more-page__text-title\\">\\n                            <div class=\\"more-page__text-title-count\\"></div>\\n                            <div class=\\"more-page__text-title-header more-page__text-title-header_no-valign\\">Каталог мастеров</div>\\n                            <div class=\\"more-page__text-title-sub-header\\">Мини-страница + личная страница</div>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-title\\">Личная страница</p>\\n\\n                            <p class=\\"more-page__paragraph-text\\">Личная страница – это ваше собственное информационное пространство для продвижения в Сети. Она может стать аналогом персонального сайта, либо, если у вас уже есть свой сайт, мы поможем расширить арсенал для привлечения на него клиентов. Личная страница даёт доступ к множеству сервисов, чтобы помочь специалисту и клиенту найти друг друга: написание статей, фотоальбомы, отзывы, продвижение в социальных сетях, видеокаталог, рубрика «Советы Мастеров», каталог фирм и многое другое.</p>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-title\\">Мини-страница</p>\\n\\n                            <p class=\\"more-page__paragraph-text\\">Мини-страница — это ваша визитка с контактной информацией. Зарегистрировавшись на нашем сайте бесплатно, вы получаете только место в общем каталоге Мастеров, где вашу визитку смогут увидеть посетители. Но вы всегда можете сделать из неё личную страницу и тем самым увеличить приток клиентов. Для этого вам нужно выбрать и оплатить один из тарифных планов.</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"more-page__item\\">\\n                    <div class=\\"more-page__pic\\">\\n                        <img class=\\"more-page__pic-img more-page__pic-img_offset-1\\" alt=\\"страница и мини-страница\\" src=\\"/img/registration/2.png\\" width=\\"100%\\">\\n                    </div>\\n                    <div class=\\"more-page__text\\">\\n\\n                        <div class=\\"more-page__text-title\\">\\n                            <div class=\\"more-page__text-title-count\\"></div>\\n                            <div class=\\"more-page__text-title-header\\">Каталог скидок и подарков</div>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-text\\">Устраивайте акции и скидки, получая ещё больше клиентов! Многие посетители регулярно отслеживают выгодные предложения в нашем каталоге «Скидки и подарки». Поэтому если вы размещаете в нём информацию о скидке, то шансы, что клиент заинтересуется вашим предложением, возрастают вдвое! Кроме того, самые актуальные и интересные акции мы регулярно освещаем в социальных сетях.</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"more-page__line\\"></div>\\n                <div class=\\"more-page__item\\">\\n                    <div class=\\"more-page__pic\\">\\n                        <img class=\\"more-page__pic-img more-page__pic-img_offset-1\\" alt=\\"страница и мини-страница\\" src=\\"/img/registration/3.png\\" width=\\"100%\\">\\n                    </div>\\n                    <div class=\\"more-page__text\\">\\n                        <div class=\\"more-page__text-title\\">\\n                            <div class=\\"more-page__text-title-count\\"></div>\\n                            <div class=\\"more-page__text-title-header\\">Каталог видео</div>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-text\\">В видеокаталоге уже собрана целая коллекция самых полезных роликов, найденных Мастерами на просторах Интернета. Многие специалисты не только отбирают лучшее, исходя из своих знаний и опыта, но и создают его! Вы можете заснять на видео себя, свою работу, довольных клиентов, показать, как что-то работает, или дать дельный совет из собственной практики. Видеоролики способны показать посетителю то, что порой сложно передать одними фотографиями, помогают сформировать интерес к какой-либо услуге или товару.</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"more-page__line\\"></div>\\n                <div class=\\"more-page__item\\">\\n                    <div class=\\"more-page__pic\\">\\n                        <img class=\\"more-page__pic-img more-page__pic-img_offset-1\\" alt=\\"страница и мини-страница\\" src=\\"/img/registration/4.png\\" width=\\"100%\\">\\n                    </div>\\n                    <div class=\\"more-page__text\\">\\n\\n                        <div class=\\"more-page__text-title\\">\\n                            <div class=\\"more-page__text-title-count\\"></div>\\n                            <div class=\\"more-page__text-title-header\\">Каталог советов мастеров</div>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-text\\">Рубрика «Секреты Мастеров» – это сборник статей от наших специалистов для помощи посетителям в самых различных жизненных ситуациях. Чтобы попасть в каталог «Секретов», вам нужно написать на личной странице статью. Интересный и полезный материал демонстрирует клиенту ваш богатый опыт и высокий уровень профессионализма. Когда статья будет опубликована на вашей странице, модераторы проверят, подходит ли она для каталога советов. Главными критериями являются практичность и понятность для посетителя, отсутствие прямой рекламы.</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"more-page__line\\"></div>\\n                <div class=\\"more-page__item\\">\\n                    <div class=\\"more-page__pic\\">\\n                        <img class=\\"more-page__pic-img more-page__pic-img_offset-1\\" alt=\\"страница и мини-страница\\" src=\\"/img/registration/5.png\\" width=\\"100%\\">\\n                    </div>\\n                    <div class=\\"more-page__text\\">\\n\\n                        <div class=\\"more-page__text-title\\">\\n                            <div class=\\"more-page__text-title-count\\"></div>\\n                            <div class=\\"more-page__text-title-header\\">Каталог фирм</div>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-text\\">Помимо перечня отдельных специалистов у нас также есть каталог компаний. На сегодняшний день в нём находится более 100 организаций, где работают наши Мастера. Все компании располагаются в соответствии с привычным рубрикатором в зависимости от того, в какой сфере посетитель ищет специалиста. Данный каталог помогает организовать эффективное продвижение не только для отдельного сотрудника, но и для целой компании. Каждая организация может иметь одного своего представителя на FaceMaster или больше. Также в каталоге фирм есть свой рейтинг рекомендаций. Он складывается из суммы «лайков», которые получили все Мастера из одной компании. Таким образом, чем популярнее сотрудники среди клиентов, тем выше рейтинг организации.</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </section>\\n        </div>\\n    </div>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-price', constructor: require('./catberry_components/registration/registration-price/index.js'), properties: {"name":"registration-price","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"price-wr corner corner_bg\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <section class=\\"price\\">\\n                <p class=\\"page-title page-title_landing\\">Сколько стоит предложение?</p>\\n\\n                <p class=\\"sub-title sub-title_landing\\">Выберите нужную закладку:</p>\\n\\n                <!--<div id=\\"horizontalTab\\">-->\\n                    <!--<ul block=\\"price-tabs-list\\" mix=\\"block:resp-tabs-list hor_1\\">-->\\n                        <!--<li elem=\\"item\\">Условия для физических лиц</li>-->\\n                        <!--<li elem=\\"item\\">Условия для юридических лиц</li>-->\\n                    <!--</ul>-->\\n                    <div class=\\"price-tabs\\">\\n                        <div class=\\"tab-content tab-content_active\\">\\n                            <div class=\\"tab-content__name\\">\\n                                "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "\\n                                Условия для физических лиц\\n                            </div>\\n                            <div class=\\"ofers-block\\">\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Старт</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">Бесплатно</p>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus ofers-block-plus_single\\">\\n                                                <div class=\\"ofers-block-plus__item ofers-block-plus__item_single\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Специалист</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">8 руб. в день</p>\\n                                        </div>\\n\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus\\">\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Личная страница</p>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Профессионал</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">16 руб. в день</p>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus ofers-block-plus_prof\\">\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Личная страница</p>\\n                                                </div>\\n                                            </div>\\n                                            <div class=\\"ofers-block-plus-dop\\">\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "video", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "gift", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "picture", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "dialog", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <div class=\\"description-tarif__descr-text\\">\\n                                                Скидки + фото + видео + отзывы\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <table class=\\"price-table\\">\\n                                <thead class=\\"price-table__head\\">\\n                                <th class=\\"price-table__empty price-table-first-column\\">&nbsp;</th>\\n                                <th class=\\"price-table__head-text price-table-second-column\\">Новичок</th>\\n                                <th class=\\"price-table__head-text price-table-third-column\\">Специалист</th>\\n                                <th class=\\"price-table__head-text price-table-forth-column\\">Профессионал</th>\\n                                </thead>\\n                                <tbody class=\\"price-table__body\\">\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">90 дней</td>\\n                                    <td class=\\"price-table__td\\">Бесплатно</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">1 500 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">180 дней</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">1 450 руб.</td>\\n                                    <td class=\\"price-table__td\\">2 700 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">360дней</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2 600 руб.</td>\\n                                    <td class=\\"price-table__td\\">4 800 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Мини-страница</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Личная страница</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Ассортимент услуг</td>\\n                                    <td class=\\"price-table__td\\">5шт.</td>\\n                                    <td class=\\"price-table__td\\">8шт.</td>\\n                                    <td class=\\"price-table__td\\">8шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Скидки и подарки + размещение в каталоге \\"Скидки и подарки\\"</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Фотоальбом</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">3шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Видеоролик + размещение в каталоге Видео</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Статья + размещение в каталоге Советов Мастеров</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Лайки, отзывы, рекомендации</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">вкл.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">&nbsp;</td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                        <div class=\\"tab-content\\">\\n                            <div class=\\"tab-content__name\\">\\n                                "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "\\n                                Условия для юридических лиц\\n                            </div>\\n                            <div class=\\"ofers-block\\">\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif description-tarif_long\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Старт<br>Бизнес</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">16 руб. в день</p>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus ofers-block-plus_single\\">\\n                                                <div class=\\"ofers-block-plus__item ofers-block-plus__item_single\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif description-tarif_long\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Специалист Бизнес</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">25 руб. в день</p>\\n                                        </div>\\n\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus\\">\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Личная страница</p>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif description-tarif_long\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Профессионал Бизнес</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">33 руб. в день</p>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus ofers-block-plus_prof\\">\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Личная страница</p>\\n                                                </div>\\n                                            </div>\\n                                            <div class=\\"ofers-block-plus-dop\\">\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "video", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "gift", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "picture", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "dialog", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <div class=\\"description-tarif__descr-text\\">\\n                                                Скидки + фото + видео + отзывы\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <table class=\\"price-table\\">\\n                                <thead class=\\"price-table__head\\">\\n                                <th class=\\"price-table__empty price-table-first-column\\">&nbsp;</th>\\n                                <th class=\\"price-table__head-text price-table-second-column\\">Старт<br>Бизнес</th>\\n                                <th class=\\"price-table__head-text price-table-third-column\\">Специалист Бизнес</th>\\n                                <th class=\\"price-table__head-text price-table-forth-column\\">Профессионал Бизнес</th>\\n                                </thead>\\n                                <tbody class=\\"price-table__body\\">\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">90 дней</td>\\n                                    <td class=\\"price-table__td\\">1 500 руб.</td>\\n                                    <td class=\\"price-table__td\\">2 250 руб.</td>\\n                                    <td class=\\"price-table__td\\">3 000 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">180 дней</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">4 050 руб.</td>\\n                                    <td class=\\"price-table__td\\">5 400 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">360дней</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">7 200 руб.</td>\\n                                    <td class=\\"price-table__td\\">9 600 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Мини-страница</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Личная страница</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Ассортимент услуг</td>\\n                                    <td class=\\"price-table__td\\">5шт.</td>\\n                                    <td class=\\"price-table__td\\">8шт.</td>\\n                                    <td class=\\"price-table__td\\">8шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Логотип компании + размещение в каталоге компаний</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Скидки и подарки + размещение в каталоге \\"Скидки и подарки\\"</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Фотоальбом</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">3шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Видеоролик + размещение в каталоге Видео</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Статья + размещение в каталоге Советов Мастеров</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Лайки, отзывы, рекомендации</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">вкл.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">&nbsp;</td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                <!--</div>-->\\n            </section>\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-why-we', constructor: require('./catberry_components/registration/registration-why-we/index.js'), properties: {"name":"registration-why-we","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, buffer = "<div class=\\"why-we-wr\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <section class=\\"why-we\\">\\n                <p class=\\"page-title page-title_landing\\">Почему выбирают нас?</p>\\n                <div class=\\"why-we__list\\">\\n                    <div class=\\"row\\">\\n                        <div class=\\"our-plus\\">\\n                            <div class=\\"our-plus__round\\">\\n                                <p class=\\"our-plus__title\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.count : depth0)) != null ? stack1.master : stack1), depth0))\n    + "</p>\\n\\n                                <p class=\\"our-plus__text\\">";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.count : depth0)) != null ? stack1.masterName : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\"our-plus\\">\\n                            <div class=\\"our-plus__round\\">\\n                                <p class=\\"our-plus__title\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.count : depth0)) != null ? stack1.visits : stack1), depth0))\n    + "</p>\\n\\n                                <p class=\\"our-plus__text\\">посещений<br>в неделю</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\"our-plus\\">\\n                            <div class=\\"our-plus__round\\">\\n                                <p class=\\"our-plus__title\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.count : depth0)) != null ? stack1.orders : stack1), depth0))\n    + "</p>\\n\\n                                <p class=\\"our-plus__text\\">поступивших<br>заявок</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </section>\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'rubrikator-list', constructor: require('./catberry_components/rubrikator/rubrikator-list/index.js'), properties: {"name":"rubrikator-list","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data,depths) {\n  var stack1, helper, helperMissing=helpers.helperMissing, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", buffer = "";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (data && data.index), "==", 7, {"name":"is","hash":{},"fn":this.program(2, data, depths),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (data && data.index), "==", 15, {"name":"is","hash":{},"fn":this.program(2, data, depths),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n        <div class=\\"rubrika-list\\">\\n            <div class=\\"rubrika-list__title js-rubrika-list\\" style=\\"border-right-color: "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.el : depth0)) != null ? stack1.color : stack1), depth0))\n    + "\\">\\n                <p class=\\"rubrika-list__name\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.el : depth0)) != null ? stack1.name : stack1), depth0))\n    + "</p>\\n\\n                <p class=\\"rubrika-list__count\\">"\n    + escapeExpression(((helper = (helper = helpers.count || (depth0 != null ? depth0.count : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"count","hash":{},"data":data}) : helper)))\n    + "</p>\\n            </div>\\n            <div class=\\"rubrika-list__list\\">\\n                <ul>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.podrubriks : depth0), {"name":"each","hash":{},"fn":this.program(4, data, depths),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </ul>\\n            </div>\\n        </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  return "        </div>\\n        <div class=\\"rubriks-column\\">\\n";\n  },"4":function(depth0,helpers,partials,data,depths) {\n  var stack1, helper, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", helperMissing=helpers.helperMissing;\n  return "                        <li class=\\"rubrika-list__list-li\\"><a class=\\"rubrika-list__list-a\\" href=\\"/"\n    + escapeExpression(lambda(((stack1 = (depths[1] != null ? depths[1].el : depths[1])) != null ? stack1.unique : stack1), depth0))\n    + "/"\n    + escapeExpression(((helper = (helper = helpers.unique || (depth0 != null ? depth0.unique : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"unique","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\n                            <span class=\\"rubrika-list__list-count\\">"\n    + escapeExpression(((helper = (helper = helpers.masterCount || (depth0 != null ? depth0.masterCount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"masterCount","hash":{},"data":data}) : helper)))\n    + "</span></a></li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data,depths) {\n  var stack1, buffer = "<div class=\\"rubriks-column\\">\\n    <div class=\\"rubrika-list rubrika-list_tool-collapsed js-rubrika-collapsed\\">\\n        <div class=\\"rubrika-list__title\\">\\n            <p class=\\"rubrika-list__name\\">Развернуть все рубрики</p>\\n            <i class=\\"rubrika-list__icon\\"></i>\\n        </div>\\n    </div>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.rubrikator : depth0), {"name":"each","hash":{},"fn":this.program(1, data, depths),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>\\n";\n},"useData":true,"useDepths":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-about', constructor: require('./catberry_components/master/master-block/master-block-about/index.js'), properties: {"name":"master-block-about","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, buffer = "        <p class=\\"about-md__text-caption\\">Образование:</p>\\n        <p class=\\"about-md__text\\">";\n  stack1 = ((helper = (helper = helpers.aboutEduc || (depth0 != null ? depth0.aboutEduc : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"aboutEduc","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</p>\\n";\n},"3":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, buffer = "        <p class=\\"about-md__text-caption\\">Опыт работы:</p>\\n        <p class=\\"about-md__text\\">";\n  stack1 = ((helper = (helper = helpers.aboutExp || (depth0 != null ? depth0.aboutExp : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"aboutExp","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</p>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, buffer = "        <p class=\\"about-md__text-caption\\">Дополнительная информация:</p>\\n        <p class=\\"about-md__text\\">";\n  stack1 = ((helper = (helper = helpers.aboutAddInfo || (depth0 != null ? depth0.aboutAddInfo : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"aboutAddInfo","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</p>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"about-md\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.aboutEduc : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.aboutExp : depth0), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.aboutAddInfo : depth0), {"name":"if","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div><!-- about-md -->\\n\\n\\n\\n\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-article', constructor: require('./catberry_components/master/master-block/master-block-article/index.js'), properties: {"name":"master-block-article","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "        <div class=\\"article-cont-md__item-cont\\">\\n\\n            <div class=\\"article\\">\\n                <a class=\\"article__link js-open-article\\" href=\\"#"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">\\n                    <div class=\\"article__pic\\">\\n                        <img class=\\"article__img\\" src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\">\\n                    </div>\\n                    <div class=\\"article__text\\">\\n                        <p>"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</p>\\n                    </div>\\n                    <p class=\\"article__author\\">"\n    + escapeExpression(((helper = (helper = helpers.author || (depth0 != null ? depth0.author : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"author","hash":{},"data":data}) : helper)))\n    + "</p>\\n                </a>\\n            </div>\\n\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"article-cont-md\\">\\n\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.articles : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-link', constructor: require('./catberry_components/master/master-block/master-block-link/index.js'), properties: {"name":"master-block-link","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "ссылки\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-photo', constructor: require('./catberry_components/master/master-block/master-block-photo/index.js'), properties: {"name":"master-block-photo","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";\n  return "        <div class=\\"photo-md__album-cover js-select-album\\">\\n            <a href=\\"/master-data-edit/json3.json\\">\\n                <img src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, ((stack1 = ((stack1 = (depth0 != null ? depth0.photos : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.imgID : stack1), 200, {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\"><br>\\n                <span>"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</span>\\n            </a>\\n        </div>\\n";\n},"3":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <div class=\\"photo-md__album-cont\\">\\n            <p class=\\"photo-md__album-title\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n            <div class=\\"photo-md__wrapper\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.photos : depth0), {"name":"each","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            </div>\\n\\n        </div>\\n";\n},"4":function(depth0,helpers,partials,data) {\n  var helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";\n  return "                    <a class=\\"photo-md__img-prev\\" href=\\"#\\">\\n                        <img src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), 200, {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.description || (depth0 != null ? depth0.description : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"description","hash":{},"data":data}) : helper)))\n    + "\\"><br>\\n                    </a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"photo-md\\">\\n\\n    <!-- ERROR -->\\n    <p style=\\"color: red; font-weight: bold\\">------ ERROR! ------</p>\\n    !!!фото. API - недостаточно данных\\n    <br><br><br>\\n    <!-- ERROR -->\\n\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.albums : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.albums : depth0), {"name":"each","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div><!-- photo-md -->\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-review', constructor: require('./catberry_components/master/master-block/master-block-review/index.js'), properties: {"name":"master-block-review","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, buffer = "            <p class=\\"recommendations__total\\">Мастера рекомендуют <span class=\\"recommendations__total-count\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.vkLikes : depth0)) != null ? stack1.countLikes : stack1), depth0))\n    + " человек</span></p>\\n\\n            <div class=\\"recommendations__list\\">\\n";\n  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 != null ? depth0.vkLikes : depth0)) != null ? stack1.data : stack1), {"name":"each","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                    <a class=\\"recommendations__item\\" target=\\"_blank\\" href=\\"http://vk.com/id"\n    + escapeExpression(((helper = (helper = helpers.uid || (depth0 != null ? depth0.uid : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"uid","hash":{},"data":data}) : helper)))\n    + "\\">\\n                        <img src=\\""\n    + escapeExpression(((helper = (helper = helpers.photo_100 || (depth0 != null ? depth0.photo_100 : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"photo_100","hash":{},"data":data}) : helper)))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.first_name || (depth0 != null ? depth0.first_name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"first_name","hash":{},"data":data}) : helper)))\n    + " "\n    + escapeExpression(((helper = (helper = helpers.last_name || (depth0 != null ? depth0.last_name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"last_name","hash":{},"data":data}) : helper)))\n    + "\\">\\n                    </a>\\n";\n},"4":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "        <p class=\\"reviews-cont-md__title\\">Мои отзывы</p>\\n\\n        <div class=\\"reviews-cont-md__comments\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.comments : depth0), {"name":"each","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "        </div>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                <div class=\\"reviews-cont-md__item-cont\\">\\n\\n                    <p class=\\"reviews-cont-md__name\\">"\n    + escapeExpression(((helper = (helper = helpers.authorName || (depth0 != null ? depth0.authorName : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"authorName","hash":{},"data":data}) : helper)))\n    + "<span class=\\"reviews-cont-md__date\\">"\n    + escapeExpression(((helpers.formatDate || (depth0 && depth0.formatDate) || helperMissing).call(depth0, (depth0 != null ? depth0.date : depth0), "%R | %d %Z %Y", {"name":"formatDate","hash":{},"data":data})))\n    + "</span></p>\\n\\n                    <p class=\\"reviews-cont-md__text\\">"\n    + escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"text","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n                </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function", buffer = "<div class=\\"reviews-cont-md\\">\\n\\n    <div class=\\"recommendations\\">\\n";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, ((stack1 = (depth0 != null ? depth0.vkLikes : depth0)) != null ? stack1.countLikes : stack1), ">", 0, {"name":"is","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n        <div class=\\"recommendations__buttons-block\\">\\n            <p class=\\"recommendations__buttons-block-title\\">Порекомендуйте мастера:</p>\\n\\n            <div></div>\\n        </div>\\n    </div>\\n\\n    <p class=\\"reviews-cont-md__title\\">Оставить отзыв</p>\\n\\n    <div class=\\"reviews-cont-md__row\\">\\n        <form class=\\"add-comment\\" method=\\"POST\\" action=\\"\\">\\n            <input class=\\"add-comment__text-input\\" type=\\"text\\" placeholder=\\"Ваше имя\\" name=\\"comment_form[name]\\">\\n            <input class=\\"add-comment__text-input\\" type=\\"text\\" placeholder=\\"Ваш номер телефона\\" name=\\"comment_form[phone]\\">\\n            <textarea class=\\"add-comment__textarea\\" placeholder=\\"Текст отзыва\\" name=\\"comment_form[comment_text]\\"></textarea>\\n            <input class=\\"add-comment__btn\\" type=\\"submit\\" value=\\"отправить\\">\\n\\n            <p class=\\"add-comment__success\\">\\n                Ваш отзыв успешно отправлен, спасибо!\\n            </p>\\n        </form>\\n\\n        <div class=\\"social-links\\">\\n            <div class=\\"social-links__wrapper\\">\\n                <p class=\\"social-links__title\\">Разместить ссылку на&nbsp;стра&shy;ницу Мастера в&nbsp;соц.&nbsp;сети:</p>\\n\\n                <div class=\\"social-links__master\\">\\n                    <div class=\\"social-links__photo-cont\\">\\n                        <img src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\">\\n                    </div>\\n\\n                    <p class=\\"social-links__name\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</p>\\n                </div>\\n                <p class=\\"social-links__note\\">Порекомендуйте этого специалиста своим друзям в&nbsp;социальной сети</p>\\n\\n                <div class=\\"social-links__buttons\\">\\n                    <p style=\\"color:red\\">Ссылки! VK, OK, FB, TW</p>\\n                </div>\\n            </div>\\n        </div>\\n\\n    </div>\\n\\n\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.comments : depth0), {"name":"if","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n</div><!--mde-reviews-->\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-sale', constructor: require('./catberry_components/master/master-block/master-block-sale/index.js'), properties: {"name":"master-block-sale","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "    <div class=\\"sale-cont-md__item-cont\\">\\n\\n        <div class=\\"sale\\">\\n            <a class=\\"sale__link js-open-sale\\" href=\\"#"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">\\n                <p class=\\"sale__title\\">\\n";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 1, {"name":"is","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 2, {"name":"is","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 3, {"name":"is","hash":{},"fn":this.program(6, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </p>\\n                <div class=\\"sale__pic\\">\\n                    <img class=\\"sale__img\\" src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"text","hash":{},"data":data}) : helper)))\n    + "\\">\\n                </div>\\n                <div class=\\"sale__text\\">\\n                    <p>"\n    + escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"text","hash":{},"data":data}) : helper)))\n    + "</p>\\n                </div>\\n            </a>\\n        </div>\\n\\n    </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  return "                        Подарок\\n";\n  },"4":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        Скидка "\n    + escapeExpression(((helper = (helper = helpers.discount || (depth0 != null ? depth0.discount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"discount","hash":{},"data":data}) : helper)))\n    + "%\\n";\n},"6":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        -"\n    + escapeExpression(((helper = (helper = helpers.discount || (depth0 != null ? depth0.discount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"discount","hash":{},"data":data}) : helper)))\n    + " руб.\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"sale-cont-md\\">\\n\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.sales : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-video', constructor: require('./catberry_components/master/master-block/master-block-video/index.js'), properties: {"name":"master-block-video","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "        <div class=\\"video-md__video-cont\\">\\n            <a class=\\"video-md__video-cover\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n                <span class=\\"video-md__title-prev\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</span><br>\\n                <span class=\\"video-md__img-cont\\"><img src=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.prev : depth0)) != null ? stack1.src : stack1), depth0))\n    + "\\" alt=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.prev : depth0)) != null ? stack1.alt : stack1), depth0))\n    + "\\"></span>\\n            </a>\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"video-md\\">\\n\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.videos : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n</div><!-- video-md -->\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-service', constructor: require('./catberry_components/master/master-block/master-block-service/index.js'), properties: {"name":"master-block-service","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "            <li>"\n    + escapeExpression(lambda(depth0, depth0))\n    + "</li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"service-md\\">\\n    <ul class=\\"service-md__list\\">\\n";\n  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 != null ? depth0.services : depth0)) != null ? stack1.part1 : stack1), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "    </ul>\\n\\n    <ul class=\\"service-md__list\\">\\n";\n  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 != null ? depth0.services : depth0)) != null ? stack1.part2 : stack1), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    </ul>\\n\\n    <br class=\\"service-md__clear\\">\\n</div><!--mde-service-->\\n\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-work', constructor: require('./catberry_components/master/master-block/master-block-work/index.js'), properties: {"name":"master-block-work","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                <td>"\n    + escapeExpression(((helper = (helper = helpers.open || (depth0 != null ? depth0.open : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"open","hash":{},"data":data}) : helper)))\n    + "<br>"\n    + escapeExpression(((helper = (helper = helpers.close || (depth0 != null ? depth0.close : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"close","hash":{},"data":data}) : helper)))\n    + "</td>\\n";\n},"3":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, buffer = "";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 1, {"name":"is","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"4":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        <li>"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</li>\\n";\n},"6":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, buffer = "";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 2, {"name":"is","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, buffer = "<div class=\\"time-and-work-mp\\">\\n\\n    <table class=\\"time-and-work-mp__timetable\\">\\n        <thead>\\n        <tr>\\n            <td class=\\"time-and-work-mp__day\\">Пн</td>\\n            <td class=\\"time-and-work-mp__day\\">Вт</td>\\n            <td class=\\"time-and-work-mp__day\\">Ср</td>\\n            <td class=\\"time-and-work-mp__day time-and-work-mp__day_today\\">Чт</td>\\n            <td class=\\"time-and-work-mp__day\\">Пт</td>\\n            <td class=\\"time-and-work-mp__day\\">Сб</td>\\n            <td class=\\"time-and-work-mp__day\\">Вс</td>\\n        </tr>\\n        </thead>\\n        <tbody>\\n        <tr>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.schedule : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "        </tr>\\n        </tbody>\\n    </table>\\n\\n    <p class=\\"time-and-work-mp__list-caption\\">Выезд на дом</p>\\n    <ul class=\\"time-and-work-mp__list\\">\\n        <li>Бесплатно по городу</li>\\n        <li>Выезд за город платно</li>\\n    </ul>\\n\\n\\n    <div class=\\"time-and-work-mp__list-big-cont\\">\\n        <p class=\\"time-and-work-mp__list-caption\\">Районы обслуживания</p>\\n\\n        <div class=\\"time-and-work-mp__list-cont\\">\\n            <p class=\\"time-and-work-mp__list-caption time-and-work-mp__list-caption_mini\\">Город</p>\\n            <ul class=\\"time-and-work-mp__list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.district : depth0), {"name":"each","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "            </ul>\\n        </div><!--list-cont-->\\n\\n        <div class=\\"time-and-work-mp__list-cont\\">\\n            <p class=\\"time-and-work-mp__list-caption time-and-work-mp__list-caption_mini\\">Пригород</p>\\n            <ul class=\\"time-and-work-mp__list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.district : depth0), {"name":"each","hash":{},"fn":this.program(6, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            </ul>\\n        </div><!--list-cont-->\\n\\n        <br class=\\"time-and-work-mp__clear\\">\\n    </div><!--list-big-cont-->\\n\\n\\n    <div class=\\"time-and-work-mp__list-big-cont\\">\\n        <p class=\\"time-and-work-mp__list-caption\\">Оплата</p>\\n\\n\\n        <div class=\\"time-and-work-mp__list-cont\\">\\n            <p class=\\"time-and-work-mp__list-caption time-and-work-mp__list-caption_mini\\">Форма сотрудни&shy;чества</p>\\n            <ul class=\\"time-and-work-mp__list\\">\\n                <li>Предоплата</li>\\n                <li>По факту выполненных работ</li>\\n                <li>Рассрочка платежа</li>\\n            </ul>\\n        </div><!--list-cont-->\\n\\n        <div class=\\"time-and-work-mp__list-cont\\">\\n            <p class=\\"time-and-work-mp__list-caption time-and-work-mp__list-caption_mini\\">Способы оплаты</p>\\n            <ul class=\\"time-and-work-mp__list\\">\\n                <li>Наличный</li>\\n                <li>Безналичный\\n                    <ul>\\n                        <li>Оплата через электронные платежные системы</li>\\n                        <li>Оплата по кредитной/дебетовой карте</li>\\n                        <li>Оплата через терминалы</li>\\n                        <li>Банковский перевод</li>\\n                        <li>Предоставление рассрочки</li>\\n                    </ul>\\n                </li>\\n            </ul>\\n        </div><!--list-cont-->\\n        <br class=\\"time-and-work-mp__clear\\">\\n    </div><!--list-cont-->\\n    <br class=\\"time-and-work-mp__clear\\">\\n\\n    <!-- ERROR -->\\n    <p style=\\"color: red; font-weight: bold\\">------ ERROR! (условия - выезд на дом, оплата) ------</p>\\n    !!переделает илья\\n    Условия оплаты: "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.workCondition : depth0)) != null ? stack1.paymentForm : stack1), depth0))\n    + "\\n    Условия оплаты: "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.workCondition : depth0)) != null ? stack1.coopForm : stack1), depth0))\n    + "\\n    Выезд на дом: "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.workCondition : depth0)) != null ? stack1.comming : stack1), depth0))\n    + "\\n    <!-- ERROR -->\\n</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-minicard', constructor: require('./catberry_components/master/master-minicard/master-minicard/index.js'), properties: {"name":"master-minicard","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  return "                <div block=\\"master_name-and-spec\\" mod=\\"half\\">\\n";\n  },"3":function(depth0,helpers,partials,data) {\n  return "                <div block=\\"master_name-and-spec\\" mod=\\"wide\\">\\n";\n  },"5":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                    <p elem=\\"spec\\">\\n                        "\n    + escapeExpression(((helper = (helper = helpers.spec || (depth0 != null ? depth0.spec : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"spec","hash":{},"data":data}) : helper)))\n    + "\\n                    </p>\\n";\n},"7":function(depth0,helpers,partials,data) {\n  return "                </div>\\n";\n  },"9":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                    <div block=\\"master_company\\">\\n                        <img elem=\\"logo\\" src=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.logo : stack1), depth0))\n    + "\\" alt=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.name : stack1), depth0))\n    + "\\">\\n\\n                        <p elem=\\"name\\">\\n                            "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.name : stack1), depth0))\n    + "\\n                        </p>\\n                    </div>\\n";\n},"11":function(depth0,helpers,partials,data) {\n  return "                <div block=\\"master_services\\" mod=\\"half\\" class=\\"format\\">\\n";\n  },"13":function(depth0,helpers,partials,data) {\n  return "                <div block=\\"master_services\\" mod=\\"wide\\" class=\\"format\\">\\n";\n  },"15":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, buffer = "                        <div block=\\"search-note\\">\\n                            <strong>Текст найден на странице Мастера:</strong>\\n                            ";\n  stack1 = ((helper = (helper = helpers[\'search-note\'] || (depth0 != null ? depth0[\'search-note\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"search-note","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n                        </div>\\n";\n},"17":function(depth0,helpers,partials,data) {\n  var lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                        <li elem=\\"service\\">\\n                            "\n    + escapeExpression(lambda(depth0, depth0))\n    + "\\n                        </li>\\n";\n},"19":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.gift : depth0), {"name":"if","hash":{},"fn":this.program(20, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.photo : depth0), {"name":"if","hash":{},"fn":this.program(22, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.video : depth0), {"name":"if","hash":{},"fn":this.program(24, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.comments : depth0), {"name":"if","hash":{},"fn":this.program(26, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"20":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, buffer = "                <div block=\\"master_have-content-widget\\" mod=\\"gift\\">\\n                    <div elem=\\"main\\">\\n                        <p class=\\"title\\">";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.gift : depth0)) != null ? stack1.title : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "</p>\\n                    </div>\\n                    <p elem=\\"desc\\">\\n                        ";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.gift : depth0)) != null ? stack1.desc : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n                    </p>\\n                </div>\\n";\n},"22":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, buffer = "                <div block=\\"master_have-content-widget\\" mod=\\"photo\\">\\n                    <div elem=\\"main\\">\\n                        <p class=\\"title\\">\\n                            У Мастера:<br>\\n                            <span class=\\"count\\">";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.photo : depth0)) != null ? stack1.count : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "</span>\\n                        </p>\\n                    </div>\\n                    <p elem=\\"desc\\">\\n                        ";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.photo : depth0)) != null ? stack1.desc : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n                    </p>\\n                </div>\\n";\n},"24":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, buffer = "                <div block=\\"master_have-content-widget\\" mod=\\"video\\">\\n                    <a href=\\"";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.video : depth0)) != null ? stack1.url : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\">\\n                        <div elem=\\"main\\">\\n                            <img src=\\"";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.video : depth0)) != null ? stack1.preview : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\">\\n                        </div>\\n                    </a>\\n\\n                    <p elem=\\"desc\\">\\n                        ";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.video : depth0)) != null ? stack1.desc : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n                    </p>\\n                </div>\\n";\n},"26":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, buffer = "                <div block=\\"master_have-content-widget\\" mod=\\"comments\\">\\n                    <div elem=\\"main\\">\\n                        <p class=\\"title\\">У Мастера:<br>\\n                            <span class=\\"count\\">";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.comments : depth0)) != null ? stack1.recommendations : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "</span><br>\\n                            <span class=\\"count\\">";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.comments : depth0)) != null ? stack1.comments : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "</span>\\n                        </p>\\n                    </div>\\n                    <p elem=\\"desc\\">\\n                        ";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.comments : depth0)) != null ? stack1.desc : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n                    </p>\\n                </div>\\n";\n},"28":function(depth0,helpers,partials,data) {\n  return "master-minicard_free";\n  },"30":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n  return "        <a class=\\"master-minicard__to-page\\" href=\\"/"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.number : stack1), depth0))\n    + "\\">На страницу мастера<i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "</i></a>\\n";\n},"32":function(depth0,helpers,partials,data) {\n  return "master-minicard__services_half";\n  },"34":function(depth0,helpers,partials,data) {\n  var lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "            <li>"\n    + escapeExpression(lambda(depth0, depth0))\n    + "</li>\\n";\n},"36":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "    <ul class=\\"master-content-widget\\">\\n        <li class=\\"act master-content-widget__gift\\">\\n            <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "gift", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n            <div>\\n                <p></p>\\n\\n                <p></p>\\n            </div>\\n        </li>\\n        <li class=\\"act master-content-widget__photo\\">\\n            <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "picture", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n            <div>\\n                <p></p>\\n\\n                <p></p>\\n            </div>\\n        </li>\\n        <li class=\\"act master-content-widget__video\\">\\n            <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "video", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n            <div>\\n                <p></p>\\n\\n                <p></p>\\n            </div>\\n        </li>\\n        <li class=\\"act master-content-widget__comment\\">\\n            <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "dialog", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n            <div>\\n                <p class=\\"master-content-widget__info\\"><span>У Мастера:<br><strong>1 рекомендация<br>5 отзывов</strong></span></p>\\n\\n                <p class=\\"master-content-widget__text\\">«Мы обратились к Сергею когда надо было доделать ремонт, объем работ оставался небольшой\\n                    и непросто было найти рабочих. ...»</p>\\n            </div>\\n        </li>\\n    </ul>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", helperMissing=helpers.helperMissing, buffer = "<!--<div block=\\"master_minicard\\" mod=\\"premium\\">\\n    <div class=\\"row\\">\\n        <div elem=\\"left-column\\">\\n            <div block=\\"master_photo-and-contacts\\">\\n                <div elem=\\"photo-wrap\\">\\n                    <img elem=\\"photo\\" src=\\"/img/assets/master_minicard/6461.jpg\\" alt=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0[\'master-photo\'] : depth0)) != null ? stack1.alt : stack1), depth0))\n    + "\\">\\n                </div>\\n                <div elem=\\"contact-wrap\\">\\n                    <cat-master-phone-btn id=\\"master-phone-btn-"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\"></cat-master-phone-btn>\\n\\n                    <div block=\\"tip\\" mix=\\"block:js-tip\\">\\n                        <p elem=\\"text\\">Пожалуйста скажите мастеру что нашли его на нашем сайте</p>\\n                        <i elem=\\"close\\" mix=\\"block:js-close-tip\\"></i>\\n                    </div>\\n\\n                    <a elem=\\"to-page\\" href=\\"/"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.number : stack1), depth0))\n    + "\\">На страницу мастера<i elem=\\"icon\\"></i></a>\\n                    <a elem=\\"show-services\\" href=\\"#\\" mix=\\"block:js-services-toggle\\">Показать услуги</a>\\n                </div>\\n            </div>\\n        </div>\\n        <div elem=\\"right-column\\">\\n\\n            <div class=\\"row\\">\\n\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.company : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.program(3, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                <p elem=\\"name\\">\\n                    "\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\n                </p>\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.spec : depth0), {"name":"if","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.company : depth0), {"name":"if","hash":{},"fn":this.program(7, data),"inverse":this.program(7, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.company : depth0), {"name":"if","hash":{},"fn":this.program(9, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0[\'have-content\'] : depth0), {"name":"if","hash":{},"fn":this.program(11, data),"inverse":this.program(13, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                <ul elem=\\"service-list\\" mix=\\"block:js-services-cut\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0[\'search-note\'] : depth0), {"name":"if","hash":{},"fn":this.program(15, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.services : depth0), {"name":"each","hash":{},"fn":this.program(17, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </ul>\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0[\'have-content\'] : depth0), {"name":"if","hash":{},"fn":this.program(7, data),"inverse":this.program(7, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "            </div>\\n        </div>\\n    </div>\\n    <div block=\\"master_presentation\\">\\n        { {> master_have-content-icons/master_have-content-icons have-content-icons} }\\n\\n";\n  stack1 = helpers[\'with\'].call(depth0, (depth0 != null ? depth0[\'have-content\'] : depth0), {"name":"with","hash":{},"fn":this.program(19, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "    </div>\\n</div>-->\\n\\n<div class=\\"";\n  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.id : stack1), {"name":"unless","hash":{},"fn":this.program(28, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += " master-minicard\\">\\n\\n    <div class=\\"master-minicard__photo-cont\\">\\n        <img class=\\"master-minicard__photo\\" src=\\"/img/assets/master_minicard/6461.jpg\\" alt=\\"\\">\\n        <i class=\\"master-minicard__like\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "like", {"name":"icon","hash":{},"data":data})))\n    + " 29</i>\\n    </div>\\n\\n    <div class=\\"master-minicard__contact-wrap\\">\\n        <cat-master-phone-btn id=\\"master-phone-btn-"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\"></cat-master-phone-btn>\\n\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.number : stack1), {"name":"if","hash":{},"fn":this.program(30, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "        <a class=\\"master-minicard__show-services js-services-toggle\\" href=\\"#\\">Показать услуги</a>\\n    </div>\\n\\n    <p class=\\"master-minicard__company\\">\\n        <span><img class=\\"master-minicard__logo\\" src=\\"/img/assets/master_minicard/1022.png\\" alt=\\"\\"></span>\\n        <span>Компания Мера</span>\\n    </p>\\n\\n    <p class=\\"master-minicard__name\\">Хархавкина Евгения Длинноотчевствовая</p>\\n\\n    <p class=\\"master-minicard__spec\\">Продажа домов под ключ Продажа домов под ключ Продажа домов под ключ</p>\\n\\n    <ul class=\\"";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.isWidget : depth0), {"name":"if","hash":{},"fn":this.program(32, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += " master-minicard__services js-minicard-services-cut\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.services : depth0), {"name":"each","hash":{},"fn":this.program(34, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "    </ul>\\n\\n\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.id : stack1), {"name":"if","hash":{},"fn":this.program(36, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n</div>\\n\\n\\n<div class=\\"frame callback\\">\\n\\n</div>\\n\\n\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-phone-btn', constructor: require('./catberry_components/master/master-minicard/master-phone-btn/index.js'), properties: {"name":"master-phone-btn","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "            <a class=\\"phone-btn__url\\" href=\\"/"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.number : stack1), depth0))\n    + "\\">еще контакты</a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda, buffer = "<div class=\\"phone-btn\\">\\n    <p class=\\"phone-btn__tip js-master-phone-tip\\">\\n        Пожалуйста скажите мастеру что нашли его на нашем сайте\\n        <i class=\\"js-close-tip\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "close", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n    </p>\\n    <button class=\\"phone-btn__button js-show-phone\\" data-id=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.ownerID : stack1), depth0))\n    + "\\">\\n        Показать телефон\\n    </button>\\n    <div class=\\"phone-btn__phone-details js-show-phone-details\\">\\n        <p class=\\"phone-btn__phone\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.phone : stack1), depth0))\n    + "</p>\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.number : stack1), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'dop-function', constructor: require('./catberry_components/page/page-main/dop-function/index.js'), properties: {"name":"dop-function","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                    <li class=\\"become-master__item\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.icon : depth0), {"name":"if","hash":{},"fn":this.program(2, data),"inverse":this.program(4, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                    </li>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                        <a class=\\"become-master__item-link become-master__item-link_hover\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n                            <span class=\\"become-master__icon\\"></span>\\n                            ";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n                        </a>\\n";\n},"4":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                        <a class=\\"become-master__item-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</a>\\n";\n},"6":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                    <li class=\\"about-company__item\\">\\n                        <a class=\\"about-company__item-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</a>\\n                    </li>\\n";\n},"8":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                    <li class=\\"bayda__item-cube\\">\\n";\n  stack1 = helpers.unless.call(depth0, (depth0 != null ? depth0.empty : depth0), {"name":"unless","hash":{},"fn":this.program(9, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                    </li>\\n";\n},"9":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                        <a class=\\"bayda__item-cube-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"dop-function\\">\\n    <div class=\\"dop-function__inner\\">\\n        <div class=\\"become-master\\">\\n            <div class=\\"become-master__inner\\">\\n                <div class=\\"become-master__title dop-function-block-js\\">Мастерам</div>\\n                <ul class=\\"become-master__menu\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.menuMaster : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </ul>\\n            </div>\\n        </div>\\n        <div class=\\"about-company\\">\\n            <div class=\\"about-company__inner\\">\\n                <div class=\\"about-company__title dop-function-block-js\\">О компании</div>\\n                <ul class=\\"about-company__menu\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.menuAbout : depth0), {"name":"each","hash":{},"fn":this.program(6, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </ul>\\n            </div>\\n        </div>\\n        <div class=\\"bayda\\">\\n            <div class=\\"bayda__inner\\">\\n                <div class=\\"bayda__title dop-function-block-js\\">Развлечения</div>\\n                <ul class=\\"bayda__menu-cube\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.menuBayda : depth0), {"name":"each","hash":{},"fn":this.program(8, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'main-function', constructor: require('./catberry_components/page/page-main/main-function/index.js'), properties: {"name":"main-function","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";\n  return "<div class=\\"main-function\\">\\n    <div class=\\"main-function__inner\\">\\n        <cat-search id=\\"search\\"></cat-search>\\n        <div class=\\"or\\">или</div>\\n        <div class=\\"find-master js-find-master\\">\\n            <a class=\\"find-master__inner\\" href=\\"/catalog\\">\\n                <div class=\\"find-master__inner-rel\\">\\n                    <div class=\\"find-master__icon\\">\\n                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "man-in-sun", "icon_white", {"name":"icon","hash":{},"data":data})))\n    + "\\n                    </div>\\n\\n                    <p class=\\"find-master__title\\">Выбери Мастера</p>\\n                    <span class=\\"find-master__btn\\">У нас "\n    + escapeExpression(((helper = (helper = helpers.countMaster || (depth0 != null ? depth0.countMaster : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"countMaster","hash":{},"data":data}) : helper)))\n    + "</span>\\n                </div>\\n            </a>\\n        </div>\\n        <div class=\\"call-back\\">\\n            <a class=\\"call-back__inner\\" href=\\"/request\\">\\n                <div class=\\"call-back__inner-rel\\">\\n                    <div class=\\"call-back__icon\\">\\n                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "star-in-sun", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "star-line", {"name":"icon","hash":{},"data":data})))\n    + "\\n                    </div>\\n\\n                    <p class=\\"call-back__title\\">Закажи услугу</p>\\n\\n                    <p class=\\"call-back__text\\">Мы бесплатно отправим вашу заявку всем подходящим Мастерам</p>\\n                    <span class=\\"call-back__btn\\">Создать заявку</span>\\n                </div>\\n            </a>\\n        </div>\\n        <div class=\\"catalogs\\">\\n            <div class=\\"catalogs__inner\\">\\n                <div class=\\"catalogs__services\\">\\n                    <a class=\\"catalogs__services-link\\" href=\\"/catalog\\">Весь каталог услуг</a>\\n                </div>\\n                <div class=\\"catalogs__dop\\">\\n                    <cat-catalog-list id=\\"catalog-list\\" data-mod=\\"page_main\\"></cat-catalog-list>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'}
];

var util = require('util'),
	routeDefinitions = require('./routes.js') || [],
	Catberry = require('./node_modules/catberry/browser/Catberry.js'),
	Logger = require('./node_modules/catberry/browser/Logger.js'),
	BootstrapperBase =
		require('./node_modules/catberry/lib/base/BootstrapperBase.js'),
	StoreDispatcher = require('./node_modules/catberry/lib/StoreDispatcher'),
	ModuleApiProvider =
		require('./node_modules/catberry/browser/providers/ModuleApiProvider'),
	CookieWrapper = require('./node_modules/catberry/browser/CookieWrapper');

var DEBUG_DOCUMENT_UPDATED = 'Document updated (%d store(s) changed)',
	DEBUG_COMPONENT_BOUND = 'Component "%s" is bound',
	DEBUG_COMPONENT_UNBOUND = 'Component "%s" is unbound';

util.inherits(Bootstrapper, BootstrapperBase);

/**
 * Creates new instance of the browser Catberry's bootstrapper.
 * @constructor
 * @extends BootstrapperBase
 */
function Bootstrapper() {
	BootstrapperBase.call(this, Catberry);
}

/**
 * Configures Catberry's service locator.
 * @param {Object} configObject Application config object.
 * @param {ServiceLocator} locator Service locator to configure.
 */
Bootstrapper.prototype.configure = function (configObject, locator) {
	BootstrapperBase.prototype.configure.call(this, configObject, locator);

	// if browser still does not have promises then add it.
	if (!('Promise' in window)) {
		window.Promise = locator.resolve('promise');
	}

	locator.register('storeDispatcher', StoreDispatcher, configObject, true);
	locator.register(
		'moduleApiProvider', ModuleApiProvider, configObject, true
	);
	locator.register('cookieWrapper', CookieWrapper, configObject, true);

	locator.registerInstance('window', window);

	var loggerConfig = configObject.logger || {},
		logger = new Logger(loggerConfig.levels);
	locator.registerInstance('logger', logger);
	window.onerror = function errorHandler(msg, uri, line) {
		logger.fatal(uri + ':' + line + ' ' + msg);
		return true;
	};
	var eventBus = locator.resolve('eventBus');
	this._wrapEventsWithLogger(configObject, eventBus, logger);

	routeDefinitions.forEach(function (routeDefinition) {
		locator.registerInstance('routeDefinition', routeDefinition);
	});

	stores.forEach(function (store) {
		locator.registerInstance('store', store);
	});

	components.forEach(function (component) {
		locator.registerInstance('component', component);
	});
};

/**
 * Wraps event bus with log messages.
 * @param {Object} config Application config.
 * @param {EventEmitter} eventBus Event emitter that implements event bus.
 * @param {Logger} logger Logger to write messages.
 * @protected
 */
Bootstrapper.prototype._wrapEventsWithLogger =
	function (config, eventBus, logger) {
		BootstrapperBase.prototype._wrapEventsWithLogger
			.call(this, config, eventBus, logger);

		var isRelease = Boolean(config.isRelease);
		if (isRelease) {
			return;
		}
		eventBus
			.on('documentUpdated', function (args) {
				logger.debug(util.format(DEBUG_DOCUMENT_UPDATED, args.length));
			})
			.on('componentBound', function (args) {
				logger.debug(util.format(
					DEBUG_COMPONENT_BOUND,
					args.element.tagName + (args.id ? '#' + args.id : '')
				));
			})
			.on('componentUnbound', function (args) {
				logger.debug(util.format(
					DEBUG_COMPONENT_UNBOUND,
					args.element.tagName + (args.id ? '#' + args.id : '')
				));
			});
	};

module.exports = new Bootstrapper();
},{"./catberry_components/_common/common-h1/index.js":3,"./catberry_components/_common/common-paginator/index.js":4,"./catberry_components/breadcrumps/index.js":5,"./catberry_components/catalog-list/index.js":6,"./catberry_components/document/index.js":7,"./catberry_components/head/index.js":8,"./catberry_components/loader/index.js":9,"./catberry_components/master/master-block/master-block-about/index.js":10,"./catberry_components/master/master-block/master-block-article/index.js":11,"./catberry_components/master/master-block/master-block-link/index.js":12,"./catberry_components/master/master-block/master-block-photo/index.js":13,"./catberry_components/master/master-block/master-block-review/index.js":14,"./catberry_components/master/master-block/master-block-sale/index.js":15,"./catberry_components/master/master-block/master-block-service/index.js":16,"./catberry_components/master/master-block/master-block-video/index.js":17,"./catberry_components/master/master-block/master-block-work/index.js":18,"./catberry_components/master/master-filter/index.js":19,"./catberry_components/master/master-list/index.js":20,"./catberry_components/master/master-minicard/master-minicard/index.js":21,"./catberry_components/master/master-minicard/master-phone-btn/index.js":22,"./catberry_components/master/master-page/index.js":23,"./catberry_components/master/master-recommended/index.js":24,"./catberry_components/master/master-rubrika/index.js":25,"./catberry_components/other/other-news-item/index.js":26,"./catberry_components/other/other-news/index.js":27,"./catberry_components/other/other-recommendation/index.js":28,"./catberry_components/other/other-vacancy-item/index.js":29,"./catberry_components/other/other-vacancy/index.js":30,"./catberry_components/page/page-catalog/index.js":31,"./catberry_components/page/page-contact/index.js":32,"./catberry_components/page/page-feedback/index.js":33,"./catberry_components/page/page-login/index.js":34,"./catberry_components/page/page-main/dop-function/index.js":35,"./catberry_components/page/page-main/index.js":36,"./catberry_components/page/page-main/main-function/index.js":37,"./catberry_components/page/page-master-page/index.js":38,"./catberry_components/page/page-master-rubrika/index.js":39,"./catberry_components/page/page-news-item/index.js":40,"./catberry_components/page/page-news/index.js":41,"./catberry_components/page/page-oferta/index.js":42,"./catberry_components/page/page-recommendation/index.js":43,"./catberry_components/page/page-registration/index.js":44,"./catberry_components/page/page-request/index.js":45,"./catberry_components/page/page-sale/index.js":46,"./catberry_components/page/page-sovety/index.js":47,"./catberry_components/page/page-vacancy-item/index.js":48,"./catberry_components/page/page-vacancy/index.js":49,"./catberry_components/page/page-video/index.js":50,"./catberry_components/pages/pages-content/index.js":51,"./catberry_components/pages/pages-footer/index.js":52,"./catberry_components/pages/pages-header/index.js":53,"./catberry_components/pages/pages-navigation/index.js":54,"./catberry_components/registration/registration-about/index.js":55,"./catberry_components/registration/registration-faq/index.js":56,"./catberry_components/registration/registration-form/index.js":57,"./catberry_components/registration/registration-header/index.js":58,"./catberry_components/registration/registration-more-page/index.js":59,"./catberry_components/registration/registration-price/index.js":60,"./catberry_components/registration/registration-why-we/index.js":61,"./catberry_components/rubrikator/rubrikator-list/index.js":62,"./catberry_components/search/index.js":63,"./catberry_components/service-request/index.js":64,"./catberry_components/social/index.js":65,"./catberry_stores/Breadcrumps.js":66,"./catberry_stores/Head.js":67,"./catberry_stores/Pages.js":68,"./catberry_stores/Paginator.js":69,"./catberry_stores/Tag.js":70,"./catberry_stores/master/MasterItem.js":71,"./catberry_stores/master/MasterList.js":72,"./catberry_stores/master/MasterSovety.js":73,"./catberry_stores/master/MasterVideo.js":74,"./catberry_stores/master/Recommended.js":75,"./catberry_stores/other/News.js":76,"./catberry_stores/other/NewsItem.js":77,"./catberry_stores/other/Recommendation.js":78,"./catberry_stores/other/Vacancy.js":79,"./catberry_stores/other/VacancyItem.js":80,"./catberry_stores/rubrika/Rubrika.js":81,"./catberry_stores/rubrika/Rubrikator.js":82,"./catberry_stores/rubrika/RubrikatorCompany.js":83,"./catberry_stores/rubrika/RubrikatorParent.js":84,"./node_modules/catberry/browser/Catberry.js":89,"./node_modules/catberry/browser/CookieWrapper":90,"./node_modules/catberry/browser/Logger.js":92,"./node_modules/catberry/browser/providers/ModuleApiProvider":97,"./node_modules/catberry/lib/StoreDispatcher":101,"./node_modules/catberry/lib/base/BootstrapperBase.js":102,"./routes.js":146,"util":118}],2:[function(require,module,exports){
'use strict';

var catberry = require('catberry'),
// this config will be replaced by `./config/browser.json` when building
// because of `browser` field in `package.json`
    config = require('./config/environment.json'),
    templateEngine = require('./special_modules/catberry-handlebars'),
    helpers = require('./special_modules/catberry-handlebars-helpers'),
    cat = catberry.create(config);

// register template provider to Catberry Service Locator
templateEngine.register(cat.locator);
helpers.register(cat.locator)

cat.startWhenReady();


},{"./config/environment.json":85,"./special_modules/catberry-handlebars":153,"./special_modules/catberry-handlebars-helpers":150,"catberry":98}],3:[function(require,module,exports){
'use strict';

module.exports = CommonH1;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "common-h1" component.
 * @constructor
 */
function CommonH1() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
CommonH1.prototype.render = function () {
    return this.$context.attributes;
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
CommonH1.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
CommonH1.prototype.unbind = function () {

};

},{}],4:[function(require,module,exports){
'use strict';

module.exports = CommonPaginator;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "common-paginator" component.
 * @constructor
 */
function CommonPaginator() {
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
CommonPaginator.prototype.render = function () {
    var self = this;
    var model = this.$context.attributes.model;
    if (!model)
        return {
            "is-paginator": false
        };

    return this.$context.sendAction("setModel", model)
        .then(function () {
            return self.$context.getStoreData();
        });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
CommonPaginator.prototype.bind = function () {
    return {
        click: {
            '.paginator__number': this._handleClick
        }
    }
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
CommonPaginator.prototype.unbind = function () {

};
CommonPaginator.prototype._handleClick = function(){
    window.scrollTo(0,0);
};
},{}],5:[function(require,module,exports){
'use strict';

module.exports = Breadcrumps;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "breadcrumps" component.
 * @constructor
 */
function Breadcrumps() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Breadcrumps.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Breadcrumps.prototype.bind = function () {
    return {
        click: {
            '.js-parent-rub': this._clickHandler,
        }
    }
};


Breadcrumps.prototype._clickHandler = function (obj) {
    //var el = obj.target;
    var pos = $('.js-parent-rub').position().left + $('.js-parent-rub').width();
    $('.js-breadcrumbs-list').css('left', pos).toggle();
    return false;
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Breadcrumps.prototype.unbind = function () {

};

},{}],6:[function(require,module,exports){
'use strict';

module.exports = DopCatalogs;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "dop-catalogs" component.
 * @constructor
 */
function DopCatalogs() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
DopCatalogs.prototype.render = function () {

    return {
        'data-mod': this.$context.attributes['data-mod'],
        catalogs: [
            {
                url: "/sale",
                ico: "gift",
                title: "Поиск по скидке"
            },
            {
                url: "/video",
                ico: "video",
                title: "Поиск по видео"
            },
            {
                url: "/sovety",
                ico: "qwestion",
                title: "Секреты Мастеров"
            },
            {
                url: "/company",
                ico: "case",
                title: "Каталог фирм"
            }
        ]
    };
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
DopCatalogs.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
DopCatalogs.prototype.unbind = function () {

};

},{}],7:[function(require,module,exports){
'use strict';

module.exports = Document;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "document" component.
 * @constructor
 */
function Document() { }

},{}],8:[function(require,module,exports){
'use strict';

module.exports = Head;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "head" component.
 * @constructor
 */
function Head() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Head.prototype.render = function () {
	return this.$context.getStoreData();
};


},{}],9:[function(require,module,exports){
'use strict';

module.exports = Loader;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "loader" component.
 * @constructor
 */
function Loader() { }


},{}],10:[function(require,module,exports){
'use strict';

module.exports = MasterBlockAbout;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-about" component.
 * @constructor
 */
function MasterBlockAbout() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockAbout.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                data.aboutEduc = data.aboutEduc.replace(/\n/g, "<br>");
                data.aboutExp = data.aboutExp.replace(/\n/g, "<br>");
                data.aboutAddInfo = data.aboutAddInfo.replace(/\n/g, "<br>");
                return {
                    aboutEduc: data.aboutEduc,
                    aboutExp: data.aboutExp,
                    aboutAddInfo: data.aboutAddInfo
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockAbout.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockAbout.prototype.unbind = function () {

};

},{}],11:[function(require,module,exports){
'use strict';

module.exports = MasterBlockArticle;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-article" component.
 * @constructor
 */
function MasterBlockArticle() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockArticle.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                data.articles.forEach(function (item) {
                    item.author = data.name; //добавляем автора для каждой статьи
                });
                //console.log(data.articles);
                return {
                    articles: data.articles
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockArticle.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockArticle.prototype.unbind = function () {

};

},{}],12:[function(require,module,exports){
'use strict';

module.exports = MasterBlockLink;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-link" component.
 * @constructor
 */
function MasterBlockLink() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockLink.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockLink.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockLink.prototype.unbind = function () {

};

},{}],13:[function(require,module,exports){
'use strict';

module.exports = MasterBlockPhoto;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-photo" component.
 * @constructor
 */
function MasterBlockPhoto() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockPhoto.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                //console.log(data.albums);
                return {
                    albums: [
                        {
                            "id": 1991,
                            "ownerType": 1,
                            "ownerID": 1019,
                            "name": "Альбом №1",
                            "status": 1,
                            "photos": [
                                {
                                    "id": 63853,
                                    "albumID": 1991,
                                    "imgID": "5693458623041",
                                    "description": null
                                },
                                {
                                    "id": 63854,
                                    "albumID": 1991,
                                    "imgID": "569345868bbb3",
                                    "description": null
                                },
                                {
                                    "id": 63855,
                                    "albumID": 1991,
                                    "imgID": "5693458701367",
                                    "description": null
                                },
                                {
                                    "id": 63856,
                                    "albumID": 1991,
                                    "imgID": "5693458771840",
                                    "description": null
                                },
                                {
                                    "id": 63857,
                                    "albumID": 1991,
                                    "imgID": "56934587d8e05",
                                    "description": null
                                },
                                {
                                    "id": 63858,
                                    "albumID": 1991,
                                    "imgID": "5693458845eb4",
                                    "description": null
                                },
                                {
                                    "id": 63859,
                                    "albumID": 1991,
                                    "imgID": "56934588af766",
                                    "description": null
                                }
                            ]
                        },
                        {
                            "id": 1993,
                            "ownerType": 1,
                            "ownerID": 1058,
                            "name": "Сертификаты",
                            "status": 1,
                            "photos": [
                                {
                                    "id": 64068,
                                    "albumID": 1993,
                                    "imgID": "569345ba20dc9",
                                    "description": null
                                },
                                {
                                    "id": 64069,
                                    "albumID": 1993,
                                    "imgID": "569345ba80f84",
                                    "description": null
                                },
                                {
                                    "id": 64070,
                                    "albumID": 1993,
                                    "imgID": "569345baeb4d9",
                                    "description": ""
                                },
                                {
                                    "id": 64071,
                                    "albumID": 1993,
                                    "imgID": "569345bb5f92a",
                                    "description": null
                                },
                                {
                                    "id": 64072,
                                    "albumID": 1993,
                                    "imgID": "569345bc6aee8",
                                    "description": null
                                },
                                {
                                    "id": 88332,
                                    "albumID": 1993,
                                    "imgID": "5693503e61284",
                                    "description": null
                                },
                                {
                                    "id": 88333,
                                    "albumID": 1993,
                                    "imgID": "5693503ec5377",
                                    "description": null
                                },
                                {
                                    "id": 119761,
                                    "albumID": 1993,
                                    "imgID": "56936e0849ae9",
                                    "description": null
                                }
                            ]
                        }
                    ]
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockPhoto.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockPhoto.prototype.unbind = function () {

};

},{}],14:[function(require,module,exports){
'use strict';

module.exports = MasterBlockReview;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-review" component.
 * @constructor
 */
function MasterBlockReview() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockReview.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                data.vkLikes.data = JSON.parse(data.vkLikes.data);
                data.vkLikes.data.length = 9; //укорачиваем массив до 9 элементов
                //console.log(data.comments);
                return {
                    comments: data.comments,
                    vkLikes: data.vkLikes,
                    name: data.name,
                    imgID: data.imgID
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockReview.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockReview.prototype.unbind = function () {

};

},{}],15:[function(require,module,exports){
'use strict';

module.exports = MasterBlockSale;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-sale" component.
 * @constructor
 */
function MasterBlockSale() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockSale.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                //console.log(data.sales);
                return {
                    sales: data.sales
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockSale.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockSale.prototype.unbind = function () {

};

},{}],16:[function(require,module,exports){
'use strict';

module.exports = MasterBlockService;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-service" component.
 * @constructor
 */
function MasterBlockService() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockService.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                //console.log(data);
                data.services = [
                    'Эксперт по развитию (комфортных, надежных, благополучных, доверительных) семейных отношений',
                    'Психологическое сопровождение семьи от ЗАГСа и по жизни',
                    'Психология семейных отношений',
                    'Психотерапия (индивидуальная и групповая)',
                    'Личные проблемы – беспокойства и страхи, неуверенность в себе, депрессия',
                    'Одиночество, не складывается личная жизнь',
                    'Проблемы в общении – сложности во взаимоотношениях, непонимание',
                    'Психосоматические расстройства у детей и взрослых',
                    'Зависимость (алкогольная, никотиновая, игровая и т.д.)',
                    'Повышенная конфликтность, конфликты на работе и не только',
                    'Психология детско-родительских отношений',
                    'Психодиагностика',
                    'Финансовое благополучие семьи – деньги и семейные конфликты, мои взаимоотношения с деньгами, развитие финансовой грамотности, финансовый диагноз',
                    'Организационная психология и бизнес-тренинги',
                    'Вопросы воспитания и развития',
                    'Психологическое консультирование',
                    'Индивидуальная психотерапия',
                    'Групповая психотерапия',
                    'Детско-родительские отношения',
                    'Проблемы семейных отношений',
                    'Проблемы взаимоотношений',
                    'Личностные проблемы',
                    'Психосоматические расстройства',
                    'Экзистенциальные вопросы',
                    'Работа со снами и мифами'
                ];
                var fieldsValSum = 0;
                var fieldsValHalfSum = 0;
                var part1 = [];
                var part2 = [];

                data.services.forEach(function (item, i, arr) {
                    //var fieldsValHalfSum = 0;
                    var fieldsValLength;

                    fieldsValLength = item.length;
                    if (fieldsValLength < 30) {
                        fieldsValLength = 30;
                    }
                    fieldsValSum += fieldsValLength;
                });
                data.services.forEach(function (item, i, arr) {
                    var fieldsValLength;

                    fieldsValLength = item.length;
                    if (fieldsValHalfSum < fieldsValSum / 2) {
                        part1.push(item);
                    } else {
                        part2.push(item);
                    }
                    fieldsValHalfSum += fieldsValLength;
                });
                data.services = [];
                data.services.part1 = part1;
                data.services.part2 = part2;
                //console.log(data.services);
                return {
                    services: data.services
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockService.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockService.prototype.unbind = function () {

};

},{}],17:[function(require,module,exports){
'use strict';

module.exports = MasterBlockVideo;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-video" component.
 * @constructor
 */
function MasterBlockVideo() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockVideo.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                //console.log(data.videos);
                return {
                    videos: data.videos
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockVideo.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockVideo.prototype.unbind = function () {

};

},{}],18:[function(require,module,exports){
'use strict';

module.exports = MasterBlockWork;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-work" component.
 * @constructor
 */
function MasterBlockWork() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockWork.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                var tempArr = new Array(7);
                data.schedule.forEach(function (item) {
                    item.open = item.open.substr(0, 5);
                    item.close = item.close.substr(0, 5);
                    tempArr[item.day - 1] = item;
                });
                data.schedule = tempArr;
                return {
                    schedule: data.schedule,
                    district: data.districts,
                    workCondition: data.workCondition
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockWork.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockWork.prototype.unbind = function () {

};

},{}],19:[function(require,module,exports){
'use strict';
module.exports = MasterFilter;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-filter" component.
 * @constructor
 */
function MasterFilter() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterFilter.prototype.render = function () {
    var self = this;
    var path, currentTag;
    var result = [];

    return this.$context.getStoreData()
        .then(function (data) {
            path = '/' + data.rubrika.parent.unique + '/' + data.rubrika.unique;

            return self.$context.getStoreData('master/MasterList')
                .then(function (master) {
                    if (Object.keys(master).length > 0)
                        result.push({
                            url: path,
                            sectionName: "master",
                            title: "Мастера",
                            ico: "man"
                        });
                })
                .then(function () {
                    return self.$context.getStoreData('master/MasterVideo')
                })
                .then(function (video) {
                    //if (Object.keys(master).length > 0)
                    result.push({
                        url: path + '/video',
                        sectionName: "video",
                        title: "Видео Мастеров",
                        ico: "video"
                    });
                })
                .then(function () {
                    //return self.$context.getStoreData('master/MasterVideo')
                })
                .then(function (sales) {
                    //if (Object.keys(master).length > 0)
                    result.push({
                        url: path + '/sale',
                        sectionName: "sale",
                        title: "Скидки Мастеров",
                        ico: "gift"
                    });
                })
                .then(function () {
                    //return self.$context.getStoreData('master/MasterVideo')
                })
                .then(function (secrets) {
                    //if (Object.keys(master).length > 0)
                    result.push({
                        url: path + '/sovety',
                        sectionName: "sovety",
                        title: "Секреты Мастеров",
                        ico: "qwestion"
                    });
                })
                .then(function () {
                    //return self.$context.getStoreData('master/MasterVideo')
                })
                .then(function (company) {
                    //if (Object.keys(master).length > 0)
                    result.push({
                        url: path + '/company',
                        sectionName: "company",
                        title: "Каталог фирм",
                        ico: "case"
                    });
                })
                .then(function () {
                    self._decoreOpenSection(result, data);
                    return {filterSection: result};
                })
        });
};
/**
 * Декарирование открытой секции (добавление тегов, ортировки)
 * @param result массив для декорирования
 * @param rubrika рубрика из стора
 * @private
 */
MasterFilter.prototype._decoreOpenSection = function (result, data) {
    var currentSection = data.section;

    for (var i = 0; i < result.length; ++i) {
        if (result[i].sectionName == currentSection) {

            var tags = this._getTags(data);
            result[i].openSection = {tagsGroup: tags};
            if (currentSection == 'masters') {
                result[i].openSection.sortBy = {
                    "url": "",
                    "method": "get"
                };
            }
            return;
        }
    }
};

/**
 * Перестройка тегов
 * @param tagsJson тэги из json
 * @param path абсолютный родительский путь для ссылок в тегах
 * @param currentTag текущий тег для выделения
 * @returns {Array} теги разбитые по группам
 * @private
 */
MasterFilter.prototype._getTags = function (data) {
    var path = '/' + data.rubrika.parent.unique + '/' + data.rubrika.unique;
    var tagsJson = data.rubrika.tags;
    var currentTag = data.tag.unique ;
    var currentSection = data.section;
    var tags = [];

    Object.keys(tagsJson)
        .forEach(function (n) {
            var tag = tagsJson[n];
            tag.isActive = false;

            if (!tags[tag.group])
                tags[tag.group] = [];

            if (tag.unique == currentTag) {
                tag.isActive = true;
                tag.urlBack = path;
            }
            if (currentSection == 'master') {
                tag.path = path + '/' + tag.unique;
            } else {
                tag.path = path + '/' + tag.unique + '/' + currentSection;
            }

            tags[tag.group].push(tag);
        });

    //сортируем
    var tagsGroup = [];
    Object.keys(tags).sort().forEach(function (key) {
        tagsGroup.push({
            title: key,
            tags: tags[key]
        });
    });
    return tagsGroup;
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterFilter.prototype.bind = function () {
    return {
        click: {
            '.js-filter-toggle-btn.active': this._clickSection
        }
    }
};

MasterFilter.prototype._clickSection = function (obj) {
    var dom = obj.target;
    var el;
    if (!($(dom).hasClass('js-filter-toggle-btn') && $(dom).hasClass('active')))
        el = $(dom).parents('.js-filter-toggle-btn');
    else
        el = $(dom);
    el.parent().find('.js-filter-toggle-section').slideToggle();
    el.find('.filter-section__arrow-icon').toggleClass('down');
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterFilter.prototype.unbind = function () {

};

},{}],20:[function(require,module,exports){
'use strict';

module.exports = MasterList;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-list" component.
 * @constructor
 */
function MasterList() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterList.prototype.render = function () {
    //return this.$context.getStoreData();
    return [
        {
            "id": 1003,
            "userID": 20682,
            "rubrikaID": 11,
            "sort": 495,
            "name": "Коваленко Виталий",
            "imgID": null,
            "services": "[\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0438\u043c\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043c\u0438\u043a\u0440\u043e\u0432\u043e\u043b\u043d\u043e\u0432\u044b\u0445 \u043f\u0435\u0447\u0435\u0439\",\"\u0417\u0430\u043f\u0430\u0441\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u043d\u0430 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0432 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0438 \u043d\u0430 \u0437\u0430\u043a\u0430\u0437 ( \u043d\u0430\u0441\u043e\u0441\u044b, \u0422\u042d\u041d\u044b, \u043f\u043e\u0434\u0448\u0438\u043f\u043d\u0438\u043a\u0438, \u0440\u0435\u043c\u043d\u0438, \u0441\u0430\u043b\u044c\u043d\u0438\u043a\u0438, \u0440\u0443\u0447\u043a\u0438 \u043b\u044e\u043a\u0430 \u0438 \u0442.\u0434.)\",\"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0445\u043e\u043b\u043e\u0434\u0438\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0438 \u043c\u043e\u0440\u043e\u0437\u0438\u043b\u044c\u043d\u044b\u0445 \u043a\u0430\u043c\u0435\u0440\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043f\u044b\u043b\u0435\u0441\u043e\u0441\u043e\u0432, \u043e\u0431\u043e\u0433\u0440\u0435\u0432\u0430\u0442\u0435\u043b\u0435\u0439\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432, \u0443\u0442\u044e\u0433\u043e\u0432, \u0444\u0435\u043d\u043e\u0432\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043a\u0443\u0445\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u0431\u0430\u0439\u043d\u043e\u0432, \u0431\u043b\u0435\u043d\u0434\u0435\u0440\u043e\u0432\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0432\u0441\u0435\u0433\u043e, \u0447\u0442\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0440\u043e\u0437\u0435\u0442\u043a\u0443\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043f\u0443\u043b\u044c\u0442\u043e\u0432 \u0434\u0438\u0441\u0442\u0430\u043d\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0440\u0430\u0434\u0438\u043e\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u044d\u043b\u0435\u0442\u0440\u043e\u043f\u043b\u0438\u0442 \u0438 \u0434\u0443\u0445\u043e\u0432\u043e\u043a\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0448\u0432\u0435\u0439\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d \u0438 \u043e\u0432\u0435\u0440\u043b\u043e\u043a\u043e\u0432\",\"\u0418 \u0432\u0441\u0435\u0433\u043e, \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0435\u043c\u043e\u043d\u0442\u0430\"]",
            "spec": "Ремонт стиральных машин, холодильников и прочей бытовой техники",
            "aboutEduc": "Жигулёвский радиотехникум",
            "aboutExp": "25 лет в сфере ремонта бытовой техники",
            "aboutAddInfo": "",
            "publicStatus": 1,
            "publicDateEnd": "2016-07-26",
            "moderStatus": 3,
            "moderComment": "",
            "contacts": {
                "id": 562,
                "ownerType": 1,
                "ownerID": 1003,
                "phone": "9608500622",
                "workPhone": "74-29-70",
                "email": "kovalenko.6974@yandex.ru \t",
                "addr": "",
                "addrCoord": "",
                "skype": "",
                "icq": ""
            },
            "page": {
                "id": 4550,
                "masterID": 1003,
                "transactionID": 0,
                "dateStart": "2015-08-01",
                "dateEnd": "2016-07-26",
                "number": 1003,
                "sales": 1,
                "articles": 0,
                "albums": 1,
                "videos": 0,
                "comments": 1,
                "services": 8,
                "links": 0
            }
        },
        {
            "id": 1005,
            "userID": 20684,
            "rubrikaID": 8,
            "sort": 358,
            "name": "Звездилина Ирина",
            "imgID": null,
            "services": "[\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0444\u0438\u0440\u043c\",\"\u041b\u0438\u043a\u0432\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0438\u0440\u043c\",\"\u0411\u0443\u0445\u0433\u0430\u043b\u0442\u0435\u0440\u0441\u043a\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438\",\"\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0446\u0438\u0438\",\"\u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u043d\u0430\u043b\u043e\u0433\u0430 (\u0436\u0438\u043b\u044c\u0435, \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u043b\u0435\u0447\u0435\u043d\u0438\u0435) \/ 3-\u041d\u0414\u0424\u041b\",\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0443\u0441\u0442\u0430\u0432, \u0433\u043e\u0441. \u0440\u0435\u0435\u0441\u0442\u0440\",\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0418\u041f\"]",
            "spec": "Бухгалтерские услуги. Регистрация ИП, ООО",
            "aboutEduc": "Высшее экономическое",
            "aboutExp": "4 года",
            "aboutAddInfo": "",
            "publicStatus": 1,
            "publicDateEnd": "2015-12-28",
            "moderStatus": 3,
            "moderComment": "",
            "contacts": {
                "id": 439,
                "ownerType": 1,
                "ownerID": 1005,
                "phone": "365151",
                "workPhone": "",
                "email": "avista-tlt@yandex.ru",
                "addr": "Степана Разина 4А, 3 этаж, оф. 4, Дон",
                "addrCoord": "",
                "skype": "",
                "icq": ""
            },
            "page": {
                "id": 4395,
                "masterID": 1005,
                "transactionID": 0,
                "dateStart": "2015-07-01",
                "dateEnd": "2015-12-28",
                "number": 1005,
                "sales": 0,
                "articles": 0,
                "albums": 0,
                "videos": 0,
                "comments": 1,
                "services": 8,
                "links": 0
            }
        },
        {
            "id": 1006,
            "userID": 20685,
            "rubrikaID": 11,
            "sort": 282,
            "name": "Степанов Вениамин",
            "imgID": null,
            "services": "[\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u043b\u043e\u0434\u0438\u043b\u044c\u043d\u0438\u043a\u043e\u0432\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0438\u043c\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u0445\u043e\u043b\u043e\u0434\u0438\u043b\u044c\u043d\u0438\u043a\u043e\u0432\",\"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0443\u043f\u043b\u043e\u0442\u043d\u0438\u0442\u0435\u043b\u0435\u0439, \u0440\u0435\u0437\u0438\u043d\u044b\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0438\u043c\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\"]",
            "spec": "Ремонт холодильников и стиральных машин",
            "aboutEduc": "Среднее-специальное слесарь-электрик по ремонту электрооборудования, бытовых машин, приборов. 4 разряд",
            "aboutExp": "28 лет",
            "aboutAddInfo": "",
            "publicStatus": 1,
            "publicDateEnd": "2016-08-26",
            "moderStatus": 3,
            "moderComment": "",
            "contacts": {
                "id": 563,
                "ownerType": 1,
                "ownerID": 1006,
                "phone": "611346",
                "workPhone": "612491",
                "email": "",
                "addr": "ДБ Заря",
                "addrCoord": "",
                "skype": null,
                "icq": null
            },
            "page": {}
        }
    ];
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterList.prototype.bind = function () {
    var window = this.$context.locator.resolve('window');
    window.addEventListener('resize', this._allMinicardServicesCut);
};
MasterList.prototype._allMinicardServicesCut = function () {
    $('.master-minicard').each(function () {
        var minicardServices = $(this).find('.master-minicard__services');
        var servicesList = minicardServices.find('li');
        var maxHeight =
            $(this).height() - ($(this).find('.master-minicard__name').height() + $(this).find('.master-minicard__spec').height());
        var servicesCount = minicardServices.find('li').length;

        console.log('maxHeight = ' + maxHeight);
        if (minicardServices.height() > maxHeight) {
            while (minicardServices.height() > maxHeight && servicesCount >= 0) {
                $(servicesList[servicesCount - 1]).hide();
                servicesCount--;
            }
        } else if ((minicardServices.height() + 10) < maxHeight) {
            var i = 0;
            while (minicardServices.height() < maxHeight && i < servicesCount + 1) {
                $(servicesList[i]).show();
                i++;
            }
            if (minicardServices.height() > maxHeight) {
                $(servicesList[i - 1]).hide();
            }
        }
    });
};
/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterList.prototype.unbind = function () {
    var window = this.$context.locator.resolve('window');
    window.removeEventLister('resize');
};

},{}],21:[function(require,module,exports){
'use strict';

module.exports = MasterMinicard;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-minicard" component.
 * @constructor
 */
function MasterMinicard() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterMinicard.prototype.render = function () {
    var data = [
        {
            "id": 1003,
            "userID": 20682,
            "rubrikaID": 11,
            "sort": 495,
            "name": "Коваленко Виталий",
            "imgID": null,
            "services": "[\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0438\u043c\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043c\u0438\u043a\u0440\u043e\u0432\u043e\u043b\u043d\u043e\u0432\u044b\u0445 \u043f\u0435\u0447\u0435\u0439\",\"\u0417\u0430\u043f\u0430\u0441\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u043d\u0430 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u0432 \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u0438 \u043d\u0430 \u0437\u0430\u043a\u0430\u0437 ( \u043d\u0430\u0441\u043e\u0441\u044b, \u0422\u042d\u041d\u044b, \u043f\u043e\u0434\u0448\u0438\u043f\u043d\u0438\u043a\u0438, \u0440\u0435\u043c\u043d\u0438, \u0441\u0430\u043b\u044c\u043d\u0438\u043a\u0438, \u0440\u0443\u0447\u043a\u0438 \u043b\u044e\u043a\u0430 \u0438 \u0442.\u0434.)\",\"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0445\u043e\u043b\u043e\u0434\u0438\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0438 \u043c\u043e\u0440\u043e\u0437\u0438\u043b\u044c\u043d\u044b\u0445 \u043a\u0430\u043c\u0435\u0440\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043f\u044b\u043b\u0435\u0441\u043e\u0441\u043e\u0432, \u043e\u0431\u043e\u0433\u0440\u0435\u0432\u0430\u0442\u0435\u043b\u0435\u0439\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0447\u0430\u0439\u043d\u0438\u043a\u043e\u0432, \u0443\u0442\u044e\u0433\u043e\u0432, \u0444\u0435\u043d\u043e\u0432\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043a\u0443\u0445\u043e\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u0431\u0430\u0439\u043d\u043e\u0432, \u0431\u043b\u0435\u043d\u0434\u0435\u0440\u043e\u0432\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u0430\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0432\u0441\u0435\u0433\u043e, \u0447\u0442\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0440\u043e\u0437\u0435\u0442\u043a\u0443\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043f\u0443\u043b\u044c\u0442\u043e\u0432 \u0434\u0438\u0441\u0442\u0430\u043d\u0446\u0438\u043e\u043d\u043d\u043e\u0433\u043e \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0440\u0430\u0434\u0438\u043e\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u044d\u043b\u0435\u0442\u0440\u043e\u043f\u043b\u0438\u0442 \u0438 \u0434\u0443\u0445\u043e\u0432\u043e\u043a\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0448\u0432\u0435\u0439\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d \u0438 \u043e\u0432\u0435\u0440\u043b\u043e\u043a\u043e\u0432\",\"\u0418 \u0432\u0441\u0435\u0433\u043e, \u0447\u0442\u043e \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u0440\u0435\u043c\u043e\u043d\u0442\u0430\"]",
            "spec": "Ремонт стиральных машин, холодильников и прочей бытовой техники",
            "aboutEduc": "Жигулёвский радиотехникум",
            "aboutExp": "25 лет в сфере ремонта бытовой техники",
            "aboutAddInfo": "",
            "publicStatus": 1,
            "publicDateEnd": "2016-07-26",
            "moderStatus": 3,
            "moderComment": "",
            "contacts": {
                "id": 562,
                "ownerType": 1,
                "ownerID": 1003,
                "phone": "9608500622",
                "workPhone": "74-29-70",
                "email": "kovalenko.6974@yandex.ru \t",
                "addr": "",
                "addrCoord": "",
                "skype": "",
                "icq": ""
            },
            "page": {
                "id": 4550,
                "masterID": 1003,
                "transactionID": 0,
                "dateStart": "2015-08-01",
                "dateEnd": "2016-07-26",
                "number": 1003,
                "sales": 1,
                "articles": 0,
                "albums": 1,
                "videos": 0,
                "comments": 1,
                "services": 8,
                "links": 0
            }
        },
        {
            "id": 1005,
            "userID": 20684,
            "rubrikaID": 8,
            "sort": 358,
            "name": "Звездилина Ирина",
            "imgID": null,
            "services": "[\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0444\u0438\u0440\u043c\",\"\u041b\u0438\u043a\u0432\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0438\u0440\u043c\",\"\u0411\u0443\u0445\u0433\u0430\u043b\u0442\u0435\u0440\u0441\u043a\u0438\u0435 \u0443\u0441\u043b\u0443\u0433\u0438\",\"\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u0435\u043a\u043b\u0430\u0440\u0430\u0446\u0438\u0438\",\"\u0412\u043e\u0437\u0432\u0440\u0430\u0442 \u043d\u0430\u043b\u043e\u0433\u0430 (\u0436\u0438\u043b\u044c\u0435, \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u043b\u0435\u0447\u0435\u043d\u0438\u0435) \/ 3-\u041d\u0414\u0424\u041b\",\"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0443\u0441\u0442\u0430\u0432, \u0433\u043e\u0441. \u0440\u0435\u0435\u0441\u0442\u0440\",\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0418\u041f\"]",
            "spec": "Бухгалтерские услуги. Регистрация ИП, ООО",
            "aboutEduc": "Высшее экономическое",
            "aboutExp": "4 года",
            "aboutAddInfo": "",
            "publicStatus": 1,
            "publicDateEnd": "2015-12-28",
            "moderStatus": 3,
            "moderComment": "",
            "contacts": {
                "id": 439,
                "ownerType": 1,
                "ownerID": 1005,
                "phone": "365151",
                "workPhone": "",
                "email": "avista-tlt@yandex.ru",
                "addr": "Степана Разина 4А, 3 этаж, оф. 4, Дон",
                "addrCoord": "",
                "skype": "",
                "icq": ""
            },
            "page": {
                "id": 4395,
                "masterID": 1005,
                "transactionID": 0,
                "dateStart": "2015-07-01",
                "dateEnd": "2015-12-28",
                "number": 1005,
                "sales": 0,
                "articles": 0,
                "albums": 0,
                "videos": 0,
                "comments": 1,
                "services": 8,
                "links": 0
            }
        },
        {
            "id": 1006,
            "userID": 20685,
            "rubrikaID": 11,
            "sort": 282,
            "name": "Степанов Вениамин",
            "imgID": null,
            "services": "[\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0445\u043e\u043b\u043e\u0434\u0438\u043b\u044c\u043d\u0438\u043a\u043e\u0432\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0438\u043c\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u0445\u043e\u043b\u043e\u0434\u0438\u043b\u044c\u043d\u0438\u043a\u043e\u0432\",\"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0443\u043f\u043b\u043e\u0442\u043d\u0438\u0442\u0435\u043b\u0435\u0439, \u0440\u0435\u0437\u0438\u043d\u044b\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u043e\u0442\u0435\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\",\"\u0420\u0435\u043c\u043e\u043d\u0442 \u0438\u043c\u043f\u043e\u0440\u0442\u043d\u044b\u0445 \u0441\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d\"]",
            "spec": "Ремонт холодильников и стиральных машин",
            "aboutEduc": "Среднее-специальное слесарь-электрик по ремонту электрооборудования, бытовых машин, приборов. 4 разряд",
            "aboutExp": "28 лет",
            "aboutAddInfo": "",
            "publicStatus": 1,
            "publicDateEnd": "2016-08-26",
            "moderStatus": 3,
            "moderComment": "",
            "contacts": {
                "id": 563,
                "ownerType": 1,
                "ownerID": 1006,
                "phone": "611346",
                "workPhone": "612491",
                "email": "",
                "addr": "ДБ Заря",
                "addrCoord": "",
                "skype": null,
                "icq": null
            },
            "page": {}
        }
    ];
    var master = data.filter(function (el) {
        return (el.id == this.$context.attributes['master-id']);
    }.bind(this));
    master[0]['services'] = JSON.parse(master[0]['services']);
    if (master[0].page.sales || master[0].page.albums || master[0].page.videos || master[0].page.comments) {
        master[0].isWidget = true;
    }
    return master[0];
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterMinicard.prototype.bind = function () {
    this._minicardServicesCut();
    return {};
};
MasterMinicard.prototype._minicardServicesCut = function () {
    var minicard = $('#' + this.$context.element.id);
    var minicardServices = minicard.find('.master-minicard__services');
    var maxHeight =
        minicard.find('.master-minicard').height() - (minicard.find('.master-minicard__name').height() + minicard.find('.master-minicard__spec').height());
    var servicesCount = minicardServices.find('li').length;

    while (minicardServices.height() > maxHeight) {
        $(minicardServices.find('li')[servicesCount]).hide();
        servicesCount--;
    }
    console.log(servicesCount);
};
/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterMinicard.prototype.unbind = function () {

};

},{}],22:[function(require,module,exports){
'use strict';

module.exports = MasterPhoneBtn;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-phone-btn" component.
 * @constructor
 */
function MasterPhoneBtn() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterPhoneBtn.prototype.render = function () {
    return {
        "contacts": {
            "id": 439,
            "ownerType": 1,
            "ownerID": 1005,
            "phone": "365151",
            "workPhone": "",
            "email": "avista-tlt@yandex.ru",
            "addr": "Степана Разина 4А, 3 этаж, оф. 4, Дон",
            "addrCoord": "",
            "skype": "",
            "icq": ""
        },
        "page": {
            "id": 4395,
            "masterID": 1005,
            "transactionID": 0,
            "dateStart": "2015-07-01",
            "dateEnd": "2015-12-28",
            "number": 1005,
            "sales": 0,
            "articles": 0,
            "albums": 0,
            "videos": 0,
            "comments": 1,
            "services": 8,
            "links": 0
        }
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterPhoneBtn.prototype.bind = function () {
    return {
        click: {
            '.js-show-phone': this._clickPhoneHandler,
            '.js-close-tip': this._clickCloseTipHandler
        }
    }
};

MasterPhoneBtn.prototype._clickPhoneHandler = function (obj) {
    var el = obj.target;
    $(el).hide();
    $(el).siblings('.js-show-phone-details').show();
    $(el).closest('.master-minicard').find('.js-master-phone-tip').fadeIn(400).delay(4000).fadeOut(500);
};
MasterPhoneBtn.prototype._clickCloseTipHandler = function (obj) {
    var el = obj.target;
    $(el).closest('.js-master-phone-tip').stop().fadeOut(500);
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterPhoneBtn.prototype.unbind = function () {

};

},{}],23:[function(require,module,exports){
'use strict';

module.exports = MasterPage;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-page" component.
 * @constructor
 */
function MasterPage() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterPage.prototype.render = function () {
    return this.$context.getStoreData().then(function (data) {
        console.log(data.company);
        return data;
    });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterPage.prototype.bind = function () {
    var offset = $('.menu-mp').offset();
    $(window).bind('scroll', function () {
        if ($(window).scrollTop() + 30 > offset.top) {
            $('.menu-mp').addClass('fixed');
        } else {
            $('.menu-mp').removeClass('fixed');
        }
    });
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterPage.prototype.unbind = function () {
    $(window).unbind('scroll');
};

},{}],24:[function(require,module,exports){
'use strict';

module.exports = MasterRecommended;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-recommended" component.
 * @constructor
 */
function MasterRecommended() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterRecommended.prototype.render = function () {
    //return this.$context.getStoreData();
    return {
        "is-recommended-masters": true,
        "url-arrow-left": "404",
        "url-arrow-right": "404",
        "recommended-master": [
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/3720.jpg",
                "alt": "Князев А.Ю.",
                "master-name": "Князев А.Ю.",
                "recommendation-number": "27 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/4617.jpg",
                "alt": "Хальзов А.",
                "master-name": "Хальзов А.",
                "recommendation-number": "6 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/7428.jpg",
                "alt": "Булгаков В.А.",
                "master-name": "Булгаков В.А.",
                "recommendation-number": "5 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/3720.jpg",
                "alt": "Князев А.Ю.",
                "master-name": "Князев А.Ю.",
                "recommendation-number": "27 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/4617.jpg",
                "alt": "Хальзов А.",
                "master-name": "Хальзов А.",
                "recommendation-number": "6 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/7428.jpg",
                "alt": "Булгаков В.А.",
                "master-name": "Булгаков В.А.",
                "recommendation-number": "5 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/3720.jpg",
                "alt": "Князев А.Ю.",
                "master-name": "Князев А.Ю.",
                "recommendation-number": "27 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/4617.jpg",
                "alt": "Хальзов А.",
                "master-name": "Хальзов А.",
                "recommendation-number": "6 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/7428.jpg",
                "alt": "Булгаков В.А.",
                "master-name": "Булгаков В.А.",
                "recommendation-number": "5 человек"
            }
        ]
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterRecommended.prototype.bind = function () {
    this.bindSlick();
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterRecommended.prototype.unbind = function () {
    this.unbindSlick();
};

MasterRecommended.prototype.bindSlick = function () {
    $('.master_recommended__slider').slick({
        dots: false,
        infinite: false,
        speed: 700,
        slidesToShow: 4,
        slidesToScroll: 3,
        prevArrow: '<div class="slick-prev">' +
        '<svg class="icon icon_strelka" title="icon_strelka" role="img">' +
        '<use xlink:href="/icon-svg/svg-symbols.svg#icon_strelka"/>' +
        '</svg>' +
        '</div>',
        nextArrow: '<div class="slick-next">' +
        '<svg class="icon icon_strelka" title="icon_strelka" role="img">' +
        '<use xlink:href="/icon-svg/svg-symbols.svg#icon_strelka"/>' +
        '</svg>' +
        '</div>'
    });
};
MasterRecommended.prototype.unbindSlick = function () {
    $('.master_recommended__slider').slick("unslick");
};
},{}],25:[function(require,module,exports){
'use strict';

module.exports = MasterRubrika;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-rubrika" component.
 * @constructor
 */
function MasterRubrika() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterRubrika.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterRubrika.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterRubrika.prototype.unbind = function () {

};

},{}],26:[function(require,module,exports){
'use strict';

module.exports = OtherNewsItem;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "other-news-item" component.
 * @constructor
 */
function OtherNewsItem() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
OtherNewsItem.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
OtherNewsItem.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
OtherNewsItem.prototype.unbind = function () {

};

},{}],27:[function(require,module,exports){
'use strict';

module.exports = OtherNews;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "other-news" component.
 * @constructor
 */
function OtherNews() {
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
OtherNews.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
OtherNews.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
OtherNews.prototype.unbind = function () {

};

},{}],28:[function(require,module,exports){
'use strict';

module.exports = OtherRecommendation;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "other-recommendation" component.
 * @constructor
 */
function OtherRecommendation() {
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
OtherRecommendation.prototype.render = function () {
    return this.$context.getStoreData()
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
OtherRecommendation.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
OtherRecommendation.prototype.unbind = function () {

};

},{}],29:[function(require,module,exports){
'use strict';

module.exports = OtherVacancyItem;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "other-vacancy-item" component.
 * @constructor
 */
function OtherVacancyItem() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
OtherVacancyItem.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
OtherVacancyItem.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
OtherVacancyItem.prototype.unbind = function () {

};

},{}],30:[function(require,module,exports){
'use strict';

module.exports = OtherVacancy;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "other-vacancy" component.
 * @constructor
 */
function OtherVacancy() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
OtherVacancy.prototype.render = function () {
    return this.$context.getStoreData()
        .then (function (res) {
        return {
            vacancy: res
        }
    });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
OtherVacancy.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
OtherVacancy.prototype.unbind = function () {

};

},{}],31:[function(require,module,exports){
'use strict';

module.exports = Rubikator;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "rubikator" component.
 * @constructor
 */
function Rubikator() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Rubikator.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Rubikator.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Rubikator.prototype.unbind = function () {

};

},{}],32:[function(require,module,exports){
'use strict';

module.exports = PageContact;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-contact" component.
 * @constructor
 */
function PageContact() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageContact.prototype.render = function () {
    return {
        "phone": "(8482) 741-147",
        "email": "info@facemaster.ru",
        "adress": "г. Тольятти, ул. Автостроителей 41А-1"
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageContact.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageContact.prototype.unbind = function () {

};

},{}],33:[function(require,module,exports){
'use strict';

module.exports = PageFeedback;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-feedback" component.
 * @constructor
 */
function PageFeedback() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageFeedback.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageFeedback.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageFeedback.prototype.unbind = function () {

};

},{}],34:[function(require,module,exports){
'use strict';

module.exports = PageLogin;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-login" component.
 * @constructor
 */
function PageLogin() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageLogin.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageLogin.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageLogin.prototype.unbind = function () {

};

},{}],35:[function(require,module,exports){
'use strict';

module.exports = DopFunction;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "dop-function" component.
 * @constructor
 */
function DopFunction() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
DopFunction.prototype.render = function () {
    return {
        "menuMaster": [
            {
                "url": "/registration",
                "title": "Стать Мастером",
                "icon": true
            },
            {
                "url": "/recommendation",
                "title": "Мастера о сайте"
            }
        ],
        "menuAbout": [
            {
                "url": "/news",
                "title": "Новости"
            },
            {
                "url": "/vacancy",
                "title": "Вакансии"
            }
        ],
        "menuBayda": [
            {
                "url": "/404",
                "title": "Конкурсы газеты Презент"
            },
            {
                "url": "/404",
                "title": "Маршрутки Тольятти с 01.01.2015"
            },
            {
                "url": "/404",
                "title": "Дачные перевозки"
            },
            {
                "empty": true
            }
        ]
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
DopFunction.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
DopFunction.prototype.unbind = function () {

};

},{}],36:[function(require,module,exports){
'use strict';

module.exports = Main;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "main" component.
 * @constructor
 */
function Main() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Main.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Main.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Main.prototype.unbind = function () {

};

},{}],37:[function(require,module,exports){
'use strict';

module.exports = MainFunction;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "main-function" component.
 * @constructor
 */
function MainFunction() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MainFunction.prototype.render = function () {
  return {
    countMaster: '1 234 Мастера'
  }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MainFunction.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MainFunction.prototype.unbind = function () {

};

},{}],38:[function(require,module,exports){
'use strict';

module.exports = PageMasterPage;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-master-page" component.
 * @constructor
 */
function PageMasterPage() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageMasterPage.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageMasterPage.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageMasterPage.prototype.unbind = function () {

};

},{}],39:[function(require,module,exports){
'use strict';

module.exports = PageMasterRubrika;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-master-rubrika" component.
 * @constructor
 */
function PageMasterRubrika() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageMasterRubrika.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageMasterRubrika.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageMasterRubrika.prototype.unbind = function () {

};

},{}],40:[function(require,module,exports){
'use strict';

module.exports = PageNewsItem;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-news-item" component.
 * @constructor
 */
function PageNewsItem() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageNewsItem.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageNewsItem.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageNewsItem.prototype.unbind = function () {

};

},{}],41:[function(require,module,exports){
'use strict';

module.exports = PageNews;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-news" component.
 * @constructor
 */
function PageNews() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageNews.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageNews.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageNews.prototype.unbind = function () {

};

},{}],42:[function(require,module,exports){
'use strict';

module.exports = PageOferta;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-oferta" component.
 * @constructor
 */
function PageOferta() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageOferta.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageOferta.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageOferta.prototype.unbind = function () {

};

},{}],43:[function(require,module,exports){
'use strict';

module.exports = PageRecommendation;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-recommendation" component.
 * @constructor
 */
function PageRecommendation() {
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageRecommendation.prototype.render = function () {
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageRecommendation.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageRecommendation.prototype.unbind = function () {

};

},{}],44:[function(require,module,exports){
'use strict';

module.exports = PageRegistration;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-registration" component.
 * @constructor
 */
function PageRegistration() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageRegistration.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageRegistration.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageRegistration.prototype.unbind = function () {

};

},{}],45:[function(require,module,exports){
'use strict';

module.exports = PageRequest;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-request" component.
 * @constructor
 */
function PageRequest() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageRequest.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageRequest.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageRequest.prototype.unbind = function () {

};

},{}],46:[function(require,module,exports){
'use strict';

module.exports = PageSaleCatalog;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-sale-catalog" component.
 * @constructor
 */
function PageSaleCatalog() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageSaleCatalog.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageSaleCatalog.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageSaleCatalog.prototype.unbind = function () {

};

},{}],47:[function(require,module,exports){
'use strict';

module.exports = PageSovetyCatalog;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-sovety-catalog" component.
 * @constructor
 */
function PageSovetyCatalog() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageSovetyCatalog.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageSovetyCatalog.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageSovetyCatalog.prototype.unbind = function () {

};

},{}],48:[function(require,module,exports){
'use strict';

module.exports = PageVacancyItem;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-vacancy-item" component.
 * @constructor
 */
function PageVacancyItem() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageVacancyItem.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageVacancyItem.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageVacancyItem.prototype.unbind = function () {

};

},{}],49:[function(require,module,exports){
'use strict';

module.exports = PageVacancy;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-vacancy" component.
 * @constructor
 */
function PageVacancy() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageVacancy.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageVacancy.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageVacancy.prototype.unbind = function () {

};

},{}],50:[function(require,module,exports){
'use strict';

module.exports = PageVideoCatalog;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-video-catalog" component.
 * @constructor
 */
function PageVideoCatalog() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageVideoCatalog.prototype.render = function () {
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageVideoCatalog.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageVideoCatalog.prototype.unbind = function () {

};

},{}],51:[function(require,module,exports){
'use strict';

module.exports = PagesContent;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "pages-content" component.
 * @constructor
 */
function PagesContent() { }

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PagesContent.prototype.render = function () {
	return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 */
PagesContent.prototype.bind = function () {
	this.hideLoader();
};

/**
 * Hides loader in template.
 */
PagesContent.prototype.hideLoader = function () {
	var loaders = this.$context.element.getElementsByTagName('cat-loader');
	for (var i = 0; i < loaders.length; i++) {
		loaders[i].style.display = 'none';
	}
	window.scrollTo(0,0);
};

},{}],52:[function(require,module,exports){
'use strict';

module.exports = Footer;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "pages-footer" component.
 * @constructor
 */
function Footer() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Footer.prototype.render = function () {
    return {
        links: [
            {
                "url": "/oferta",
                "title": "Оферта"
            },
            {
                "url": "/contact",
                "title": "Контакты"
            },
            {
                "url": "/feedback",
                "title": "Обратная связь"
            }
        ]
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Footer.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Footer.prototype.unbind = function () {

};

},{}],53:[function(require,module,exports){
'use strict';

module.exports = PagesHeader;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "pages-header" component.
 * @constructor
 */
function PagesHeader() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PagesHeader.prototype.render = function () {
    return this.$context.getStoreData()
        .then(function (data) {
            return data.header;
        });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PagesHeader.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PagesHeader.prototype.unbind = function () {

};

},{}],54:[function(require,module,exports){
'use strict';

var PAGES = require("../../../config/pages.json");

module.exports = PagesNavigation;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "pages-navigation" component.
 * @constructor
 */
function PagesNavigation() {
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PagesNavigation.prototype.render = function () {
    return {
        menu: [
            {
                link: '/catalog',
                name: PAGES.catalog.title
            },
            {
                link: '/request',
                name: PAGES.request.title
            },
            {
                link: '/registration',
                name: PAGES.registration.title
            }
        ]
    };
};

},{"../../../config/pages.json":86}],55:[function(require,module,exports){
'use strict';

module.exports = RegistrationAbout;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-about" component.
 * @constructor
 */
function RegistrationAbout() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationAbout.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationAbout.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationAbout.prototype.unbind = function () {

};

},{}],56:[function(require,module,exports){
'use strict';

module.exports = RegistrationFaq;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-faq" component.
 * @constructor
 */
function RegistrationFaq() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationFaq.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationFaq.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationFaq.prototype.unbind = function () {

};

},{}],57:[function(require,module,exports){
'use strict';

module.exports = RegistrationForm;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-form" component.
 * @constructor
 */
function RegistrationForm() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationForm.prototype.render = function () {
    return {
        url: "/reg-master/success.json",
        urlLK: "404",
        method: "get"
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationForm.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationForm.prototype.unbind = function () {

};

},{}],58:[function(require,module,exports){
'use strict';

module.exports = RegistrationHeader;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-header" component.
 * @constructor
 */
function RegistrationHeader() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationHeader.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationHeader.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationHeader.prototype.unbind = function () {

};

},{}],59:[function(require,module,exports){
'use strict';

module.exports = RegistrationMorePage;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-more-page" component.
 * @constructor
 */
function RegistrationMorePage() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationMorePage.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationMorePage.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationMorePage.prototype.unbind = function () {

};

},{}],60:[function(require,module,exports){
'use strict';

module.exports = RegistrationPrice;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-price" component.
 * @constructor
 */
function RegistrationPrice() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationPrice.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationPrice.prototype.bind = function () {
    return {
        click: {
            '.tab-content__name': this._clickHandle
        }
    }
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationPrice.prototype.unbind = function () {

};

RegistrationPrice.prototype._clickHandle = function (obj) {
    var el = $(obj.target);
    if (!el.hasClass('tab-content__name'))
        el = el.parents('.tab-content__name');

    var parent = el.parents('.tab-content');
    if (parent.hasClass('tab-content_active'))
        return;
    $('.tab-content_active').removeClass('tab-content_active');
    parent.addClass('tab-content_active');
};

},{}],61:[function(require,module,exports){
'use strict';

module.exports = RegistrationWhyWe;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-why-we" component.
 * @constructor
 */
function RegistrationWhyWe() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationWhyWe.prototype.render = function () {
    return {
        count: {
            master: "1 000",
            masterName: "мастеров<br>на сайте",
            visits: "12 000",
            orders: "1 000"
        }
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationWhyWe.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationWhyWe.prototype.unbind = function () {

};

},{}],62:[function(require,module,exports){
'use strict';

module.exports = Catalog;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "catalog" component.
 * @constructor
 */
function Catalog() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Catalog.prototype.render = function () {
    return this.$context.getStoreData()
        .then(function (data) {
            return {
                rubrikator: data
            }
        });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Catalog.prototype.bind = function () {
    return {
        click: {
            '.js-rubrika-list': this._clickHandler,
            '.js-rubrika-collapsed': this._clickAllHandler
        }
    }
};

Catalog.prototype._clickHandler = function (obj) {
    var el = obj.target;
    $(el).parents('.rubrika-list').find('.rubrika-list__list').toggle();
}

Catalog.prototype._clickAllHandler = function (obj) {
    var el = obj.target;
    var self = $(el).parents('.js-rubrika-collapsed');

    var cl = 'master-rubrikator-page';
    var cl_col = cl + '_collapsed';
    var el = $('.master-rubrikator-page');

    if (el.hasClass(cl_col)) {
        el.removeClass(cl_col);
        $('.rubrika-list__list').show();
        self.find('.rubrika-list__name').html('Свернуть все рубрики')
            .end().find('.rubrika-list__icon').addClass('rubrika-list__icon_rotate');
    } else {
        el.addClass(cl_col);
        $('.rubrika-list__list').hide();
        self.find('.rubrika-list__name').html('Развернуть все рубрики')
            .end().find('.rubrika-list__icon').removeClass('rubrika-list__icon_rotate');
    }
}
/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Catalog.prototype.unbind = function () {

};



},{}],63:[function(require,module,exports){
'use strict';

module.exports = Search;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "search" component.
 * @constructor
 */
function Search() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Search.prototype.render = function () {
  return {
    modificator: this.$context.attributes.modificator,
    url: '',
    method: ''
  }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Search.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Search.prototype.unbind = function () {

};

},{}],64:[function(require,module,exports){
'use strict';

module.exports = ServiceRequest;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "service-request" component.
 * @constructor
 */
function ServiceRequest() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
ServiceRequest.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
ServiceRequest.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
ServiceRequest.prototype.unbind = function () {

};

},{}],65:[function(require,module,exports){
'use strict';

module.exports = Social;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "social" component.
 * @constructor
 */
function Social() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Social.prototype.render = function () {
  return [
    {
      url: 'http://vk.com/fm_mf',
      ico: 'vk'
    },
    {
      url: 'http://www.facebook.com/face.mast',
      ico: 'fb'
    },
    {
      url: 'http://www.odnoklassniki.ru/facemaster',
      ico: 'ok'
    },
    {
      url: 'http://twitter.com/FacemasterRu',
      ico: 'tw'
    }
  ];
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Social.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Social.prototype.unbind = function () {

};

},{}],66:[function(require,module,exports){
'use strict';

var PAGES = require("../config/pages.json");

module.exports = Breadcrumps;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "breadcrumps" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Breadcrumps($uhr) {
    this._uhr = $uhr;
    this.$context.setDependency('Pages');
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Breadcrumps.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Breadcrumps.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Breadcrumps.prototype.load = function () {
    var self = this;
    var brcrmp = [];
    return this.$context.getStoreData('Pages')
        .then(function (page) {
            if (page.current == "master-rubrika")
                return self._loadForRubrika();

            if (page.current == "news-item")
                return self._loadForNewsItem();

            brcrmp.push({
                title: PAGES[page.current].title
            });
            return brcrmp;
        });
};

Breadcrumps.prototype._loadForRubrika = function () {
    var self = this;
    return this.$context.getStoreData('Tag')
        .then(function (data) {
            var links;
            if (data.tag.unique) {
                links = self._getForTag(data);
            } else {
                links = self._getForRubrika(data);
            }
            return links;
        });
};

Breadcrumps.prototype._getForTag = function (data) {
    var links = this._getForRubAndTag(data);
    links.push({
        title: data.rubrika.name,
        url: '/' + data.rubrika.parent.unique + '/' + data.rubrika.unique
    });
    links.push({
        title: data.tag.name
    });
    return links;
};

Breadcrumps.prototype._getForRubrika = function (data) {
    var links = this._getForRubAndTag(data);
    links.push({
        title: data.rubrika.name
    });
    return links;
};

Breadcrumps.prototype._getForRubAndTag = function (data) {
    var podrubriks = data.rubrika.nearby;
    var linksPodrubriks = [];
    var links = [];

    Object.keys(podrubriks)
        .forEach(function (num) {
            linksPodrubriks.push({
                title: podrubriks[num].name,
                url: '/' + data.rubrika.parent.unique + '/' + podrubriks[num].unique
            });
        });

    links.push({
        title: "Каталог услуг",
        url: "/catalog"
    });

    links.push({
        title: data.rubrika.parent.name,
        url: "/" + data.rubrika.parent.unique,
        links: linksPodrubriks
    });
    return links;
};

Breadcrumps.prototype._loadForNewsItem = function () {
    var self = this;
    return this.$context.getStoreData('other/NewsItem')
        .then(function (data) {
            var links = [];
            links.push({
                title: "Новости",
                url: "/news"
            });
            links.push({
                title: data.title
            });
            return links;
        });
};
/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Breadcrumps.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{"../config/pages.json":86}],67:[function(require,module,exports){
'use strict';

var PAGES = require("../config/pages.json");

module.exports = Head;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "head" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Head($uhr) {
    this._uhr = $uhr;
    this.currentPage = "main";
    this.$context.setDependency('Pages');
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Head.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Head.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Head.prototype.load = function () {
    var self = this;
    return this.$context.getStoreData('Pages')
        .then(function (page) {
            if (page.current == "master-rubrika")
                return self._loadForRubrika();
            if (page.current == "news-item")
                return self._loadForNewsItem();

            var data = PAGES[page.current];
            return {
                //title: data.title + '. FaceMaster.ru. Специалисты Тольятти',
                //description: data.description,
                //keywords: data.keywords
            }
        });
};

Head.prototype._loadForRubrika = function () {
    return this.$context.getStoreData('Tag')
        .then(function (data) {
            return {
                title: data.currentSeo.headTitle,
                description: data.currentSeo.description,
                keywords: data.currentSeo.keywords
            }
        });
};

Head.prototype._loadForNewsItem = function () {
    return this.$context.getStoreData('other/NewsItem')
        .then(function (data) {
            return {
                title: data.title,
                description: data.preview,
                keywords: 'новость, facemaster'
            }
        });
};
/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Head.prototype.handleSetCurrentPage = function (page) {
    this.currentPage = page;
    this.$context.changed();
};

},{"../config/pages.json":86}],68:[function(require,module,exports){
'use strict';

var PAGES = require("../config/pages.json");

module.exports = Pages;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "Pages" store.
 * @param {Object} $config Application config.
 * @constructor
 */
function Pages($config) {
    this._config = $config;
    this.$context.setDependency('Tag');
}

/**
 * Current application config.
 * @type {Object}
 * @private
 */
Pages.prototype._config = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Pages.prototype.$lifetime = 3600000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Pages.prototype.load = function () {
    var self = this;
    var currentPage = self.$context.state.page;

    return Promise.resolve(1)
        .then(function () {
            if (currentPage == "master-rubrika")
                return self.$context.getStoreData('Tag');
            if (currentPage == "master-page")
                return self.$context.getStoreData('master/MasterItem');
            if (currentPage == "news-item")
                return self.$context.getStoreData('other/NewsItem');
            if (currentPage == "vacancy-item")
                return self.$context.getStoreData('other/VacancyItem');
        })
        .then(function () {
            if (!currentPage) {
                return self.$context.redirect('/main');
            }

            if (!PAGES.hasOwnProperty(currentPage)) {
                self.$context.notFound();
            }

            var result = {
                current: currentPage,
                isActive: {},

                header: self.getHeaderData(),
                footer: self.getFooterData()
            };
            Object.keys(PAGES)
                .forEach(function (page) {
                    result.isActive[page] = (currentPage === page);
                });
            return result;
        });
};

Pages.prototype.getHeaderData = function () {
    return {
        visitCount: '12 323 посещений',
        isGuest: true
    };
};

Pages.prototype.getFooterData = function () {
    return {
        phone: '(8482) 74-44-19'
    };
};
},{"../config/pages.json":86}],69:[function(require,module,exports){
'use strict';

module.exports = Paginator;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "Paginator" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Paginator($uhr) {
    this._uhr = $uhr;
    this._model;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Paginator.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Paginator.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Paginator.prototype.load = function () {
    if (!this._model)
        return null;
    var self = this;
    var currentPage = this.$context.state.currentPage || 1;

    return Promise.resolve(1)
        .then(function () {
            return self.$context.getStoreData(self._model);
        })
        .then(function () {
            return self.$context.sendAction(self._model, "getPaginator")
        })
        .then(function (data) {
            if (data['is-paginator'] == false)
                return data;
            var start = data.current - 4 < 0 ? 1 : data.current - 4;
            var end = start + 9 < data.count ? start + 9 : data.count;
            var list = [];
            for (var i = start; i <= end; ++i) {
                list.push({
                    "is-selected": (data.current == i),
                    "url": data.url + i,
                    "number": i
                });
            }

            return {
                model: self._model,
                "is-paginator": true,
                start: {
                    url: data.url + 1
                },
                end: {
                    url: data.url + data.count
                },
                list: list
            }
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Paginator.prototype.handleSetModel = function (model) {
    this._model = model;
};
Paginator.prototype.handleGetCurrentPage = function () {
    return this.$context.state.currentPage || 1;
}

},{}],70:[function(require,module,exports){
'use strict';

module.exports = Tag;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "tag" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Tag($uhr) {
    this._uhr = $uhr;
    this.$context.setDependency('rubrika/Rubrika');
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Tag.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Tag.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Tag.prototype.load = function () {
    var self = this;
    var section = this.$context.state.section || 'master';
    var tag = this.$context.state.tag || '';
    var data = {};

    return this.$context.getStoreData("rubrika/Rubrika")
        .then(function (rubrika) {
            data.rubrika = rubrika;
        })
        .then(function () {
            if (tag) {
                var path = 'http://api-fm.present-tlt.ru/tag';
                var option = {
                    data: {
                        filter: '[["=", "unique", "' + tag + '"]]',
                        expand: 'seo'
                    }
                };
                return self._uhr.get(path, option)
                    .then(function (result) {
                        if (result.status.code >= 400 && result.status.code < 600) {
                            throw new Error(result.status.text);
                        }
                        return result.content[0];
                    });
            }

            return {};
        })
        .then(function (tagData) {
            if (tag && tagData == {})
                self.$context.notFound();

            data.tag = tagData;
            data.section = section;
            data.currentSeo = tag ? self._getCurrentSeo(data.tag, data.section) : self._getCurrentSeo(data.rubrika, data.section);
            return data;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Tag.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

Tag.prototype._getCurrentSeo = function (data, section) {
    var result;
    var seo = data.seo;

    Object.keys(seo)
        .forEach(function (key) {
            if (section == seo[key].section)
                result = seo[key];
        });
    if (!result)
        return {
            headTitle: data.name,
            pageTitle: data.name
        };
    return result;
};
},{}],71:[function(require,module,exports){
'use strict';

var dateFormat = require('../../lib/util/DateFormat');

module.exports = MasterItem;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "master/MasterItem" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function MasterItem($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
MasterItem.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
MasterItem.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
MasterItem.prototype.load = function () {
    var self = this;
    var id = this.$context.state.item;
    if (!id)
        return;

    var now = Date.now();
    now = dateFormat(now, "yyyy-mm-dd");
    var path = 'http://api-fm.present-tlt.ru/master-page';
    var options = {
        data: {
            filter: '["and", ["=","number", "' + id + '"],["<=", "dateStart", "' + now + '"],[">=", "dateEnd", "' + now + '"]]'
        }
    };
    return this._uhr.get(path, options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            if (result.content.length == 0)
                self.$context.notFound();

            return result.content[0];
        })
        .then(function (page) {
            var pathM = 'http://api-fm.present-tlt.ru/master';
            var optionM = {
                data: {
                    filter: '["and", ["=", "id", "' + page.masterID + '"],["=","publicStatus", "1"]]',
                    expand: 'contacts,articles,comments,districts,albums,sales,schedule,videos,workCondition,callbacks,vkLikes,rubrika,tags,company'
                }
            };
            return self._uhr.get(pathM, optionM)
                .then(function (result) {
                    if (result.status.code >= 400 && result.status.code < 600) {
                        throw new Error(result.status.text);
                    }
                    if (result.content.length == 0)
                        self.$context.notFound();

                    var data = result.content[0];
                    data.services = JSON.parse(data.services);
                    data.isBlock = {
                        service: {
                            access: page.services,
                            name: "Услуги",
                            active: true
                        },
                        work: {
                            access: true,
                            name: "Условия работы",
                            active: true
                        },
                        sale: {
                            access: page.sales,
                            name: "Скидки и подарки",
                            active: (data.sales.length > 0)
                        },
                        about: {
                            access: true,
                            name: "О себе",
                            active: data.aboutEduc || data.aboutExp ||data.aboutAddInfo
                        },
                        article: {
                            access: page.articles,
                            name: "Полезно почитать",
                            active: (data.articles.length > 0)
                        },
                        photo: {
                            access: page.albums,
                            name: "Фото",
                            active: (data.albums.length > 0)
                        },
                        video: {
                            access: page.videos,
                            name: "Видео",
                            active: (data.videos.length > 0)
                        },
                        link: {
                            access: page.links,
                            name: "Ссылки",
                            active: (data.links)
                        },
                        review: {
                            access: page.comments,
                            name: "Отзывы и рекомендации",
                            active: true
                        }
                    };
                    data.page = page;
                    return data;
                });
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
MasterItem.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{"../../lib/util/DateFormat":88}],72:[function(require,module,exports){
'use strict';

module.exports = MasterList;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "master/masterList" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function MasterList($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
MasterList.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
MasterList.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
MasterList.prototype.load = function () {
    var podrubrika = this.$context.state.podrubrika;
    if (!podrubrika) {
        return;
    }
    return this._uhr.get(
            'http://localhost:3000/data-json/master.json'
        )
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            result.content.podrubrika = podrubrika;

            return result.content;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
MasterList.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{}],73:[function(require,module,exports){
'use strict';

module.exports = MasterSovety;

var util = require('util'),
		StorePaginator = require('../../lib/StorePaginator');

util.inherits(MasterSovety, StorePaginator);

function MasterSovety() {
	StorePaginator.call(this);
	this._path = 'http://api-fm.present-tlt.ru/article/active';
	this._options = {
		data: {
			order: 'id DESC'
		}
	};
	this._url = "/sovety/page/";
	this._catalog = this.$context.state.catalog;
	if (this._catalog) {
		this._options.data.filter = '[["=","rubrikaID","' + this._catalog + '"]]';
		this._url = "/sovety/catalog/" + this._catalog + "/page/";
	}
}
},{"../../lib/StorePaginator":87,"util":118}],74:[function(require,module,exports){
'use strict';

module.exports = MasterVideo;

var util = require('util'),
    StorePaginator = require('../../lib/StorePaginator');

util.inherits(MasterVideo, StorePaginator);

function MasterVideo() {
    StorePaginator.call(this);
    this._path = 'http://api-fm.present-tlt.ru/video/active';
    this._options = {
        data: {
            order: 'id DESC'
        }
    };
    this._url = "/video/page/";
    this._catalog = this.$context.state.catalog;
    if (this._catalog) {
        this._options.data.filter = '[["=","rubrikaID","' + this._catalog + '"]]';
        this._url = "/video/catalog/" + this._catalog + "/page/";
    }
}
},{"../../lib/StorePaginator":87,"util":118}],75:[function(require,module,exports){
'use strict';

module.exports = Recommended;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "master/Recommended" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Recommended($uhr) {
	this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Recommended.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Recommended.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Recommended.prototype.load = function () {
	// Here you can do any HTTP requests using this._uhr.
	// Please read details here https://github.com/catberry/catberry-uhr.
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Recommended.prototype.handleSomeAction = function () {
	// Here you can call this.$context.changed() if you know
	// that remote data source has been changed.
	// Also you can have many handle methods for other actions.
};

},{}],76:[function(require,module,exports){
'use strict';

module.exports = News;

var util = require('util'),
    StorePaginator = require('../../lib/StorePaginator');

util.inherits(News, StorePaginator);

function News() {
    StorePaginator.call(this);
    this._path = 'http://api-fm.present-tlt.ru/about-news';
    this._options = {
        data: {
            filter: '[["=","status","1"]]',
            order: 'date DESC'
        }
    };
    this._url = "/news/page/";
}
},{"../../lib/StorePaginator":87,"util":118}],77:[function(require,module,exports){
'use strict';

module.exports = NewsItem;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "other/NewsItem" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function NewsItem($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
NewsItem.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
NewsItem.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
NewsItem.prototype.load = function () {
    var self = this;
    var item = this.$context.state.item;
    var path = 'http://api-fm.present-tlt.ru/about-news';
    if (!item)
        return;

    var option = {
        data: {
            filter: '[["=","id","' + item + '"],["=", "status", "1"]]'
        }
    };
    return this._uhr.get(path, option)
        .then(function (result) {
            console.log(result);
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            if (result.content.length == 0)
                self.$context.notFound();

            return result.content[0];
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
NewsItem.prototype.handleSomeAction = function () {

    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{}],78:[function(require,module,exports){
'use strict';

module.exports = Recommendation;

var util = require('util'),
    StorePaginator = require('../../lib/StorePaginator');

util.inherits(Recommendation, StorePaginator);

function Recommendation() {
    StorePaginator.call(this);
    this._path = 'http://api-fm.present-tlt.ru/about-comment';
    this._url = "/recommendation/page/";
}
},{"../../lib/StorePaginator":87,"util":118}],79:[function(require,module,exports){
'use strict';
var dateFormat = require('../../lib/util/DateFormat');

module.exports = Vacancy;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "other/vacancy" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Vacancy($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Vacancy.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Vacancy.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Vacancy.prototype.load = function () {
    var path = 'http://api-fm.present-tlt.ru/about-vacancy';
    var now = Date.now();
    now = dateFormat(now, "yyyy-mm-dd");
    now = "2014-03-20"; //для теста - убрать!

    var option = {
        data: {
            filter: '["and",["<=","createDate","' + now + '"],[">=", "endDate", "' + now + '"],["=", "status", "1"]]'
        }
    };
    return this._uhr.get(path, option)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }

            return result.content;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Vacancy.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{"../../lib/util/DateFormat":88}],80:[function(require,module,exports){
'use strict';

var dateFormat = require('../../lib/util/DateFormat');

module.exports = VacancyItem;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "other/vacancyItem" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function VacancyItem($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
VacancyItem.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
VacancyItem.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
VacancyItem.prototype.load = function () {
    var self = this;
    var id = this.$context.state.item;
    if (!id)
        return;
    var path = 'http://api-fm.present-tlt.ru/about-vacancy';
    var now = Date.now();
    now = dateFormat(now, "yyyy-mm-dd");
    now = "2014-03-20"; //для теста - убрать!

    var option = {
        data: {
            filter: '["and",["=", "id", "' + id + '"],["<=","createDate","' + now + '"],[">=", "endDate", "' + now + '"],["=", "status", "1"]]'
        }
    };
    return this._uhr.get(path, option)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            if (result.content.length == 0)
                self.$context.notFound();
            console.log(result.content[0]);
            return result.content[0];
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
VacancyItem.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{"../../lib/util/DateFormat":88}],81:[function(require,module,exports){
'use strict';

module.exports = Rubrika;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "rubrika/Rubrika" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Rubrika($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Rubrika.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Rubrika.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Rubrika.prototype.load = function () {
    var self = this;
    var rubrika = this.$context.state.rubrika;
    var podrubrika = this.$context.state.podrubrika;

    if (!podrubrika) {
        self.$context.notFound();
    }

    var url = 'http://api-fm.present-tlt.ru/rubrika';
    var options = {
        data: {
            filter: '[["=", "unique", "' + podrubrika + '"]]',
            expand: "tags,parent,nearby,seo"
        }
    };
    return this._uhr.get(url, options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            if (result.content.length == 0)
                self.$context.notFound();

            var data = result.content[0];

            if (data.parentID == 0)
                self.$context.notFound();

            if (rubrika != data.parent.unique)
                self.$context.notFound();

            data.podrubrika = podrubrika;
            data.rubrika = rubrika;
            return data;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
},{}],82:[function(require,module,exports){
'use strict';

module.exports = Rubrikator;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "rubrika/Rubrikator" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Rubrikator($uhr) {
    this._uhr = $uhr;
    this._path = 'http://api-fm.present-tlt.ru/rubrika';
    this._options = {
        data: {
            filter: '[["=", "status", "1"]]',
            expand: 'masterCount',
            order: 'sort',
            limit: 200
        }
    };
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Rubrikator.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Rubrikator.prototype.$lifetime = 600000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */

Rubrikator.prototype.load = function () {
    return this._uhr.get(this._path, this._options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            var data = result.content;
            var podrubriksTree = {};
            var rootTree = {};
            var rootTreeCount = {};

            Object.keys(data)
                .forEach(function (key) {
                    var el = data[key];
                    if (el.parentID == 0) {
                        rootTree[el.sort] = {el: el};
                    } else {
                        if (!podrubriksTree[el.parentID])
                            podrubriksTree[el.parentID] = [];
                        podrubriksTree[el.parentID].push(el);
                        rootTreeCount[el.parentID] = +el.masterCount + (rootTreeCount[el.parentID] ? rootTreeCount[el.parentID] :  0);
                    }
                });

            Object.keys(rootTree)
                .forEach(function (key) {
                    podrubriksTree[rootTree[key].el.id].sort(function (a, b) {
                        return a.name > b.name;
                    });
                    rootTree[key].podrubriks = podrubriksTree[rootTree[key].el.id];
                    rootTree[key].count = rootTreeCount[rootTree[key].el.id];
                });
            return rootTree;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Rubrikator.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{}],83:[function(require,module,exports){
'use strict';

module.exports = RubrikatorCompany;

var util = require('util'),
		Rubrikator = require('./Rubrikator');

util.inherits(RubrikatorCompany, Rubrikator);

function RubrikatorCompany() {
	Rubrikator.call(this);
	this._path = 'http://api-fm.present-tlt.ru/rubrika-company';
	this._options = {
		data: {
			filter: '[["=", "status", "1"]]',
			order: 'sort',
			limit: 200
		}
	};
}
},{"./Rubrikator":82,"util":118}],84:[function(require,module,exports){
'use strict';

module.exports = RubrikatorParent;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "rubrika/RubrikatorParent" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function RubrikatorParent($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
RubrikatorParent.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
RubrikatorParent.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
RubrikatorParent.prototype.load = function () {
    var path = 'http://api-fm.present-tlt.ru/rubrika';
    var options = {
        data: {
            filter: '[["=", "parentID", "0"]]',
            order: 'name',
            limit: 200
        }
    };
    return this._uhr.get(path, options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            return result.content;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
RubrikatorParent.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{}],85:[function(require,module,exports){
module.exports={
	"title": "FaceMaster.ru",
	"isRelease": true
}

},{}],86:[function(require,module,exports){
module.exports={
  "main": {
    "title": "Поиск Мастеров в сфере услуг",
    "description": "Поиск Мастеров в сфере услуг",
    "keywords": "поиск услуг, мастера, специалисты Тольятти"
  },
  "catalog": {
    "title": "Каталог услуг",
    "description": "",
    "keywords": ""
  },
  "request": {
    "title": "Заказать услугу",
    "description": "",
    "keywords": ""
  },
  "registration": {
    "title": "Стать Мастером",
    "description": "",
    "keywords": ""
  },
  "login": {
    "title": "Вход для Мастеров",
    "description": "",
    "keywords": ""
  },
  "sale": {
    "title": " Каталог скидки и подарки",
    "description": "",
    "keywords": ""
  },
  "video": {
    "title": "Видео Мастеров",
    "description": "",
    "keywords": ""
  },
  "sovety": {
    "title": "Секреты мастеров",
    "description": "",
    "keywords": ""
  },
  "company": {
    "title": "Каталог компаний",
    "description": "",
    "keywords": ""
  },
  "recommendation": {
    "title": "Рекомендации Мастеров",
    "description": "Рекомендации Мастеров",
    "keywords": "отзывы, рекомендации"
  },
  "news": {
    "title": "Новости",
    "description": "",
    "keywords": ""
  },
  "vacancy": {
    "title": "Вакансии",
    "description": "",
    "keywords": ""
  },
  "oferta": {
    "title": "Оферта",
    "description": "",
    "keywords": ""
  },
  "contact": {
    "title": "Контакты",
    "description": "",
    "keywords": ""
  },
  "feedback": {
    "title": "Обратная связь",
    "description": "",
    "keywords": ""
  },
  "master-rubrika": {},
  "master-page": {},
  "news-item": {},
  "vacancy-item": {},
  "konkurs-item": {}
}
},{}],87:[function(require,module,exports){
'use strict';

module.exports = StorePaginator;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function StorePaginator() {
    this._uhr = this.$context.locator.resolve('uhr');
    this._pageCount = 1;
    this._currentPage = 1;
    this._path = '';
    this._options = {data: {}};
    this._url = '';

    this.$context.setDependency("Paginator");
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
StorePaginator.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
StorePaginator.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
StorePaginator.prototype.load = function () {
    var self = this;
    var path = this._path;

    return Promise.resolve(1)
        .then(function () {
            return self.$context.sendAction("Paginator", "getCurrentPage");
        })
        .then(function (page) {
            self._currentPage = page;
            self._options.data.page = page;
            return self._uhr.get(path, self._options)
        })
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }

            self._pageCount = result.status.headers['x-pagination-page-count'];
            return {
                currentPage: self._currentPage,
                data: result.content
            };
        });
};


StorePaginator.prototype.handleGetPaginator = function () {
    if (!this._pageCount || this._pageCount == 1) {
        return {
            "is-paginator": false
        }
    }
    return {
        "is-paginator": true,
        "url": this._url,
        "count": this._pageCount,
        "current": this._currentPage
    };
};
},{}],88:[function(require,module,exports){
/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
    var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad = function (val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = "0" + val;
            return val;
        };

    // Regexes and supporting functions are cached through closure
    return function (date, mask, utc) {
        var dF = dateFormat;

        // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
        if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
            mask = date;
            date = undefined;
        }

        // Passing date through Date applies Date.parse, if necessary
        date = date ? new Date(date) : new Date;
        if (isNaN(date)) throw SyntaxError("invalid date");

        mask = String(dF.masks[mask] || mask || dF.masks["default"]);

        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) == "UTC:") {
            mask = mask.slice(4);
            utc = true;
        }

        var	_ = utc ? "getUTC" : "get",
            d = date[_ + "Date"](),
            D = date[_ + "Day"](),
            m = date[_ + "Month"](),
            y = date[_ + "FullYear"](),
            H = date[_ + "Hours"](),
            M = date[_ + "Minutes"](),
            s = date[_ + "Seconds"](),
            L = date[_ + "Milliseconds"](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {
                d:    d,
                dd:   pad(d),
                ddd:  dF.i18n.dayNames[D],
                dddd: dF.i18n.dayNames[D + 7],
                m:    m + 1,
                mm:   pad(m + 1),
                mmm:  dF.i18n.monthNames[m],
                mmmm: dF.i18n.monthNames[m + 12],
                yy:   String(y).slice(2),
                yyyy: y,
                h:    H % 12 || 12,
                hh:   pad(H % 12 || 12),
                H:    H,
                HH:   pad(H),
                M:    M,
                MM:   pad(M),
                s:    s,
                ss:   pad(s),
                l:    pad(L, 3),
                L:    pad(L > 99 ? Math.round(L / 10) : L),
                t:    H < 12 ? "a"  : "p",
                tt:   H < 12 ? "am" : "pm",
                T:    H < 12 ? "A"  : "P",
                TT:   H < 12 ? "AM" : "PM",
                Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

        return mask.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
}();

// Some common format strings
dateFormat.masks = {
    "default":      "ddd mmm dd yyyy HH:MM:ss",
    shortDate:      "m/d/yy",
    mediumDate:     "mmm d, yyyy",
    longDate:       "mmmm d, yyyy",
    fullDate:       "dddd, mmmm d, yyyy",
    shortTime:      "h:MM TT",
    mediumTime:     "h:MM:ss TT",
    longTime:       "h:MM:ss TT Z",
    isoDate:        "yyyy-mm-dd",
    isoTime:        "HH:MM:ss",
    isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
    dayNames: [
        "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    ],
    monthNames: [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
        "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
    ]
};



module.exports = dateFormat;
},{}],89:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = Catberry;

var util = require('util'),
	CatberryBase = require('../lib/base/CatberryBase');

util.inherits(Catberry, CatberryBase);

/**
 * Creates new instance of the browser version of Catberry.
 * @constructor
 * @extends CatberryBase
 */
function Catberry() {
	CatberryBase.call(this);
}

/**
 * Current request router.
 * @type {RequestRouter}
 * @private
 */
Catberry.prototype._router = null;

/**
 * Wraps current HTML document with Catberry event handlers.
 */
Catberry.prototype.wrapDocument = function () {
	this._router = this.locator.resolve('requestRouter');
};

/**
 * Starts Catberry application when DOM is ready.
 * @returns {Promise} Promise for nothing.
 */
Catberry.prototype.startWhenReady = function () {
	if (window.catberry) {
		return Promise.resolve();
	}
	var self = this;

	return new Promise(function (fulfill) {
		window.document.addEventListener('DOMContentLoaded', function () {
			self.wrapDocument();
			window.catberry = self;
			fulfill();
		});
	});
};
},{"../lib/base/CatberryBase":103,"util":118}],90:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = CookieWrapper;

var util = require('util'),
	CookieWrapperBase = require('../lib/base/CookieWrapperBase');

util.inherits(CookieWrapper, CookieWrapperBase);

/**
 * Creates new instance of the browser cookie wrapper.
 * @param {Window} $window Window object.
 * @constructor
 */
function CookieWrapper($window) {
	CookieWrapperBase.call(this);
	this._window = $window;
}

/**
 * Current browser window.
 * @type {Window}
 * @private
 */
CookieWrapper.prototype._window = null;

/**
 * Gets current cookie string.
 * @returns {string} Cookie string.
 */
CookieWrapper.prototype.getCookieString = function () {
	return this._window.document.cookie ?
		this._window.document.cookie.toString() :
		'';
};

/**
 * Sets cookie to this wrapper.
 * @param {Object} cookieSetup Cookie setup object.
 * @param {string} cookieSetup.key Cookie key.
 * @param {string} cookieSetup.value Cookie value.
 * @param {number?} cookieSetup.maxAge Max cookie age in seconds.
 * @param {Date?} cookieSetup.expires Expire date.
 * @param {string?} cookieSetup.path URI path for cookie.
 * @param {string?} cookieSetup.domain Cookie domain.
 * @param {boolean?} cookieSetup.secure Is cookie secured.
 * @param {boolean?} cookieSetup.httpOnly Is cookie HTTP only.
 * @returns {string} Cookie setup string.
 */
CookieWrapper.prototype.set = function (cookieSetup) {
	var cookie = this._convertToCookieSetup(cookieSetup);
	this._window.document.cookie = cookie;
	return cookie;
};
},{"../lib/base/CookieWrapperBase":104,"util":118}],91:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = DocumentRenderer;

var util = require('util'),
	morphdom = require('morphdom'),
	errorHelper = require('../lib/helpers/errorHelper'),
	moduleHelper = require('../lib/helpers/moduleHelper'),
	hrTimeHelper = require('../lib/helpers/hrTimeHelper'),
	DocumentRendererBase = require('../lib/base/DocumentRendererBase');

util.inherits(DocumentRenderer, DocumentRendererBase);

var WARN_ID_NOT_SPECIFIED = 'Component "%s" does not have an ID, skipping...',
	WARN_SAME_ID =
		'The duplicated ID "%s" has been found, skipping component "%s"...';

var SPECIAL_IDS = {
		$$head: '$$head',
		$$document: '$$document'
	},
	TAG_NAMES = {
		TITLE: 'TITLE',
		HTML: 'HTML',
		HEAD: 'HEAD',
		BASE: 'BASE',
		STYLE: 'STYLE',
		SCRIPT: 'SCRIPT',
		NOSCRIPT: 'NOSCRIPT',
		META: 'META',
		LINK: 'LINK'
	},
	NODE_TYPES = {
		ELEMENT_NODE: 1,
		TEXT_NODE: 3,
		PROCESSING_INSTRUCTION_NODE: 7,
		COMMENT_NODE: 8
	},
	ERROR_CREATE_WRONG_ARGUMENTS = 'Tag name should be a string ' +
		'and attributes should be an object',
	ERROR_CREATE_WRONG_NAME = 'Component for tag "%s" not found',
	ERROR_CREATE_WRONG_ID = 'The ID is not specified or already used',
	// http://www.w3.org/TR/2015/WD-uievents-20150319/#event-types-list
	NON_BUBBLING_EVENTS = {
		abort: true,
		blur: true,
		error: true,
		focus: true,
		load: true,
		mouseenter: true,
		mouseleave: true,
		resize: true,
		unload: true
	};

/**
 * Creates new instance of the document renderer.
 * @param {ServiceLocator} $serviceLocator Locator to resolve dependencies.
 * @constructor
 * @extends DocumentRendererBase
 */
function DocumentRenderer($serviceLocator) {
	DocumentRendererBase.call(this, $serviceLocator);
	this._componentInstances = Object.create(null);
	this._componentElements = Object.create(null);
	this._componentBindings = Object.create(null);
	this._currentChangedStores = Object.create(null);
	this._window = $serviceLocator.resolve('window');
	this._logger = $serviceLocator.resolve('logger');
	this._config = $serviceLocator.resolve('config');
	this._storeDispatcher = $serviceLocator.resolve('storeDispatcher');

	var self = this;

	this._eventBus.on('storeChanged', function (storeName) {
		self._currentChangedStores[storeName] = true;
		if (self._isStateChanging) {
			return;
		}
		self._updateStoreComponents();
	});
}

/**
 * Current application config.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._config = null;

/**
 * Current logger.
 * @type {Logger}
 * @private
 */
DocumentRenderer.prototype._logger = null;

/**
 * Current store dispatcher.
 * @type {StoreDispatcher}
 * @protected
 */
DocumentRenderer.prototype._storeDispatcher = null;

/**
 * Current set of component instances by unique keys.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._componentInstances = null;

/**
 * Current set of component elements by unique keys.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._componentElements = null;

/**
 * Current set of component bindings by unique keys.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._componentBindings = null;

/**
 * Current routing context.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._currentRoutingContext = null;

/**
 * Current set of changed stores.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._currentChangedStores = null;

/**
 * Current promise for rendered page.
 * @type {Promise}
 * @private
 */
DocumentRenderer.prototype._renderedPromise = null;

/**
 * Current state of updating components.
 * @type {boolean}
 * @private
 */
DocumentRenderer.prototype._isUpdating = false;

/**
 * Current awaiting routing.
 * @type {{state: Object, routingContext: Object}}
 * @private
 */
DocumentRenderer.prototype._awaitingRouting = null;

/**
 * Sets the initial state of the application.
 * @param {Object} state New state of application.
 * @param {Object} routingContext Routing context.
 * @returns {Promise} Promise for nothing.
 */
DocumentRenderer.prototype.initWithState = function (state, routingContext) {
	var self = this;
	return self._getPromiseForReadyState()
		.then(function () {
			self._currentRoutingContext = routingContext;
			return self._storeDispatcher.setState(state, routingContext);
		})
		.then(function () {
			var components = self._componentLoader.getComponentsByNames(),
				elements = self._findComponents(
					self._window.document.body, components, true
				);
			elements.unshift(self._window.document.head);
			elements.unshift(self._window.document.documentElement);
			return self._initialWrap(components, elements);
		});
};

/**
 * Renders new state of application.
 * @param {Object} state New state of application.
 * @param {Object} routingContext Routing context.
 * @returns {Promise} Promise for nothing.
 */
DocumentRenderer.prototype.render = function (state, routingContext) {
	this._awaitingRouting = {
		state: state,
		routingContext: routingContext
	};
	if (this._isStateChanging) {
		return this._renderedPromise;
	}

	// we should set this flag to avoid "storeChanged"
	// event handling for now
	this._isStateChanging = true;

	var self = this;
	self._renderedPromise = this._getPromiseForReadyState()
		.then(function () {
			// and then we update all components of these stores in a batch.
			return self._updateStoreComponents();
		})
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
		})
		.then(function () {
			self._isStateChanging = false;
		});

	return this._renderedPromise;
};

/**
 * Renders component into HTML element.
 * @param {Element} element HTML element of component
 * @param {Object?} renderingContext Rendering context for group rendering.
 */
DocumentRenderer.prototype.renderComponent =
	function (element, renderingContext) {
		var self = this;
		return this._getPromiseForReadyState()
			.then(function () {
				var id = self._getId(element);
				if (!id) {
					self._logger.warn(
						util.format(WARN_ID_NOT_SPECIFIED, componentName)
					);
					return;
				}

				if (!renderingContext) {
					renderingContext = self._createRenderingContext([]);
					renderingContext.rootIds[id] = true;
				}

				var componentName = moduleHelper.getOriginalComponentName(
						element.tagName
					),
					hadChildren = element.hasChildNodes(),
					component = renderingContext.components[componentName],
					instance = self._componentInstances[id];

				if (!component) {
					return;
				}

				if (id in renderingContext.renderedIds) {
					self._logger.warn(
						util.format(WARN_SAME_ID, id, componentName)
					);
					return;
				}

				renderingContext.renderedIds[id] = true;

				if (!instance) {
					component.constructor.prototype.$context =
						self._getComponentContext(component, element);
					instance = self._serviceLocator.resolveInstance(
						component.constructor, renderingContext.config
					);
					instance.$context = component.constructor.prototype.$context;
					self._componentInstances[id] = instance;
				}

				var eventArgs = {
					name: componentName,
					context: instance.$context
				};

				self._componentElements[id] = element;

				var startTime = hrTimeHelper.get();
				self._eventBus.emit('componentRender', eventArgs);

				return Promise.resolve()
					.then(function () {
						// we need unbind the whole hierarchy only at
						// the beginning and not for new elements
						if (!(id in renderingContext.rootIds) ||
							!hadChildren) {
							return;
						}

						return self._unbindAll(element, renderingContext);
					})
					.catch(function (reason) {
						self._eventBus.emit('error', reason);
					})
					.then(function () {
						if (instance.$context.element !== element) {
							instance.$context = self._getComponentContext(
								component, element
							);
						}
						var renderMethod = moduleHelper.getMethodToInvoke(
							instance, 'render'
						);
						return moduleHelper.getSafePromise(renderMethod);
					})
					.then(function (dataContext) {
						return component.template.render(dataContext);
					})
					.catch(function (reason) {
						return self._handleRenderError(
							element, component, reason
						);
					})
					.then(function (html) {
						var isHead = element.tagName === TAG_NAMES.HEAD;
						if (html === '' && isHead) {
							return;
						}
						var tmpElement = self._createTemporaryElement(element);
						tmpElement.innerHTML = html;

						if (isHead) {
							self._mergeHead(element, tmpElement);
							return;
						}

						morphdom(element, tmpElement, {
							onBeforeMorphElChildren: function (foundElement) {
								return foundElement === element ||
									!self._isComponent(
										renderingContext.components,
										foundElement
									);
							}
						});

						var promises = self._findComponents(
							element, renderingContext.components, false
						)
							.map(function (innerComponent) {
								return self.renderComponent(
									innerComponent, renderingContext
								);
							});
						return Promise.all(promises);
					})
					.then(function () {
						eventArgs.hrTime = hrTimeHelper.get(startTime);
						eventArgs.time = hrTimeHelper.toMilliseconds(
							eventArgs.hrTime
						);
						self._eventBus.emit('componentRendered', eventArgs);
						return self._bindComponent(element);
					})
					.then(function () {
						// collecting garbage only when
						// the entire rendering is finished
						if (!(id in renderingContext.rootIds) ||
							!hadChildren) {
							return;
						}
						self._collectRenderingGarbage(renderingContext);
					})
					.catch(function (reason) {
						self._eventBus.emit('error', reason);
					});
			});
	};

/**
 * Gets component instance by ID.
 * @param {string} id Component ID.
 * @returns {Object|null} Component instance.
 */
DocumentRenderer.prototype.getComponentById = function (id) {
	return this._componentInstances[id] || null;
};

/**
 * Gets component instance by a DOM element.
 * @param {Element} element Component's Element.
 * @returns {Object|null} Component instance.
 */
DocumentRenderer.prototype.getComponentByElement = function (element) {
	if (!element) {
		return null;
	}
	var id = element.getAttribute(moduleHelper.ATTRIBUTE_ID);
	return this.getComponentById(id);
};

/**
 * Checks that every instance of component has element on the page and
 * removes all references to components removed from DOM.
 * @returns {Promise} Promise for nothing.
 */
DocumentRenderer.prototype.collectGarbage = function () {
	var self = this;
	return this._getPromiseForReadyState()
		.then(function () {
			var promises = [];
			Object.keys(self._componentElements)
				.forEach(function (id) {
					if (SPECIAL_IDS.hasOwnProperty(id)) {
						return;
					}
					var element = self._window.document.getElementById(id);
					if (element) {
						return;
					}

					var promise = self._unbindComponent(self._componentElements[id])
						.then(function () {
							self._removeComponent(id);
						});
					promises.push(promise);
				});
			return Promise.all(promises);
		});
};

/**
 * Creates and renders component element.
 * @param {string} tagName Name of HTML tag.
 * @param {Object} attributes Element attributes.
 * @returns {Promise<Element>} Promise for HTML element with rendered component.
 */
DocumentRenderer.prototype.createComponent = function (tagName, attributes) {
	if (typeof (tagName) !== 'string' || !attributes ||
		typeof (attributes) !== 'object') {
		return Promise.reject(
			new Error(ERROR_CREATE_WRONG_ARGUMENTS)
		);
	}

	var self = this;
	return this._getPromiseForReadyState()
		.then(function () {
			var components = self._componentLoader.getComponentsByNames(),
				componentName = moduleHelper.getOriginalComponentName(tagName);

			if (moduleHelper.isHeadComponent(componentName) ||
				moduleHelper.isDocumentComponent(componentName) ||
				!(componentName in components)) {
				return Promise.reject(
					new Error(util.format(ERROR_CREATE_WRONG_NAME, tagName))
				);
			}

			var safeTagName = moduleHelper.getTagNameForComponentName(componentName);

			var id = attributes[moduleHelper.ATTRIBUTE_ID];
			if (!id || id in self._componentInstances) {
				return Promise.reject(new Error(ERROR_CREATE_WRONG_ID));
			}

			var element = self._window.document.createElement(safeTagName);
			Object.keys(attributes)
				.forEach(function (attributeName) {
					element.setAttribute(attributeName, attributes[attributeName]);
				});

			return self.renderComponent(element)
				.then(function () {
					return element;
				});
		});
};

/**
 * Clears all references to removed components during rendering process.
 * @param {Object} renderingContext Context of rendering.
 * @private
 */
DocumentRenderer.prototype._collectRenderingGarbage =
	function (renderingContext) {
		var self = this;
		Object.keys(renderingContext.unboundIds)
			.forEach(function (id) {
				// this component has been rendered again and we do not need to
				// remove it.
				if (id in renderingContext.renderedIds) {
					return;
				}

				// if someone added an element with the same ID during the
				// rendering process
				if (self._window.document.getElementById(id) !== null) {
					return;
				}

				self._removeComponent(id);
			});
	};

/**
 * Unbinds all event handlers from specified component and all it's descendants.
 * @param {Element} element Component HTML element.
 * @param {Object} renderingContext Context of rendering.
 * @returns {Promise} Promise for nothing.
 * @private
 */
DocumentRenderer.prototype._unbindAll = function (element, renderingContext) {
	var self = this,
		rootId = this._getId(element),
		promises = [];

	self._findComponents(element, renderingContext.components, true)
		.forEach(function (innerElement) {
			var id = self._getId(innerElement);
			renderingContext.unboundIds[id] = true;
			promises.push(self._unbindComponent(innerElement));
		});

	renderingContext.unboundIds[rootId] = true;
	promises.push(this._unbindComponent(element));

	return Promise.all(promises);
};

/**
 * Unbinds all event handlers from specified component.
 * @param {Element} element Component HTML element.
 * @returns {Promise} Promise for nothing.
 * @private
 */
DocumentRenderer.prototype._unbindComponent = function (element) {
	var id = this._getId(element),
		self = this,
		instance = this._componentInstances[id];
	if (!instance) {
		return Promise.resolve();
	}
	if (id in this._componentBindings) {
		Object.keys(this._componentBindings[id])
			.forEach(function (eventName) {
				element.removeEventListener(
					eventName,
					self._componentBindings[id][eventName].handler,
					NON_BUBBLING_EVENTS.hasOwnProperty(eventName)
				);
			});
		delete this._componentBindings[id];
	}
	var unbindMethod = moduleHelper.getMethodToInvoke(instance, 'unbind');
	return moduleHelper.getSafePromise(unbindMethod)
		.then(function () {
			self._eventBus.emit('componentUnbound', {
				element: element,
				id: !SPECIAL_IDS.hasOwnProperty(id) ? id : null
			});
		})
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
		});
};

/**
 * Removes component from the list.
 * @param {string} id Component's ID
 * @private
 */
DocumentRenderer.prototype._removeComponent = function (id) {
	delete this._componentElements[id];
	delete this._componentInstances[id];
	delete this._componentBindings[id];
};

/**
 * Binds all required event handlers to component.
 * @param {Element} element Component HTML element.
 * @returns {Promise} Promise for nothing.
 * @private
 */
DocumentRenderer.prototype._bindComponent = function (element) {
	var id = this._getId(element),
		self = this,
		instance = this._componentInstances[id];
	if (!instance) {
		return Promise.resolve();
	}

	var bindMethod = moduleHelper.getMethodToInvoke(instance, 'bind');
	return moduleHelper.getSafePromise(bindMethod)
		.then(function (bindings) {
			if (!bindings || typeof (bindings) !== 'object') {
				self._eventBus.emit('componentBound', {
					element: element,
					id: !SPECIAL_IDS.hasOwnProperty(id) ? id : null
				});
				return;
			}
			self._componentBindings[id] = Object.create(null);
			Object.keys(bindings)
				.forEach(function (eventName) {
					eventName = eventName.toLowerCase();
					if (eventName in self._componentBindings[id]) {
						return;
					}
					var selectorHandlers = Object.create(null);
					Object.keys(bindings[eventName])
						.forEach(function (selector) {
							var handler = bindings[eventName][selector];
							if (typeof (handler) !== 'function') {
								return;
							}
							selectorHandlers[selector] = handler.bind(instance);
						});
					self._componentBindings[id][eventName] = {
						handler: self._createBindingHandler(
							element, selectorHandlers
						),
						selectorHandlers: selectorHandlers
					};
					element.addEventListener(
						eventName,
						self._componentBindings[id][eventName].handler,
						NON_BUBBLING_EVENTS.hasOwnProperty(eventName)
					);
				});
			self._eventBus.emit('componentBound', {
				element: element,
				id: id
			});
		});
};

/**
 * Creates universal event handler for delegated events.
 * @param {Element} componentRoot Root element of component.
 * @param {Object} selectorHandlers Map of event handlers by CSS selectors.
 * @returns {Function} Universal event handler for delegated events.
 * @private
 */
DocumentRenderer.prototype._createBindingHandler =
	function (componentRoot, selectorHandlers) {
		var selectors = Object.keys(selectorHandlers);
		return function (event) {
			var dispatchedEvent = createCustomEvent(event, function () {
					return element;
				}),
				element = event.target,
				targetMatches = getMatchesMethod(element),
				isHandled = selectors.some(function (selector) {
					if (targetMatches(selector)) {
						selectorHandlers[selector](dispatchedEvent);
						return true;
					}
					return false;
				});
			if (isHandled || !event.bubbles) {
				return;
			}

			while (element.parentElement && element !== componentRoot) {
				element = element.parentElement;
				targetMatches = getMatchesMethod(element);
				for (var i = 0; i < selectors.length; i++) {
					if (!targetMatches(selectors[i])) {
						continue;
					}
					isHandled = true;
					selectorHandlers[selectors[i]](dispatchedEvent);
					break;
				}

				if (isHandled) {
					break;
				}
			}
		};
	};

/**
 * Checks if the element is a component.
 * @param {Object} components Current components.
 * @param {Element} element DOM element.
 * @private
 */
DocumentRenderer.prototype._isComponent = function (components, element) {
	var currentNodeName = element.nodeName;
	return moduleHelper.COMPONENT_PREFIX_REGEXP.test(currentNodeName) &&
		(moduleHelper.getOriginalComponentName(currentNodeName) in components);
};

/**
 * Finds all descendant components of specified component element.
 * @param {Element} element Root component HTML element to begin search with.
 * @param {Object} components Map of components by names.
 * @param {boolean} goInComponents Go inside nested components.
 * @private
 */
DocumentRenderer.prototype._findComponents =
	function (element, components, goInComponents) {
		var elements = [],
			queue = [element],
			currentChildren, i;

		while (queue.length > 0) {
			currentChildren = queue.shift().childNodes;
			for (i = 0; i < currentChildren.length; i++) {
				// we need only Element nodes
				if (currentChildren[i].nodeType !== 1) {
					continue;
				}

				// and they should be components
				if (!this._isComponent(components, currentChildren[i])) {
					queue.push(currentChildren[i]);
					continue;
				}

				if (goInComponents) {
					queue.push(currentChildren[i]);
				}
				elements.push(currentChildren[i]);
			}
		}

		return elements;
	};

/**
 * Handles error while rendering.
 * @param {Element} element Component HTML element.
 * @param {Object} component Component instance.
 * @param {Error} error Error to handle.
 * @returns {Promise<string>} Promise for HTML string.
 * @private
 */
DocumentRenderer.prototype._handleRenderError =
	function (element, component, error) {
		this._eventBus.emit('error', error);

		// do not corrupt existed HEAD when error occurs
		if (element.tagName === TAG_NAMES.HEAD) {
			return Promise.resolve('');
		}

		if (!this._config.isRelease && error instanceof Error) {
			return Promise.resolve(errorHelper.prettyPrint(
				error, this._window.navigator.userAgent
			));
		} else if (component.errorTemplate) {
			return component.errorTemplate.render(error);
		}

		return Promise.resolve('');
	};

/**
 * Updates all components that depend on current set of changed stores.
 * @returns {Promise} Promise for nothing.
 * @private
 */
DocumentRenderer.prototype._updateStoreComponents = function () {
	if (this._isUpdating) {
		return Promise.resolve();
	}

	var self = this;

	// if document component is changed we should reload the page
	var documentStore = this._window.document.documentElement.getAttribute(
		moduleHelper.ATTRIBUTE_STORE
	);
	if (documentStore in this._currentChangedStores) {
		var newLocation = this._currentRoutingContext.location.toString();
		if (newLocation === this._window.location.toString()) {
			this._window.location.reload();
			return Promise.resolve();
		}
		this._window.location.assign(newLocation);
		return Promise.resolve();
	}

	this._isUpdating = true;

	// if we have awaiting routing we should apply state to the stores
	if (this._awaitingRouting) {
		var components = this._componentLoader.getComponentsByNames(),
			changedByState = this._storeDispatcher.setState(
				this._awaitingRouting.state,
				this._awaitingRouting.routingContext
			);

		changedByState.forEach(function (name) {
			self._currentChangedStores[name] = true;
		});

		// we should update contexts of the stores with the new routing context
		this._currentRoutingContext = this._awaitingRouting.routingContext;
		Object.keys(this._componentInstances)
			.forEach(function (id) {
				var instance = self._componentInstances[id];
				instance.$context = self._getComponentContext(
					components[instance.$context.name],
					instance.$context.element
				);
			});
		this._awaitingRouting = null;
	}

	var changedStores = Object.keys(this._currentChangedStores);
	if (changedStores.length === 0) {
		this._isUpdating = false;
		return Promise.resolve();
	}

	this._currentChangedStores = Object.create(null);

	var renderingContext = this._createRenderingContext(changedStores),
		promises = renderingContext.roots.map(function (root) {
			renderingContext.rootIds[self._getId(root)] = true;
			return self.renderComponent(root, renderingContext);
		});

	return Promise.all(promises)
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
		})
		.then(function () {
			self._isUpdating = false;
			self._eventBus.emit('documentUpdated', changedStores);
			return self._updateStoreComponents();
		});
};

/**
 * Merges new and existed head elements and change only difference.
 * @param {Element} head HEAD DOM element.
 * @param {Element} newHead New head element.
 * @private
 */
/*jshint maxcomplexity:false */
DocumentRenderer.prototype._mergeHead = function (head, newHead) {
	if (!newHead) {
		return;
	}
	var self = this;

	var map = this._getHeadMap(head.childNodes),
		current, i, key, oldKey, oldItem,
		sameMetaElements = Object.create(null);

	for (i = 0; i < newHead.childNodes.length; i++) {
		current = newHead.childNodes[i];

		if (!(current.nodeName in map)) {
			map[current.nodeName] = Object.create(null);
		}

		switch (current.nodeName) {
			// these elements can be only replaced
			case TAG_NAMES.TITLE:
			case TAG_NAMES.BASE:
			case TAG_NAMES.NOSCRIPT:
				key = this._getNodeKey(current);
				oldItem = head.getElementsByTagName(current.nodeName)[0];
				if (oldItem) {
					oldKey = this._getNodeKey(oldItem);
					head.replaceChild(current, oldItem);
				} else {
					head.appendChild(current);
				}
				// when we do replace or append current is removed from newHead
				// therefore we need to decrement index
				i--;
				break;

			// these elements can not be deleted from head
			// therefore we just add new elements that differs from existed
			case TAG_NAMES.STYLE:
			case TAG_NAMES.LINK:
			case TAG_NAMES.SCRIPT:
				key = self._getNodeKey(current);
				if (!(key in map[current.nodeName])) {
					head.appendChild(current);
					i--;
				}
				break;
			// meta and other elements can be deleted
			// but we should not delete and append same elements
			default:
				key = self._getNodeKey(current);
				if (key in map[current.nodeName]) {
					sameMetaElements[key] = true;
				} else {
					head.appendChild(current);
					i--;
				}
				break;
		}
	}

	if (TAG_NAMES.META in map) {
		// remove meta tags which a not in a new head state
		Object.keys(map[TAG_NAMES.META])
			.forEach(function (metaKey) {
				if (metaKey in sameMetaElements) {
					return;
				}

				head.removeChild(map[TAG_NAMES.META][metaKey]);
			});
	}
};

/**
 * Gets map of all HEAD's elements.
 * @param {NodeList} headChildren Head children DOM nodes.
 * @returns {Object} Map of HEAD elements.
 * @private
 */
DocumentRenderer.prototype._getHeadMap = function (headChildren) {
	// Create map of <meta>, <link>, <style> and <script> tags
	// by unique keys that contain attributes and content
	var map = Object.create(null),
		i, current,
		self = this;

	for (i = 0; i < headChildren.length; i++) {
		current = headChildren[i];
		if (!(current.nodeName in map)) {
			map[current.nodeName] = Object.create(null);
		}
		map[current.nodeName][self._getNodeKey(current)] = current;
	}
	return map;
};

/**
 * Gets unique element key using element's attributes and its content.
 * @param {Node} node HTML element.
 * @returns {string} Unique key for element.
 * @private
 */
DocumentRenderer.prototype._getNodeKey = function (node) {
	var current, i,
		attributes = [];

	if (node.nodeType !== NODE_TYPES.ELEMENT_NODE) {
		return node.nodeValue || '';
	}

	if (node.hasAttributes()) {
		for (i = 0; i < node.attributes.length; i++) {
			current = node.attributes[i];
			attributes.push(current.name + '=' + current.value);
		}
	}

	return attributes
			.sort()
			.join('|') + '>' + node.textContent;
};

/**
 * Does initial wrapping for every component on the page.
 * @param {Array} components Current components list.
 * @param {Array} element Elements list.
 * @private
 */
DocumentRenderer.prototype._initialWrap = function (components, elements) {
	var self = this,
		current = elements.pop();

	return Promise.resolve()
		.then(function () {
			var id = self._getId(current);
			if (!id) {
				return;
			}

			var componentName = moduleHelper.getOriginalComponentName(
					current.nodeName
				);
			if (!(componentName in components)) {
				return;
			}
			var constructor = components[componentName].constructor;
			constructor.prototype.$context = self._getComponentContext(
				components[componentName], current
			);

			var instance = self._serviceLocator.resolveInstance(
				constructor, self._config
			);
			instance.$context = constructor.prototype.$context;
			self._componentElements[id] = current;
			self._componentInstances[id] = instance;
			// initialize the store of the component
			self._storeDispatcher.getStore(
				current.getAttribute(moduleHelper.ATTRIBUTE_STORE)
			);
			self._eventBus.emit('componentRendered', {
				name: componentName,
				attributes: instance.$context.attributes,
				context: instance.$context
			});
			return self._bindComponent(current);
		})
		.then(function () {
			if (elements.length > 0) {
				return self._initialWrap(components, elements);
			}

			self._eventBus.emit(
				'documentRendered', self._currentRoutingContext
			);
		});
};

/**
 * Gets component context using basic context.
 * @param {Object} component Component details.
 * @param {Element} element DOM element of component.
 * @returns {Object} Component context.
 * @private
 */
DocumentRenderer.prototype._getComponentContext =
	function (component, element) {
		var self = this,
			storeName = element.getAttribute(moduleHelper.ATTRIBUTE_STORE),
			componentContext = Object.create(this._currentRoutingContext);

		// initialize the store of the component
		this._storeDispatcher.getStore(storeName);

		Object.defineProperties(componentContext, {
			name: {
				get: function () {
					return component.name;
				},
				enumerable: true
			},
			attributes: {
				get: function () {
					return attributesToObject(element.attributes);
				},
				enumerable: true
			}
		});

		componentContext.element = element;
		componentContext.getComponentById = function (id) {
			return self.getComponentById(id);
		};
		componentContext.getComponentByElement = function (element) {
			return self.getComponentByElement(element);
		};
		componentContext.createComponent = function (tagName, attributes) {
			return self.createComponent(tagName, attributes);
		};
		componentContext.collectGarbage = function () {
			return self.collectGarbage();
		};
		componentContext.getStoreData = function () {
			var currentStoreName = element
				.getAttribute(moduleHelper.ATTRIBUTE_STORE);
			return self._storeDispatcher
				.getStoreData(currentStoreName);
		};
		componentContext.sendAction = function (name, args) {
			var currentStoreName = element
				.getAttribute(moduleHelper.ATTRIBUTE_STORE);
			return self._storeDispatcher
				.sendAction(currentStoreName, name, args);
		};
		componentContext.sendBroadcastAction = function (name, args) {
			return self._storeDispatcher
				.sendBroadcastAction(name, args);
		};

		return Object.freeze(componentContext);
	};

/**
 * Finds all rendering roots on page for all changed stores.
 * @param {Array} changedStoreNames List of store names which has been changed.
 * @returns {Array<Element>} HTML elements that are rendering roots.
 * @private
 */
DocumentRenderer.prototype._findRenderingRoots = function (changedStoreNames) {
	var self = this,
		headStore = this._window.document.head.getAttribute(
			moduleHelper.ATTRIBUTE_STORE
		),
		components = this._componentLoader.getComponentsByNames(),
		componentsElements = Object.create(null),
		storeNamesSet = Object.create(null),
		rootsSet = Object.create(null),
		roots = [];

	// we should find all components and then looking for roots
	changedStoreNames
		.forEach(function (storeName) {
			storeNamesSet[storeName] = true;
			componentsElements[storeName] = self._window.document
				.querySelectorAll(
					'[' +
					moduleHelper.ATTRIBUTE_ID +
					']' +
					'[' +
					moduleHelper.ATTRIBUTE_STORE +
					'="' +
					storeName +
					'"]'
				);
		});

	if (moduleHelper.HEAD_COMPONENT_NAME in components &&
		headStore in storeNamesSet) {
		rootsSet[this._getId(this._window.document.head)] = true;
		roots.push(this._window.document.head);
	}

	changedStoreNames
		.forEach(function (storeName) {
			var current, currentId,
				lastRoot, lastRootId,
				currentStore, currentComponentName;

			for (var i = 0; i < componentsElements[storeName].length; i++) {
				current = componentsElements[storeName][i];
				currentId = componentsElements[storeName][i]
					.getAttribute(moduleHelper.ATTRIBUTE_ID);
				lastRoot = current;
				lastRootId = currentId;
				currentComponentName = moduleHelper.getOriginalComponentName(
					current.tagName
				);

				while (current.parentElement) {
					current = current.parentElement;
					currentId = self._getId(current);
					currentStore = current.getAttribute(
						moduleHelper.ATTRIBUTE_STORE
					);

					// store did not change state
					if (!currentStore || !(currentStore in storeNamesSet)) {
						continue;
					}

					// is not an active component
					if (!(currentComponentName in components)) {
						continue;
					}

					lastRoot = current;
					lastRootId = currentId;
				}
				if (lastRootId in rootsSet) {
					continue;
				}
				rootsSet[lastRootId] = true;
				roots.push(lastRoot);
			}
		});

	return roots;
};

/**
 * Creates rendering context.
 * @param {Array?} changedStores Names of changed stores.
 * @returns {{
 *   config: Object,
 *   renderedIds: {},
 *   unboundIds: {},
 *   isHeadRendered: boolean,
 *   bindMethods: Array,
 *   routingContext: Object,
 *   components: Object,
 *   roots: Array.<Element>
 * }} The context object.
 * @private
 */
DocumentRenderer.prototype._createRenderingContext = function (changedStores) {
	var components = this._componentLoader.getComponentsByNames();

	return {
		config: this._config,
		renderedIds: Object.create(null),
		unboundIds: Object.create(null),
		isHeadRendered: false,
		bindMethods: [],
		routingContext: this._currentRoutingContext,
		components: components,
		rootIds: Object.create(null),
		roots: changedStores ? this._findRenderingRoots(changedStores) : []
	};
};

/**
 * Gets ID of the element.
 * @param {Element} element HTML element of component.
 * @returns {string} ID.
 */
DocumentRenderer.prototype._getId = function (element) {
	if (element === this._window.document.documentElement) {
		return SPECIAL_IDS.$$document;
	}
	if (element === this._window.document.head) {
		return SPECIAL_IDS.$$head;
	}
	return element.getAttribute(moduleHelper.ATTRIBUTE_ID);
};

/**
 * Creates temporary clone of the element.
 * @param {Element} element DOM element.
 * @returns {Element} clone.
 * @private
 */
DocumentRenderer.prototype._createTemporaryElement = function (element) {
	var tmp = this._window.document.createElement(element.tagName),
		attributes = element.attributes;
	for (var i = 0; i < attributes.length; i++) {
		tmp.setAttribute(attributes[i].name, attributes[i].value);
	}
	return tmp;
};

/**
 * Converts NamedNodeMap of Attr items to key-value object map.
 * @param {NamedNodeMap} attributes List of Element attributes.
 * @returns {Object} Map of attribute values by names.
 */
function attributesToObject(attributes) {
	var result = Object.create(null);
	for (var i = 0; i < attributes.length; i++) {
		result[attributes[i].name] = attributes[i].value;
	}
	return result;
}

/**
 * Gets cross-browser "matches" method for the element.
 * @param {Element} element HTML element.
 * @returns {Function} "matches" method.
 */
function getMatchesMethod(element) {
	var method = (element.matches ||
		element.webkitMatchesSelector ||
		element.mozMatchesSelector ||
		element.oMatchesSelector ||
		element.msMatchesSelector);

	return method.bind(element);
}

/**
 * Creates imitation of original Event object but with specified currentTarget.
 * @param {Event} event Original event object.
 * @param {Function} currentTargetGetter Getter for currentTarget.
 * @returns {Event} Wrapped event.
 */
function createCustomEvent(event, currentTargetGetter) {
	var catEvent = Object.create(event),
		keys = [],
		properties = {};
	for (var key in event) {
		keys.push(key);
	}
	keys.forEach(function (key) {
		if (typeof (event[key]) === 'function') {
			properties[key] = {
				get: function () {
					return event[key].bind(event);
				}
			};
			return;
		}

		properties[key] = {
			get: function () {
				return event[key];
			},
			set: function (value) {
				event[key] = value;
			}
		};
	});

	properties.currentTarget = {
		get: currentTargetGetter
	};
	Object.defineProperties(catEvent, properties);
	Object.seal(catEvent);
	Object.freeze(catEvent);
	return catEvent;
}
},{"../lib/base/DocumentRendererBase":105,"../lib/helpers/errorHelper":108,"../lib/helpers/hrTimeHelper":94,"../lib/helpers/moduleHelper":109,"morphdom":130,"util":118}],92:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = Logger;

var LEVELS = {
	DEBUG: 'debug',
	TRACE: 'trace',
	INFO: 'info',
	WARN: 'warn',
	ERROR: 'error',
	FATAL: 'fatal'
};

/**
 * Creates browser logger.
 * @param {Object|string} levels Levels to log.
 * @constructor
 */
function Logger(levels) {
	if (typeof (levels) === 'object') {
		this._levels = levels;
	}

	if (typeof (levels) === 'string') {
		this._levels = {};
		Object.keys(LEVELS)
			.forEach(function (level) {
				this._levels[LEVELS[level]] =
					(levels.search(LEVELS[level]) !== -1);
			}, this);
	}

	this.debug = this.debug.bind(this);
	this.trace = this.trace.bind(this);
	this.info = this.info.bind(this);
	this.warn = this.warn.bind(this);
	this.error = this.error.bind(this);
	this.fatal = this.fatal.bind(this);
}

/**
 * Current levels of logging.
 * @type {Object}
 * @private
 */
Logger.prototype._levels = {
	debug: true,
	trace: true,
	info: true,
	warn: true,
	error: true,
	fatal: true
};

/**
 * Logs trace message.
 * @param {string} message Trace message.
 */
Logger.prototype.trace = function (message) {
	if (!this._levels.trace) {
		return;
	}

	if (console.log) {
		console.log(message);
	}
};

/**
 * Logs trace message.
 * @param {string} message Trace message.
 */
Logger.prototype.debug = function (message) {
	if (!this._levels.debug) {
		return;
	}

	if (console.log) {
		console.log(message);
	}
};

/**
 * Logs info message.
 * @param {string} message Information message.
 */
Logger.prototype.info = function (message) {
	if (!this._levels.info) {
		return;
	}

	if (console.info) {
		console.info(message);
	}
};

/**
 * Logs warn message.
 * @param {string} message Warning message.
 */
Logger.prototype.warn = function (message) {
	if (!this._levels.warn) {
		return;
	}

	if (console.warn) {
		console.warn(message);
	}
};
/**
 * Logs error message.
 * @param {string|Error} error Error object or message.
 */
Logger.prototype.error = function (error) {
	if (!this._levels.error) {
		return;
	}

	writeError(error);
};

/**
 * Logs error message.
 * @param {string|Error} error Error object or message.
 */
Logger.prototype.fatal = function (error) {
	if (!this._levels.fatal) {
		return;
	}
	writeError(error);
};

/**
 * Writes error to console.
 * @param {Error|string} error Error to write.
 */
function writeError(error) {
	try {
		if (!(error instanceof Error)) {
			error = typeof (error) === 'string' ? new Error(error) : new Error();
		}
		if (console.error) {
			console.error(error);
		}
	} catch (e) {
		writeError(e);
	}
}
},{}],93:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = RequestRouter;

var util = require('util'),
	URI = require('catberry-uri').URI;

var MOUSE_PRIMARY_KEY = 0,
	HREF_ATTRIBUTE_NAME = 'href',
	TARGET_ATTRIBUTE_NAME = 'target',
	A_TAG_NAME = 'A',
	BODY_TAG_NAME = 'BODY';

/**
 * Creates new instance of the browser request router.
 * @param {ServiceLocator} $serviceLocator Service locator to resolve services.
 * @constructor
 */
function RequestRouter($serviceLocator) {
	this._eventBus = $serviceLocator.resolve('eventBus');
	this._window = $serviceLocator.resolve('window');
	this._documentRenderer = $serviceLocator.resolve('documentRenderer');
	this._stateProvider = $serviceLocator.resolve('stateProvider');
	this._contextFactory = $serviceLocator.resolve('contextFactory');

	this._isHistorySupported = this._window.history &&
		this._window.history.pushState instanceof Function;
	var self = this;

	// add event handlers
	self._wrapDocument();

	// set initial state from current URI
	this._changeState(new URI(this._window.location.toString()))
		.catch(function (reason) {
			self._handleError(reason);
		});
}

/**
 * Current initialization flag.
 * @type {boolean}
 * @private
 */
RequestRouter.prototype._isStateInitialized = false;

/**
 * Current referrer.
 * @type {URI}
 * @private
 */
RequestRouter.prototype._referrer = '';

/**
 * Current location.
 * @type {URI}
 * @private
 */
RequestRouter.prototype._location = null;

/**
 * Current event bus.
 * @type {EventEmitter}
 * @private
 */
RequestRouter.prototype._eventBus = null;

/**
 * Current context factory.
 * @type {ContextFactory}
 * @private
 */
RequestRouter.prototype._contextFactory = null;

/**
 * Current state provider.
 * @type {StateProvider}
 * @private
 */
RequestRouter.prototype._stateProvider = null;

/**
 * Current document renderer.
 * @type {DocumentRenderer}
 * @private
 */
RequestRouter.prototype._documentRenderer = null;

/**
 * Current browser window.
 * @type {Window}
 * @private
 */
RequestRouter.prototype._window = null;

/**
 * True if current browser supports history API.
 * @type {boolean}
 * @private
 */
RequestRouter.prototype._isHistorySupported = false;

/**
 * Routes browser render request.
 * @returns {Promise} Promise for nothing.
 */
RequestRouter.prototype.route = function () {
	var self = this;
	// because now location was not change yet and
	// different browsers handle `popstate` differently
	// we need to do route in next iteration of event loop
	return Promise.resolve()
		.then(function () {
			var newLocation = new URI(self._window.location.toString()),
				newAuthority = newLocation.authority ?
					newLocation.authority.toString() : null,
				currentAuthority = self._location.authority ?
					self._location.authority.toString() : null;

			if (newLocation.scheme !== self._location.scheme ||
				newAuthority !== currentAuthority) {
				return;
			}

			// if only URI fragment is changed
			var newQuery = newLocation.query ?
					newLocation.query.toString() : null,
				currentQuery = self._location.query ?
					self._location.query.toString() : null;
			if (newLocation.path === self._location.path &&
				newQuery === currentQuery) {
				self._location = newLocation;
				return;
			}
			return self._changeState(newLocation);
		});
};

/**
 * Sets application state to specified URI.
 * @param {string} locationString URI to go.
 * @returns {Promise} Promise for nothing.
 */
RequestRouter.prototype.go = function (locationString) {
	var self = this;
	return Promise.resolve()
		.then(function () {
			var location = new URI(locationString);
			location = location.resolveRelative(self._location);
			locationString = location.toString();

			var currentAuthority = self._location.authority ?
					self._location.authority.toString() : null,
				newAuthority = location.authority ?
					location.authority.toString() : null;

			// we must check if this is an external link before map URI
			// to internal application state
			if (!self._isHistorySupported ||
				location.scheme !== self._location.scheme ||
				newAuthority !== currentAuthority) {
				self._window.location.assign(locationString);
				return;
			}

			var state = self._stateProvider.getStateByUri(location);
			if (!state) {
				self._window.location.assign(locationString);
				return;
			}

			self._window.history.pushState(state, '', locationString);
			return self.route();
		});
};

/**
 * Changes current application state with new location.
 * @param {URI} newLocation New location.
 * @returns {Promise} Promise for nothing.
 * @private
 */
RequestRouter.prototype._changeState = function (newLocation) {
	var self = this;
	return Promise.resolve()
		.then(function () {
			self._location = newLocation;
			var state = self._stateProvider.getStateByUri(newLocation),
				routingContext = self._contextFactory.create({
					referrer: self._referrer || self._window.document.referrer,
					location: self._location,
					userAgent: self._window.navigator.userAgent
				});

			if (!self._isStateInitialized) {
				self._isStateInitialized = true;
				return self._documentRenderer.initWithState(
					state, routingContext
				);
			}

			if (state === null) {
				window.location.reload();
				return;
			}

			return self._documentRenderer
				.render(state, routingContext);
		})
		.then(function () {
			self._referrer = self._location;
		});
};

/**
 * Wraps document with required events to route requests.
 * @private
 */
RequestRouter.prototype._wrapDocument = function () {
	var self = this;

	if (!this._isHistorySupported) {
		return;
	}

	this._window.addEventListener('popstate', function () {
		self.route().catch(self._handleError.bind(self));
	});

	this._window.document.body.addEventListener('click', function (event) {
		if (event.defaultPrevented) {
			return;
		}
		if (event.target.tagName === A_TAG_NAME) {
			self._linkClickHandler(event, event.target);
		} else {
			var link = closestLink(event.target);
			if (!link) {
				return;
			}
			self._linkClickHandler(event, link);
		}
	});
};

/**
 * Handles link click on the page.
 * @param {Event} event Event-related object.
 * @param {Element} element Link element.
 * @private
 */
RequestRouter.prototype._linkClickHandler = function (event, element) {
	var targetAttribute = element.getAttribute(TARGET_ATTRIBUTE_NAME);
	if (targetAttribute) {
		return;
	}

	// if middle mouse button was clicked
	if (event.button !== MOUSE_PRIMARY_KEY ||
		event.ctrlKey || event.altKey || event.shiftKey) {
		return;
	}

	var locationString = element.getAttribute(HREF_ATTRIBUTE_NAME);
	if (!locationString) {
		return;
	}
	if (locationString[0] === '#') {
		return;
	}

	event.preventDefault();
	this.go(locationString)
		.catch(this._handleError.bind(this));
};

/**
 * Handles all errors.
 * @param {Error} error Error to handle.
 * @private
 */
RequestRouter.prototype._handleError = function (error) {
	this._eventBus.emit('error', error);
};

/**
 * Finds the closest ascending "A" element node.
 * @param {Node} element DOM element.
 * @returns {Node|null} The closest "A" element or null.
 */
function closestLink(element) {
	while (element && element.nodeName !== A_TAG_NAME &&
		element.nodeName !== BODY_TAG_NAME) {
		element = element.parentNode;
	}
	return element && element.nodeName === A_TAG_NAME ? element : null;
}
},{"catberry-uri":124,"util":118}],94:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = {
	/**
	 * Gets the high resolution time or the difference between
	 * previous and current time.
	 * @param {Array?} Previous high resolution timestamp.
	 * @returns {Array} The high resolution time.
	 */
	get: require('browser-process-hrtime'),
	/**
	 * Converts the high resolution timestamp to text message.
	 * @param {Array}
	 * @returns {string} Time message.
	 */
	toMessage: require('pretty-hrtime'),
	/**
	 * Converts high resolution time to milliseconds number.
	 * @param {Array} hrTime High resolution time tuple.
	 */
	toMilliseconds: function (hrTime) {
		return hrTime[0] * 1e3 + Math.round(hrTime[1] / 1e6);
	}
};
},{"browser-process-hrtime":113,"pretty-hrtime":131}],95:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ComponentLoader;

var moduleHelper = require('../../lib/helpers/moduleHelper'),
	util = require('util'),
	LoaderBase = require('../../lib/base/LoaderBase');

util.inherits(ComponentLoader, LoaderBase);

/**
 * Creates new instance of the component loader.
 * @param {ServiceLocator} $serviceLocator Locator to resolve dependencies.
 * @constructor
 * @extends LoaderBase
 */
function ComponentLoader($serviceLocator) {
	this._serviceLocator = $serviceLocator;
	this._eventBus = $serviceLocator.resolve('eventBus');
	this._templateProvider = $serviceLocator.resolve('templateProvider');
	LoaderBase.call(this, $serviceLocator.resolveAll('componentTransform'));
}

/**
 * Current event bus.
 * @type {EventEmitter}
 * @private
 */
ComponentLoader.prototype._eventBus = null;

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @private
 */
ComponentLoader.prototype._serviceLocator = null;

/**
 * Current template provider.
 * @type {TemplateProvider}
 * @private
 */
ComponentLoader.prototype._templateProvider = null;

/**
 * Current map of loaded components by names.
 * @type {Object} Map of components by names.
 * @private
 */
ComponentLoader.prototype._loadedComponents = null;

/**
 * Loads components when it is in a browser.
 * @returns {Promise} Promise for nothing.
 */
ComponentLoader.prototype.load = function () {
	if (this._loadedComponents) {
		return Promise.resolve(this._loadedComponents);
	}

	this._loadedComponents = Object.create(null);

	var self = this;
	return Promise.resolve()
		.then(function () {
			var components = self._serviceLocator.resolveAll('component'),
				componentPromises = [];

			// the list is a stack, we should reverse it
			components.forEach(function (component) {
				componentPromises.unshift(
					self._processComponent(component)
				);
			});
			return Promise.all(componentPromises);
		})
		.then(function (components) {
			components.forEach(function (component) {
				if (!component || typeof (component) !== 'object') {
					return;
				}
				self._loadedComponents[component.name] = component;
			});
			self._eventBus.emit('allComponentsLoaded', components);
			return self._loadedComponents;
		});
};

/**
 * Processes component and apply required operations.
 * @param {Object} componentDetails Loaded component details.
 * @returns {Object} Component object.
 * @private
 */
ComponentLoader.prototype._processComponent = function (componentDetails) {
	var self = this,
		component = Object.create(componentDetails);

	return this._applyTransforms(component)
		.then(function (transformed) {
			component = transformed;
			self._templateProvider.registerCompiled(
				component.name, component.templateSource
			);
			component.template = {
				render: function (dataContext) {
					return self._templateProvider.render(
						component.name, dataContext
					);
				}
			};
			if (typeof (component.errorTemplateSource) === 'string') {
				var errorTemplateName = moduleHelper.getNameForErrorTemplate(
					component.name
				);
				self._templateProvider.registerCompiled(
					errorTemplateName, component.errorTemplateSource
				);
				component.errorTemplate = {
					render: function (dataContext) {
						return self._templateProvider.render(
							errorTemplateName, dataContext
						);
					}
				};
			}
			self._eventBus.emit('componentLoaded', component);
			return component;
		})
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
			return null;
		});
};

/**
 * Gets map of components by names.
 * @returns {Object} Map of components by names.
 */
ComponentLoader.prototype.getComponentsByNames = function () {
	return this._loadedComponents || Object.create(null);
};
},{"../../lib/base/LoaderBase":106,"../../lib/helpers/moduleHelper":109,"util":118}],96:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = StoreLoader;

var util = require('util'),
	LoaderBase = require('../../lib/base/LoaderBase');

util.inherits(StoreLoader, LoaderBase);

/**
 * Creates instance of the store loader.
 * @param {ServiceLocator} $serviceLocator Locator to resolve stores.
 * @constructor
 * @extends LoaderBase
 */
function StoreLoader($serviceLocator) {
	this._serviceLocator = $serviceLocator;
	this._eventBus = $serviceLocator.resolve('eventBus');
	LoaderBase.call(this, $serviceLocator.resolveAll('storeTransform'));
}

/**
 * Current event bus.
 * @type {EventEmitter}
 * @private
 */
StoreLoader.prototype._eventBus = null;

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @private
 */
StoreLoader.prototype._serviceLocator = null;

/**
 * Current set of loaded stores.
 * @type {Object}
 * @private
 */
StoreLoader.prototype._loadedStores = null;

/**
 * Loads all stores when it is in a browser.
 * @returns {Promise} Promise for nothing.
 */
StoreLoader.prototype.load = function () {
	if (this._loadedStores) {
		return Promise.resolve(this._loadedStores);
	}

	this._loadedStores = Object.create(null);
	var self = this;

	return Promise.resolve()
		.then(function () {
			var stores = self._serviceLocator.resolveAll('store'),
				storePromises = [];

			// the list is a stack, we should reverse it
			stores.forEach(function (store) {
				storePromises.unshift(
					self._getStore(store)
				);
			});

			return Promise.all(storePromises);
		})
		.then(function (stores) {
			stores.forEach(function (store) {
				if (!store || typeof (store) !== 'object') {
					return;
				}
				self._loadedStores[store.name] = store;
			});
			self._eventBus.emit('allStoresLoaded', self._loadedStores);
			return Promise.resolve(self._loadedStores);
		});
};

/**
 * Gets the store from store details.
 * @param {Object} storeDetails Store details.
 * @returns {Promise<Object>} Promise for store.
 * @private
 */
StoreLoader.prototype._getStore = function (storeDetails) {
	var self = this;
	return this._applyTransforms(storeDetails)
		.then(function (transformed) {
			self._eventBus.emit('storeLoaded', transformed);
			return transformed;
		})
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
			return null;
		});
};

/**
 * Gets stores map by names.
 * @returns {Object} Map of stores by names.
 */
StoreLoader.prototype.getStoresByNames = function () {
	return this._loadedStores || Object.create(null);
};
},{"../../lib/base/LoaderBase":106,"util":118}],97:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ModuleApiProvider;

var util = require('util'),
	propertyHelper = require('../../lib/helpers/propertyHelper'),
	ModuleApiProviderBase = require('../../lib/base/ModuleApiProviderBase');

util.inherits(ModuleApiProvider, ModuleApiProviderBase);

/**
 * Creates new instance of the module API provider.
 * @param {ServiceLocator} $serviceLocator Service locator
 * to resolve dependencies.
 * @constructor
 * @extends ModuleApiProviderBase
 */
function ModuleApiProvider($serviceLocator) {
	ModuleApiProviderBase.call(this, $serviceLocator);
	propertyHelper.defineReadOnly(this, 'isBrowser', true);
	propertyHelper.defineReadOnly(this, 'isServer', false);
}

/**
 * Reloads the page for handling "not found" error.
 * @returns {Promise} Promise for nothing.
 */
ModuleApiProvider.prototype.notFound = function () {
	var window = this.locator.resolve('window');
	window.location.reload();
	return Promise.resolve();
};

/**
 * Redirects current page to specified URI.
 * @param {string} uriString URI to redirect.
 * @returns {Promise} Promise for nothing.
 */
ModuleApiProvider.prototype.redirect = function (uriString) {
	var requestRouter = this.locator.resolve('requestRouter');
	return requestRouter.go(uriString);
};

/**
 * Clears current location URI's fragment.
 * @returns {Promise} Promise for nothing.
 */
ModuleApiProvider.prototype.clearFragment = function () {
	var window = this.locator.resolve('window'),
		position = window.document.body.scrollTop;
	window.location.hash = '';
	window.document.body.scrollTop = position;
	return Promise.resolve();
};
},{"../../lib/base/ModuleApiProviderBase":107,"../../lib/helpers/propertyHelper":110,"util":118}],98:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = require('./lib/Bootstrapper');

},{"./lib/Bootstrapper":1}],99:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ContextFactory;

var propertyHelper = require('./helpers/propertyHelper');

/**
 * Creates new instance of the context factory.
 * @param {ServiceLocator} $serviceLocator Locator to resolve dependencies.
 * @constructor
 */
function ContextFactory($serviceLocator) {
	this._serviceLocator = $serviceLocator;
}

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @private
 */
ContextFactory.prototype._serviceLocator = null;

/**
 * Creates new context for modules.
 * @param {Object} additional Additional parameters.
 * @param {URI} additional.referrer Current referrer.
 * @param {URI} additional.location Current location.
 * @param {string} additional.userAgent Current user agent.
 */
ContextFactory.prototype.create = function (additional) {
	var apiProvider = this._serviceLocator.resolve('moduleApiProvider'),
		context = Object.create(apiProvider);
	Object.keys(additional)
		.forEach(function (key) {
			propertyHelper.defineReadOnly(context, key, additional[key]);
		});
	return context;
};
},{"./helpers/propertyHelper":110}],100:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = SerialWrapper;

var events = require('events');

var ERROR_NO_SUCH_METHOD = 'There is no such registered method';

/**
 * Creates new instance of the serial wrapper for promises.
 * @constructor
 */
function SerialWrapper() {
	this._emitter = new events.EventEmitter();
	this._emitter.setMaxListeners(0);
	this._toInvoke = Object.create(null);
	this._inProgress = Object.create(null);
}

/**
 * Current event emitter.
 * @type {EventEmitter}
 * @private
 */
SerialWrapper.prototype._emitter = null;

/**
 * Current set of named methods to invoke.
 * @type {Object}
 * @private
 */
SerialWrapper.prototype._toInvoke = null;

/**
 * Current set of flags if the method is in progress.
 * @type {Object}
 * @private
 */
SerialWrapper.prototype._inProgress = null;

/**
 * Adds method to the set.
 * @param {string} name Method name.
 * @param {Function} toInvoke Function that returns promise.
 */
SerialWrapper.prototype.add = function (name, toInvoke) {
	this._toInvoke[name] = toInvoke;
};

/**
 * Returns true if method with such name was registered to the set.
 * @param {string} name Name of method.
 * @returns {boolean} True if method name is registered.
 */
SerialWrapper.prototype.isRegistered = function (name) {
	return typeof (this._toInvoke[name]) === 'function';
};

/**
 * Invokes method without concurrency.
 * @param {string} name Method name.
 * @returns {Promise<Object>} Promise for result.
 */
SerialWrapper.prototype.invoke = function (name) {
	var self = this;

	if (!this.isRegistered(name)) {
		return Promise.reject(new Error(ERROR_NO_SUCH_METHOD));
	}

	if (this._inProgress[name]) {
		return new Promise(function (fulfill, reject) {
			self._emitter.once(name, fulfill);
			self._emitter.once(name + '--error', reject);
		});
	}

	this._inProgress[name] = true;
	this._toInvoke[name]()
		.then(function (result) {
			self._emitter.emit(name, result);
			self._inProgress[name] = null;
		})
		.catch(function (reason) {
			self._emitter.emit(name + '--error', reason);
			self._inProgress[name] = null;
		});

	return this.invoke(name);
};
},{"events":114}],101:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = StoreDispatcher;

var util = require('util'),
	SerialWrapper = require('./SerialWrapper'),
	moduleHelper = require('./helpers/moduleHelper');

var ERROR_STORE_NOT_FOUND = 'Store "%s" not found',
	ERROR_STATE = 'State should be set before any request',
	DEFAULT_LIFETIME = 60000;

/**
 * Creates new instance of store dispatcher.
 * @param {ServiceLocator} $serviceLocator Locator to resolve dependencies.
 * @param {StoreLoader} $storeLoader Store loader to load stores.
 * @param {EventEmitter} $eventBus Event bus to emit events.
 * @constructor
 */
function StoreDispatcher($serviceLocator, $storeLoader, $eventBus) {
	this._serviceLocator = $serviceLocator;
	this._storeLoader = $storeLoader;
	this._eventBus = $eventBus;
	this._storeInstances = Object.create(null);
	this._lastData = Object.create(null);
	this._dependants = Object.create(null);
	this._serialWrapper = new SerialWrapper();
}

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @private
 */
StoreDispatcher.prototype._serviceLocator = null;

/**
 * Current event bus.
 * @type {EventEmitter}
 * @private
 */
StoreDispatcher.prototype._eventBus = null;

/**
 * Current store loader.
 * @type {StoreLoader}
 * @private
 */
StoreDispatcher.prototype._storeLoader = null;

/**
 * Current map of all store instances.
 * @type {null}
 * @private
 */
StoreDispatcher.prototype._storeInstances = null;

/**
 * Current map of last data for each store.
 * @type {Object}
 * @private
 */
StoreDispatcher.prototype._lastData = null;

/**
 * Current map of last state of store dispatcher.
 * @type {Object}
 * @private
 */
StoreDispatcher.prototype._lastState = null;

/**
 * Current serial wrapper.
 * @type {SerialWrapper}
 * @private
 */
StoreDispatcher.prototype._serialWrapper = null;

/**
 * Current basic context for all store contexts.
 * @type {Object}
 * @private
 */
StoreDispatcher.prototype._currentBasicContext = null;

/**
 * Current set of store dependency graph.
 * @type {Object}
 * @private
 */
StoreDispatcher.prototype._dependants = null;

/**
 * Gets store data and creates store instance if required.
 * @param {string} storeName Name of store.
 * @returns {Object} Store's data.
 */
StoreDispatcher.prototype.getStoreData = function (storeName) {
	if (!this._lastState) {
		return Promise.reject(new Error(ERROR_STATE));
	}
	if (typeof (storeName) !== 'string') {
		return Promise.resolve(null);
	}
	if (storeName in this._lastData) {
		var existTime = Date.now() - this._lastData[storeName].createdAt;
		if (existTime <= this._lastData[storeName].lifetime) {
			return Promise.resolve(this._lastData[storeName].data);
		}
		delete this._lastData[storeName];
	}
	var self = this,
		lifetime = DEFAULT_LIFETIME;
	self._eventBus.emit('storeDataLoad', {
		name: storeName
	});
	var store = this.getStore(storeName);
	if (!store) {
		return Promise.reject(new Error(
				util.format(ERROR_STORE_NOT_FOUND, storeName))
		);
	}
	if (typeof (store.$lifetime) === 'number') {
		lifetime = store.$lifetime;
	}
	return self._serialWrapper.invoke(storeName)
		.then(function (data) {
			self._lastData[storeName] = {
				data: data,
				lifetime: lifetime,
				createdAt: Date.now()
			};
			self._eventBus.emit('storeDataLoaded', {
				name: storeName,
				data: data,
				lifetime: lifetime
			});
			return data;
		});
};

/**
 * Sends action to specified store and resolves promises in serial mode.
 * @param {string} storeName Name of the store.
 * @param {string} actionName Name of the action.
 * @param {Object} args Action arguments.
 * @returns {Promise<*>} Promise for action handling result.
 */
StoreDispatcher.prototype.sendAction = function (storeName, actionName, args) {
	if (!this._lastState) {
		return Promise.reject(new Error(ERROR_STATE));
	}
	var self = this,
		actionDetails = {
			storeName: storeName,
			actionName: actionName,
			args: args
		};
	this._eventBus.emit('actionSend', actionDetails);
	var store = this.getStore(storeName);
	if (!store) {
		return Promise.reject(new Error(
			util.format(ERROR_STORE_NOT_FOUND, storeName))
		);
	}
	var handleMethod = moduleHelper.getMethodToInvoke(
		store, 'handle', actionName
	);
	return moduleHelper.getSafePromise(function () {
		return handleMethod(args);
	})
		.then(function (result) {
			self._eventBus.emit('actionSent', actionDetails);
			return result;
		});
};

/**
 * Sends action to every store that has handle method for such action.
 * @param {string} actionName Name of the action.
 * @param {Object} arg Action arguments.
 * @returns {Promise<Array<*>>} Promise for the action handling result.
 */
StoreDispatcher.prototype.sendBroadcastAction = function (actionName, arg) {
	var promises = [],
		self = this,
		storesByNames = this._storeLoader.getStoresByNames(),
		methodName = moduleHelper.getCamelCaseName('handle', actionName);
	Object.keys(storesByNames)
		.forEach(function (storeName) {
			var store = storesByNames[storeName],
				protoMethod = store.constructor.prototype[methodName];
			if (typeof (protoMethod) !== 'function') {
				return;
			}
			var sendActionPromise = self.sendAction(
				store.name, actionName, arg
			);
			promises.push(sendActionPromise);
		});
	return Promise.all(promises);
};

/**
 * Sets new state to store dispatcher and invokes "changed" method for all
 * stores which state have been changed.
 * @param {Object} parameters Map of new parameters.
 * @param {Object} basicContext Basic context for all stores.
 * @returns {Array<string>} Names of stores that have been changed.
 */
StoreDispatcher.prototype.setState = function (parameters, basicContext) {
	parameters = parameters || Object.create(null);
	if (!this._lastState) {
		this._currentBasicContext = basicContext;
		this._lastState = parameters;
		return [];
	}

	// some store's parameters can be removed since last time
	var self = this,
		changed = Object.create(null);

	Object.keys(this._lastState)
		.filter(function (storeName) {
			return !(storeName in parameters);
		})
		.forEach(function (name) {
			changed[name] = true;
		});

	Object.keys(parameters)
		.forEach(function (storeName) {
			// new parameters were set for store
			if (!(storeName in self._lastState)) {
				changed[storeName] = true;
				return;
			}

			// new and last parameters has different values
			var lastParameterNames =
					Object.keys(self._lastState[storeName]),
				currentParameterNames =
					Object.keys(parameters[storeName]);

			if (currentParameterNames.length !==
				lastParameterNames.length) {
				changed[storeName] = true;
				return;
			}

			currentParameterNames.every(function (parameterName) {
				if (parameters[storeName][parameterName] !==
					self._lastState[storeName][parameterName]) {
					changed[storeName] = true;
					return false;
				}
				return true;
			});
		});

	this._lastState = parameters;
	if (this._currentBasicContext !== basicContext) {
		this._currentBasicContext = basicContext;
		Object.keys(this._storeInstances)
			.forEach(function (storeName) {
				self._storeInstances[storeName].$context =
					self._getStoreContext(storeName);
			});
	}

	var changedStoreNames = Object.create(null);
	Object.keys(changed)
		.forEach(function (storeName) {
			var store = self.getStore(storeName);
			if (!store) {
				return;
			}
			store.$context.changed()
				.forEach(function (name) {
					changedStoreNames[name] = true;
				});
		});

	this._eventBus.emit('stateChanged', {
		oldState: this._lastState,
		newState: parameters
	});
	return Object.keys(changedStoreNames);
};

/**
 * Gets context for store using component's context as a prototype.
 * @param {string} storeName Name of store.
 * @returns {Object} Store context.
 * @private
 */
StoreDispatcher.prototype._getStoreContext = function (storeName) {
	var self = this,
		storeContext = Object.create(this._currentBasicContext);
	storeContext.name = storeName;
	storeContext.state = this._lastState[storeName] || Object.create(null);
	storeContext.changed = function () {
		var walked = Object.create(null),
			current,
			toChange = [storeName];

		while (toChange.length > 0) {
			current = toChange.shift();
			if (current in walked) {
				continue;
			}
			walked[current] = true;
			if (current in self._dependants) {
				toChange = toChange.concat(
					Object.keys(self._dependants[current])
				);
			}
			delete self._lastData[current];
			self._eventBus.emit('storeChanged', current);
		}
		return Object.keys(walked);
	};
	storeContext.getStoreData = function (sourceStoreName) {
		if (sourceStoreName === storeName) {
			return Promise.resolve(null);
		}
		return self.getStoreData(sourceStoreName);
	};
	storeContext.setDependency = function (name) {
		if (!(name in self._dependants)) {
			self._dependants[name] = Object.create(null);
		}
		self._dependants[name][storeName] = true;
	};
	storeContext.unsetDependency = function (name) {
		if (!(name in self._dependants)) {
			return;
		}
		delete self._dependants[name][storeName];
	};
	storeContext.sendAction = function (storeName, name, args) {
		return self.sendAction(storeName, name, args);
	};
	storeContext.sendBroadcastAction = function (name, args) {
		return self.sendBroadcastAction(name, args);
	};

	return storeContext;
};

/**
 * Gets store instance and creates it if required.
 * @param {string} storeName Name of store.
 * @returns {Promise<Object>} Promise for store.
 */
StoreDispatcher.prototype.getStore = function (storeName) {
	if (!storeName) {
		return null;
	}
	var store = this._storeInstances[storeName];
	if (store) {
		return store;
	}
	var self = this;

	var stores = self._storeLoader.getStoresByNames(),
		config = self._serviceLocator.resolve('config');
	if (!(storeName in stores)) {
		return null;
	}

	var constructor = stores[storeName].constructor;
	constructor.prototype.$context = self._getStoreContext(storeName);
	self._storeInstances[storeName] = self._serviceLocator
		.resolveInstance(constructor, config);
	self._storeInstances[storeName].$context = constructor.prototype.$context;

	self._serialWrapper.add(storeName, function () {
		var loadMethod = moduleHelper.getMethodToInvoke(
			self._storeInstances[storeName], 'load'
		);
		return moduleHelper.getSafePromise(loadMethod);
	});
	return self._storeInstances[storeName];
};
},{"./SerialWrapper":100,"./helpers/moduleHelper":109,"util":118}],102:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = BootstrapperBase;

var util = require('util'),
	moduleHelper = require('../helpers/moduleHelper'),
	hrTimeHelper = require('../helpers/hrTimeHelper'),
	uhr = require('catberry-uhr'),
	Promise = require('promise'),
	StateProvider = require('../providers/StateProvider'),
	StoreLoader = require('../loaders/StoreLoader'),
	ComponentLoader = require('../loaders/ComponentLoader'),
	DocumentRenderer = require('../DocumentRenderer'),
	RequestRouter = require('../RequestRouter'),
	ModuleApiProviderBase = require('../base/ModuleApiProviderBase'),
	ContextFactory = require('../ContextFactory'),
	EventEmitter = require('events').EventEmitter;

var INFO_COMPONENT_LOADED = 'Component "%s" loaded',
	INFO_STORE_LOADED = 'Store "%s" loaded',
	INFO_ALL_STORES_LOADED = 'All stores loaded',
	INFO_ALL_COMPONENTS_LOADED = 'All components loaded',
	DEBUG_DOCUMENT_RENDERED = 'Document rendered for URI %s',
	DEBUG_RENDER_COMPONENT = 'Component "%s%s" is being rendered...',
	DEBUG_COMPONENT_RENDERED = 'Component "%s%s" rendered%s';

/**
 * Creates new instance of base Catberry bootstrapper.
 * @param {Function} catberryConstructor Constructor
 * of the Catberry's main module.
 * @constructor
 */
function BootstrapperBase(catberryConstructor) {
	this._catberryConstructor = catberryConstructor;
}

/**
 * Current constructor of the Catberry's main module.
 * @type {Function}
 * @private
 */
BootstrapperBase.prototype._catberryConstructor = null;

/**
 * Creates new full-configured instance of the Catberry application.
 * @param {Object?} configObject Configuration object.
 * @returns {Catberry} Catberry application instance.
 */
BootstrapperBase.prototype.create = function (configObject) {
	var currentConfig = configObject || {},
		catberry = new this._catberryConstructor();

	this.configure(currentConfig, catberry.locator);
	catberry.events = catberry.locator.resolveInstance(ModuleApiProviderBase);
	return catberry;
};

/**
 * Configures locator with all required type registrations.
 * @param {Object} configObject Configuration object.
 * @param {ServiceLocator} locator Service locator to configure.
 */
BootstrapperBase.prototype.configure = function (configObject, locator) {
	var eventBus = new EventEmitter();
	eventBus.setMaxListeners(0);
	locator.registerInstance('promise', Promise);
	locator.registerInstance('eventBus', eventBus);
	locator.registerInstance('config', configObject);
	locator.register('stateProvider', StateProvider, configObject, true);
	locator.register('contextFactory', ContextFactory, configObject, true);
	locator.register('storeLoader', StoreLoader, configObject, true);
	locator.register('componentLoader', ComponentLoader, configObject, true);
	locator.register('documentRenderer', DocumentRenderer, configObject, true);
	locator.register('requestRouter', RequestRouter, configObject, true);

	uhr.register(locator);
};

/**
 * Wraps event bus with log messages.
 * @param {Object} config Application config.
 * @param {EventEmitter} eventBus Event emitter that implements event bus.
 * @param {Logger} logger Logger to write messages.
 * @protected
 */
BootstrapperBase.prototype._wrapEventsWithLogger =
	function (config, eventBus, logger) {
		var isRelease = Boolean(config.isRelease);
		eventBus
			.on('componentLoaded', function (args) {
				logger.info(util.format(INFO_COMPONENT_LOADED, args.name));
			})
			.on('storeLoaded', function (args) {
				logger.info(util.format(INFO_STORE_LOADED, args.name));
			})
			.on('allStoresLoaded', function () {
				logger.info(INFO_ALL_STORES_LOADED);
			})
			.on('allComponentsLoaded', function () {
				logger.info(INFO_ALL_COMPONENTS_LOADED);
			})
			.on('error', function (error) {
				logger.error(error);
			});

		if (isRelease) {
			return;
		}
		eventBus
			.on('componentRender', function (args) {
				var id = args.context.attributes[moduleHelper.ATTRIBUTE_ID];
				logger.debug(util.format(DEBUG_RENDER_COMPONENT,
					moduleHelper.getTagNameForComponentName(args.name),
					id ? '#' + id : ''
				));
			})
			.on('componentRendered', function (args) {
				var id = args.context.attributes[moduleHelper.ATTRIBUTE_ID];
				logger.debug(util.format(
					DEBUG_COMPONENT_RENDERED,
					moduleHelper.getTagNameForComponentName(args.name),
					id ? '#' + id : '',
					util.isArray(args.hrTime) ?
						' (' + hrTimeHelper.toMessage(args.hrTime) + ')' : ''
				));
			})
			.on('documentRendered', function (args) {
				logger.debug(util.format(
					DEBUG_DOCUMENT_RENDERED, args.location.toString()
				));
			});
	};
},{"../ContextFactory":99,"../DocumentRenderer":91,"../RequestRouter":93,"../base/ModuleApiProviderBase":107,"../helpers/hrTimeHelper":94,"../helpers/moduleHelper":109,"../loaders/ComponentLoader":95,"../loaders/StoreLoader":96,"../providers/StateProvider":112,"catberry-uhr":122,"events":114,"promise":132,"util":118}],103:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = CatberryBase;

var ServiceLocator = require('catberry-locator');

/**
 * Creates new instance of the basic Catberry application module.
 * @constructor
 */
function CatberryBase() {
	this.locator = new ServiceLocator();
	this.locator.registerInstance('serviceLocator', this.locator);
	this.locator.registerInstance('catberry', this);
}

/**
 * Current version of catberry.
 */
CatberryBase.prototype.version = '7.0.3';

/**
 * Current object with events.
 * @type {ModuleApiProvider}
 */
CatberryBase.prototype.events = null;

/**
 * Current service locator.
 * @type {ServiceLocator}
 */
CatberryBase.prototype.locator = null;
},{"catberry-locator":120}],104:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = CookieWrapperBase;

var util = require('util');

/**
 * Creates new instance of the basic cookie wrapper.
 * @constructor
 */
function CookieWrapperBase() {
}

/**
 * Gets map of cookie values by name.
 * @returns {Object} Cookies map by names.
 */
CookieWrapperBase.prototype.getAll = function () {
	var string = this.getCookieString();
	return this._parseCookieString(string);
};

/**
 * Gets cookie value by name.
 * @param {string} name Cookie name.
 * @returns {string} Cookie value.
 */
CookieWrapperBase.prototype.get = function (name) {
	if (typeof (name) !== 'string') {
		return '';
	}

	return this.getAll()[name] || '';
};

/**
 * Parses cookie string into map of cookie key/value pairs.
 * @param {string} string Cookie string.
 * @returns {Object} Object with cookie values by keys.
 * @protected
 */
CookieWrapperBase.prototype._parseCookieString = function (string) {
	var cookie = Object.create(null);

	if (typeof (string) !== 'string') {
		return cookie;
	}
	string
		.split(/; */)
		.forEach(function (cookiePair) {
			var equalsIndex = cookiePair.indexOf('=');
			if (equalsIndex < 0) {
				return;
			}

			var key = cookiePair.substr(0, equalsIndex).trim(),
				value = cookiePair.substr(
					equalsIndex + 1, cookiePair.length
				).trim();

			value = value.replace(/^"|"$/g, '');
			cookie[key] = value;
		});

	return cookie;
};

/**
 * Converts cookie setup object to cookie string.
 * @param {Object} cookieSetup Cookie setup object.
 * @param {string} cookieSetup.key Cookie key.
 * @param {string} cookieSetup.value Cookie value.
 * @param {number?} cookieSetup.maxAge Max cookie age in seconds.
 * @param {Date?} cookieSetup.expires Expire date.
 * @param {string?} cookieSetup.path URI path for cookie.
 * @param {string?} cookieSetup.domain Cookie domain.
 * @param {boolean?} cookieSetup.secure Is cookie secured.
 * @param {boolean?} cookieSetup.httpOnly Is cookie HTTP only.
 * @returns {string} Cookie string.
 * @protected
 */
CookieWrapperBase.prototype._convertToCookieSetup = function (cookieSetup) {
	if (typeof (cookieSetup.key) !== 'string' ||
		typeof (cookieSetup.value) !== 'string') {
		throw new Error('Wrong key or value');
	}

	var cookie = cookieSetup.key + '=' + cookieSetup.value;

	// http://tools.ietf.org/html/rfc6265#section-4.1.1
	if (typeof (cookieSetup.maxAge) === 'number') {
		cookie += '; Max-Age=' + cookieSetup.maxAge.toFixed();
		if (!cookieSetup.expires) {
			// by default expire date = current date + max-age in seconds
			cookieSetup.expires = new Date(Date.now() +
				cookieSetup.maxAge * 1000);
		}
	}
	if (cookieSetup.expires instanceof Date) {
		cookie += '; Expires=' + cookieSetup.expires.toUTCString();
	}
	if (typeof (cookieSetup.path) === 'string') {
		cookie += '; Path=' + cookieSetup.path;
	}
	if (typeof (cookieSetup.domain) === 'string') {
		cookie += '; Domain=' + cookieSetup.domain;
	}
	if (typeof (cookieSetup.secure) === 'boolean' &&
		cookieSetup.secure) {
		cookie += '; Secure';
	}
	if (typeof (cookieSetup.httpOnly) === 'boolean' &&
		cookieSetup.httpOnly) {
		cookie += '; HttpOnly';
	}

	return cookie;
};
},{"util":118}],105:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = DocumentRendererBase;

/**
 * Creates new instance of the basic document renderer.
 * @param {ServiceLocator} $serviceLocator Locator to resolve dependencies.
 * @constructor
 */
function DocumentRendererBase($serviceLocator) {
	var self = this;
	this._serviceLocator = $serviceLocator;
	this._contextFactory = $serviceLocator.resolve('contextFactory');
	this._componentLoader = $serviceLocator.resolve('componentLoader');
	this._eventBus = $serviceLocator.resolve('eventBus');

	var storeLoader = $serviceLocator.resolve('storeLoader');
	this._loading = Promise.all([
		this._componentLoader.load(),
		storeLoader.load()
	])
		.then(function () {
			self._loading = null;
			self._eventBus.emit('ready');
		})
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
		});
}

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @protected
 */
DocumentRendererBase.prototype._serviceLocator = null;

/**
 * Current component loader.
 * @type {ComponentLoader}
 * @protected
 */
DocumentRendererBase.prototype._componentLoader = null;

/**
 * Current module loading promise.
 * @type {Promise}
 * @protected
 */
DocumentRendererBase.prototype._loading = null;

/**
 * Current context factory.
 * @type {ContextFactory}
 * @protected
 */
DocumentRendererBase.prototype._contextFactory = null;

/**
 * Gets promise for ready state when it will be able handle requests.
 * @returns {Promise} Promise for nothing.
 * @protected
 */
DocumentRendererBase.prototype._getPromiseForReadyState = function () {
	return this._loading ?
		this._loading :
		Promise.resolve();
};
},{}],106:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = LoaderBase;

/**
 * Create basic implementation of a module loader.
 * @param {Array} transforms Array of module transformations.
 * @constructor
 */
function LoaderBase(transforms) {
	this._transforms = transforms;
}

/**
 * Current list of component transforms.
 * @type {Array}
 * @private
 */
LoaderBase.prototype._transforms = null;

/**
 * Applies all transformations registered in Service Locator.
 * @param {Object} module Loaded module.
 * @param {number?} index Transformation index in a list.
 * @returns {Promise<Object>} Transformed module.
 * @protected
 */
LoaderBase.prototype._applyTransforms = function (module, index) {
	if (index === undefined) {
		// the list is a stack, we should reverse it
		index = this._transforms.length - 1;
	}

	if (index < 0) {
		return Promise.resolve(module);
	}

	var self = this,
		transformation = this._transforms[index];

	return Promise.resolve()
		.then(function () {
			return transformation.transform(module);
		})
		.then(function (transformedModule) {
			return self._applyTransforms(transformedModule, index - 1);
		});
};
},{}],107:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ModuleApiProviderBase;

var ERROR_EVENT_NAME = 'Event name should be a string',
	ERROR_EVENT_HANDLER = 'Event handler should be a function';

/**
 * Creates new instance of the basic API provider.
 * @param {ServiceLocator} $serviceLocator Service locator
 * to resolve dependencies.
 * @constructor
 */
function ModuleApiProviderBase($serviceLocator) {
	this.locator = $serviceLocator;
	this.cookie = $serviceLocator.resolve('cookieWrapper');
	this._eventBus = $serviceLocator.resolve('eventBus');
}

/**
 * Current cookie provider.
 * @type {CookieWrapper}
 */
ModuleApiProviderBase.prototype.cookie = null;

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @protected
 */
ModuleApiProviderBase.prototype.locator = null;

/**
 * Current event bus.
 * @type {EventEmitter}
 * @private
 */
ModuleApiProviderBase.prototype._eventBus = null;

/**
 * Subscribes on the specified event in Catberry.
 * @param {string} eventName Name of the event.
 * @param {Function} handler Event handler.
 * @returns {ModuleApiProviderBase} This object for chaining.
 */
ModuleApiProviderBase.prototype.on = function (eventName, handler) {
	checkEventNameAndHandler(eventName, handler);
	this._eventBus.on(eventName, handler);
	return this;
};

/**
 * Subscribes on the specified event in Catberry to handle once.
 * @param {string} eventName Name of the event.
 * @param {Function} handler Event handler.
 * @returns {ModuleApiProviderBase} This object for chaining.
 */
ModuleApiProviderBase.prototype.once = function (eventName, handler) {
	checkEventNameAndHandler(eventName, handler);
	this._eventBus.once(eventName, handler);
	return this;
};

/**
 * Removes the specified handler from the specified event.
 * @param {string} eventName Name of the event.
 * @param {Function} handler Event handler.
 * @returns {ModuleApiProviderBase} This object for chaining.
 */
ModuleApiProviderBase.prototype.removeListener = function (eventName, handler) {
	checkEventNameAndHandler(eventName, handler);
	this._eventBus.removeListener(eventName, handler);
	return this;
};

/**
 * Removes all handlers from the specified event in Catberry.
 * @param {string} eventName Name of the event.
 * @returns {ModuleApiProviderBase} This object for chaining.
 */
ModuleApiProviderBase.prototype.removeAllListeners = function (eventName) {
	checkEventNameAndHandler(eventName, dummy);
	this._eventBus.removeAllListeners(eventName);
	return this;
};

/**
 * Checks if event name is a string and handler is a function.
 * @param {*} eventName Name of the event to check.
 * @param {*} handler The event handler to check.
 */
function checkEventNameAndHandler(eventName, handler) {
	if (typeof (eventName) !== 'string') {
		throw new Error(ERROR_EVENT_NAME);
	}

	if (typeof (handler) !== 'function') {
		throw new Error(ERROR_EVENT_HANDLER);
	}
}

/**
 * Does nothing. It is used as a default callback.
 */
function dummy() {}

},{}],108:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

var util = require('util');

var TITLE = 'Catberry@7.0.3 (' +
		'<a href="https://github.com/catberry/catberry/issues" ' +
		'target="_blank">' +
		'report an issue' +
		'</a>' +
		')',
	AMP = /&/g,
	LT = /</g,
	GT = />/g,
	QUOT = /\"/g,
	SINGLE_QUOT = /\'/g,
	ERROR_MESSAGE_REGEXP = /^(?:[\w$]+): (?:.+)\r?\n/i,
	ERROR_MESSAGE_FORMAT = '<span ' +
		'style="color: red; font-size: 16pt; font-weight: bold;">' +
		'%s%s' +
		'</span>',
	NEW_LINE = /\r?\n/g;

module.exports = {
	/**
	 * Prints error with pretty formatting.
	 * @param {Error} error Error to print.
	 * @param {string} userAgent User agent information.
	 * @returns {string} HTML with all information about error.
	 */
	prettyPrint: function (error, userAgent) {
		if (!error || typeof (error) !== 'object') {
			return '';
		}
		var dateString = (new Date()).toUTCString() + ';<br/>',
			userAgentString = (userAgent ? (userAgent + ';<br/>') : ''),
			name = (typeof (error.name) === 'string' ? error.name + ': ' : ''),
			message = String(error.message || ''),
			stack = String(error.stack || '').replace(ERROR_MESSAGE_REGEXP, ''),
			fullMessage = util.format(
				ERROR_MESSAGE_FORMAT, escape(name), escape(message)
			);

		return '<div style="background-color: white; font-size: 12pt;">' +
			dateString +
			userAgentString +
			TITLE + '<br/><br/>' +
			fullMessage + '<br/><br/>' +
			escape(stack) +
			'</div>';
	}
};

/**
 * Escapes error text.
 * @param {string} value Error text.
 * @returns {string} escaped and formatted string.
 */
function escape(value) {
	return value
		.replace(AMP, '&amp;')
		.replace(LT, '&lt;')
		.replace(GT, '&gt;')
		.replace(QUOT, '&quot;')
		.replace(SINGLE_QUOT, '&#39;')
		.replace(NEW_LINE, '<br/>');
}
},{"util":118}],109:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

var helper = {
	COMPONENT_PREFIX: 'cat-',
	COMPONENT_PREFIX_REGEXP: /^cat-/i,
	COMPONENT_ERROR_TEMPLATE_POSTFIX: '--error',
	DOCUMENT_COMPONENT_NAME: 'document',
	DOCUMENT_ELEMENT_NAME: 'html',
	HEAD_COMPONENT_NAME: 'head',
	ATTRIBUTE_ID: 'id',
	ATTRIBUTE_STORE: 'cat-store',
	DEFAULT_LOGIC_FILENAME: 'index.js',

	/**
	 * Creates name for error template of component.
	 * @param {string} componentName name of component.
	 * @returns {string} Name of error template of the component.
	 */
	getNameForErrorTemplate: function (componentName) {
		if (typeof (componentName) !== 'string') {
			return '';
		}
		return componentName + helper.COMPONENT_ERROR_TEMPLATE_POSTFIX;
	},

	/**
	 * Determines if specified component name is the "document" component name.
	 * @param {string} componentName Name of the component.
	 * @returns {boolean} True if specified component is the "document" component.
	 */
	isDocumentComponent: function (componentName) {
		return componentName.toLowerCase() === helper.DOCUMENT_COMPONENT_NAME;
	},
	/**
	 * Determines if specified component name is the "head" component name.
	 * @param {string} componentName Name of the component.
	 * @returns {boolean} True if specified component is the "head" component.
	 */
	isHeadComponent: function (componentName) {
		return componentName.toLowerCase() === helper.HEAD_COMPONENT_NAME;
	},

	/**
	 * Gets the original component name without prefix.
	 * @param {string} fullComponentName Full component name (tag name).
	 * @returns {string} The original component name without prefix.
	 */
	getOriginalComponentName: function (fullComponentName) {
		if (typeof (fullComponentName) !== 'string') {
			return '';
		}
		fullComponentName = fullComponentName.toLowerCase();
		if (fullComponentName === helper.HEAD_COMPONENT_NAME) {
			return fullComponentName;
		}
		if (fullComponentName === helper.DOCUMENT_COMPONENT_NAME ||
			fullComponentName === helper.DOCUMENT_ELEMENT_NAME) {
			return helper.DOCUMENT_COMPONENT_NAME;
		}
		return fullComponentName.replace(helper.COMPONENT_PREFIX_REGEXP, '');
	},

	/**
	 * Gets valid tag name for component.
	 * @param {string} componentName Name of the component.
	 * @returns {string} Name of the tag.
	 */
	getTagNameForComponentName: function (componentName) {
		if (typeof (componentName) !== 'string') {
			return '';
		}
		var upperComponentName = componentName.toUpperCase();
		if (componentName === helper.HEAD_COMPONENT_NAME) {
			return upperComponentName;
		}
		if (componentName === helper.DOCUMENT_COMPONENT_NAME) {
			return helper.DOCUMENT_ELEMENT_NAME.toUpperCase();
		}
		return helper.COMPONENT_PREFIX.toUpperCase() + upperComponentName;
	},

	/**
	 * Gets method of the module that can be invoked.
	 * @param {Object} module Module implementation.
	 * @param {string} prefix Method prefix (i.e. handle).
	 * @param {string?} name Name of the entity to invoke method for
	 * (will be converted to camel casing).
	 * @returns {Function} Method to invoke.
	 */
	getMethodToInvoke: function (module, prefix, name) {
		if (!module || typeof (module) !== 'object') {
			return defaultPromiseMethod;
		}
		var methodName = helper.getCamelCaseName(prefix, name);
		if (typeof (module[methodName]) === 'function') {
			return module[methodName].bind(module);
		}
		if (typeof (module[prefix]) === 'function') {
			return module[prefix].bind(module, name);
		}

		return defaultPromiseMethod;
	},

	/**
	 * Gets name in camel casing for everything.
	 * @param {string} prefix Prefix for the name.
	 * @param {string} name Name to convert.
	 */
	getCamelCaseName: function (prefix, name) {
		if (!name) {
			return '';
		}
		var parts = name.split(/[^a-z0-9]/i),
			camelCaseName = String(prefix || '');

		parts.forEach(function (part) {
			if (!part) {
				return;
			}

			// first character in method name must be in lowercase
			camelCaseName += camelCaseName ?
				part[0].toUpperCase() :
				part[0].toLowerCase();
			camelCaseName += part.substring(1);
		});

		return camelCaseName;
	},

	/**
	 * Gets safe promise resolved from action.
	 * @param {Function} action Action to wrap with safe promise.
	 * @returns {Promise} Promise for done action.
	 */
	getSafePromise: function (action) {
		var result;
		try {
			result = action();
		} catch (e) {
			return Promise.reject(e);
		}
		return Promise.resolve(result);
	}
};

module.exports = helper;

/**
 * Just returns resolved promise.
 * @returns {Promise} Promise for nothing.
 */
function defaultPromiseMethod() {
	return Promise.resolve();
}
},{}],110:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = {
	/**
	 * Defines read-only property.
	 * @param {Object} object Object to define property in.
	 * @param {string} name Name of the property.
	 * @param {*} value Property value.
	 */
	defineReadOnly: function (object, name, value) {
		Object.defineProperty(object, name, {
			enumerable: false,
			configurable: false,
			writable: false,
			value: value
		});
	}
};
},{}],111:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

var util = require('util'),
	URI = require('catberry-uri').URI;

var URI_PATH_REPLACEMENT_REG_EXP_SOURCE = '([^\\/\\\\]*)',
	URI_QUERY_REPLACEMENT_REG_EXP_SOURCE = '([^&?=]*)';

var PATH_END_SLASH_REG_EXP = /(.+)\/($|\?|#)/,
	EXPRESSION_ESCAPE_REG_EXP = /[\-\[\]\{\}\(\)\*\+\?\.\\\^\$\|]/g,
	IDENTIFIER_REG_EXP_SOURCE = '[$A-Z_][\\dA-Z_$]*',
	STORE_LIST_REG_EXP_SOURCE = '(?:(?:\\\\[[ ]*' +
		'[^\\[\\],]+' +
		'([ ]*,[ ]*' +
		'[^\\[\\],]+' +
		')*[ ]*\\\\])|(?:\\\\[[ ]*\\\\]))?',
	PARAMETER_REG_EXP = new RegExp(
			':' +
			IDENTIFIER_REG_EXP_SOURCE +
			STORE_LIST_REG_EXP_SOURCE, 'gi'),
	SLASHED_BRACKETS_REG_EXP = /\\\[|\\\]/,
	STORE_LIST_SEPARATOR = ',';

module.exports = {
	/**
	 * Removes slash from the end of URI path.
	 * @param {string} uriPath URI path to process.
	 * @returns {string} URI without end slash.
	 */
	removeEndSlash: function (uriPath) {
		if (!uriPath || typeof (uriPath) !== 'string') {
			return '';
		}
		if (uriPath === '/') {
			return uriPath;
		}
		return uriPath.replace(PATH_END_SLASH_REG_EXP, '$1$2');
	},
	/**
	 * Gets URI mapper from the route expression like
	 * /some/:id[store1, store2, store3]/details?filter=:filter[store3].
	 * @param {URI} routeUri Expression that defines route.
	 * @returns {{expression: RegExp, map: Function}?} URI mapper object.
	 * URI mapper object.
	 */
	compileRoute: function (routeUri) {
		if (!routeUri) {
			return null;
		}

		// escape regular expression characters
		var escaped = routeUri.path.replace(
			EXPRESSION_ESCAPE_REG_EXP, '\\$&'
		);

		// get all occurrences of routing parameters in URI path
		var regExpSource = '^' + escaped.replace(
					PARAMETER_REG_EXP,
					URI_PATH_REPLACEMENT_REG_EXP_SOURCE) + '$',
			expression = new RegExp(regExpSource, 'i'),
			queryMapper,
			pathMapper,
			pathParameterMatches = escaped.match(
				PARAMETER_REG_EXP
			),
			pathParameters = pathParameterMatches ?
				pathParameterMatches.map(getParameterDescriptor) : null;

		if (pathParameters) {
			pathMapper = createUriPathMapper(expression, pathParameters);
		}

		if (routeUri.query) {
			var queryParameters = Object.create(null);
			Object.keys(routeUri.query.values)
				.forEach(function (name) {
					// arrays in routing definitions are not supported
					if (util.isArray(routeUri.query.values[name])) {
						return;
					}

					// escape regular expression characters
					var escaped = routeUri.query.values[name].replace(
						EXPRESSION_ESCAPE_REG_EXP, '\\$&'
					);

					// get all occurrences of routing parameters in URI path
					var regExpSource = '^' + escaped.replace(
							PARAMETER_REG_EXP,
							URI_QUERY_REPLACEMENT_REG_EXP_SOURCE) + '$';
					var queryParameterMatches = escaped.match(
							PARAMETER_REG_EXP
						);
					if (!queryParameterMatches ||
						queryParameterMatches.length === 0) {
						return;
					}

					var parameter = getParameterDescriptor(
						queryParameterMatches[queryParameterMatches.length - 1]
					);
					var expression = new RegExp(regExpSource, 'i');
					parameter.map = createUriQueryValueMapper(expression);
					queryParameters[name] = parameter;
				});
			queryMapper = createUriQueryMapper(queryParameters);
		}

		return {
			expression: expression,
			map: function (uri) {
				var state = Object.create(null);
				if (pathMapper) {
					pathMapper(uri.path, state);
				}

				if (queryMapper && uri.query) {
					queryMapper(uri.query.values, state);
				}

				return state;
			}
		};
	}
};

/**
 * Creates new URI path-to-state object mapper.
 * @param {RegExp} expression Regular expression to match URI path.
 * @param {Array} parameters List of parameter descriptors.
 * @returns {Function} URI mapper function.
 */
function createUriPathMapper(expression, parameters) {
	return function (uriPath, state) {
		var matches = uriPath.match(expression);
		if (!matches || matches.length < 2) {
			return state;
		}

		// start with second match because first match is always
		// the whole URI path
		matches = matches.splice(1);

		parameters.forEach(function (parameter, index) {
			var value = matches[index];
			try {
				value = decodeURIComponent(value);
			} catch (e) {
				// nothing to do
			}
			parameter.storeNames.forEach(function (storeName) {
				if (!state[storeName]) {
					state[storeName] = Object.create(null);
				}
				state[storeName][parameter.name] = value;
			});
		});
	};
}

/**
 * Creates new URI query-to-state object mapper.
 * @param {Object} parameters List of possible query parameter descriptors by
 * query parameter names.
 * @returns {Function} URI mapper function.
 */
function createUriQueryMapper(parameters) {
	return function (queryValues, state) {
		queryValues = queryValues || Object.create(null);

		Object.keys(queryValues)
			.forEach(function (queryKey) {
				var parameter = parameters[queryKey];
				if (!parameter) {
					return;
				}

				var value = util.isArray(queryValues[queryKey]) ?
						queryValues[queryKey]
							.map(parameter.map)
							.filter(function (value) {
								return value !== null;
							}) :
						parameter.map(queryValues[queryKey]);

				if (value === null) {
					return;
				}
				parameter.storeNames.forEach(function (storeName) {
					if (!state[storeName]) {
						state[storeName] = Object.create(null);
					}
					state[storeName][parameter.name] = value;
				});
			});
	};
}

/**
 * Maps query parameter value using the parameters expression.
 * @param {RegExp} expression Regular expression to get parameter value.
 * @returns {Function} URI query string parameter value mapper function.
 */
function createUriQueryValueMapper(expression) {
	return function (value) {
		value = value
			.toString()
			// we have to temporary encode these characters for not breaking
			// expression parsing, because it's terminated by query separator
			.replace(/=/g, '%3D')
			.replace(/\?/g, '%3F')
			.replace(/&/g, '%26');
		var matches = value.match(expression);
		if (!matches || matches.length === 0) {
			return null;
		}

		// the value is the second item, the first is a whole string
		var mappedValue = matches[matches.length - 1];
		try {
			mappedValue = decodeURIComponent(mappedValue);
		} catch (e) {
			// nothing to do
		}

		return mappedValue;
	};
}

/**
 * Gets description of parameters from its expression.
 * @param {string} parameter Parameter expression.
 * @returns {{name: string, storeNames: Array}} Parameter descriptor.
 */
function getParameterDescriptor(parameter) {
	var parts = parameter.split(SLASHED_BRACKETS_REG_EXP);

	return {
		name: parts[0]
			.trim()
			.substring(1),
		storeNames: (parts[1] ? parts[1] : '')
			.split(STORE_LIST_SEPARATOR)
			.map(function (storeName) {
				return storeName.trim();
			})
			.filter(function (storeName) {
				return storeName.length > 0;
			})
	};
}
},{"catberry-uri":124,"util":118}],112:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = StateProvider;

var routeHelper = require('./../helpers/routeHelper'),
	catberryUri = require('catberry-uri'),
	URI = catberryUri.URI;

/**
 * Create new instance of the state provider.
 * @param {ServiceLocator} $serviceLocator Service locator
 * to resolve URI mappers.
 * @constructor
 */
function StateProvider($serviceLocator) {
	this._uriMappers = getUriMappers($serviceLocator);
}

/**
 * Current list of URI mappers.
 * @type {Array}
 * @private
 */
StateProvider.prototype._uriMappers = null;

/**
 * Gets state by specified location URI.
 * @param {URI} location URI location.
 * @returns {Object?} State object.
 */
StateProvider.prototype.getStateByUri = function (location) {
	if (this._uriMappers.length === 0) {
		return null;
	}

	location = location.clone();

	location.path = routeHelper.removeEndSlash(location.path);
	var state = getState(this._uriMappers, location);

	if (!state) {
		return null;
	}

	// make state object immutable
	Object.keys(state)
		.forEach(function (storeName) {
			Object.freeze(state[storeName]);
		});
	Object.freeze(state);

	return state;
};

/**
 * Gets list of URI mappers.
 * @param {ServiceLocator} serviceLocator Service locator to get route
 * definitions.
 * @returns {Array} List of URI mappers.
 */
function getUriMappers(serviceLocator) {
	var uriMappers = [];

	serviceLocator.resolveAll('routeDefinition')
		.forEach(function (route) {
			// just colon-parametrized string
			if (typeof (route) === 'string') {
				var routeUri = new URI(route);
				routeUri.path = routeHelper.removeEndSlash(routeUri.path);
				uriMappers.push(routeHelper.compileRoute(routeUri));
				return;
			}

			// extended colon-parametrized mapper
			if (typeof (route) === 'object' &&
				(typeof (route.expression) === 'string') &&
				(route.map instanceof Function)) {
				var mapperUri = new URI(route.expression);
				mapperUri.path = routeHelper.removeEndSlash(mapperUri.path);
				var mapper = routeHelper.compileRoute(mapperUri);
				uriMappers.push({
					expression: mapper.expression,
					map: function (uri) {
						var state = mapper.map(uri);
						return route.map(state);
					}
				});
				return;
			}

			// regular expression mapper
			if (typeof (route) === 'object' &&
				(route.expression instanceof RegExp) &&
				(route.map instanceof Function)) {
				uriMappers.push(route);
			}
		});
	return uriMappers;
}

/**
 * Gets state.
 * @param {Array} uriMappers List of URI mappers.
 * @param {URI} location URI that describes the state.
 * @returns {Object|null} The state from URI.
 */
function getState(uriMappers, location) {
	var state = null;

	uriMappers.some(function (mapper) {
		if (mapper.expression.test(location.path)) {
			state = mapper.map(location) || Object.create(null);
			return true;
		}
		return false;
	});

	return state;
}
},{"./../helpers/routeHelper":111,"catberry-uri":124}],113:[function(require,module,exports){
(function (process,global){
module.exports = process.hrtime || hrtime

// polyfil for window.performance.now
var performance = global.performance || {}
var performanceNow =
  performance.now        ||
  performance.mozNow     ||
  performance.msNow      ||
  performance.oNow       ||
  performance.webkitNow  ||
  function(){ return (new Date()).getTime() }

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp){
  var clocktime = performanceNow.call(performance)*1e-3
  var seconds = Math.floor(clocktime)
  var nanoseconds = Math.floor((clocktime%1)*1e9)
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0]
    nanoseconds = nanoseconds - previousTimestamp[1]
    if (nanoseconds<0) {
      seconds--
      nanoseconds += 1e9
    }
  }
  return [seconds,nanoseconds]
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":116}],114:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],115:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],116:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],117:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],118:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":117,"_process":116,"inherits":115}],119:[function(require,module,exports){
/*
 * catberry-locator
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-locator's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry-locator that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ConstructorTokenizer;

var STATES = {
	ILLEGAL: -1,
	NO: 0,
	IDENTIFIER: 1,
	FUNCTION: 2,
	PARENTHESES_OPEN: 3,
	PARENTHESES_CLOSE: 4,
	COMMA: 5,
	END: 6
};
ConstructorTokenizer.STATES = STATES;

var KEYWORDS = {
	FUNCTION: 'function'
};

var WHITESPACE_TEST = /^\s$/,
	IDENTIFIER_TEST = /^[\$\w]$/;

function ConstructorTokenizer(constructorSource) {
	this._source = String(constructorSource || '');
}

/**
 * Current source code of constructor.
 * @type {string}
 * @private
 */
ConstructorTokenizer.prototype._source = '';

/**
 * Current index in source code.
 * @type {number}
 * @private
 */
ConstructorTokenizer.prototype._currentIndex = 0;

/**
 * Current index in source code.
 * @type {number}
 * @private
 */
ConstructorTokenizer.prototype._currentEnd = 0;

/**
 * Current state.
 * @type {number}
 * @private
 */
ConstructorTokenizer.prototype._currentState = STATES.NO;

/**
 * Gets next token in source.
 * @returns {{state: (number), start: number, end: number}} Token descriptor.
 */
ConstructorTokenizer.prototype.next = function () {
	if (this._currentState === STATES.ILLEGAL ||
		this._currentState === STATES.END) {
		return {
			state: this._currentState,
			start: this._currentIndex,
			end: this._currentIndex + 1
		};
	}

	var start = this._currentIndex,
		state = this._currentState;

	switch (this._currentState) {
		case STATES.PARENTHESES_OPEN:
			this.parenthesesOpenState();
			break;
		case STATES.PARENTHESES_CLOSE:
			this.parenthesesCloseState();
			break;
		case STATES.IDENTIFIER:
			this.identifierState();
			break;
		case STATES.COMMA:
			this.commaState();
			break;
		case STATES.FUNCTION:
			this.functionState();
			break;
		default:
			this.skipWhitespace();
			var expected = this._source.substr(
				this._currentIndex, KEYWORDS.FUNCTION.length
			);
			if (expected === KEYWORDS.FUNCTION) {
				this._currentState = STATES.FUNCTION;
				return this.next();
			}

			state = STATES.ILLEGAL;
	}

	return {
		state: state,
		start: start,
		end: this._currentEnd
	};
};

/**
 * Skips all whitespace characters.
 */
ConstructorTokenizer.prototype.skipWhitespace = function () {
	while (
		this._currentIndex < this._source.length &&
		WHITESPACE_TEST.test(this._source[this._currentIndex])) {
		this._currentIndex++;
	}
};

/**
 * Describes PARENTHESES_OPEN state of machine.
 */
ConstructorTokenizer.prototype.parenthesesOpenState = function () {
	this._currentIndex++;
	this._currentEnd = this._currentIndex;

	this.skipWhitespace();
	if (IDENTIFIER_TEST.test(this._source[this._currentIndex])) {
		this._currentState = STATES.IDENTIFIER;
	} else if (this._source[this._currentIndex] === ')') {
		this._currentState = STATES.PARENTHESES_CLOSE;
	} else {
		this._currentState = STATES.ILLEGAL;
	}
};

/**
 * Describes PARENTHESES_CLOSE state of machine.
 */
ConstructorTokenizer.prototype.parenthesesCloseState = function () {
	this._currentIndex++;
	this._currentEnd = this._currentIndex;
	this._currentState = STATES.END;
};

/**
 * Describes FUNCTION state of machine.
 */
ConstructorTokenizer.prototype.functionState = function () {
	this._currentIndex += KEYWORDS.FUNCTION.length;
	this._currentEnd = this._currentIndex;

	this.skipWhitespace();

	if (this._source[this._currentIndex] === '(') {
		this._currentState = STATES.PARENTHESES_OPEN;
	} else if (IDENTIFIER_TEST.test(this._source[this._currentIndex])) {
		this._currentState = STATES.IDENTIFIER;
	} else {
		this._currentState = STATES.ILLEGAL;
	}
};

/**
 * Describes IDENTIFIER state of machine.
 */
ConstructorTokenizer.prototype.identifierState = function () {
	while (
		this._currentIndex < this._source.length &&
		IDENTIFIER_TEST.test(this._source[this._currentIndex])) {
		this._currentIndex++;
	}

	this._currentEnd = this._currentIndex;

	this.skipWhitespace();
	if (this._source[this._currentIndex] === '(') {
		this._currentState = STATES.PARENTHESES_OPEN;
	} else if (this._source[this._currentIndex] === ')') {
		this._currentState = STATES.PARENTHESES_CLOSE;
	} else if (this._source[this._currentIndex] === ',') {
		this._currentState = STATES.COMMA;
	} else {
		this._currentState = STATES.ILLEGAL;
	}
};

/**
 * Describes COMMA state of machine.
 */
ConstructorTokenizer.prototype.commaState = function () {
	this._currentIndex++;
	this._currentEnd = this._currentIndex;

	this.skipWhitespace();
	if (IDENTIFIER_TEST.test(this._source[this._currentIndex])) {
		this._currentState = STATES.IDENTIFIER;
		return;
	}
	this._currentState = STATES.ILLEGAL;
};
},{}],120:[function(require,module,exports){
/*
 * catberry-locator
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-locator's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry-locator that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ServiceLocator;

var util = require('util'),
	ConstructorTokenizer = require('./ConstructorTokenizer');

var DEPENDENCY_REGEXP = /^\$\w+/,
	ERROR_CONSTRUCTOR_SHOULD_BE_FUNCTION = 'Constructor should be a function',
	ERROR_TYPE_NOT_REGISTERED = 'Type "%s" not registered',
	ERROR_TYPE_SHOULD_BE_STRING = 'Type name "%s" should be a string';

/**
 * Creates new instance of service locator.
 * @constructor
 */
function ServiceLocator() {
	this._registrations = Object.create(null);
}

/**
 * Current type registrations.
 * @type {Object}
 * @protected
 */
ServiceLocator.prototype._registrations = null;

/**
 * Registers new type in service locator.
 * @param {string} type Type name, which will be alias in other constructors.
 * @param {Function} constructor Constructor which
 * initializes instance of specified type.
 * @param {Object?} parameters Set of named parameters
 * which will be also injected.
 * @param {boolean?} isSingleton If true every resolve will return
 * the same instance.
 */
ServiceLocator.prototype.register =
	function (type, constructor, parameters, isSingleton) {
		throwIfNotFunction(constructor);
		throwIfNotString(type);

		initializeRegistration(type, this);
		var parameterNames = getParameterNames(constructor);

		this._registrations[type].unshift({
			constructor: constructor,
			parameters: parameters || {},
			parameterNames: parameterNames,
			isSingleton: Boolean(isSingleton),
			singleInstance: null
		});
	};

/**
 * Registers single instance for specified type.
 * @param {string} type Type name.
 * @param {Object} instance Instance to register.
 */
ServiceLocator.prototype.registerInstance = function (type, instance) {
	throwIfNotString(type);
	initializeRegistration(type, this);

	this._registrations[type].unshift({
		constructor: instance.constructor,
		parameters: {},
		parameterNames: [],
		isSingleton: true,
		singleInstance: instance
	});
};

/**
 * Resolves last registered implementation by type name
 * including all its dependencies recursively.
 * @param {string} type Type name.
 * @returns {Object} Instance of specified type.
 */
ServiceLocator.prototype.resolve = function (type) {
	throwIfNotString(type);
	throwIfNoType(this._registrations, type);
	var firstRegistration = this._registrations[type][0];
	return createInstance(firstRegistration, this);
};

/**
 * Resolves all registered implementations by type name
 * including all dependencies recursively.
 * @param {string} type Type name.
 * @returns {Array} Array of instances specified type.
 */
ServiceLocator.prototype.resolveAll = function (type) {
	throwIfNotString(type);
	try {
		throwIfNoType(this._registrations, type);
	} catch (e) {
		return [];
	}
	return this._registrations[type].map(function (registration) {
		return createInstance(registration, this);
	}, this);
};

/**
 * Resolves instance of specified constructor including dependencies.
 * @param {Function} constructor Constructor for instance creation.
 * @param {Object?} parameters Set of its parameters values.
 * @returns {Object} Instance of specified constructor.
 */
ServiceLocator.prototype.resolveInstance = function (constructor, parameters) {
	return createInstance({
		constructor: constructor,
		parameters: parameters || {},
		parameterNames: getParameterNames(constructor),
		isSingleton: false,
		singleInstance: null
	}, this);
};

/**
 * Unregisters all registrations of specified type.
 * @param {string} type Type name.
 */
ServiceLocator.prototype.unregister = function (type) {
	throwIfNotString(type);
	delete this._registrations[type];
};

/**
 * Initializes registration array for specified type.
 * @param {string} type Type name.
 * @param {ServiceLocator} context Context of execution.
 */
function initializeRegistration(type, context) {
	if (!(type in context._registrations)) {
		context._registrations[type] = [];
	}
}

/**
 * Throws error if specified registration is not found.
 * @param {Object} registrations Current registrations set.
 * @param {string} type Type to check.
 */
function throwIfNoType(registrations, type) {
	if (!(type in registrations) || registrations[type].length === 0) {
		throw new Error(util.format(ERROR_TYPE_NOT_REGISTERED, type));
	}
}

/**
 * Throws error if specified constructor is not a function.
 * @param {Function} constructor Constructor to check.
 */
function throwIfNotFunction(constructor) {
	if (constructor instanceof Function) {
		return;
	}

	throw new Error(ERROR_CONSTRUCTOR_SHOULD_BE_FUNCTION);
}

/**
 * Throws error if specified type name is not a string.
 * @param {string} type Type name to check.
 */
function throwIfNotString(type) {
	if (typeof (type) === 'string') {
		return;
	}

	throw new Error(util.format(ERROR_TYPE_SHOULD_BE_STRING, type));
}

/**
 * Creates instance of type specified and parameters in registration.
 * @param {Object} registration Specified registration of type.
 * @param {ServiceLocator} context Context of execution.
 * @returns {Object} Instance of type specified in registration.
 */
function createInstance(registration, context) {
	if (registration.isSingleton && registration.singleInstance !== null) {
		return registration.singleInstance;
	}

	var instanceParameters = getParameters(registration, context),
		instance = Object.create(registration.constructor.prototype);
	registration.constructor.apply(instance, instanceParameters);

	if (registration.isSingleton) {
		registration.singleInstance = instance;
	}

	return instance;
}

/**
 * Gets constructor parameters specified in type constructor.
 * @param {Object} registration Type registration.
 * @param {ServiceLocator} context Context of execution.
 * @returns {Array} Array of resolved dependencies to inject.
 */
function getParameters(registration, context) {
	return registration.parameterNames.map(function (parameterName) {
		var dependencyName = getDependencyName(parameterName);
		return dependencyName === null ?
			registration.parameters[parameterName] :
			this.resolve(dependencyName);
	}, context);
}

/**
 * Gets name of dependency type.
 * @param {string} parameterName Name of constructor parameter.
 * @returns {string|null} Name of dependency type.
 */
function getDependencyName(parameterName) {
	if (!DEPENDENCY_REGEXP.test(parameterName)) {
		return null;
	}

	return parameterName.substr(1, parameterName.length - 1);
}

/**
 * Gets all parameter names used in constructor function.
 * @param {Function} constructor Constructor function.
 * @returns {Array<string>} Array of parameter names.
 */
function getParameterNames(constructor) {
	var source = constructor.toString(),
		tokenizer = new ConstructorTokenizer(source),
		result = [],
		token = {
			state: ConstructorTokenizer.STATES.NO,
			start: 0,
			end: 0
		},
		areParametersStarted = false;

	while (
		token.state !== ConstructorTokenizer.STATES.END &&
		token.state !== ConstructorTokenizer.STATES.ILLEGAL) {
		token = tokenizer.next();
		if (token.state === ConstructorTokenizer.STATES.PARENTHESES_OPEN) {
			areParametersStarted = true;
		}

		if (areParametersStarted &&
			token.state === ConstructorTokenizer.STATES.IDENTIFIER) {
			result.push(source.substring(token.start, token.end));
		}
	}
	return result;
}
},{"./ConstructorTokenizer":119,"util":118}],121:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = UHR;

var UHRBase = require('../lib/UHRBase'),
	Promise = require('promise'),
	URI = require('catberry-uri').URI,
	util = require('util');

// if browser still does not have promises then add it.
if (!('Promise' in window)) {
	window.Promise = Promise;
}

util.inherits(UHR, UHRBase);

var NON_SAFE_HEADERS = {
	cookie: true,
	'accept-charset': true
};

var ERROR_CONNECTION = 'Connection error',
	ERROR_TIMEOUT = 'Request timeout',
	ERROR_ABORTED = 'Request aborted';

/**
 * Creates new instance of client-side HTTP(S) request implementation.
 * @param {Window} $window Current window object.
 * @constructor
 */
function UHR($window) {
	UHRBase.call(this);
	this.window = $window;
}

/**
 * Current instance of window.
 * @type {Window}
 */
UHR.prototype.window = null;

/**
 * Does request with specified parameters using protocol implementation.
 * @param {Object} parameters Request parameters.
 * @param {string} parameters.method HTTP method.
 * @param {string} parameters.url URL for request.
 * @param {URI} parameters.uri URI object.
 * @param {Object} parameters.headers HTTP headers to send.
 * @param {string|Object} parameters.data Data to send.
 * @param {number} parameters.timeout Request timeout.
 * @param {boolean} parameters.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 * @protected
 */
UHR.prototype._doRequest = function (parameters) {
	var self = this;

	Object.keys(parameters.headers)
		.forEach(function (name) {
			if (NON_SAFE_HEADERS.hasOwnProperty(name.toLowerCase())) {
				delete parameters.headers[name];
			}
		});

	return new Promise(function (fulfill, reject) {
		var requestError = null,
			xhr = new self.window.XMLHttpRequest();

		xhr.onabort = function () {
			requestError = new Error(ERROR_ABORTED);
			reject(requestError);
		};
		xhr.ontimeout = function () {
			requestError = new Error(ERROR_TIMEOUT);
			reject(requestError);
		};
		xhr.onerror = function () {
			requestError = new Error(xhr.statusText || ERROR_CONNECTION);
			reject(requestError);
		};
		xhr.onreadystatechange = function () {
			if (xhr.readyState !== 4) {
				return;
			}
			if (requestError) {
				return;
			}
			var statusObject = getStatusObject(xhr),
				content = self.convertResponse(
					statusObject.headers,
					xhr.responseText
				);
			fulfill({
				status: statusObject,
				content: content
			});
		};

		var user = parameters.uri.authority.userInfo ?
				parameters.uri.authority.userInfo.user : null,
			password = parameters.uri.authority.userInfo ?
				parameters.uri.authority.userInfo.password : null;
		xhr.open(
			parameters.method, parameters.uri.toString(), true,
			user || undefined, password || undefined
		);
		xhr.timeout = parameters.timeout;

		if (parameters.withCredentials) {
			xhr.withCredentials = true;
		}

		Object.keys(parameters.headers)
			.forEach(function (headerName) {
				xhr.setRequestHeader(
					headerName, parameters.headers[headerName]
				);
			});

		xhr.send(parameters.data);
	});
};

/**
 * Gets state object for specified jQuery XHR object.
 * @param {Object?} xhr XHR object.
 * @returns {{code: number, text: string, headers: Object}} Status object.
 */
function getStatusObject(xhr) {
	var headers = {};

	if (!xhr) {
		return {
			code: 0,
			text: '',
			headers: headers
		};
	}

	xhr
		.getAllResponseHeaders()
		.split('\n')
		.forEach(function (header) {
			var delimiterIndex = header.indexOf(':');
			if (delimiterIndex <= 0) {
				return;
			}
			var headerName = header
				.substring(0, delimiterIndex)
				.trim()
				.toLowerCase();
			headers[headerName] = header
				.substring(delimiterIndex + 1)
				.trim();
		});

	return {
		// handle IE9 bug: http://goo.gl/idspSr
		code: xhr.status === 1223 ? 204 : xhr.status,
		text: xhr.status === 1223 ? 'No Content' : xhr.statusText,
		headers: headers
	};
}
},{"../lib/UHRBase":123,"catberry-uri":124,"promise":132,"util":118}],122:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

var UHR = require('./lib/UHR');

module.exports = {
	/**
	 * Registers UHR in server-side service locator.
	 * @param {ServiceLocator} locator Catberry's service locator.
	 */
	register: function (locator) {
		var config = locator.resolve('config');
		locator.register('uhr', UHR, config, true);
	},
	UHR: UHR
};
},{"./lib/UHR":121}],123:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = UHRBase;

var catberryUri = require('catberry-uri'),
	Query = catberryUri.Query,
	URI = catberryUri.URI;

var ERROR_UNSUPPORTED_PROTOCOL = 'Protocol is unsupported',
	ERROR_PARAMETERS_SHOULD_BE_OBJECT = 'Request parameters should be object',
	ERROR_URL_IS_REQUIRED = 'URL is required parameter',
	ERROR_METHOD_IS_REQUIRED = 'Request method is required parameter',
	ERROR_HOST_IS_REQUIRED = 'Host in URL is required',
	ERROR_SCHEME_IS_REQUIRED = 'Scheme in URL is required',
	ERROR_TIMEOUT_SHOULD_BE_NUMBER = 'Timeout should be a number',
	DEFAULT_TIMEOUT = 30000,
	HTTP_PROTOCOL_REGEXP = /^(http)s?$/i;

var METHODS = {
	GET: 'GET',
	HEAD: 'HEAD',
	POST: 'POST',
	PUT: 'PUT',
	PATCH: 'PATCH',
	DELETE: 'DELETE',
	OPTIONS: 'OPTIONS',
	TRACE: 'TRACE',
	CONNECT: 'CONNECT'
};

UHRBase.TYPES = {
	URL_ENCODED: 'application/x-www-form-urlencoded',
	JSON: 'application/json',
	PLAIN_TEXT: 'text/plain',
	HTML: 'text/html'
};

UHRBase.CHARSET = 'UTF-8';

UHRBase.DEFAULT_GENERAL_HEADERS = {
	Accept: UHRBase.TYPES.JSON + '; q=0.7, ' +
		UHRBase.TYPES.HTML + '; q=0.2, ' +
		UHRBase.TYPES.PLAIN_TEXT + '; q=0.1',
	'Accept-Charset': UHRBase.CHARSET + '; q=1'
};

UHRBase.CHARSET_PARAMETER = '; charset=' + UHRBase.CHARSET;
UHRBase.URL_ENCODED_ENTITY_CONTENT_TYPE = UHRBase.TYPES.URL_ENCODED +
	UHRBase.CHARSET_PARAMETER;

UHRBase.JSON_ENTITY_CONTENT_TYPE = UHRBase.TYPES.JSON +
	UHRBase.CHARSET_PARAMETER;

UHRBase.PLAIN_TEXT_ENTITY_CONTENT_TYPE = UHRBase.TYPES.PLAIN_TEXT +
	UHRBase.CHARSET_PARAMETER;

// This module were developed using HTTP/1.1v2 RFC 2616
// (http://www.w3.org/Protocols/rfc2616/)
/**
 * Creates new instance of Basic Universal HTTP(S) Request implementation.
 * @constructor
 */
function UHRBase() { }

/**
 * Does GET request to HTTP server.
 * @param {string} url URL to request.
 * @param {Object?} options Request parameters.
 * @param {Object?} options.headers HTTP headers to send.
 * @param {(string|Object)?} options.data Data to send.
 * @param {number?} options.timeout Request timeout.
 * @param {boolean?} options.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.get = function (url, options) {
	options = options || {};
	var parameters = Object.create(options);
	parameters.method = METHODS.GET;
	parameters.url = url;
	return this.request(parameters);
};

/**
 * Does POST request to HTTP server.
 * @param {string} url URL to request.
 * @param {Object?} options Request parameters.
 * @param {Object?} options.headers HTTP headers to send.
 * @param {(string|Object)?} options.data Data to send.
 * @param {number?} options.timeout Request timeout.
 * @param {boolean?} options.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.post = function (url, options) {
	options = options || {};
	var parameters = Object.create(options);
	parameters.method = METHODS.POST;
	parameters.url = url;
	return this.request(parameters);
};

/**
 * Does PUT request to HTTP server.
 * @param {string} url URL to request.
 * @param {Object?} options Request parameters.
 * @param {Object?} options.headers HTTP headers to send.
 * @param {(string|Object)?} options.data Data to send.
 * @param {number?} options.timeout Request timeout.
 * @param {boolean?} options.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.put = function (url, options) {
	options = options || {};
	var parameters = Object.create(options);
	parameters.method = METHODS.PUT;
	parameters.url = url;
	return this.request(parameters);
};

/**
 * Does PATCH request to HTTP server.
 * @param {string} url URL to request.
 * @param {Object?} options Request parameters.
 * @param {Object?} options.headers HTTP headers to send.
 * @param {(string|Object)?} options.data Data to send.
 * @param {number?} options.timeout Request timeout.
 * @param {boolean?} options.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.patch = function (url, options) {
	options = options || {};
	var parameters = Object.create(options);
	parameters.method = METHODS.PATCH;
	parameters.url = url;
	return this.request(parameters);
};

/**
 * Does DELETE request to HTTP server.
 * @param {string} url URL to request.
 * @param {Object?} options Request parameters.
 * @param {Object?} options.headers HTTP headers to send.
 * @param {(string|Object)?} options.data Data to send.
 * @param {number?} options.timeout Request timeout.
 * @param {boolean?} options.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.delete = function (url, options) {
	var parameters = Object.create(options);
	parameters.method = METHODS.DELETE;
	parameters.url = url;
	return this.request(parameters);
};

/**
 * Does request with specified parameters.
 * @param {Object} parameters Request parameters.
 * @param {string} parameters.method HTTP method.
 * @param {string} parameters.url URL for request.
 * @param {Object?} parameters.headers HTTP headers to send.
 * @param {(string|Object)?} parameters.data Data to send.
 * @param {number?} parameters.timeout Request timeout.
 * @param {boolean?} parameters.unsafeHTTPS If true then requests
 * to servers with invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.request = function (parameters) {
	var self = this;
	return this._validateRequest(parameters)
		.then(function (validated) {
			return self._doRequest(validated);
		});
};

/**
 * Validates UHR parameters.
 * @param {Object} parameters Request parameters.
 * @param {string} parameters.method HTTP method.
 * @param {string} parameters.url URL for request.
 * @param {Object?} parameters.headers HTTP headers to send.
 * @param {(string|Object)?} parameters.data Data to send.
 * @param {number?} parameters.timeout Request timeout.
 * @param {boolean?} parameters.unsafeHTTPS If true then requests
 * to servers with invalid HTTPS certificates are allowed.
 * @returns {Promise} Promise for nothing.
 * @private
 */
/*jshint maxcomplexity:false */
UHRBase.prototype._validateRequest = function (parameters) {
	if (!parameters || typeof (parameters) !== 'object') {
		return Promise.reject(new Error(ERROR_PARAMETERS_SHOULD_BE_OBJECT));
	}

	var validated = Object.create(parameters);

	if (typeof (parameters.url) !== 'string') {
		return Promise.reject(new Error(ERROR_URL_IS_REQUIRED));
	}
	validated.uri = new URI(validated.url);
	if (!validated.uri.scheme) {
		return Promise.reject(new Error(ERROR_SCHEME_IS_REQUIRED));
	}
	if (!HTTP_PROTOCOL_REGEXP.test(validated.uri.scheme)) {
		return Promise.reject(new Error(ERROR_UNSUPPORTED_PROTOCOL));
	}
	if (!validated.uri.authority || !validated.uri.authority.host) {
		return Promise.reject(new Error(ERROR_HOST_IS_REQUIRED));
	}
	if (typeof (validated.method) !== 'string' ||
		!(validated.method in METHODS)) {
		return Promise.reject(new Error(ERROR_METHOD_IS_REQUIRED));
	}

	validated.timeout = validated.timeout || DEFAULT_TIMEOUT;
	if (typeof (validated.timeout) !== 'number') {
		return Promise.reject(new Error(ERROR_TIMEOUT_SHOULD_BE_NUMBER));
	}

	validated.headers = this._createHeaders(validated.headers);

	if (!this._isUpstreamRequest(parameters.method) &&
		validated.data && typeof (validated.data) === 'object') {

		var dataKeys = Object.keys(validated.data);

		if (dataKeys.length > 0 && !validated.uri.query) {
			validated.uri.query = new Query('');
		}

		dataKeys.forEach(function (key) {
			validated.uri.query.values[key] = validated.data[key];
		});
		validated.data = null;
	} else {
		var dataAndHeaders = this._getDataToSend(
			validated.headers, validated.data
		);
		validated.headers = dataAndHeaders.headers;
		validated.data = dataAndHeaders.data;
	}

	return Promise.resolve(validated);
};

/**
 * Gets data for sending via HTTP request using Content Type HTTP header.
 * @param {Object} headers HTTP headers.
 * @param {Object|string} data Data to send.
 * @returns {{headers: Object, data: Object|string}} Data and headers to send.
 * @private
 */
UHRBase.prototype._getDataToSend = function (headers, data) {
	var found = findContentType(headers),
		contentTypeHeader = found.name,
		contentType = found.type;

	if (!data || typeof (data) !== 'object') {
		data = data ? String(data) : '';
		if (!contentType) {
			headers[contentTypeHeader] = UHRBase.PLAIN_TEXT_ENTITY_CONTENT_TYPE;
		}
		return {
			headers: headers,
			data: data
		};
	}

	if (contentType === UHRBase.TYPES.JSON) {
		return {
			headers: headers,
			data: JSON.stringify(data)
		};
	}

	// otherwise object will be sent with
	// application/x-www-form-urlencoded
	headers[contentTypeHeader] = UHRBase.URL_ENCODED_ENTITY_CONTENT_TYPE;

	var query = new Query();
	query.values = data;
	return {
		headers: headers,
		data: query.toString()
			.replace(/\+/g, '%2B')
			.replace(/%20/g, '+')
	};
};

/**
 * Creates HTTP headers for request using defaults and current parameters.
 * @param {Object} parameterHeaders HTTP headers of UHR.
 * @protected
 */
UHRBase.prototype._createHeaders = function (parameterHeaders) {
	if (!parameterHeaders || typeof (parameterHeaders) !== 'object') {
		parameterHeaders = {};
	}
	var headers = {};

	Object.keys(UHRBase.DEFAULT_GENERAL_HEADERS)
		.forEach(function (headerName) {
			headers[headerName] = UHRBase.DEFAULT_GENERAL_HEADERS[headerName];
		});

	Object.keys(parameterHeaders)
		.forEach(function (headerName) {
			if (parameterHeaders[headerName] === null ||
				parameterHeaders[headerName] === undefined) {
				delete headers[headerName];
				return;
			}
			headers[headerName] = parameterHeaders[headerName];
		});

	return headers;
};

/**
 * Does request with specified parameters using protocol implementation.
 * @param {Object} parameters Request parameters.
 * @param {string} parameters.method HTTP method.
 * @param {string} parameters.url URL for request.
 * @param {URI} parameters.uri URI object.
 * @param {Object} parameters.headers HTTP headers to send.
 * @param {string|Object} parameters.data Data to send.
 * @param {number} parameters.timeout Request timeout.
 * @param {boolean} parameters.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 * @protected
 * @abstract
 */
// jscs:disable disallowUnusedParams
UHRBase.prototype._doRequest = function (parameters) { };

/**
 * Converts response data according content type.
 * @param {Object} headers HTTP headers.
 * @param {string} responseData Data from response.
 * @returns {string|Object} Converted data.
 */
UHRBase.prototype.convertResponse = function (headers, responseData) {
	if (typeof (responseData) !== 'string') {
		responseData = '';
	}
	var found = findContentType(headers),
		contentType = found.type || UHRBase.TYPES.PLAIN_TEXT;

	switch (contentType) {
		case UHRBase.TYPES.JSON:
			var json;
			try {
				json = JSON.parse(responseData);
			} catch (e) {
				// nothing to do
			}
			return json || {};
		case UHRBase.TYPES.URL_ENCODED:
			var object;
			try {
				var query = new Query(responseData.replace('+', '%20'));
				object = query.values;
			} catch (e) {
				// nothing to do
			}
			return object || {};
		default:
			return responseData;
	}
};

/**
 * Determines is current query needs to use upstream.
 * @param {string} method HTTP method.
 * @returns {boolean} Is current HTTP method means upstream usage.
 * @protected
 */
UHRBase.prototype._isUpstreamRequest = function (method) {
	return (
		method === METHODS.POST ||
		method === METHODS.PUT ||
		method === METHODS.PATCH
		);
};

/**
 * Finds content type header in headers object.
 * @param {Object} headers HTTP headers.
 * @returns {{name: string, type: string}} Name of header and content type.
 */
function findContentType(headers) {
	var contentTypeString = '',
		contentTypeHeader = 'Content-Type';

	Object.keys(headers)
		.forEach(function (key) {
			if (key.toLowerCase() !== 'content-type') {
				return;
			}
			contentTypeHeader = key;
			contentTypeString = headers[key];
		});

	var typeAndParameters = contentTypeString.split(';'),
		contentType = typeAndParameters[0].toLowerCase();
	return {
		name: contentTypeHeader,
		type: contentType
	};
}

},{"catberry-uri":124}],124:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = {
	URI: require('./lib/URI'),
	Authority: require('./lib/Authority'),
	UserInfo: require('./lib/UserInfo'),
	Query: require('./lib/Query')
};
},{"./lib/Authority":125,"./lib/Query":126,"./lib/URI":127,"./lib/UserInfo":128}],125:[function(require,module,exports){
/*
 * catberry-uri
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-uri's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry-uri that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = Authority;

var UserInfo = require('./UserInfo'),
	percentEncodingHelper = require('./percentEncodingHelper');

var PORT_REGEXP = /^\d+$/,
	ERROR_PORT = 'URI authority port must satisfy expression ' +
		PORT_REGEXP.toString();

/**
 * Creates new instance of URI authority component parser.
 * https://tools.ietf.org/html/rfc3986#section-3.2
 * @param {string?} authorityString URI authority component string.
 * @constructor
 */
function Authority(authorityString) {
	if (typeof (authorityString) === 'string' && authorityString.length > 0) {
		var firstAtIndex = authorityString.indexOf('@');
		if (firstAtIndex !== -1) {
			var userInfoString = authorityString.substring(0, firstAtIndex);
			this.userInfo = new UserInfo(userInfoString);
			authorityString = authorityString.substring(firstAtIndex + 1);
		}

		var lastColonIndex = authorityString.lastIndexOf(':');
		if (lastColonIndex !== -1) {
			var portString = authorityString.substring(lastColonIndex + 1);
			if (lastColonIndex === authorityString.length - 1) {
				this.port = '';
				authorityString = authorityString.substring(0, lastColonIndex);
			} else if (PORT_REGEXP.test(portString)) {
				this.port = portString;
				authorityString = authorityString.substring(0, lastColonIndex);
			}
		}

		this.host = percentEncodingHelper.decode(authorityString);
	}
}

/**
 * Current user information.
 * https://tools.ietf.org/html/rfc3986#section-3.2.1
 * @type {UserInfo}
 */
Authority.prototype.userInfo = null;

/**
 * Current host.
 * https://tools.ietf.org/html/rfc3986#section-3.2.2
 * @type {string}
 */
Authority.prototype.host = null;

/**
 * Current port.
 * https://tools.ietf.org/html/rfc3986#section-3.2.3
 * @type {string}
 */
Authority.prototype.port = null;

/**
 * Clones current authority.
 * @returns {Authority} New clone of current object.
 */
Authority.prototype.clone = function () {
	var authority = new Authority();
	if (this.userInfo) {
		authority.userInfo = this.userInfo.clone();
	}
	if (typeof (this.host) === 'string') {
		authority.host = this.host;
	}
	if (typeof (this.port) === 'string') {
		authority.port = this.port;
	}
	return authority;
};

/**
 * Recombine all authority components into authority string.
 * @returns {string} Authority component string.
 */
Authority.prototype.toString = function () {
	var result = '';
	if (this.userInfo) {
		result += this.userInfo.toString() + '@';
	}
	if (this.host !== undefined && this.host !== null) {
		var host = String(this.host);
		result += percentEncodingHelper.encodeHost(host);
	}
	if (this.port !== undefined && this.port !== null) {
		var port = String(this.port);
		if (port.length > 0 && !PORT_REGEXP.test(port)) {
			throw new Error(ERROR_PORT);
		}
		result += ':' + port;
	}
	return result;
};
},{"./UserInfo":128,"./percentEncodingHelper":129}],126:[function(require,module,exports){
/*
 * catberry-uri
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-uri's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry-uri that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = Query;

var percentEncodingHelper = require('./percentEncodingHelper');

/**
 * Creates new instance of URI query component parser.
 * https://tools.ietf.org/html/rfc3986#section-3.4
 * @param {string?} queryString URI query component string.
 * @constructor
 */
function Query(queryString) {
	if (typeof (queryString) === 'string') {
		this.values = {};

		queryString
			.split('&')
			.forEach(function (pair) {
				var parts = pair.split('='),
					key = percentEncodingHelper.decode(parts[0]);
				if (!key) {
					return;
				}
				if (key in this.values &&
					!(this.values[key] instanceof Array)) {
					this.values[key] = [this.values[key]];
				}

				var value = typeof (parts[1]) === 'string' ?
					percentEncodingHelper.decode(parts[1]) : null;

				if (this.values[key] instanceof Array) {
					this.values[key].push(value);
				} else {
					this.values[key] = value;
				}
			}, this);
	}
}

/**
 * Current set of values of query.
 * @type {Object}
 */
Query.prototype.values = null;

/**
 * Clones current query to a new object.
 * @returns {Query} New clone of current object.
 */
Query.prototype.clone = function () {
	var query = new Query();
	if (this.values) {
		query.values = {};
		Object.keys(this.values)
			.forEach(function (key) {
				query.values[key] = this.values[key];
			}, this);
	}
	return query;
};

/**
 * Converts current set of query values to string.
 * @returns {string} Query component string.
 */
Query.prototype.toString = function () {
	if (!this.values) {
		return '';
	}

	var queryString = '';
	Object.keys(this.values)
		.forEach(function (key) {
			var values = this.values[key] instanceof Array ?
				this.values[key] : [this.values[key]];

			values.forEach(function (value) {
				queryString += '&' + percentEncodingHelper
					.encodeQuerySubComponent(key);
				if (value === undefined || value === null) {
					return;
				}
				value = String(value);
				queryString += '=' +
					percentEncodingHelper.encodeQuerySubComponent(value);
			});
		}, this);

	return queryString.replace(/^&/, '');
};
},{"./percentEncodingHelper":129}],127:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = URI;

var Authority = require('./Authority'),
	percentEncodingHelper = require('./percentEncodingHelper'),
	Query = require('./Query');

// https://tools.ietf.org/html/rfc3986#appendix-B
var URI_PARSE_REGEXP = new RegExp(
		'^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?'
	),
	// https://tools.ietf.org/html/rfc3986#section-3.1
	SCHEME_REGEXP = /^[a-z]+[a-z\d\+\.-]*$/i,
	ERROR_SCHEME = 'URI scheme must satisfy expression ' +
		SCHEME_REGEXP.toString(),
	ERROR_BASE_SCHEME = 'Scheme component is required to be present ' +
		'in a base URI';

/**
 * Creates new instance of URI according to RFC 3986.
 * @param {string?} uriString URI string to parse components.
 * @constructor
 */
function URI(uriString) {
	if (typeof (uriString) !== 'string') {
		uriString = '';
	}

	// https://tools.ietf.org/html/rfc3986#appendix-B
	var matches = uriString.match(URI_PARSE_REGEXP);

	if (matches) {
		if (typeof (matches[2]) === 'string') {
			this.scheme = percentEncodingHelper.decode(matches[2]);
		}
		if (typeof (matches[4]) === 'string') {
			this.authority = new Authority(matches[4]);
		}
		if (typeof (matches[5]) === 'string') {
			this.path = percentEncodingHelper.decodePath(matches[5]);
		}
		if (typeof (matches[7]) === 'string') {
			this.query = new Query(matches[7]);
		}
		if (typeof (matches[9]) === 'string') {
			this.fragment = percentEncodingHelper.decode(matches[9]);
		}
	}
}

/**
 * Current URI scheme.
 * https://tools.ietf.org/html/rfc3986#section-3.1
 * @type {string}
 */
URI.prototype.scheme = null;

/**
 * Current URI authority.
 * https://tools.ietf.org/html/rfc3986#section-3.2
 * @type {Authority}
 */
URI.prototype.authority = null;

/**
 * Current URI path.
 * https://tools.ietf.org/html/rfc3986#section-3.3
 * @type {string}
 */
URI.prototype.path = null;

/**
 * Current URI query.
 * https://tools.ietf.org/html/rfc3986#section-3.4
 * @type {Query}
 */
URI.prototype.query = null;

/**
 * Current URI fragment.
 * https://tools.ietf.org/html/rfc3986#section-3.5
 * @type {string}
 */
URI.prototype.fragment = null;

/**
 * Converts a URI reference that might be relative to a given base URI
 * into the reference's target URI.
 * https://tools.ietf.org/html/rfc3986#section-5.2
 * @param {URI} baseUri Base URI.
 * @returns {URI} Resolved URI.
 */
URI.prototype.resolveRelative = function (baseUri) {
	if (!baseUri.scheme) {
		throw new Error(ERROR_BASE_SCHEME);
	}

	return transformReference(baseUri, this);
};

/**
 * Clones current URI to a new object.
 * @returns {URI} New clone of current object.
 */
URI.prototype.clone = function () {
	var uri = new URI();

	if (typeof (this.scheme) === 'string') {
		uri.scheme = this.scheme;
	}

	if (this.authority) {
		uri.authority = this.authority.clone();
	}

	if (typeof (this.path) === 'string') {
		uri.path = this.path;
	}

	if (this.query) {
		uri.query = this.query.clone();
	}

	if (typeof (this.fragment) === 'string') {
		uri.fragment = this.fragment;
	}

	return uri;
};

/**
 * Recomposes URI components to URI string,
 * https://tools.ietf.org/html/rfc3986#section-5.3
 * @returns {string} URI string.
 */
URI.prototype.toString = function () {
	var result = '';

	if (this.scheme !== undefined && this.scheme !== null) {
		var scheme = String(this.scheme);
		if (!SCHEME_REGEXP.test(scheme)) {
			throw new Error(ERROR_SCHEME);
		}
		result += scheme + ':';
	}

	if (this.authority) {
		result += '//' + this.authority.toString();
	}

	var path = this.path === undefined || this.path === null ?
		'' : String(this.path);
	result += percentEncodingHelper.encodePath(path);

	if (this.query) {
		result += '?' + this.query.toString();
	}

	if (this.fragment !== undefined && this.fragment !== null) {
		var fragment = String(this.fragment);
		result += '#' + percentEncodingHelper.encodeFragment(fragment);
	}

	return result;
};

/**
 * Transforms reference for relative resolution.
 * Whole algorithm has been taken from
 * https://tools.ietf.org/html/rfc3986#section-5.2.2
 * @param {URI} baseUri Base URI for resolution.
 * @param {URI} referenceUri Reference URI to resolve.
 * @returns {URI} Components of target URI.
 */
/*jshint maxdepth:false */
/*jshint maxcomplexity:false */
function transformReference(baseUri, referenceUri) {
	var targetUri = new URI('');

	if (referenceUri.scheme) {
		targetUri.scheme = referenceUri.scheme;
		targetUri.authority = referenceUri.authority ?
			referenceUri.authority.clone() : referenceUri.authority;
		targetUri.path = removeDotSegments(referenceUri.path);
		targetUri.query = referenceUri.query ?
			referenceUri.query.clone() : referenceUri.query;
	} else {
		if (referenceUri.authority) {
			targetUri.authority = referenceUri.authority ?
				referenceUri.authority.clone() : referenceUri.authority;
			targetUri.path = removeDotSegments(referenceUri.path);
			targetUri.query = referenceUri.query ?
				referenceUri.query.clone() : referenceUri.query;
		} else {
			if (referenceUri.path === '') {
				targetUri.path = baseUri.path;
				if (referenceUri.query) {
					targetUri.query = referenceUri.query.clone();
				} else {
					targetUri.query = baseUri.query ?
						baseUri.query.clone() : baseUri.query;
				}
			} else {
				if (referenceUri.path[0] === '/') {
					targetUri.path =
						removeDotSegments(referenceUri.path);
				} else {
					targetUri.path =
						merge(baseUri, referenceUri);
					targetUri.path =
						removeDotSegments(targetUri.path);
				}
				targetUri.query = referenceUri.query ?
					referenceUri.query.clone() : referenceUri.query;
			}
			targetUri.authority = baseUri.authority ?
				baseUri.authority.clone() : baseUri.authority;
		}
		targetUri.scheme = baseUri.scheme;
	}

	targetUri.fragment = referenceUri.fragment;
	return targetUri;
}

/**
 * Merges a relative-path reference with the path of the base URI.
 * https://tools.ietf.org/html/rfc3986#section-5.2.3
 * @param {URI} baseUri Components of base URI.
 * @param {URI} referenceUri Components of reference URI.
 * @returns {string} Merged path.
 */
function merge(baseUri, referenceUri) {
	if (baseUri.authority && baseUri.path === '') {
		return '/' + referenceUri.path;
	}

	var segmentsString = baseUri.path.indexOf('/') !== -1 ?
		baseUri.path.replace(/\/[^\/]+$/, '/') : '';

	return segmentsString + referenceUri.path;
}

/**
 * Removes dots segments from URI path.
 * https://tools.ietf.org/html/rfc3986#section-5.2.4
 * @param {string} uriPath URI path with possible dot segments.
 * @returns {string} URI path without dot segments.
 */
function removeDotSegments(uriPath) {
	if (!uriPath) {
		return '';
	}

	var inputBuffer = uriPath,
		newBuffer = '',
		nextSegment = '',
		outputBuffer = '';

	while (inputBuffer.length !== 0) {

		// If the input buffer begins with a prefix of "../" or "./",
		// then remove that prefix from the input buffer
		newBuffer = inputBuffer.replace(/^\.?\.\//, '');
		if (newBuffer !== inputBuffer) {
			inputBuffer = newBuffer;
			continue;
		}

		// if the input buffer begins with a prefix of "/./" or "/.",
		// where "." is a complete path segment, then replace that
		// prefix with "/" in the input buffer
		newBuffer = inputBuffer.replace(/^((\/\.\/)|(\/\.$))/, '/');
		if (newBuffer !== inputBuffer) {
			inputBuffer = newBuffer;
			continue;
		}

		// if the input buffer begins with a prefix of "/../" or "/..",
		// where ".." is a complete path segment, then replace that
		// prefix with "/" in the input buffer and remove the last
		// segment and its preceding "/" (if any) from the output
		// buffer
		newBuffer = inputBuffer.replace(/^((\/\.\.\/)|(\/\.\.$))/, '/');
		if (newBuffer !== inputBuffer) {
			outputBuffer = outputBuffer.replace(/\/[^\/]+$/, '');
			inputBuffer = newBuffer;
			continue;
		}

		// if the input buffer consists only of "." or "..", then remove
		// that from the input buffer
		if (inputBuffer === '.' || inputBuffer === '..') {
			break;
		}

		// move the first path segment in the input buffer to the end of
		// the output buffer, including the initial "/" character (if
		// any) and any subsequent characters up to, but not including,
		// the next "/" character or the end of the input buffer
		nextSegment = /^\/?[^\/]*(\/|$)/.exec(inputBuffer)[0];
		nextSegment = nextSegment.replace(/([^\/])(\/$)/, '$1');
		inputBuffer = inputBuffer.substring(nextSegment.length);
		outputBuffer += nextSegment;
	}

	return outputBuffer;
}
},{"./Authority":125,"./Query":126,"./percentEncodingHelper":129}],128:[function(require,module,exports){
/*
 * catberry-uri
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-uri's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry-uri that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = UserInfo;

var percentEncodingHelper = require('./percentEncodingHelper');

/**
 * Creates new instance of user information component parser.
 * https://tools.ietf.org/html/rfc3986#section-3.2.1
 * @param {string?} userInfoString User information component string.
 * @constructor
 */
function UserInfo(userInfoString) {
	if (typeof (userInfoString) === 'string' && userInfoString.length > 0) {
		var parts = userInfoString.split(':');
		if (typeof (parts[0]) === 'string') {
			this.user = percentEncodingHelper.decode(parts[0]);
		}
		if (typeof (parts[1]) === 'string') {
			this.password = percentEncodingHelper.decode(parts[1]);
		}
	}
}

/**
 * Current user component.
 * @type {string}
 */
UserInfo.prototype.user = null;

/**
 * Current password.
 * @type {string}
 */
UserInfo.prototype.password = null;

/**
 * Clones current user information.
 * @returns {UserInfo} New clone of current object.
 */
UserInfo.prototype.clone = function () {
	var userInfo = new UserInfo();
	if (typeof (this.user) === 'string') {
		userInfo.user = this.user;
	}
	if (typeof (this.password) === 'string') {
		userInfo.password = this.password;
	}
	return userInfo;
};

/**
 * Recombines user information components to userInfo string.
 * @returns {string} User information component string.
 */
UserInfo.prototype.toString = function () {
	var result = '';
	if (this.user !== undefined && this.user !== null) {
		var user = String(this.user);
		result += percentEncodingHelper
			.encodeUserInfoSubComponent(user);
	}
	if (this.password !== undefined && this.password !== null) {
		var password = String(this.password);
		result += ':' + percentEncodingHelper
			.encodeUserInfoSubComponent(password);
	}

	return result;
};
},{"./percentEncodingHelper":129}],129:[function(require,module,exports){
/*
 * catberry-uri
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-uri's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry-uri that are not externally
 * maintained libraries.
 */

'use strict';

// https://tools.ietf.org/html/rfc3986#section-2.1

module.exports = {
	// \uD800-\uDBFF \uDC00-\uDFFF
	// surrogates pairs like emoji we should ignore
	/**
	 * Encodes authority user information sub-component according to RFC 3986.
	 * @param {string} string Component to encode.
	 * @returns {string} Encoded component.
	 */
	encodeUserInfoSubComponent: function (string) {
		return string.replace(
			// https://tools.ietf.org/html/rfc3986#section-3.2.1
			/[^\w\.~\-!\$&'\(\)\*\+,;=\uD800-\uDBFF\uDC00-\uDFFF]/g,
			encodeURIComponent
		);
	},
	/**
	 * Encodes authority host component according to RFC 3986.
	 * @param {string} string Component to encode.
	 * @returns {string} Encoded component.
	 */
	encodeHost: function (string) {
		return string.replace(
			// https://tools.ietf.org/html/rfc3986#section-3.2.2
			/[^\w\.~\-!\$&'\(\)\*\+,;=:\[\]\uD800-\uDBFF\uDC00-\uDFFF]/g,
			encodeURIComponent
		);
	},
	/**
	 * Encodes URI path component according to RFC 3986.
	 * @param {string} string Component to encode.
	 * @returns {string} Encoded component.
	 */
	encodePath: function (string) {
		return string.split(/%2f/i)
			.map(function (part) {
				return part.replace(
					// https://tools.ietf.org/html/rfc3986#section-3.3
					/[^\w\.~\-!\$&'\(\)\*\+,;=:@\/\uD800-\uDBFF\uDC00-\uDFFF]/g,
					encodeURIComponent
				);
			})
			.reduce(function (prev, current) {
				if (!prev) {
					return current;
				}
				if (!current) {
					return prev;
				}
				return prev + '%2F' + current;
			}, '');
	},
	/**
	 * Encodes query sub-component according to RFC 3986.
	 * @param {string} string Component to encode.
	 * @returns {string} Encoded component.
	 */
	encodeQuerySubComponent: function (string) {
		return string.replace(
			// https://tools.ietf.org/html/rfc3986#section-3.4
			/[^\w\.~\-!\$'\(\)\*\+,;:@\/\?\uD800-\uDBFF\uDC00-\uDFFF]/g,
			encodeURIComponent
		);
	},

	/**
	 * Encodes URI fragment component according to RFC 3986.
	 * @param {string} string Component to encode.
	 * @returns {string} Encoded component.
	 */
	encodeFragment: function (string) {
		return string.replace(
			// https://tools.ietf.org/html/rfc3986#section-3.5
			/[^\w\.~\-!\$&'\(\)\*\+,;=:@\/\?\uD800-\uDBFF\uDC00-\uDFFF]/g,
			encodeURIComponent
		);
	},

	/**
	 * Decodes percent encoded component.
	 * @param {string} string Component to decode.
	 * @returns {string} Decoded component.
	 */
	decode: function (string) {
		return decodeURIComponent(string);
	},

	/**
	 * Decodes percent encoded path component.
	 * @param {string} string Component to decode.
	 * @returns {string} Decoded path component.
	 */
	decodePath: function (string) {
		return string.split(/%2f/i)
			.map(decodeURIComponent)
			.reduce(function (prev, current) {
				if (!prev) {
					return current;
				}
				if (!current) {
					return prev;
				}
				return prev + '%2F' + current;
			}, '');
	}
};
},{}],130:[function(require,module,exports){
// Create a range object for efficently rendering strings to elements.
var range;

function empty(o) {
    for (var k in o) {
        if (o.hasOwnProperty(k)) {
            return false;
        }
    }

    return true;
}
function toElement(str) {
    if (!range) {
        range = document.createRange();
        range.selectNode(document.body);
    }

    var fragment;
    if (range.createContextualFragment) {
        fragment = range.createContextualFragment(str);
    } else {
        fragment = document.createElement('body');
        fragment.innerHTML = str;
    }
    return fragment.childNodes[0];
}

var specialElHandlers = {
    /**
     * Needed for IE. Apparently IE doesn't think
     * that "selected" is an attribute when reading
     * over the attributes using selectEl.attributes
     */
    OPTION: function(fromEl, toEl) {
        if ((fromEl.selected = toEl.selected)) {
            fromEl.setAttribute('selected', '');
        } else {
            fromEl.removeAttribute('selected', '');
        }
    },
    /**
     * The "value" attribute is special for the <input> element
     * since it sets the initial value. Changing the "value"
     * attribute without changing the "value" property will have
     * no effect since it is only used to the set the initial value.
     * Similar for the "checked" attribute.
     */
    INPUT: function(fromEl, toEl) {
        fromEl.checked = toEl.checked;

        if (fromEl.value != toEl.value) {
            fromEl.value = toEl.value;
        }

        if (!toEl.hasAttribute('checked')) {
            fromEl.removeAttribute('checked');
        }

        if (!toEl.hasAttribute('value')) {
            fromEl.removeAttribute('value');
        }
    },

    TEXTAREA: function(fromEl, toEl) {
        var newValue = toEl.value;
        if (fromEl.value != newValue) {
            fromEl.value = newValue;
        }

        if (fromEl.firstChild) {
            fromEl.firstChild.nodeValue = newValue;
        }
    }
};

function noop() {}

/**
 * Loop over all of the attributes on the target node and make sure the
 * original DOM node has the same attributes. If an attribute
 * found on the original node is not on the new node then remove it from
 * the original node
 * @param  {HTMLElement} fromNode
 * @param  {HTMLElement} toNode
 */
function morphAttrs(fromNode, toNode) {
    var attrs = toNode.attributes;
    var i;
    var attr;
    var attrName;
    var attrValue;
    var foundAttrs = {};

    for (i=attrs.length-1; i>=0; i--) {
        attr = attrs[i];
        if (attr.specified !== false) {
            attrName = attr.name;
            attrValue = attr.value;
            foundAttrs[attrName] = true;

            if (fromNode.getAttribute(attrName) !== attrValue) {
                fromNode.setAttribute(attrName, attrValue);
            }
        }
    }

    // Delete any extra attributes found on the original DOM element that weren't
    // found on the target element.
    attrs = fromNode.attributes;

    for (i=attrs.length-1; i>=0; i--) {
        attr = attrs[i];
        if (attr.specified !== false) {
            attrName = attr.name;
            if (!foundAttrs.hasOwnProperty(attrName)) {
                fromNode.removeAttribute(attrName);
            }
        }
    }
}

/**
 * Copies the children of one DOM element to another DOM element
 */
function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while(curChild) {
        var nextChild = curChild.nextSibling;
        toEl.appendChild(curChild);
        curChild = nextChild;
    }
    return toEl;
}

function defaultGetNodeKey(node) {
    return node.id;
}

function morphdom(fromNode, toNode, options) {
    if (!options) {
        options = {};
    }

    if (typeof toNode === 'string') {
        toNode = toElement(toNode);
    }

    var savedEls = {}; // Used to save off DOM elements with IDs
    var unmatchedEls = {};
    var getNodeKey = options.getNodeKey || defaultGetNodeKey;
    var onNodeDiscarded = options.onNodeDiscarded || noop;
    var onBeforeMorphEl = options.onBeforeMorphEl || noop;
    var onBeforeMorphElChildren = options.onBeforeMorphElChildren || noop;
    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
    var childrenOnly = options.childrenOnly === true;
    var movedEls = [];

    function removeNodeHelper(node, nestedInSavedEl) {
        var id = getNodeKey(node);
        // If the node has an ID then save it off since we will want
        // to reuse it in case the target DOM tree has a DOM element
        // with the same ID
        if (id) {
            savedEls[id] = node;
        } else if (!nestedInSavedEl) {
            // If we are not nested in a saved element then we know that this node has been
            // completely discarded and will not exist in the final DOM.
            onNodeDiscarded(node);
        }

        if (node.nodeType === 1) {
            var curChild = node.firstChild;
            while(curChild) {
                removeNodeHelper(curChild, nestedInSavedEl || id);
                curChild = curChild.nextSibling;
            }
        }
    }

    function walkDiscardedChildNodes(node) {
        if (node.nodeType === 1) {
            var curChild = node.firstChild;
            while(curChild) {


                if (!getNodeKey(curChild)) {
                    // We only want to handle nodes that don't have an ID to avoid double
                    // walking the same saved element.

                    onNodeDiscarded(curChild);

                    // Walk recursively
                    walkDiscardedChildNodes(curChild);
                }

                curChild = curChild.nextSibling;
            }
        }
    }

    function removeNode(node, parentNode, alreadyVisited) {
        if (onBeforeNodeDiscarded(node) === false) {
            return;
        }

        parentNode.removeChild(node);
        if (alreadyVisited) {
            if (!getNodeKey(node)) {
                onNodeDiscarded(node);
                walkDiscardedChildNodes(node);
            }
        } else {
            removeNodeHelper(node);
        }
    }

    function morphEl(fromEl, toEl, alreadyVisited, childrenOnly) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
            // If an element with an ID is being morphed then it is will be in the final
            // DOM so clear it out of the saved elements collection
            delete savedEls[toElKey];
        }

        if (!childrenOnly) {
            if (onBeforeMorphEl(fromEl, toEl) === false) {
                return;
            }

            morphAttrs(fromEl, toEl);

            if (onBeforeMorphElChildren(fromEl, toEl) === false) {
                return;
            }
        }

        if (fromEl.tagName != 'TEXTAREA') {
            var curToNodeChild = toEl.firstChild;
            var curFromNodeChild = fromEl.firstChild;
            var curToNodeId;

            var fromNextSibling;
            var toNextSibling;
            var savedEl;
            var unmatchedEl;

            outer: while(curToNodeChild) {
                toNextSibling = curToNodeChild.nextSibling;
                curToNodeId = getNodeKey(curToNodeChild);

                while(curFromNodeChild) {
                    var curFromNodeId = getNodeKey(curFromNodeChild);
                    fromNextSibling = curFromNodeChild.nextSibling;

                    if (!alreadyVisited) {
                        if (curFromNodeId && (unmatchedEl = unmatchedEls[curFromNodeId])) {
                            unmatchedEl.parentNode.replaceChild(curFromNodeChild, unmatchedEl);
                            morphEl(curFromNodeChild, unmatchedEl, alreadyVisited);
                            curFromNodeChild = fromNextSibling;
                            continue;
                        }
                    }

                    var curFromNodeType = curFromNodeChild.nodeType;

                    if (curFromNodeType === curToNodeChild.nodeType) {
                        var isCompatible = false;

                        if (curFromNodeType === 1) { // Both nodes being compared are Element nodes
                            if (curFromNodeChild.tagName === curToNodeChild.tagName) {
                                // We have compatible DOM elements
                                if (curFromNodeId || curToNodeId) {
                                    // If either DOM element has an ID then we handle
                                    // those differently since we want to match up
                                    // by ID
                                    if (curToNodeId === curFromNodeId) {
                                        isCompatible = true;
                                    }
                                } else {
                                    isCompatible = true;
                                }
                            }

                            if (isCompatible) {
                                // We found compatible DOM elements so transform the current "from" node
                                // to match the current target DOM node.
                                morphEl(curFromNodeChild, curToNodeChild, alreadyVisited);
                            }
                        } else if (curFromNodeType === 3) { // Both nodes being compared are Text nodes
                            isCompatible = true;
                            // Simply update nodeValue on the original node to change the text value
                            curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                        }

                        if (isCompatible) {
                            curToNodeChild = toNextSibling;
                            curFromNodeChild = fromNextSibling;
                            continue outer;
                        }
                    }

                    // No compatible match so remove the old node from the DOM and continue trying
                    // to find a match in the original DOM
                    removeNode(curFromNodeChild, fromEl, alreadyVisited);
                    curFromNodeChild = fromNextSibling;
                }

                if (curToNodeId) {
                    if ((savedEl = savedEls[curToNodeId])) {
                        morphEl(savedEl, curToNodeChild, true);
                        curToNodeChild = savedEl; // We want to append the saved element instead
                    } else {
                        // The current DOM element in the target tree has an ID
                        // but we did not find a match in any of the corresponding
                        // siblings. We just put the target element in the old DOM tree
                        // but if we later find an element in the old DOM tree that has
                        // a matching ID then we will replace the target element
                        // with the corresponding old element and morph the old element
                        unmatchedEls[curToNodeId] = curToNodeChild;
                    }
                }

                // If we got this far then we did not find a candidate match for our "to node"
                // and we exhausted all of the children "from" nodes. Therefore, we will just
                // append the current "to node" to the end
                fromEl.appendChild(curToNodeChild);

                if (curToNodeChild.nodeType === 1 && (curToNodeId || curToNodeChild.firstChild)) {
                    // The element that was just added to the original DOM may have
                    // some nested elements with a key/ID that needs to be matched up
                    // with other elements. We'll add the element to a list so that we
                    // can later process the nested elements if there are any unmatched
                    // keyed elements that were discarded
                    movedEls.push(curToNodeChild);
                }

                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
            }

            // We have processed all of the "to nodes". If curFromNodeChild is non-null then
            // we still have some from nodes left over that need to be removed
            while(curFromNodeChild) {
                fromNextSibling = curFromNodeChild.nextSibling;
                removeNode(curFromNodeChild, fromEl, alreadyVisited);
                curFromNodeChild = fromNextSibling;
            }
        }

        var specialElHandler = specialElHandlers[fromEl.tagName];
        if (specialElHandler) {
            specialElHandler(fromEl, toEl);
        }
    } // END: morphEl(...)

    var morphedNode = fromNode;
    var morphedNodeType = morphedNode.nodeType;
    var toNodeType = toNode.nodeType;

    if (!childrenOnly) {
        // Handle the case where we are given two DOM nodes that are not
        // compatible (e.g. <div> --> <span> or <div> --> TEXT)
        if (morphedNodeType === 1) {
            if (toNodeType === 1) {
                if (fromNode.tagName !== toNode.tagName) {
                    onNodeDiscarded(fromNode);
                    morphedNode = moveChildren(fromNode, document.createElement(toNode.tagName));
                }
            } else {
                // Going from an element node to a text node
                morphedNode = toNode;
            }
        } else if (morphedNodeType === 3) { // Text node
            if (toNodeType === 3) {
                morphedNode.nodeValue = toNode.nodeValue;
                return morphedNode;
            } else {
                // Text node to something else
                morphedNode = toNode;
            }
        }
    }

    if (morphedNode === toNode) {
        // The "to node" was not compatible with the "from node"
        // so we had to toss out the "from node" and use the "to node"
        onNodeDiscarded(fromNode);
    } else {
        morphEl(morphedNode, toNode, false, childrenOnly);

        /**
         * What we will do here is walk the tree for the DOM element
         * that was moved from the target DOM tree to the original
         * DOM tree and we will look for keyed elements that could
         * be matched to keyed elements that were earlier discarded.
         * If we find a match then we will move the saved element
         * into the final DOM tree
         */
        var handleMovedEl = function(el) {
            var curChild = el.firstChild;
            while(curChild) {
                var nextSibling = curChild.nextSibling;

                var key = getNodeKey(curChild);
                if (key) {
                    var savedEl = savedEls[key];
                    if (savedEl && (curChild.tagName === savedEl.tagName)) {
                        curChild.parentNode.replaceChild(savedEl, curChild);
                        morphEl(savedEl, curChild, true /* already visited the saved el tree */);
                        curChild = nextSibling;
                        if (empty(savedEls)) {
                            return false;
                        }
                        continue;
                    }
                }

                if (curChild.nodeType === 1) {
                    handleMovedEl(curChild);
                }

                curChild = nextSibling;
            }
        };

        // The loop below is used to possibly match up any discarded
        // elements in the original DOM tree with elemenets from the
        // target tree that were moved over without visiting their
        // children
        if (!empty(savedEls)) {
            handleMovedElsLoop:
            while (movedEls.length) {
                var movedElsTemp = movedEls;
                movedEls = [];
                for (var i=0; i<movedElsTemp.length; i++) {
                    if (handleMovedEl(movedElsTemp[i]) === false) {
                        // There are no more unmatched elements so completely end
                        // the loop
                        break handleMovedElsLoop;
                    }
                }
            }
        }

        // Fire the "onNodeDiscarded" event for any saved elements
        // that never found a new home in the morphed DOM
        for (var savedElId in savedEls) {
            if (savedEls.hasOwnProperty(savedElId)) {
                var savedEl = savedEls[savedElId];
                onNodeDiscarded(savedEl);
                walkDiscardedChildNodes(savedEl);
            }
        }
    }

    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        // If we had to swap out the from node with a new node because the old
        // node was not compatible with the target node then we need to
        // replace the old DOM node in the original DOM tree. This is only
        // possible if the original DOM node was part of a DOM tree which
        // we know is the case if it has a parent node.
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
    }

    return morphedNode;
}

module.exports = morphdom;

},{}],131:[function(require,module,exports){
/*jshint node:true */

"use strict";

var minimalDesc = ['h', 'min', 's', 'ms', 'μs', 'ns'];
var verboseDesc = ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond'];
var convert = [60*60, 60, 1, 1e6, 1e3, 1];

module.exports = function (source, opts) {
	var verbose, precise, i, spot, sourceAtStep, valAtStep, decimals, strAtStep, results;

	verbose = false;
	precise = false;
	if (opts) {
		verbose = opts.verbose || false;
		precise = opts.precise || false;
	}

	if (!Array.isArray(source) || source.length !== 2) {
		return '';
	}
	if (typeof source[0] !== 'number' || typeof source[1] !== 'number') {
		return '';
	}

	results = '';

	// foreach unit
	for (i = 0; i < 6; i++) {
		spot = i < 3 ? 0 : 1; // grabbing first or second spot in source array
		sourceAtStep = source[spot];
		if (i !== 3 && i !== 0) {
			sourceAtStep = sourceAtStep % convert[i-1]; // trim off previous portions
		}
		if (i === 2) {
			sourceAtStep += source[1]/1e9; // get partial seconds from other portion of the array
		}
		valAtStep = sourceAtStep / convert[i]; // val at this unit
		if (valAtStep >= 1) {
			if (verbose) {
				valAtStep = Math.floor(valAtStep); // deal in whole units, subsequent laps will get the decimal portion
			}
			if (!precise) {
				// don't fling too many decimals
				decimals = valAtStep >= 10 ? 0 : 2;
				strAtStep = valAtStep.toFixed(decimals);
			} else {
				strAtStep = valAtStep.toString();
			}
			if (strAtStep.indexOf('.') > -1 && strAtStep[strAtStep.length-1] === '0') {
				strAtStep = strAtStep.replace(/\.?0+$/,''); // remove trailing zeros
			}
			if (results) {
				results += ' '; // append space if we have a previous value
			}
			results += strAtStep; // append the value
			// append units
			if (verbose) {
				results += ' '+verboseDesc[i];
				if (strAtStep !== '1') {
					results += 's';
				}
			} else {
				results += ' '+minimalDesc[i];
			}
			if (!verbose) {
				break; // verbose gets as many groups as necessary, the rest get only one
			}
		}
	}

	return results;
};

},{}],132:[function(require,module,exports){
'use strict';

module.exports = require('./lib')

},{"./lib":137}],133:[function(require,module,exports){
'use strict';

var asap = require('asap/raw');

function noop() {}

// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable

// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.


// to avoid using try/catch inside critical functions, we
// extract them to here.
var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}
function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

module.exports = Promise;

function Promise(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }
  if (typeof fn !== 'function') {
    throw new TypeError('not a function');
  }
  this._45 = 0;
  this._81 = 0;
  this._65 = null;
  this._54 = null;
  if (fn === noop) return;
  doResolve(fn, this);
}
Promise._10 = null;
Promise._97 = null;
Promise._61 = noop;

Promise.prototype.then = function(onFulfilled, onRejected) {
  if (this.constructor !== Promise) {
    return safeThen(this, onFulfilled, onRejected);
  }
  var res = new Promise(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function (resolve, reject) {
    var res = new Promise(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
};
function handle(self, deferred) {
  while (self._81 === 3) {
    self = self._65;
  }
  if (Promise._10) {
    Promise._10(self);
  }
  if (self._81 === 0) {
    if (self._45 === 0) {
      self._45 = 1;
      self._54 = deferred;
      return;
    }
    if (self._45 === 1) {
      self._45 = 2;
      self._54 = [self._54, deferred];
      return;
    }
    self._54.push(deferred);
    return;
  }
  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  asap(function() {
    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      if (self._81 === 1) {
        resolve(deferred.promise, self._65);
      } else {
        reject(deferred.promise, self._65);
      }
      return;
    }
    var ret = tryCallOne(cb, self._65);
    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}
function resolve(self, newValue) {
  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
  if (newValue === self) {
    return reject(
      self,
      new TypeError('A promise cannot be resolved with itself.')
    );
  }
  if (
    newValue &&
    (typeof newValue === 'object' || typeof newValue === 'function')
  ) {
    var then = getThen(newValue);
    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }
    if (
      then === self.then &&
      newValue instanceof Promise
    ) {
      self._81 = 3;
      self._65 = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }
  self._81 = 1;
  self._65 = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._81 = 2;
  self._65 = newValue;
  if (Promise._97) {
    Promise._97(self, newValue);
  }
  finale(self);
}
function finale(self) {
  if (self._45 === 1) {
    handle(self, self._54);
    self._54 = null;
  }
  if (self._45 === 2) {
    for (var i = 0; i < self._54.length; i++) {
      handle(self, self._54[i]);
    }
    self._54 = null;
  }
}

function Handler(onFulfilled, onRejected, promise){
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(fn, function (value) {
    if (done) return;
    done = true;
    resolve(promise, value);
  }, function (reason) {
    if (done) return;
    done = true;
    reject(promise, reason);
  })
  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}

},{"asap/raw":141}],134:[function(require,module,exports){
'use strict';

var Promise = require('./core.js');

module.exports = Promise;
Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this;
  self.then(null, function (err) {
    setTimeout(function () {
      throw err;
    }, 0);
  });
};

},{"./core.js":133}],135:[function(require,module,exports){
'use strict';

//This file contains the ES6 extensions to the core Promises/A+ API

var Promise = require('./core.js');

module.exports = Promise;

/* Static Functions */

var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new Promise(Promise._61);
  p._81 = 1;
  p._65 = value;
  return p;
}
Promise.resolve = function (value) {
  if (value instanceof Promise) return value;

  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(value));
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex);
      });
    }
  }
  return valuePromise(value);
};

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr);

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;
    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof Promise && val.then === Promise.prototype.then) {
          while (val._81 === 3) {
            val = val._65;
          }
          if (val._81 === 1) return res(i, val._65);
          if (val._81 === 2) reject(val._65);
          val.then(function (val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;
          if (typeof then === 'function') {
            var p = new Promise(then.bind(val));
            p.then(function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }
      args[i] = val;
      if (--remaining === 0) {
        resolve(args);
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    values.forEach(function(value){
      Promise.resolve(value).then(resolve, reject);
    });
  });
};

/* Prototype Methods */

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};

},{"./core.js":133}],136:[function(require,module,exports){
'use strict';

var Promise = require('./core.js');

module.exports = Promise;
Promise.prototype['finally'] = function (f) {
  return this.then(function (value) {
    return Promise.resolve(f()).then(function () {
      return value;
    });
  }, function (err) {
    return Promise.resolve(f()).then(function () {
      throw err;
    });
  });
};

},{"./core.js":133}],137:[function(require,module,exports){
'use strict';

module.exports = require('./core.js');
require('./done.js');
require('./finally.js');
require('./es6-extensions.js');
require('./node-extensions.js');
require('./synchronous.js');

},{"./core.js":133,"./done.js":134,"./es6-extensions.js":135,"./finally.js":136,"./node-extensions.js":138,"./synchronous.js":139}],138:[function(require,module,exports){
'use strict';

// This file contains then/promise specific extensions that are only useful
// for node.js interop

var Promise = require('./core.js');
var asap = require('asap');

module.exports = Promise;

/* Static Functions */

Promise.denodeify = function (fn, argumentCount) {
  if (
    typeof argumentCount === 'number' && argumentCount !== Infinity
  ) {
    return denodeifyWithCount(fn, argumentCount);
  } else {
    return denodeifyWithoutCount(fn);
  }
}

var callbackFn = (
  'function (err, res) {' +
  'if (err) { rj(err); } else { rs(res); }' +
  '}'
);
function denodeifyWithCount(fn, argumentCount) {
  var args = [];
  for (var i = 0; i < argumentCount; i++) {
    args.push('a' + i);
  }
  var body = [
    'return function (' + args.join(',') + ') {',
    'var self = this;',
    'return new Promise(function (rs, rj) {',
    'var res = fn.call(',
    ['self'].concat(args).concat([callbackFn]).join(','),
    ');',
    'if (res &&',
    '(typeof res === "object" || typeof res === "function") &&',
    'typeof res.then === "function"',
    ') {rs(res);}',
    '});',
    '};'
  ].join('');
  return Function(['Promise', 'fn'], body)(Promise, fn);
}
function denodeifyWithoutCount(fn) {
  var fnLength = Math.max(fn.length - 1, 3);
  var args = [];
  for (var i = 0; i < fnLength; i++) {
    args.push('a' + i);
  }
  var body = [
    'return function (' + args.join(',') + ') {',
    'var self = this;',
    'var args;',
    'var argLength = arguments.length;',
    'if (arguments.length > ' + fnLength + ') {',
    'args = new Array(arguments.length + 1);',
    'for (var i = 0; i < arguments.length; i++) {',
    'args[i] = arguments[i];',
    '}',
    '}',
    'return new Promise(function (rs, rj) {',
    'var cb = ' + callbackFn + ';',
    'var res;',
    'switch (argLength) {',
    args.concat(['extra']).map(function (_, index) {
      return (
        'case ' + (index) + ':' +
        'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' +
        'break;'
      );
    }).join(''),
    'default:',
    'args[argLength] = cb;',
    'res = fn.apply(self, args);',
    '}',
    
    'if (res &&',
    '(typeof res === "object" || typeof res === "function") &&',
    'typeof res.then === "function"',
    ') {rs(res);}',
    '});',
    '};'
  ].join('');

  return Function(
    ['Promise', 'fn'],
    body
  )(Promise, fn);
}

Promise.nodeify = function (fn) {
  return function () {
    var args = Array.prototype.slice.call(arguments);
    var callback =
      typeof args[args.length - 1] === 'function' ? args.pop() : null;
    var ctx = this;
    try {
      return fn.apply(this, arguments).nodeify(callback, ctx);
    } catch (ex) {
      if (callback === null || typeof callback == 'undefined') {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      } else {
        asap(function () {
          callback.call(ctx, ex);
        })
      }
    }
  }
}

Promise.prototype.nodeify = function (callback, ctx) {
  if (typeof callback != 'function') return this;

  this.then(function (value) {
    asap(function () {
      callback.call(ctx, null, value);
    });
  }, function (err) {
    asap(function () {
      callback.call(ctx, err);
    });
  });
}

},{"./core.js":133,"asap":140}],139:[function(require,module,exports){
'use strict';

var Promise = require('./core.js');

module.exports = Promise;
Promise.enableSynchronous = function () {
  Promise.prototype.isPending = function() {
    return this.getState() == 0;
  };

  Promise.prototype.isFulfilled = function() {
    return this.getState() == 1;
  };

  Promise.prototype.isRejected = function() {
    return this.getState() == 2;
  };

  Promise.prototype.getValue = function () {
    if (this._81 === 3) {
      return this._65.getValue();
    }

    if (!this.isFulfilled()) {
      throw new Error('Cannot get a value of an unfulfilled promise.');
    }

    return this._65;
  };

  Promise.prototype.getReason = function () {
    if (this._81 === 3) {
      return this._65.getReason();
    }

    if (!this.isRejected()) {
      throw new Error('Cannot get a rejection reason of a non-rejected promise.');
    }

    return this._65;
  };

  Promise.prototype.getState = function () {
    if (this._81 === 3) {
      return this._65.getState();
    }
    if (this._81 === -1 || this._81 === -2) {
      return 0;
    }

    return this._81;
  };
};

Promise.disableSynchronous = function() {
  Promise.prototype.isPending = undefined;
  Promise.prototype.isFulfilled = undefined;
  Promise.prototype.isRejected = undefined;
  Promise.prototype.getValue = undefined;
  Promise.prototype.getReason = undefined;
  Promise.prototype.getState = undefined;
};

},{"./core.js":133}],140:[function(require,module,exports){
"use strict";

// rawAsap provides everything we need except exception management.
var rawAsap = require("./raw");
// RawTasks are recycled to reduce GC churn.
var freeTasks = [];
// We queue errors to ensure they are thrown in right order (FIFO).
// Array-as-queue is good enough here, since we are just dealing with exceptions.
var pendingErrors = [];
var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

function throwFirstError() {
    if (pendingErrors.length) {
        throw pendingErrors.shift();
    }
}

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */
module.exports = asap;
function asap(task) {
    var rawTask;
    if (freeTasks.length) {
        rawTask = freeTasks.pop();
    } else {
        rawTask = new RawTask();
    }
    rawTask.task = task;
    rawAsap(rawTask);
}

// We wrap tasks with recyclable task objects.  A task object implements
// `call`, just like a function.
function RawTask() {
    this.task = null;
}

// The sole purpose of wrapping the task is to catch the exception and recycle
// the task object after its single use.
RawTask.prototype.call = function () {
    try {
        this.task.call();
    } catch (error) {
        if (asap.onerror) {
            // This hook exists purely for testing purposes.
            // Its name will be periodically randomized to break any code that
            // depends on its existence.
            asap.onerror(error);
        } else {
            // In a web browser, exceptions are not fatal. However, to avoid
            // slowing down the queue of pending tasks, we rethrow the error in a
            // lower priority turn.
            pendingErrors.push(error);
            requestErrorThrow();
        }
    } finally {
        this.task = null;
        freeTasks[freeTasks.length] = this;
    }
};

},{"./raw":141}],141:[function(require,module,exports){
(function (global){
"use strict";

// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
module.exports = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
        flushing = true;
    }
    // Equivalent to push, but avoids a function call.
    queue[queue.length] = task;
}

var queue = [];
// Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
var flushing = false;
// `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.
var requestFlush;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;

// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while (index < queue.length) {
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
}

// `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
var BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;

// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
if (typeof BrowserMutationObserver === "function") {
    requestFlush = makeRequestCallFromMutationObserver(flush);

// MessageChannels are desirable because they give direct access to the HTML
// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
// 11-12, and in web workers in many engines.
// Although message channels yield to any queued rendering and IO tasks, they
// would be better than imposing the 4ms delay of timers.
// However, they do not work reliably in Internet Explorer or Safari.

// Internet Explorer 10 is the only browser that has setImmediate but does
// not have MutationObservers.
// Although setImmediate yields to the browser's renderer, it would be
// preferrable to falling back to setTimeout since it does not have
// the minimum 4ms penalty.
// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
// Desktop to a lesser extent) that renders both setImmediate and
// MessageChannel useless for the purposes of ASAP.
// https://github.com/kriskowal/q/issues/396

// Timers are implemented universally.
// We fall back to timers in workers in most engines, and in foreground
// contexts in the following browsers.
// However, note that even this simple case requires nuances to operate in a
// broad spectrum of browsers.
//
// - Firefox 3-13
// - Internet Explorer 6-9
// - iPad Safari 4.3
// - Lynx 2.8.7
} else {
    requestFlush = makeRequestCallFromTimer(flush);
}

// `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.js’s
// `process.on("uncaughtException")` or by a domain.
rawAsap.requestFlush = requestFlush;

// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
    var toggle = 1;
    var observer = new BrowserMutationObserver(callback);
    var node = document.createTextNode("");
    observer.observe(node, {characterData: true});
    return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
    };
}

// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html

// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.

// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }

// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.

// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }

// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.

// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.

function makeRequestCallFromTimer(callback) {
    return function requestCall() {
        // We dispatch a timeout with a specified delay of 0 for engines that
        // can reliably accommodate that request. This will usually be snapped
        // to a 4 milisecond delay, but once we're flushing, there's no delay
        // between events.
        var timeoutHandle = setTimeout(handleTimer, 0);
        // However, since this timer gets frequently dropped in Firefox
        // workers, we enlist an interval handle that will try to fire
        // an event 20 times per second until it succeeds.
        var intervalHandle = setInterval(handleTimer, 50);

        function handleTimer() {
            // Whichever timer succeeds will cancel both timers and
            // execute the callback.
            clearTimeout(timeoutHandle);
            clearInterval(intervalHandle);
            callback();
        }
    };
}

// This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

// ASAP was originally a nextTick shim included in Q. This was factored out
// into this ASAP package. It was later adapted to RSVP which made further
// amendments. These decisions, particularly to marginalize MessageChannel and
// to capture the MutationObserver implementation in a closure, were integrated
// back into ASAP proper.
// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],142:[function(require,module,exports){
/**
 * digits <https://github.com/jonschlinkert/digits>
 *
 * Copyright (c) 2013-2015 Jon Schlinkert
 * Licensed under the MIT License (MIT)
 */

'use strict';

var pad = require('pad-left');
var longest = require('longest');

/**
 * Expose `digits`
 */

module.exports = digits;

/**
 * Left pad the given `value` with the specified `number` of zeros
 * or alternate `character`.
 *
 * ```js
 * digits('abc', 10);
 * //=> '0000000000abc'
 *
 * digits('abc', 10, '~');
 * //=> '~~~~~~~~~~abc'
 * ```
 *
 * @param {String} `value`
 * @param {String} `number`
 * @return {String} `character`
 * @api public
 */

function digits(val, num, ch) {
  return pad(val, num - val.length, ch);
}

/**
 * Pad left pad each value in the given `array` to align with the
 * longest item/number in the array. Zeros are used by default, but
 * a custom `character` can be passed as the second argument.
 *
 * **Example**
 *
 * ```js
 * digits.each([1, 100, 1000])
 * //=> ['0001', '0100', '1000']
 *
 * digits.each([a, bb, ccc], ' ')
 * //=> ['  a', ' bb', 'ccc']
 * ```
 *
 * @param {Number} `arr` The array of values to pad.
 * @param {Number} `len` Amount to pad the number.
 * @return {String} Padded number
 * @api public
 */

digits.each = function(arr, ch) {
  var len = longest(arr).length;

  return arr.map(function(ele) {
    return digits(ele, len, ch);
  });
};

/**
 * Strip leading digits from a string
 *
 * ```js
 * digits.stripleft('010foo.md');
 * // => "foo.md"
 * ```
 *
 * @param  {String} `str`
 * @return {String}
 */

digits.stripleft = function(str) {
  return str.replace(/^\d+\-?/g, '');
};

/**
 * Strip trailing digits from a string
 *
 * ```js
 * digits.stripright('bar010.md');
 * // => "bar.md"
 * ```
 * @param  {String} `str`
 * @return {String}
 */

digits.stripright = function(str) {
  return str.replace(/\-?\d+$/g, '');
};

/**
 * Count digits on the left side of a string
 *
 * ```js
 * digits.countleft('001-foo.md');
 * //=> 3
 * ```
 *
 * @param  {String} `str`
 * @return {String}
 */

digits.countleft = function(str) {
  return String(str.match(/^\d+/g)).length;
};

/**
 * Count digits on the right side of a string
 *
 * ```js
 * digits.countleft('foo-001.md');
 * //=> 3
 * ```
 * @param  {String} `str`
 * @return {String}
 */

digits.countright = function(str) {
  return String(str.match(/\d+$/g)).length;
};

},{"longest":143,"pad-left":144}],143:[function(require,module,exports){
/**
 * longest item in an array
 * Copyright (c) 2014 Jon Schlinkert, contributors.
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(arr) {
  var c = 0,
    len = 0,
    l = 0,
    idx = arr.length;
  if (idx) {
    while (idx--) {
      len = arr[idx].length;
      if (len > c) {
        l = idx;
        c = len;
      }
    }
  }
  return arr[l];
};
},{}],144:[function(require,module,exports){
/*!
 * pad-left <https://github.com/jonschlinkert/pad-left>
 *
 * Copyright (c) 2014 Jon Schlinkert, contributors.
 * Licensed under the MIT license.
 */

'use strict';

var repeat = require('repeat-string');

module.exports = function padLeft(val, num, str) {
  return repeat(str || '0', num) + val;
};

},{"repeat-string":145}],145:[function(require,module,exports){
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014 Jon Schlinkert, contributors.
 * Licensed under the MIT License
 */

'use strict';

module.exports = function repeat(str, count) {
  if (typeof str !== 'string') {
    throw new TypeError('repeat-string expects a string.');
  }

  if (count < 1) {
    return '';
  }

  var result = '';
  while (count > 0) {
    if (count & 1) {
      result += str;
    }
    count >>= 1;
    str += str;
  }
  return result;
};

},{}],146:[function(require,module,exports){
'use strict';

// jscs:disable maximumLineLength
// This file contains definitions of rules how location URLs are translated
// to "render" methods of catberry's modules.
//
// Format:
// /some/:parameter[module1,module2,module3]
//
// More details here:
// https://github.com/catberry/catberry/blob/master/docs/index.md#url-route-definition

module.exports = [
    '/:page[Pages]',
    //id мастера
    {
        expression: /\/([\/\d]+)$/i,
        map: function (urlPath) {
            var matches = urlPath.path.match(/\/([\/\d]+)$/i);
            return {
                'master/MasterItem': {
                    item: matches[1]
                },
                Pages: {
                    page: "master-page"
                }
            }
        }
    },
    //статья мастера
    {
        expression: '/\/([\/\d]+)\/article\/([\/\d]+)$/i',
        map: function (urlPath) {
            return {
                Pages: {
                    page: "master-article"
                }
            }
        }
    },
    // путь: рубрика/подрубрика
    // путь: рубрика/подрубрика/тег
    // путь: рубрика/подрубрика/секция
    // путь: рубрика/подрубрика/тег/секция
    {
        expression: /^\/([^\/\d]+)\/([^\/\d]+)\/?((?!video|sale|sovety|company)[^\/\d]+)?\/?(video|sale|sovety|company)?$/i,
        map: function (urlPath) {
            var matches = urlPath.path.match(/^\/([^\/\d]+)\/([^\/\d]+)\/?((?!video|sale|sovety|company)[^\/\d]+)?\/?(video|sale|sovety|company)?$/i);
            return {
                'rubrika/Rubrika': {
                    rubrika: matches[1],
                    podrubrika: matches[2]
                },
                Tag: {
                    tag: matches[3],
                    section: matches[4]
                },
                Pages: {
                    page: "master-rubrika"
                }
            }
        }
    },
    // путь: /__/page/:id
    {
        expression: /^\/([^\/\d]+)\/page\/(\d+)/i,
        map: function (urlPath) {
            var matches = urlPath.path.match(/^\/([^\/\d]+)\/page\/(\d+)/i);
            return {
                Pages: {
                    page: matches[1]
                },
                Paginator: {
                    currentPage: matches[2]
                }
            };
        }
    },
    // путь: /sale
    // путь: /sovety
    // путь: /video
    // путь: /__/page/:id
    // путь: /__/category/:id
    // путь: /__/category/:id/page/:id
    {
        expression: /^\/(sale|sovety|video)(\/catalog\/(\d+))?(\/page\/(\d+))?$/i,
        map: function (urlPath) {
            var matches = urlPath.path.match(/^\/(sale|sovety|video)(\/catalog\/(\d+))?(\/page\/(\d+))?$/i);
            var nameCapitalizeFirstLetter = matches[1].charAt(0).toUpperCase() + matches[1].slice(1);
            var state = {};

            state.Pages = {
                page: matches[1]
            };
            state['master/Master' + nameCapitalizeFirstLetter] = {
                catalog: matches[3]
            };
            state.Paginator = {
                currentPage: matches[5]
            };

            return state;
        }
    },
    // путь: /news/item/:id
    // путь: /vacancy/item/:id
    // путь: /konkurs/item/:id
    {
        expression: /^\/(news|vacancy|konkurs)\/item\/(\d+)$/i,
        map: function (urlPath) {
            var matches = urlPath.path.match(/^\/(news|vacancy|konkurs)\/item\/(\d+)$/i);
            var state = {};

            var string = matches[1];

            state.Pages = {
                page: string + "-item"
            };
            state['other/' + string.charAt(0).toUpperCase() + string.slice(1) + "Item"] = {
                item: matches[2]
            };
            return state;
        }
    }
];

},{}],147:[function(require,module,exports){
'use strict';

var digits = require('digits');

var Dates = require('./utils/dates');
var Utils = require('./utils/utils');

module.exports = function (Handlebars) {

    return {
        /**
         * Repeat  helper
         * @param  {Number} n       number of iterations
         * @param  {[type]} options [description]
         * @return {[type]}         [description]
         */
        repeat: function (n, options) {
            options = options || {};
            var _data = {},
                content = '',
                count = n - 1;

            if (options._data) {
                _data = Handlebars.createFrame(options._data);
            }

            for (var i = 0; i <= count; i++) {
                _data = {
                    index: digits.pad((i + 1), {auto: n})
                };
                content += options.fn(this, {data: _data});
            }
            return new Handlebars.SafeString(content);
        },

        /**
         * If helper with params
         * @param  {[type]} a        [description]
         * @param  {[type]} b        [description]
         * @param  {String} options  operation
         * @return {[type]}          [description]
         */
        is: function (leftOperand, operation, rightOperand, options) {
            var a = leftOperand || false,
                b = rightOperand || false;

            if (operation && typeof operation === 'string') {
                switch (operation) {

                    // Not strictly equal
                    case '==':
                        if (a == b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // Strictly equal
                    case '===':
                        if (a === b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // a > b checking
                    case '>':
                        if (a > b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // a >= b checking
                    case '>=':
                        if (a >= b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // a < b checking
                    case '<':
                        if (a < b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // a <= b checking
                    case '<=':
                        if (a <= b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // Action, if operation is unknown
                    default:
                        throw new Error(
                            'Operation is unknown!\n"is" helper supports only:\n' +
                            '"==",\n' +
                            '"===",\n' +
                            '">",\n' +
                            '">=",\n' +
                            '"<",\n' +
                            '"<=",\n'
                        );
                }
            } else {
                throw new Error('Operation have to be recived and have to be a string');
            }

        },

        /**
         * Str to lower case
         * @param  {String} str [description]
         * @return {[type]}     [description]
         */
        toLowerCase: function (str) {
            if (typeof str != 'string') {
                str.toString();
            }

            return str.toLowerCase();
        },

        /**
         * Str to upper case
         * @param  {String} str [description]
         * @return {[type]}     [description]
         */
        toUpperCase: function (str) {
            if (typeof str != 'string') {
                str.toString();
            }

            return str.toUpperCase();
        },

        /**
         * Capitalize first symbol of str
         * @param  {String} str [description]
         * @return {[type]}     [description]
         */
        capitalizeFirst: function (str) {
            if (typeof str != 'string') {
                str.toString();
            }

            return str.charAt(0).toUpperCase() + str.slice(1);
        },

        /**
         * Remove whitespaces from recived data to helper
         * @param  {[type]} options [description]
         * @return {[type]}         [description]
         */
        strip: function (options) {
            options = options || {};

            var _data = {},
                content = '';

            if (options._data) {
                _data = Handlebars.createFrame(options._data);
            }

            content = options.fn(this, {data: _data}).replace(/>(\s+)</g, '><');

            return new Handlebars.SafeString(content);
        },

        stripTags: function (str) {
            str = str.replace(/<!--[^]*-->/g, '');
            return str.replace(/<\/?[^>]+>/gi, '');
        },

        stripStyle: function (str) {
            return str.replace(/ style="[^"]*"/g, '')
        },

        /**
         * {{formatData}}
         * Port of formatDate-js library (http://bit.ly/18eo2xw)
         * @param  {[type]} date   [description]
         * @param  {[type]} format [description]
         * @return {[type]}        [description]
         */
        formatDate: function (date, format) {
            date = new Date(date);
            return Dates.format(date, format);
        },

        /**
         * {{now}}
         * @param  {[type]} format [description]
         * @return {[type]}        [description]
         */
        now: function (format) {
            var date = new Date();
            if (Utils.isUndefined(format)) {
                return date;
            } else {
                return Dates.format(date, format);
            }
        },

        /**
         * {{i18n}}
         * @author: Laurent Goderre <https://github.com/LaurentGoderrre>
         * @param  {String} context
         * @param  {Object} options
         * @return {String}
         * @example: <https://github.com/assemble/buttons> (See the "button-i18n" example)
         */
        i18n: function (context, options) {
            var language = void 0;

            if (typeof context !== 'string') {
                throw 'Key must be of type \'string\'';
            }

            language = (typeof options.hash.language === 'string' ? options.hash.language : this.language);

            if (typeof language === 'undefined') {
                throw 'The \'language\' parameter is not defined';
            }

            if (typeof this[language] === "undefined") {
                throw 'No strings found for language \'" + language + "\'';
            }

            if (typeof this[language][context] === "undefined") {
                throw 'No string for key \'" + context + "\' for language \'" + language + "\'';
            }

            return this[language][context];
        },
        icon: function (name, selector, sys) {
            var cl = 'icon icon_' + name;

            if (typeof selector == "string") {
                cl += " " + selector;
            }

            return new Handlebars.SafeString(
                '<svg role="img" title="icon_' + name + '" class="' + cl + '">' +
                '<use xlink:href="/icon-svg/svg-symbols.svg#icon_' + name + '"/>' +
                '</svg>'
            );
        },
        imgSrc: function (imgId, width, height) {
            var imgSrc = 'http://api-fm.present-tlt.ru/files?key=' + imgId;

            if (typeof(width) != "undefined" && typeof(width) == "number") {
                imgSrc = imgSrc + '&width=' + width;
            }
            if (typeof(height) != "undefined" && typeof(height) == "number") {
                imgSrc = imgSrc + '&height=' + height;
            }
            //console.log(imgSrc);
            return new Handlebars.SafeString(imgSrc);
        }
    };
};
},{"./utils/dates":148,"./utils/utils":149,"digits":142}],148:[function(require,module,exports){
/**
 * Handlebars Helpers Utils
 * http://github.com/assemble/handlebars-helpers
 * Copyright (c) 2013 Jon Schlinkert, Brian Woodward, contributors
 * Licensed under the MIT License (MIT).
 */
'use strict';

var Dates = module.exports = {};

Dates.padNumber = function (num, count, padCharacter) {

    if (typeof padCharacter === 'undefined') {
        padCharacter = '0';
    }

    var lenDiff = count - String(num).length;
    var padding = '';

    if (lenDiff > 0) {
        while (lenDiff--) {
            padding += padCharacter;
        }
    }
    return padding + num;
};

Dates.dayOfYear = function (date) {
    var oneJan = new Date(date.getFullYear(), 0, 1);

    return Math.ceil((date - oneJan) / 86400000);
};

Dates.weekOfYear = function (date) {
    var oneJan = new Date(date.getFullYear(), 0, 1);
    return Math.ceil((((date - oneJan) / 86400000) + oneJan.getDay() + 1) / 7);
};

Dates.isoWeekOfYear = function (date) {
    var target = new Date(date.valueOf());
    var dayNr = (date.getDay() + 6) % 7;
    target.setDate(target.getDate() - dayNr + 3);
    var jan4 = new Date(target.getFullYear(), 0, 4);
    var dayDiff = (target - jan4) / 86400000;

    return 1 + Math.ceil(dayDiff / 7);
};

Dates.tweleveHour = function (date) {
    if (date.getHours() > 12) {
        return date.getHours() - 12;
    }

    return date.getHours();
};

Dates.timeZoneOffset = function (date) {
    var hoursDiff = -date.getTimezoneOffset() / 60;
    var result = Dates.padNumber(Math.abs(hoursDiff), 4);

    return (hoursDiff > 0 ? '+' : '-') + result;
};

Dates.format = function (date, format) {
    var match = null;
    return format.replace(Dates.formats, function (m, p) {
        switch (p) {
            case 'a':
                return Dates.abbreviatedWeekdays[date.getDay()];
            case 'A':
                return Dates.fullWeekdays[date.getDay()];
            case 'b':
                return Dates.abbreviatedMonths[date.getMonth()];
            case 'B':
                return Dates.getFullMounth(date.getMonth(), "Ru");
            case 'c':
                return date.toLocaleString();
            case 'C':
                return Math.round(date.getFullYear() / 100);
            case 'd':
                return Dates.padNumber(date.getDate(), 2);
            case 'D':
                return Dates.format(date, '%m/%d/%y');
            case 'e':
                return Dates.padNumber(date.getDate(), 2, ' ');
            case 'F':
                return Dates.format(date, '%Y-%m-%d');
            case 'h':
                return Dates.format(date, '%b');
            case 'H':
                return Dates.padNumber(date.getHours(), 2);
            case 'I':
                return Dates.padNumber(Dates.tweleveHour(date), 2);
            case 'j':
                return Dates.padNumber(Dates.dayOfYear(date), 3);
            case 'k':
                return Dates.padNumber(date.getHours(), 2, ' ');
            case 'l':
                return Dates.padNumber(Dates.tweleveHour(date), 2, ' ');
            case 'L':
                return Dates.padNumber(date.getMilliseconds(), 3);
            case 'm':
                return Dates.padNumber(date.getMonth() + 1, 2);
            case 'M':
                return Dates.padNumber(date.getMinutes(), 2);
            case 'n':
                return '\n';
            case 'p':
                if (date.getHours() > 11) {
                    return 'PM';
                } else {
                    return 'AM';
                }
                break;
            case 'P':
                return Dates.format(date, '%p').toLowerCase();
            case 'r':
                return Dates.format(date, '%I:%M:%S %p');
            case 'R':
                return Dates.format(date, '%H:%M');
            case 's':
                return date.getTime() / 1000;
            case 'S':
                return Dates.padNumber(date.getSeconds(), 2);
            case 't':
                return '\t';
            case 'T':
                return Dates.format(date, '%H:%M:%S');
            case 'u':
                if (date.getDay() === 0) {
                    return 7;
                } else {
                    return date.getDay();
                }
                break;
            case 'U':
                return Dates.padNumber(Dates.weekOfYear(date), 2);
            case 'v':
                return Dates.format(date, '%e-%b-%Y');
            case 'V':
                return Dates.padNumber(Dates.isoWeekOfYear(date), 2);
            case 'W':
                return Dates.padNumber(Dates.weekOfYear(date), 2);
            case 'w':
                return Dates.padNumber(date.getDay(), 2);
            case 'x':
                return date.toLocaleDateString();
            case 'X':
                return date.toLocaleTimeString();
            case 'y':
                return String(date.getFullYear()).substring(2);
            case 'Y':
                return date.getFullYear();
            case 'z':
                return Dates.timeZoneOffset(date);
            case 'Z':
                return Dates.fullMonthsRuP[date.getMonth()];
            default:
                return match;
        }
    });
};

Dates.formats = /%(a|A|b|B|c|C|d|D|e|E|F|h|H|I|j|k|l|L|m|M|n|p|P|r|R|s|S|t|T|u|U|v|V|W|w|x|X|y|Y|z|Z)/g;

Dates.abbreviatedWeekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'];
Dates.fullWeekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
Dates.abbreviatedMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
Dates.fullMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

Dates.fullMonthsRuP = ['Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря'];
Dates.fullMonthsRu = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];

Dates.getFullMounth = function (num, lang) {
    if (lang == "Ru")
        return Dates.fullMonthsRu;
    return Dates.fullMonths;
}


},{}],149:[function(require,module,exports){
/**
 * Handlebars Helpers: Utils
 * http://github.com/assemble/handlebars-helpers
 * Copyright (c) 2013, 2014 Jon Schlinkert, Brian Woodward, contributors
 * Licensed under the MIT License (MIT).
 */
'use strict';

module.exports = {
    isUndefined: function (value) {
        return typeof value === 'undefined' || value.toString() === '[object Function]' || (value.hash != null);
    }
};

},{}],150:[function(require,module,exports){
'use strict';



module.exports = {
    /**
     * Registers all helpers.
     * @param {ServiceLocator} locator Catberry's service locator.
     */
    register: function (locator) {
        var config = locator.resolve('config');
        try {
            var handlebars = locator.resolve('handlebars');
            var helpers = require('./handlebars-helper')(handlebars);

            Object.keys(helpers)
                .forEach(function (name) {
                    handlebars.registerHelper(name, helpers[name]);
                });
        } catch (e) {
            // nothing to do.
        }
    }
};
},{"./handlebars-helper":147}],151:[function(require,module,exports){
/*
 * catberry-handlebars
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry-handlebars's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry-handlebars that are
 * not externally maintained libraries.
 */

'use strict';

module.exports = TemplateProvider;

/**
 * Creates new instance of Handlebars template provider.
 * @param {Handlebars} $handlebars Handlebars factory.
 * @constructor
 */
function TemplateProvider($handlebars) {
	this._handlebars = $handlebars;
	this._templates = Object.create(null);
}

/**
 * Current Handlebars factory.
 * @type {Handlebars}
 * @private
 */
TemplateProvider.prototype._handlebars = null;

/**
 * Current set of registered templates.
 * @type {Object}
 * @private
 */
TemplateProvider.prototype._templates = null;

/**
 * Registers compiled (precompiled) Handlebars template.
 * http://handlebarsjs.com/reference.html
 * @param {string} name Template name.
 * @param {string} compiled Compiled template source.
 */
TemplateProvider.prototype.registerCompiled = function (name, compiled) {
	// jshint evil:true
	var specs = new Function('return ' + compiled + ';');
	this._templates[name] = this._handlebars.template(specs());
};

/**
 * Renders template with specified data.
 * @param {string} name Name of template.
 * @param {Object} data Data context for template.
 * @returns {Promise<string>} Promise for rendered HTML.
 */
TemplateProvider.prototype.render = function (name, data) {
	if (!(name in this._templates)) {
		return Promise.reject(new Error('No such template'));
	}

	var promise;
	try {
		promise = Promise.resolve(this._templates[name](data));
	} catch (e) {
		promise = Promise.reject(e);
	}
	return promise;
};
},{}],152:[function(require,module,exports){
/*!

 handlebars v2.0.0

Copyright (C) 2011-2014 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
/* exported Handlebars */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.Handlebars = root.Handlebars || factory();
  }
}(this, function () {
// handlebars/safe-string.js
var __module3__ = (function() {
  "use strict";
  var __exports__;
  // Build out our basic SafeString type
  function SafeString(string) {
    this.string = string;
  }

  SafeString.prototype.toString = function() {
    return "" + this.string;
  };

  __exports__ = SafeString;
  return __exports__;
})();

// handlebars/utils.js
var __module2__ = (function(__dependency1__) {
  "use strict";
  var __exports__ = {};
  /*jshint -W004 */
  var SafeString = __dependency1__;

  var escape = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /[&<>"'`]/g;
  var possible = /[&<>"'`]/;

  function escapeChar(chr) {
    return escape[chr];
  }

  function extend(obj /* , ...source */) {
    for (var i = 1; i < arguments.length; i++) {
      for (var key in arguments[i]) {
        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
          obj[key] = arguments[i][key];
        }
      }
    }

    return obj;
  }

  __exports__.extend = extend;var toString = Object.prototype.toString;
  __exports__.toString = toString;
  // Sourced from lodash
  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  var isFunction = function(value) {
    return typeof value === 'function';
  };
  // fallback for older versions of Chrome and Safari
  /* istanbul ignore next */
  if (isFunction(/x/)) {
    isFunction = function(value) {
      return typeof value === 'function' && toString.call(value) === '[object Function]';
    };
  }
  var isFunction;
  __exports__.isFunction = isFunction;
  /* istanbul ignore next */
  var isArray = Array.isArray || function(value) {
    return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
  };
  __exports__.isArray = isArray;

  function escapeExpression(string) {
    // don't escape SafeStrings, since they're already safe
    if (string instanceof SafeString) {
      return string.toString();
    } else if (string == null) {
      return "";
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = "" + string;

    if(!possible.test(string)) { return string; }
    return string.replace(badChars, escapeChar);
  }

  __exports__.escapeExpression = escapeExpression;function isEmpty(value) {
    if (!value && value !== 0) {
      return true;
    } else if (isArray(value) && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }

  __exports__.isEmpty = isEmpty;function appendContextPath(contextPath, id) {
    return (contextPath ? contextPath + '.' : '') + id;
  }

  __exports__.appendContextPath = appendContextPath;
  return __exports__;
})(__module3__);

// handlebars/exception.js
var __module4__ = (function() {
  "use strict";
  var __exports__;

  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

  function Exception(message, node) {
    var line;
    if (node && node.firstLine) {
      line = node.firstLine;

      message += ' - ' + line + ':' + node.firstColumn;
    }

    var tmp = Error.prototype.constructor.call(this, message);

    // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
    for (var idx = 0; idx < errorProps.length; idx++) {
      this[errorProps[idx]] = tmp[errorProps[idx]];
    }

    if (line) {
      this.lineNumber = line;
      this.column = node.firstColumn;
    }
  }

  Exception.prototype = new Error();

  __exports__ = Exception;
  return __exports__;
})();

// handlebars/base.js
var __module1__ = (function(__dependency1__, __dependency2__) {
  "use strict";
  var __exports__ = {};
  var Utils = __dependency1__;
  var Exception = __dependency2__;

  var VERSION = "2.0.0";
  __exports__.VERSION = VERSION;var COMPILER_REVISION = 6;
  __exports__.COMPILER_REVISION = COMPILER_REVISION;
  var REVISION_CHANGES = {
    1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
    2: '== 1.0.0-rc.3',
    3: '== 1.0.0-rc.4',
    4: '== 1.x.x',
    5: '== 2.0.0-alpha.x',
    6: '>= 2.0.0-beta.1'
  };
  __exports__.REVISION_CHANGES = REVISION_CHANGES;
  var isArray = Utils.isArray,
      isFunction = Utils.isFunction,
      toString = Utils.toString,
      objectType = '[object Object]';

  function HandlebarsEnvironment(helpers, partials) {
    this.helpers = helpers || {};
    this.partials = partials || {};

    registerDefaultHelpers(this);
  }

  __exports__.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
    constructor: HandlebarsEnvironment,

    logger: logger,
    log: log,

    registerHelper: function(name, fn) {
      if (toString.call(name) === objectType) {
        if (fn) { throw new Exception('Arg not supported with multiple helpers'); }
        Utils.extend(this.helpers, name);
      } else {
        this.helpers[name] = fn;
      }
    },
    unregisterHelper: function(name) {
      delete this.helpers[name];
    },

    registerPartial: function(name, partial) {
      if (toString.call(name) === objectType) {
        Utils.extend(this.partials,  name);
      } else {
        this.partials[name] = partial;
      }
    },
    unregisterPartial: function(name) {
      delete this.partials[name];
    }
  };

  function registerDefaultHelpers(instance) {
    instance.registerHelper('helperMissing', function(/* [args, ]options */) {
      if(arguments.length === 1) {
        // A missing field in a {{foo}} constuct.
        return undefined;
      } else {
        // Someone is actually trying to call something, blow up.
        throw new Exception("Missing helper: '" + arguments[arguments.length-1].name + "'");
      }
    });

    instance.registerHelper('blockHelperMissing', function(context, options) {
      var inverse = options.inverse,
          fn = options.fn;

      if(context === true) {
        return fn(this);
      } else if(context === false || context == null) {
        return inverse(this);
      } else if (isArray(context)) {
        if(context.length > 0) {
          if (options.ids) {
            options.ids = [options.name];
          }

          return instance.helpers.each(context, options);
        } else {
          return inverse(this);
        }
      } else {
        if (options.data && options.ids) {
          var data = createFrame(options.data);
          data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
          options = {data: data};
        }

        return fn(context, options);
      }
    });

    instance.registerHelper('each', function(context, options) {
      if (!options) {
        throw new Exception('Must pass iterator to #each');
      }

      var fn = options.fn, inverse = options.inverse;
      var i = 0, ret = "", data;

      var contextPath;
      if (options.data && options.ids) {
        contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
      }

      if (isFunction(context)) { context = context.call(this); }

      if (options.data) {
        data = createFrame(options.data);
      }

      if(context && typeof context === 'object') {
        if (isArray(context)) {
          for(var j = context.length; i<j; i++) {
            if (data) {
              data.index = i;
              data.first = (i === 0);
              data.last  = (i === (context.length-1));

              if (contextPath) {
                data.contextPath = contextPath + i;
              }
            }
            ret = ret + fn(context[i], { data: data });
          }
        } else {
          for(var key in context) {
            if(context.hasOwnProperty(key)) {
              if(data) {
                data.key = key;
                data.index = i;
                data.first = (i === 0);

                if (contextPath) {
                  data.contextPath = contextPath + key;
                }
              }
              ret = ret + fn(context[key], {data: data});
              i++;
            }
          }
        }
      }

      if(i === 0){
        ret = inverse(this);
      }

      return ret;
    });

    instance.registerHelper('if', function(conditional, options) {
      if (isFunction(conditional)) { conditional = conditional.call(this); }

      // Default behavior is to render the positive path if the value is truthy and not empty.
      // The `includeZero` option may be set to treat the condtional as purely not empty based on the
      // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
      if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
        return options.inverse(this);
      } else {
        return options.fn(this);
      }
    });

    instance.registerHelper('unless', function(conditional, options) {
      return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
    });

    instance.registerHelper('with', function(context, options) {
      if (isFunction(context)) { context = context.call(this); }

      var fn = options.fn;

      if (!Utils.isEmpty(context)) {
        if (options.data && options.ids) {
          var data = createFrame(options.data);
          data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
          options = {data:data};
        }

        return fn(context, options);
      } else {
        return options.inverse(this);
      }
    });

    instance.registerHelper('log', function(message, options) {
      var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
      instance.log(level, message);
    });

    instance.registerHelper('lookup', function(obj, field) {
      return obj && obj[field];
    });
  }

  var logger = {
    methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

    // State enum
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3,
    level: 3,

    // can be overridden in the host environment
    log: function(level, message) {
      if (logger.level <= level) {
        var method = logger.methodMap[level];
        if (typeof console !== 'undefined' && console[method]) {
          console[method].call(console, message);
        }
      }
    }
  };
  __exports__.logger = logger;
  var log = logger.log;
  __exports__.log = log;
  var createFrame = function(object) {
    var frame = Utils.extend({}, object);
    frame._parent = object;
    return frame;
  };
  __exports__.createFrame = createFrame;
  return __exports__;
})(__module2__, __module4__);

// handlebars/runtime.js
var __module5__ = (function(__dependency1__, __dependency2__, __dependency3__) {
  "use strict";
  var __exports__ = {};
  var Utils = __dependency1__;
  var Exception = __dependency2__;
  var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
  var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
  var createFrame = __dependency3__.createFrame;

  function checkRevision(compilerInfo) {
    var compilerRevision = compilerInfo && compilerInfo[0] || 1,
        currentRevision = COMPILER_REVISION;

    if (compilerRevision !== currentRevision) {
      if (compilerRevision < currentRevision) {
        var runtimeVersions = REVISION_CHANGES[currentRevision],
            compilerVersions = REVISION_CHANGES[compilerRevision];
        throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
              "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
      } else {
        // Use the embedded version info since the runtime doesn't know about this revision yet
        throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
              "Please update your runtime to a newer version ("+compilerInfo[1]+").");
      }
    }
  }

  __exports__.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

  function template(templateSpec, env) {
    /* istanbul ignore next */
    if (!env) {
      throw new Exception("No environment passed to template");
    }
    if (!templateSpec || !templateSpec.main) {
      throw new Exception('Unknown template object: ' + typeof templateSpec);
    }

    // Note: Using env.VM references rather than local var references throughout this section to allow
    // for external users to override these as psuedo-supported APIs.
    env.VM.checkRevision(templateSpec.compiler);

    var invokePartialWrapper = function(partial, indent, name, context, hash, helpers, partials, data, depths) {
      if (hash) {
        context = Utils.extend({}, context, hash);
      }

      var result = env.VM.invokePartial.call(this, partial, name, context, helpers, partials, data, depths);

      if (result == null && env.compile) {
        var options = { helpers: helpers, partials: partials, data: data, depths: depths };
        partials[name] = env.compile(partial, { data: data !== undefined, compat: templateSpec.compat }, env);
        result = partials[name](context, options);
      }
      if (result != null) {
        if (indent) {
          var lines = result.split('\n');
          for (var i = 0, l = lines.length; i < l; i++) {
            if (!lines[i] && i + 1 === l) {
              break;
            }

            lines[i] = indent + lines[i];
          }
          result = lines.join('\n');
        }
        return result;
      } else {
        throw new Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
      }
    };

    // Just add water
    var container = {
      lookup: function(depths, name) {
        var len = depths.length;
        for (var i = 0; i < len; i++) {
          if (depths[i] && depths[i][name] != null) {
            return depths[i][name];
          }
        }
      },
      lambda: function(current, context) {
        return typeof current === 'function' ? current.call(context) : current;
      },

      escapeExpression: Utils.escapeExpression,
      invokePartial: invokePartialWrapper,

      fn: function(i) {
        return templateSpec[i];
      },

      programs: [],
      program: function(i, data, depths) {
        var programWrapper = this.programs[i],
            fn = this.fn(i);
        if (data || depths) {
          programWrapper = program(this, i, fn, data, depths);
        } else if (!programWrapper) {
          programWrapper = this.programs[i] = program(this, i, fn);
        }
        return programWrapper;
      },

      data: function(data, depth) {
        while (data && depth--) {
          data = data._parent;
        }
        return data;
      },
      merge: function(param, common) {
        var ret = param || common;

        if (param && common && (param !== common)) {
          ret = Utils.extend({}, common, param);
        }

        return ret;
      },

      noop: env.VM.noop,
      compilerInfo: templateSpec.compiler
    };

    var ret = function(context, options) {
      options = options || {};
      var data = options.data;

      ret._setup(options);
      if (!options.partial && templateSpec.useData) {
        data = initData(context, data);
      }
      var depths;
      if (templateSpec.useDepths) {
        depths = options.depths ? [context].concat(options.depths) : [context];
      }

      return templateSpec.main.call(container, context, container.helpers, container.partials, data, depths);
    };
    ret.isTop = true;

    ret._setup = function(options) {
      if (!options.partial) {
        container.helpers = container.merge(options.helpers, env.helpers);

        if (templateSpec.usePartial) {
          container.partials = container.merge(options.partials, env.partials);
        }
      } else {
        container.helpers = options.helpers;
        container.partials = options.partials;
      }
    };

    ret._child = function(i, data, depths) {
      if (templateSpec.useDepths && !depths) {
        throw new Exception('must pass parent depths');
      }

      return program(container, i, templateSpec[i], data, depths);
    };
    return ret;
  }

  __exports__.template = template;function program(container, i, fn, data, depths) {
    var prog = function(context, options) {
      options = options || {};

      return fn.call(container, context, container.helpers, container.partials, options.data || data, depths && [context].concat(depths));
    };
    prog.program = i;
    prog.depth = depths ? depths.length : 0;
    return prog;
  }

  __exports__.program = program;function invokePartial(partial, name, context, helpers, partials, data, depths) {
    var options = { partial: true, helpers: helpers, partials: partials, data: data, depths: depths };

    if(partial === undefined) {
      throw new Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    }
  }

  __exports__.invokePartial = invokePartial;function noop() { return ""; }

  __exports__.noop = noop;function initData(context, data) {
    if (!data || !('root' in data)) {
      data = data ? createFrame(data) : {};
      data.root = context;
    }
    return data;
  }
  return __exports__;
})(__module2__, __module4__, __module1__);

// handlebars.runtime.js
var __module0__ = (function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
  "use strict";
  var __exports__;
  /*globals Handlebars: true */
  var base = __dependency1__;

  // Each of these augment the Handlebars object. No need to setup here.
  // (This is done to easily share code between commonjs and browse envs)
  var SafeString = __dependency2__;
  var Exception = __dependency3__;
  var Utils = __dependency4__;
  var runtime = __dependency5__;

  // For compatibility and usage outside of module systems, make the Handlebars object a namespace
  var create = function() {
    var hb = new base.HandlebarsEnvironment();

    Utils.extend(hb, base);
    hb.SafeString = SafeString;
    hb.Exception = Exception;
    hb.Utils = Utils;
    hb.escapeExpression = Utils.escapeExpression;

    hb.VM = runtime;
    hb.template = function(spec) {
      return runtime.template(spec, hb);
    };

    return hb;
  };

  var Handlebars = create();
  Handlebars.create = create;

  Handlebars['default'] = Handlebars;

  __exports__ = Handlebars;
  return __exports__;
})(__module1__, __module3__, __module4__, __module2__, __module5__);

  return __module0__;
}));

},{}],153:[function(require,module,exports){
/*
 * catberry-handlebars
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-handlebars's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry-handlebars that
 * are not externally maintained libraries.
 */

'use strict';

var Handlebars = require('./lib/vendors/handlebars'),
    TemplateProvider = require('./lib/TemplateProvider');

module.exports = {
    register: function (locator, config) {
        config = config || {};
        locator.registerInstance('handlebars', Handlebars);
        locator.register('templateProvider', TemplateProvider, config, true);
    },
    Handlebars: Handlebars,
    TemplateProvider: TemplateProvider
};

},{"./lib/TemplateProvider":151,"./lib/vendors/handlebars":152}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
