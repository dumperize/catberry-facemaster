/*
 * catberry-example: 0.0.0
 * Build Date: Thu Jan 21 2016 14:25:43 GMT+0400 (SAMT)
 */

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

/**
 * This module is a template and it is used only with some string replaces
 * by BrowserBundleBuilder module. It does not work by itself.
 */

'use strict';

var stores = [

{name: 'Breadcrumps', constructor: require('./catberry_stores/Breadcrumps.js')},
{name: 'Head', constructor: require('./catberry_stores/Head.js')},
{name: 'Pages', constructor: require('./catberry_stores/Pages.js')},
{name: 'Paginator', constructor: require('./catberry_stores/Paginator.js')},
{name: 'Tag', constructor: require('./catberry_stores/Tag.js')},
{name: 'master/MasterList', constructor: require('./catberry_stores/master/MasterList.js')},
{name: 'master/MasterSovety', constructor: require('./catberry_stores/master/MasterSovety.js')},
{name: 'master/MasterVideo', constructor: require('./catberry_stores/master/MasterVideo.js')},
{name: 'master/Recommended', constructor: require('./catberry_stores/master/Recommended.js')},
{name: 'other/News', constructor: require('./catberry_stores/other/News.js')},
{name: 'other/NewsItem', constructor: require('./catberry_stores/other/NewsItem.js')},
{name: 'other/Recommendation', constructor: require('./catberry_stores/other/Recommendation.js')},
{name: 'other/Vacancy', constructor: require('./catberry_stores/other/Vacancy.js')},
{name: 'other/VacancyItem', constructor: require('./catberry_stores/other/VacancyItem.js')},
{name: 'rubrika/Rubrika', constructor: require('./catberry_stores/rubrika/Rubrika.js')},
{name: 'rubrika/Rubrikator', constructor: require('./catberry_stores/rubrika/Rubrikator.js')},
{name: 'rubrika/RubrikatorCompany', constructor: require('./catberry_stores/rubrika/RubrikatorCompany.js')},
{name: 'rubrika/RubrikatorParent', constructor: require('./catberry_stores/rubrika/RubrikatorParent.js')},
{name: 'rubrika/RubrikatorSale', constructor: require('./catberry_stores/rubrika/RubrikatorSale.js')},
{name: 'sale/SaleByRubrika', constructor: require('./catberry_stores/sale/SaleByRubrika.js')},
{name: 'master/MasterItem', constructor: require('./catberry_stores/master/MasterItem.js')}
];

var components = [

{name: 'breadcrumps', constructor: require('./catberry_components/breadcrumps/index.js'), properties: {"name":"breadcrumps","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <span class=\\"breadcrumbs__icon\\">\\n            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "arrow-breadcrumbs", {"name":"icon","hash":{},"data":data})))\n    + "\\n        </span>\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.url : depth0), {"name":"if","hash":{},"fn":this.program(2, data),"inverse":this.program(7, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.links : depth0), {"name":"if","hash":{},"fn":this.program(9, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"2":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.links : depth0), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"3":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                <a class=\\"breadcrumbs__level breadcrumbs__level_link js-parent-rub\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</a>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                <a class=\\"breadcrumbs__level breadcrumbs__level_link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</a>\\n";\n},"7":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "            <span class=\\"breadcrumbs__level\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</span>\\n";\n},"9":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "            <div class=\\"breadcrumbs__list-container js-breadcrumbs-list\\">\\n                <ul class=\\"breadcrumbs__list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.links : depth0), {"name":"each","hash":{},"fn":this.program(10, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </ul>\\n            </div>\\n";\n},"10":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        <li class=\\"breadcrumbs__list-item\\">\\n                            <span class=\\"breadcrumbs__icon\\"></span>\\n                            <a class=\\"breadcrumbs__level breadcrumbs__level_link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</a>\\n                        </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"breadcrumbs\\">\\n    <span class=\\"breadcrumbs__header\\">Вы находитесь: </span>\\n";\n  stack1 = helpers.each.call(depth0, depth0, {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'catalog-list', constructor: require('./catberry_components/catalog-list/index.js'), properties: {"name":"catalog-list","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <li class=\\"catalog-list__item\\">\\n            <a class=\\"catalog-list__item-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n                <span class=\\"catalog-list__icon\\">\\n                    "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, (depth0 != null ? depth0.ico : depth0), {"name":"icon","hash":{},"data":data})))\n    + "\\n                </span>\\n                ";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n            </a>\\n        </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<ul class=\\"catalog-list_"\n    + escapeExpression(((helper = (helper = helpers[\'data-mod\'] || (depth0 != null ? depth0[\'data-mod\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"data-mod","hash":{},"data":data}) : helper)))\n    + " catalog-list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.catalogs : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</ul>\\n\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'document', constructor: require('./catberry_components/document/index.js'), properties: {"name":"document","template":"./template.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<head cat-store=\\"Head\\"></head>\\n<body>\\n\t<cat-pages-header id=\\"pages-header\\" cat-store=\\"Pages\\"></cat-pages-header>\\n\t<cat-pages-content id=\\"pages-content\\" cat-store=\\"Pages\\"></cat-pages-content>\\n    <cat-pages-footer id=\\"pages-footer\\" cat-store=\\"Pages\\"></cat-pages-footer>\\n</body>\\n</html>\\n";\n  },"useData":true}', errorTemplateSource: null},
{name: 'head', constructor: require('./catberry_components/head/index.js'), properties: {"name":"head","template":"./template.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "<meta charset=\\"UTF-8\\">\\n<title>"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</title>\\n<meta content=\\""\n    + escapeExpression(((helper = (helper = helpers.description || (depth0 != null ? depth0.description : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"description","hash":{},"data":data}) : helper)))\n    + "\\" name=\\"description\\">\\n<meta content=\\""\n    + escapeExpression(((helper = (helper = helpers.keywords || (depth0 != null ? depth0.keywords : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"keywords","hash":{},"data":data}) : helper)))\n    + "\\" name=\\"keywords\\">\\n<meta content=\\"telephone=no\\" name=\\"format-detection\\">\\n<meta name=\\"robots\\" content=\\"noodp, noydir\\">\\n\\n<meta name=\\"HandheldFriendly\\" content=\\"true\\">\\n<meta http-equiv=\\"X-UA-Compatible\\" content=\\"IE=edge\\">\\n<meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">\\n\\n<meta property=\\"og:title\\" content=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.social : depth0)) != null ? stack1.title : stack1), depth0))\n    + "\\">\\n<meta property=\\"og:url\\" content=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.social : depth0)) != null ? stack1.url : stack1), depth0))\n    + "\\">\\n<meta property=\\"og:description\\" content=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.social : depth0)) != null ? stack1.description : stack1), depth0))\n    + "\\">\\n<meta property=\\"og:image\\" content=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.social : depth0)) != null ? stack1.img : stack1), depth0))\n    + "\\">\\n<meta property=\\"og:image:type\\" content=\\"image/jpeg\\">\\n<meta property=\\"og:image:width\\" content=\\"500\\">\\n<meta property=\\"og:image:height\\" content=\\"300\\">\\n<meta property=\\"twitter:description\\" content=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.social : depth0)) != null ? stack1.description : stack1), depth0))\n    + "\\">\\n<link rel=\\"image_src\\" href=\\"\\">\\n<link rel=\\"icon\\" type=\\"image/png\\" href=\\"/img/icon.ico\\">\\n\\n<link href=\\"/css/main.css\\" rel=\\"stylesheet\\">\\n<link href=\\"/css/vendor.min.css\\" rel=\\"stylesheet\\">\\n<script src=\\"/vendor.min.js\\"></script>\\n<script src=\\"/bundle.js\\"></script>\\n<script>svg4everybody();</script>\\n\\n<!--[if lt IE 9 ]><!--<script src=\\"/separate-js/html5shiv-3.7.2.min.js\\" type=\\"text/javascript\\"></script><meta content=\\"no\\" http-equiv=\\"imagetoolbar\\">--><![endif]-->\\n";\n},"useData":true}', errorTemplateSource: null},
{name: 'loader', constructor: require('./catberry_components/loader/index.js'), properties: {"name":"loader","template":"./template.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"loading\\"></div>\\n\\n";\n  },"useData":true}', errorTemplateSource: null},
{name: 'sale', constructor: require('./catberry_components/sale/index.js'), properties: {"name":"sale","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.rubrikator : depth0), {"name":"each","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    </div>\\n\\n        <cat-common-paginator id=\\"common-paginator\\" cat-store=\\"Paginator\\" model=\\"sale/SaleByRubrika\\"></cat-common-paginator>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.active : depth0), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"3":function(depth0,helpers,partials,data) {\n  var stack1, helper, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", helperMissing=helpers.helperMissing, buffer = "            <div class=\\"sale-catalog__item\\">\\n                <p class=\\"sale-catalog__title\\" style=\\"background-color: "\n    + escapeExpression(lambda(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.children : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.root : stack1)) != null ? stack1.color : stack1), depth0))\n    + "\\">\\n                    "\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\n                    <span>"\n    + escapeExpression(((helper = (helper = helpers.saleCount || (depth0 != null ? depth0.saleCount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"saleCount","hash":{},"data":data}) : helper)))\n    + "</span>\\n                </p>\\n                <div class=\\"sale-catalog__shares\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.sale : depth0), {"name":"each","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </div>\\n\\n                <div class=\\"sale-catalog__subhead\\">\\n                    <ul class=\\"sale-catalog__list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.children : depth0), {"name":"each","hash":{},"fn":this.program(11, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                    </ul>\\n                </div>\\n";\n},"4":function(depth0,helpers,partials,data) {\n  var stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function", buffer = "                        <div class=\\"sale-catalog__sale-item\\">\\n                            <div class=\\"sale sale_catalog\\">\\n                                <a class=\\"sale__link\\" href=\\"\\">\\n                                    <p class=\\"sale__title\\">\\n";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 1, {"name":"is","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 2, {"name":"is","hash":{},"fn":this.program(7, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 3, {"name":"is","hash":{},"fn":this.program(9, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                                    </p>\\n\\n                                    <div class=\\"sale__pic\\"><img class=\\"sale__img\\" src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), 200, 200, {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\">\\n                                    </div>\\n                                    <p class=\\"sale__text\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</p>\\n                                </a>\\n                            </div>\\n                        </div>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  return "                                            Подарок\\n";\n  },"7":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                                            Скидка "\n    + escapeExpression(((helper = (helper = helpers.discount || (depth0 != null ? depth0.discount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"discount","hash":{},"data":data}) : helper)))\n    + "%\\n";\n},"9":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                                            -"\n    + escapeExpression(((helper = (helper = helpers.discount || (depth0 != null ? depth0.discount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"discount","hash":{},"data":data}) : helper)))\n    + " руб.\\n";\n},"11":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.root : depth0), {"name":"if","hash":{},"fn":this.program(12, data),"inverse":this.program(18, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"12":function(depth0,helpers,partials,data) {\n  var stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda, functionType="function", buffer = "                                <li class=\\"";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.root : depth0)) != null ? stack1.active : stack1), {"name":"if","hash":{},"fn":this.program(13, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += " sale-catalog__root\\">\\n                                    "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "\\n                                    <a href=\\"/sale/catalog/"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.root : depth0)) != null ? stack1.id : stack1), depth0))\n    + "\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.root : depth0)) != null ? stack1.name : stack1), depth0))\n    + "<span>"\n    + escapeExpression(((helper = (helper = helpers.saleCount || (depth0 != null ? depth0.saleCount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"saleCount","hash":{},"data":data}) : helper)))\n    + "</span></a>\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.root : depth0)) != null ? stack1.active : stack1), {"name":"if","hash":{},"fn":this.program(15, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                                </li>\\n";\n},"13":function(depth0,helpers,partials,data) {\n  return "act";\n  },"15":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                                        <ul>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.child : depth0), {"name":"each","hash":{},"fn":this.program(16, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                                        </ul>\\n";\n},"16":function(depth0,helpers,partials,data) {\n  var helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";\n  return "                                                <li class=\\"sale-catalog__child\\">\\n                                                    "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "\\n                                                    <a href=\\"/sale/catalog/"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\n                                                        <span>"\n    + escapeExpression(((helper = (helper = helpers.saleCount || (depth0 != null ? depth0.saleCount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"saleCount","hash":{},"data":data}) : helper)))\n    + "</span></a>\\n                                                </li>\\n";\n},"18":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.child : depth0), {"name":"each","hash":{},"fn":this.program(19, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"19":function(depth0,helpers,partials,data) {\n  var helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";\n  return "                                    <li class=\\"sale-catalog__child\\">\\n                                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "\\n                                        <a href=\\"/sale/catalog/"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "<span>"\n    + escapeExpression(((helper = (helper = helpers.saleCount || (depth0 != null ? depth0.saleCount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"saleCount","hash":{},"data":data}) : helper)))\n    + "</span></a>\\n                                    </li>\\n";\n},"21":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "\\n";\n  stack1 = helpers.each.call(depth0, depth0, {"name":"each","hash":{},"fn":this.program(22, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"22":function(depth0,helpers,partials,data) {\n  var stack1, helper, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", helperMissing=helpers.helperMissing, buffer = "            <div class=\\"sale-catalog__item\\">\\n                <p class=\\"sale-catalog__title\\" style=\\"background-color: "\n    + escapeExpression(lambda(((stack1 = ((stack1 = ((stack1 = (depth0 != null ? depth0.children : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.root : stack1)) != null ? stack1.color : stack1), depth0))\n    + "\\">\\n                    "\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\n                    <span>"\n    + escapeExpression(((helper = (helper = helpers.saleCount || (depth0 != null ? depth0.saleCount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"saleCount","hash":{},"data":data}) : helper)))\n    + "</span>\\n                </p>\\n\\n                <div class=\\"sale-catalog__shares\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.sale : depth0), {"name":"each","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </div>\\n\\n                <div class=\\"sale-catalog__subhead\\">\\n                    <ul class=\\"sale-catalog__list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.children : depth0), {"name":"each","hash":{},"fn":this.program(23, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                    </ul>\\n                </div>\\n            </div>\\n";\n},"23":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.root : depth0), {"name":"if","hash":{},"fn":this.program(24, data),"inverse":this.program(18, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"24":function(depth0,helpers,partials,data) {\n  var stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda, functionType="function";\n  return "                                <li class=\\"sale-catalog__root\\">\\n                                    "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "\\n                                    <a href=\\"/sale/catalog/"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.root : depth0)) != null ? stack1.id : stack1), depth0))\n    + "\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.root : depth0)) != null ? stack1.name : stack1), depth0))\n    + "<span>"\n    + escapeExpression(((helper = (helper = helpers.saleCount || (depth0 != null ? depth0.saleCount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"saleCount","hash":{},"data":data}) : helper)))\n    + "</span></a>\\n                                </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<!--данный hbs сделан так для примера его можно разбить для удобства по блокам!-->\\n<div class=\\"sale-catalog\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.currentRubrika : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.program(21, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div><!-- sale-catalog -->";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'search', constructor: require('./catberry_components/search/index.js'), properties: {"name":"search","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return " search_"\n    + escapeExpression(((helper = (helper = helpers.modificator || (depth0 != null ? depth0.modificator : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"modificator","hash":{},"data":data}) : helper)))\n    + " ";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<div class=\\"search ";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.modificator : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\">\\n    <form class=\\"search__form\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\">\\n        <div class=\\"search__title\\">\\n            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "search", {"name":"icon","hash":{},"data":data})))\n    + "\\n        </div>\\n        <div class=\\"search__field\\">\\n            <input class=\\"search__field-input input-text\\" type=\\"text\\" name=\\"search\\">\\n        </div>\\n        <div class=\\"search__button\\">\\n            <button class=\\"search__button-submit\\" type=\\"submit\\">найди услугу</button>\\n        </div>\\n    </form>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'service-request', constructor: require('./catberry_components/service-request/index.js'), properties: {"name":"service-request","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'social', constructor: require('./catberry_components/social/index.js'), properties: {"name":"social","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "    <li class=\\"social__item\\">\\n        <a class=\\"social__item-link link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\" target=\\"_blank\\">\\n            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, (depth0 != null ? depth0.ico : depth0), "icon_white", {"name":"icon","hash":{},"data":data})))\n    + "\\n        </a>\\n    </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<ul class=\\"social\\">\\n";\n  stack1 = helpers.each.call(depth0, depth0, {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</ul>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'common-h1', constructor: require('./catberry_components/_common/common-h1/index.js'), properties: {"name":"common-h1","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<h1 class=\\"h1 h1_style\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</h1>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'common-paginator', constructor: require('./catberry_components/_common/common-paginator/index.js'), properties: {"name":"common-paginator","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, buffer = "    <div class=\\"paginator\\">\\n        <span class=\\"paginator__title\\">Перейти к странице: </span>\\n        <ul class=\\"paginator__list\\">\\n            <li class=\\"paginator__page paginator__page_previous\\">\\n                <a class=\\"paginator__number\\" href=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.start : depth0)) != null ? stack1.url : stack1), depth0))\n    + "\\">&lt;</a>\\n            </li>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.list : depth0), {"name":"each","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            <li class=\\"paginator__page paginator__page_next\\">\\n                <a class=\\"paginator__number\\" href=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.end : depth0)) != null ? stack1.url : stack1), depth0))\n    + "\\">&gt;</a>\\n            </li>\\n        </ul>\\n    </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0[\'is-selected\'] : depth0), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"3":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                    <li class=\\"paginator__page paginator__page_selected\\"><span class=\\"paginator__number\\">"\n    + escapeExpression(((helper = (helper = helpers.number || (depth0 != null ? depth0.number : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"number","hash":{},"data":data}) : helper)))\n    + "</span></li>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                    <li class=\\"paginator__page\\"><a class=\\"paginator__number\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.number || (depth0 != null ? depth0.number : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"number","hash":{},"data":data}) : helper)))\n    + "</a></li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1;\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0[\'is-paginator\'] : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { return stack1; }\n  else { return \'\'; }\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-filter', constructor: require('./catberry_components/master/master-filter/index.js'), properties: {"name":"master-filter","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <div class=\\"filter-section\\">\\n            <a class=\\"filter-section__title filter-section__title_"\n    + escapeExpression(((helper = (helper = helpers.sectionName || (depth0 != null ? depth0.sectionName : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"sectionName","hash":{},"data":data}) : helper)))\n    + " ";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.openSection : depth0), {"name":"if","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += " js-filter-toggle-btn\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n                <div class=\\"filter-section__icon\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.openSection : depth0), {"name":"if","hash":{},"fn":this.program(4, data),"inverse":this.program(6, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </div>\\n\\n                "\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\n\\n                <div class=\\"filter-section__arrow\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.openSection : depth0), {"name":"if","hash":{},"fn":this.program(8, data),"inverse":this.program(10, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </div>\\n            </a>\\n\\n";\n  stack1 = helpers[\'with\'].call(depth0, (depth0 != null ? depth0.openSection : depth0), {"name":"with","hash":{},"fn":this.program(12, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "        </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  return "active";\n  },"4":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, (depth0 != null ? depth0.ico : depth0), "icon_white", {"name":"icon","hash":{},"data":data})))\n    + "\\n";\n},"6":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, (depth0 != null ? depth0.ico : depth0), {"name":"icon","hash":{},"data":data})))\n    + "\\n";\n},"8":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", "down", {"name":"icon","hash":{},"data":data})))\n    + "\\n";\n},"10":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "\\n";\n},"12":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                <div class=\\"filter-section__section js-filter-toggle-section\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.sortBy : depth0), {"name":"if","hash":{},"fn":this.program(13, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.tagsGroup : depth0), {"name":"if","hash":{},"fn":this.program(15, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </div>\\n";\n},"13":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                        <div class=\\"sort-by\\">\\n                            <p class=\\"sort-by__title\\">Отсортировать: </p>\\n\\n                            <form class=\\"sort-by__form\\" action=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.sortBy : depth0)) != null ? stack1.url : stack1), depth0))\n    + "\\" method=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.sortBy : depth0)) != null ? stack1.method : stack1), depth0))\n    + "\\">\\n                                <div class=\\"filter-radio\\">\\n                                    <input class=\\"filter-radio__input\\" type=\\"radio\\" name=\\"sort-by\\" value=\\"name\\" id=\\"sort-by-name\\">\\n                                    <label class=\\"filter-radio__label\\" for=\\"sort-by-name\\">по фамилии по алфавиту</label>\\n                                </div>\\n                                <div class=\\"filter-radio\\">\\n                                    <input class=\\"filter-radio__input\\" type=\\"radio\\" name=\\"sort-by\\" value=\\"recommendation\\" id=\\"sort-by-recommendation\\">\\n                                    <label class=\\"filter-radio__label\\" for=\\"sort-by-recommendation\\">по количеству\\n                                        рекомендаций</label>\\n                                </div>\\n                            </form>\\n                        </div>\\n";\n},"15":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                        <div class=\\"filter-by\\">\\n                            <p class=\\"filter-by__title\\">Отфильтровать:</p>\\n\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tagsGroup : depth0), {"name":"each","hash":{},"fn":this.program(16, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n                        </div>\\n";\n},"16":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.title : depth0), {"name":"if","hash":{},"fn":this.program(17, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.tags : depth0), {"name":"each","hash":{},"fn":this.program(19, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"17":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                                    <p class=\\"filter-by__title\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</p>\\n";\n},"19":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.isActive : depth0), {"name":"if","hash":{},"fn":this.program(20, data),"inverse":this.program(22, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"20":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                                        <span class=\\"filter-by__tag-active\\">\\n                                            "\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\n                                            <div class=\\"filter-by__close\\">\\n                                                <a class=\\"filter-by__close-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.urlBack || (depth0 != null ? depth0.urlBack : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"urlBack","hash":{},"data":data}) : helper)))\n    + "\\">\\n                                                    <div class=\\"filter-by__close-icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "close", {"name":"icon","hash":{},"data":data})))\n    + "</div>\\n                                                </a>\\n                                            </div>\\n                                        </span>\\n";\n},"22":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                                        <a class=\\"filter-by__tag\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.path || (depth0 != null ? depth0.path : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"path","hash":{},"data":data}) : helper)))\n    + "\\">\\n                                            "\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\n                                        </a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"filter\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.filterSection : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-list', constructor: require('./catberry_components/master/master-list/index.js'), properties: {"name":"master-list","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "        <div class=\\"master-list__item\\">\\n            <cat-master-minicard id=\\"master-minicard-"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\" master-id=\\""\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\" cat-store=\\"master/MasterList\\"></cat-master-minicard>\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<div class=\\"master-list\\">\\n";\n  stack1 = helpers.each.call(depth0, depth0, {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    <div class=\\"wait-spinner\\" id=\\"wait-spinner\\"><div class=\\"wait-spinner__animate\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "spinner", {"name":"icon","hash":{},"data":data})))\n    + "</div></div>\\n</div><!--master-list-->";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-page', constructor: require('./catberry_components/master/master-page/index.js'), properties: {"name":"master-page","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "                    <p class=\\"master-card-mp__company\\">\\n                        <span><img class=\\"master-card-mp__logo\\" src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, ((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.imgID : stack1), (depth0 != null ? depth0.null : depth0), 70, {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.name : stack1), depth0))\n    + "\\"></span>\\n                        <span>"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.name : stack1), depth0))\n    + "</span>\\n                    </p>\\n";\n},"3":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                            "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.phone : stack1), depth0))\n    + "<br>\\n                            <span style=\\"color: red; font-weight: bold\\">workPhone - ERROR!</span>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  return "                            не указано\\n";\n  },"7":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                            <a class=\\"contacts-mp__anch\\" href=\\"mailto:"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.email : stack1), depth0))\n    + "\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.email : stack1), depth0))\n    + "</a>\\n";\n},"9":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                            "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.skype : stack1), depth0))\n    + "\\n";\n},"11":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                            "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.icq : stack1), depth0))\n    + "\\n";\n},"13":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                            "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.addr : stack1), depth0))\n    + "<br>\\n                            <span class=\\"contacts-mp__onmap\\"><a class=\\"contacts-mp__anch\\" href=\\"#\\">на карте</a> →</span>\\n";\n},"15":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.access : depth0), {"name":"if","hash":{},"fn":this.program(16, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"16":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                <li>";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.active : depth0), {"name":"if","hash":{},"fn":this.program(17, data),"inverse":this.program(19, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</li>\\n";\n},"17":function(depth0,helpers,partials,data) {\n  var helper, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", helperMissing=helpers.helperMissing;\n  return "<a href=\\"#master-block-"\n    + escapeExpression(lambda((data && data.key), depth0))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</a>";\n},"19":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<span>"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</span>";\n},"21":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.access : depth0), {"name":"if","hash":{},"fn":this.program(22, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"22":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.active : depth0), {"name":"if","hash":{},"fn":this.program(23, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"23":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "                    <p class=\\"master-page__section-title\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n                    <div class=\\"master-page__section-cont\\">\\n                        <cat-master-block-"\n    + escapeExpression(lambda((data && data.key), depth0))\n    + " id=\\"master-block-"\n    + escapeExpression(lambda((data && data.key), depth0))\n    + "\\" cat-store=\\"master/MasterItem\\" master-page=\\"true\\"></cat-master-block-"\n    + escapeExpression(lambda((data && data.key), depth0))\n    + ">\\n                    </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function", lambda=this.lambda, buffer = "<div class=\\"master-page\\"><!-- mp - master-page -->\\n    <div class=\\"master-page__row\\">\\n\\n        <div class=\\"master-page__master-card\\">\\n\\n            <div class=\\"master-page__avatar-cont\\">\\n                <img src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\">\\n                <i class=\\"master-page__like\\" style=\\"color: red; font-weight: bold\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "like", {"name":"icon","hash":{},"data":data})))\n    + " 129</i>\\n            </div>\\n\\n            <div class=\\"master-card-mp\\">\\n                <h1 class=\\"master-card-mp__name\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</h1>\\n\\n                <p class=\\"master-card-mp__spec\\">"\n    + escapeExpression(((helper = (helper = helpers.spec || (depth0 != null ? depth0.spec : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"spec","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.company : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n\\n                <div class=\\"master-card-mp__master-number\\">\\n                    <p class=\\"master-number\\">\\n                        <span class=\\"master-number__title\\">личный номер Мастера</span>\\n                        <span class=\\"master-number__number\\">№"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.number : stack1), depth0))\n    + "</span>\\n                        <span class=\\"master-number__print\\"><a class=\\"master-number__print\\" href=\\"#\\">распечатать визитку</a></span>\\n                    </p>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div class=\\"master-page__contact-cont\\">\\n            <div class=\\"contacts-mp\\">\\n                <div class=\\"contacts-mp__cap\\">\\n                    <p>\\n                        <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "phone", {"name":"icon","hash":{},"data":data})))\n    + "</i><br>\\n                        <span>+7 *** ***-**-**</span>\\n                    </p>\\n\\n                    <a class=\\"contacts-mp__show-contact\\" href=\\"\\">Показать контакты</a>\\n                </div>\\n\\n\\n                <ul class=\\"contacts-mp__list\\">\\n\\n                    <li>\\n                        <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "phone", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.phone : stack1), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                    </li>\\n\\n                    <li>\\n                        <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "email", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.email : stack1), {"name":"if","hash":{},"fn":this.program(7, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                    </li>\\n\\n                    <li><i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "skype", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.skype : stack1), {"name":"if","hash":{},"fn":this.program(9, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                    </li>\\n\\n                    <li><i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "icq", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.icq : stack1), {"name":"if","hash":{},"fn":this.program(11, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                    </li>\\n\\n                    <li><i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "placemark", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.addr : stack1), {"name":"if","hash":{},"fn":this.program(13, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                    </li>\\n                </ul>\\n\\n                <a class=\\"contacts-mp__a-callback js-show-callback-popup\\" href=\\"#callback-request-popup\\">заказать\\n                    звонок</a>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\"callback-popup\\">\\n        <form class=\\"callback-popup__form\\" id=\\"callback-request-popup-form\\" method=\\"\\" action=\\"\\">\\n            <input class=\\"callback-popup__input-text\\" type=\\"text\\" placeholder=\\"Ваше имя\\" name=\\"callbackRequestForm[name]\\">\\n            <input class=\\"callback-popup__input-text\\" type=\\"text\\" placeholder=\\"Ваш телефон\\" name=\\"callbackRequestForm[phone]\\">\\n            <textarea class=\\"callback-popup__textarea\\" placeholder=\\"Ваш комментарий\\" name=\\"callbackRequestForm[text]\\"></textarea>\\n            <input class=\\"callback-popup__btn\\" type=\\"submit\\" value=\\"отправить заявку\\">\\n            <span style=\\"color: red; font-weight: bold\\">Отправка формы не работает - ERROR!</span>\\n        </form>\\n        <div class=\\"success_response\\">\\n            Ваша заявка отправлена Мастеру\\n        </div>\\n    </div>\\n\\n    <ul class=\\"menu-mp\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.isBlock : depth0), {"name":"each","hash":{},"fn":this.program(15, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "    </ul>\\n    <!-- menu-mp -->\\n\\n    <div class=\\"master-page__content\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.isBlock : depth0), {"name":"each","hash":{},"fn":this.program(21, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    </div>\\n</div>\\n<!-- master-page -->";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-recommended', constructor: require('./catberry_components/master/master-recommended/index.js'), properties: {"name":"master-recommended","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "    <div class=\\"master_recommended\\">\\n        <h2 class=\\"master_recommended__title\\">\\n            Этих<br>\\n            Мастеров<br>\\n            рекомендуют\\n        </h2>\\n\\n        <div class=\\"master_recommended__slider\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0[\'recommended-master\'] : depth0), {"name":"each","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "        </div>\\n    </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                <a class=\\"master_recommended__master\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers[\'master-url\'] || (depth0 != null ? depth0[\'master-url\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"master-url","hash":{},"data":data}) : helper)))\n    + "\\">\\n                    <img class=\\"master_recommended__master-photo\\" src=\\""\n    + escapeExpression(((helper = (helper = helpers.src || (depth0 != null ? depth0.src : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"src","hash":{},"data":data}) : helper)))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.alt || (depth0 != null ? depth0.alt : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"alt","hash":{},"data":data}) : helper)))\n    + "\\">\\n\\n                    <p class=\\"master_recommended__master-name\\">\\n                        "\n    + escapeExpression(((helper = (helper = helpers[\'master-name\'] || (depth0 != null ? depth0[\'master-name\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"master-name","hash":{},"data":data}) : helper)))\n    + "\\n                    </p>\\n\\n                    <p class=\\"master_recommended__master-recommendations\\">\\n                        "\n    + escapeExpression(((helper = (helper = helpers[\'recommendation-number\'] || (depth0 != null ? depth0[\'recommendation-number\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"recommendation-number","hash":{},"data":data}) : helper)))\n    + "\\n                    </p>\\n                </a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1;\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0[\'is-recommended-masters\'] : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { return stack1; }\n  else { return \'\'; }\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-rubrika', constructor: require('./catberry_components/master/master-rubrika/index.js'), properties: {"name":"master-rubrika","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, buffer = "        <div class=\\"seo-text\\">\\n            <div class=\\"seo-text__text format\\">\\n                ";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.currentSeo : depth0)) != null ? stack1.text : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n            </div>\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, buffer = "<div class=\\"inner-top\\">\\n    <div class=\\"inner-top__title\\">\\n        <cat-common-h1 id=\\"common-h1\\" name=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.currentSeo : depth0)) != null ? stack1.pageTitle : stack1), depth0))\n    + "\\"></cat-common-h1>\\n    </div>\\n\\n    <div class=\\"inner-top__search\\">\\n        <cat-search id=\\"search\\" modificator=\\"inner\\"></cat-search>\\n    </div>\\n    <div class=\\"inner-top__callback\\">\\n        <a class=\\"request\\" href=\\"/request\\">\\n            <div class=\\"request__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "star-in-sun", {"name":"icon","hash":{},"data":data})))\n    + "</div>\\n            Отправить задание мастерам\\n        </a>\\n    </div>\\n</div>\\n<div class=\\"inner-content\\">\\n    <div class=\\"inner-content__left-side\\">\\n        <cat-master-filter id=\\"master-filter\\" cat-store=\\"Tag\\"></cat-master-filter>\\n        { {> banner/banner_side/banner_side banner_side} }\\n    </div>\\n    <div class=\\"inner-content__right-side\\">\\n        <cat-master-recommended id=\\"master-recommended\\" cat-store=\\"master/Recommended\\"></cat-master-recommended>\\n        <cat-master-list id=\\"master-list\\" cat-store=\\"master/MasterList\\"></cat-master-list>\\n    </div>\\n</div>\\n<div class=\\"row\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.currentSeo : depth0)) != null ? stack1.text : stack1), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'other-news', constructor: require('./catberry_components/other/other-news/index.js'), properties: {"name":"other-news","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <div class=\\"news\\">\\n            <div class=\\"news__inner\\">\\n                <div class=\\"news__img-wr\\">\\n                    <img class=\\"news__img\\" src=\\""\n    + escapeExpression(((helper = (helper = helpers.src || (depth0 != null ? depth0.src : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"src","hash":{},"data":data}) : helper)))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\">\\n                </div>\\n                <div class=\\"news__content\\">\\n                    <p class=\\"news__title\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n                    <p class=\\"news__intro\\">";\n  stack1 = ((helpers.stripTags || (depth0 && depth0.stripTags) || helperMissing).call(depth0, (depth0 != null ? depth0.preview : depth0), {"name":"stripTags","hash":{},"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</p>\\n\\n                    <p class=\\"news__date\\">"\n    + escapeExpression(((helpers.formatDate || (depth0 && depth0.formatDate) || helperMissing).call(depth0, (depth0 != null ? depth0.date : depth0), "%d %Z %Y", {"name":"formatDate","hash":{},"data":data})))\n    + "</p>\\n\\n                    <a class=\\"news__more\\" href=\\"/news/item/"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">\\n                        подробнее\\n                        <i class=\\"news__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                    </a>\\n                </div>\\n                <div class=\\"news__autor\\">\\n                    <p>\\n                        Новость добавил: <br> ERROR\\n                        "\n    + escapeExpression(((helper = (helper = helpers.autor || (depth0 != null ? depth0.autor : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"autor","hash":{},"data":data}) : helper)))\n    + "\\n                    </p>\\n                </div>\\n            </div>\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"news-list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.data : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'other-news-item', constructor: require('./catberry_components/other/other-news-item/index.js'), properties: {"name":"other-news-item","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "\\n<cat-common-h1 id=\\"common-h1\\" name=\\""\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\"></cat-common-h1>\\n"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\n"\n    + escapeExpression(((helper = (helper = helpers.img || (depth0 != null ? depth0.img : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"img","hash":{},"data":data}) : helper)))\n    + "\\n"\n    + escapeExpression(((helper = (helper = helpers.date || (depth0 != null ? depth0.date : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"date","hash":{},"data":data}) : helper)))\n    + "\\n"\n    + escapeExpression(((helper = (helper = helpers.preview || (depth0 != null ? depth0.preview : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"preview","hash":{},"data":data}) : helper)))\n    + "\\n";\n  stack1 = ((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"text","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'other-recommendation', constructor: require('./catberry_components/other/other-recommendation/index.js'), properties: {"name":"other-recommendation","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "        <div class=\\"recommendation\\">\\n            <div class=\\"recommendation__inner\\">\\n                <div class=\\"recommendation__img-wr\\">\\n                    <img class=\\"recommendation__img\\" src=\\""\n    + escapeExpression(((helper = (helper = helpers.photo || (depth0 != null ? depth0.photo : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"photo","hash":{},"data":data}) : helper)))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\">\\n                </div>\\n                <div class=\\"recommendation__content\\">\\n                    <p class=\\"recommendation__title\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n                    <div class=\\"recommendation__intro\\">";\n  stack1 = ((helpers.stripStyle || (depth0 && depth0.stripStyle) || helperMissing).call(depth0, (depth0 != null ? depth0.text : depth0), {"name":"stripStyle","hash":{},"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>\\n\\n                    <p class=\\"recommendation__date\\">ERROR"\n    + escapeExpression(((helper = (helper = helpers.date || (depth0 != null ? depth0.date : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"date","hash":{},"data":data}) : helper)))\n    + "</p>\\n                </div>\\n            </div>\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"recommendation-list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.data : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "ERROR\\n";\n  },"useData":true}'},
{name: 'other-vacancy', constructor: require('./catberry_components/other/other-vacancy/index.js'), properties: {"name":"other-vacancy","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  return "    <p><strong>Сейчас открыты вакансии:</strong></p>\\n";\n  },"3":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "    <p><a href=\\"/vacancy/item/"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.post || (depth0 != null ? depth0.post : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"post","hash":{},"data":data}) : helper)))\n    + "</a></p>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  return "    <p><strong>Сейчас открытых вакансий нет.</strong></p>\\n";\n  },"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.vacancy : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.vacancy : depth0), {"name":"each","hash":{},"fn":this.program(3, data),"inverse":this.program(5, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'other-vacancy-item', constructor: require('./catberry_components/other/other-vacancy-item/index.js'), properties: {"name":"other-vacancy-item","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<div class=\\"vacancy-one-page\\">\\n    <h1 class=\\"h1 h1_style\\">"\n    + escapeExpression(((helper = (helper = helpers.post || (depth0 != null ? depth0.post : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"post","hash":{},"data":data}) : helper)))\n    + "</h1>\\n    <img class=\\"vacancy-one-page__img\\" src=\\"/img/other/vacancy.png\\" alt=\\"Наши вакансии\\">\\n    <div class=\\"vacancy-one-page__text format\\">\\n        ";\n  stack1 = ((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"text","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n    </div>\\n    <div class=\\"vacancy-one-page__contact format\\">\\n\\n        <!-- ERROR -->\\n        ";\n  stack1 = ((helper = (helper = helpers.contact || (depth0 != null ? depth0.contact : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"contact","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n        <p style=\\"color: red; font-weight: bold\\">------ ERROR! (нет поля contact) ------</p>\\n        <!-- ERROR -->\\n\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-catalog', constructor: require('./catberry_components/page/page-catalog/index.js'), properties: {"name":"page-catalog","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"master-rubrikator-page master-rubrikator-page_collapsed\\">\\n\\n    <cat-common-h1 id=\\"common-h1\\" name=\\"Каталог услуг\\"></cat-common-h1>\\n\\n    <div class=\\"row\\">\\n        <div class=\\"master-rubrikator-page__rubriks-columns\\">\\n            <div class=\\"row\\">\\n                <cat-rubrikator-list id=\\"rubrikator-list\\" cat-store=\\"rubrika/Rubrikator\\"></cat-rubrikator-list>\\n            </div>\\n        </div>\\n        <div class=\\"master-rubrikator-page__dop\\">\\n            <p class=\\"master-rubrikator-page__dop-title\\">Другие возможности\\n                в подборе мастера</p>\\n\\n            <div class=\\"master-rubrikator-page__dop-catalogs\\">\\n                <cat-catalog-list id=\\"catalog-list\\" data-mod=\\"page_rubrikator\\"></cat-catalog-list>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-contact', constructor: require('./catberry_components/page/page-contact/index.js'), properties: {"name":"page-contact","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"contact-page\\">\\n    <h1 class=\\"h1 h1_style\\">Контакты</h1>\\n\\n    <div class=\\"contact-block\\">\\n        <p class=\\"contact-block__phone\\"><span class=\\"contact-block__name\\">Телефон:</span> "\n    + escapeExpression(((helper = (helper = helpers.phone || (depth0 != null ? depth0.phone : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"phone","hash":{},"data":data}) : helper)))\n    + "</p>\\n        <p class=\\"contact-block__email\\"><span class=\\"contact-block__name\\">E-mail:</span> <a href=\\"mailto:"\n    + escapeExpression(((helper = (helper = helpers.email || (depth0 != null ? depth0.email : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"email","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.email || (depth0 != null ? depth0.email : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"email","hash":{},"data":data}) : helper)))\n    + "</a></p>\\n        <p class=\\"contact-block__adress\\"><span class=\\"contact-block__name\\">Адрес:</span> "\n    + escapeExpression(((helper = (helper = helpers.adress || (depth0 != null ? depth0.adress : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"adress","hash":{},"data":data}) : helper)))\n    + "</p>\\n    </div>\\n\\n</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-feedback', constructor: require('./catberry_components/page/page-feedback/index.js'), properties: {"name":"page-feedback","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"feedback-page\\">\\n    <h1 class=\\"h1 h1_style\\">Обратная связь</h1>\\n\\n    <div class=\\"feedback-block\\">\\n        <form class=\\"feedback-block__form\\" id=\\"feedback-form\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\">\\n            <label>\\n                <span>Ваше имя</span>\\n                <input type=\\"text\\" name=\\"feedback[name]\\" autofocus>\\n            </label>\\n\\n            <label>\\n                <span>Ваш e-mail</span>\\n                <input type=\\"text\\" name=\\"feedback[email]\\">\\n            </label>\\n\\n            <label>\\n                <span>Ваше сообщение</span>\\n                <textarea name=\\"feedback[text]\\"></textarea>\\n            </label>\\n\\n            <input class=\\"btn-accent\\" type=\\"submit\\" value=\\"Отправить\\">\\n        </form>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-login', constructor: require('./catberry_components/page/page-login/index.js'), properties: {"name":"page-login","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "<div class=\\"page-login\\">\\n    <h1 class=\\"h1 h1_style\\">Вход / регистрация</h1>\\n\\n    <form class=\\"login-form\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n        <input class=\\"login-form__input-text\\" type=\\"text\\" placeholder=\\"Эл. почта или телефон\\" name=\\"loginForm[login]\\">\\n        <input class=\\"login-form__input-text\\" type=\\"password\\" placeholder=\\"Пароль\\" name=\\"loginForm[password]\\">\\n        <label class=\\"login-form__label-checkbox\\"><input type=\\"checkbox\\" id=\\"remember-me\\"><span>Запомнить меня</span></label>\\n        <input class=\\"login-form__btn\\" type=\\"submit\\" value=\\"Войти\\">\\n\\n        <p class=\\"login-form__href-cont\\">\\n            <a class=\\"login-form__recovery\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers[\'recovery-url\'] || (depth0 != null ? depth0[\'recovery-url\'] : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"recovery-url","hash":{},"data":data}) : helper)))\n    + "\\">Забыли пароль?</a>\\n            <a class=\\"login-form__registration\\" href=\\"#\\" id=\\"reg-link\\">Регистрация</a>\\n            <br>\\n        </p>\\n    </form>\\n\\n    <form class=\\"registration-form\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n        <input class=\\"registration-form__input-text\\" type=\\"email\\" placeholder=\\"Эл. почта\\" name=\\"regForm[login]\\">\\n        <input class=\\"registration-form__input-text\\" type=\\"text\\" placeholder=\\"Имя Фамилия\\" name=\\"regForm[name]\\">\\n        <input class=\\"registration-form__input-text\\" type=\\"password\\" placeholder=\\"Пароль\\" name=\\"regForm[password]\\">\\n\\n        <div class=\\"registration-form__capcha registration-form__capcha_registration\\">\\n            <div class=\\"registration-form__code-img\\">\\n                <img src=\\"img/assets/recovery-password/captcha.png\\" alt=\\"capcha\\">\\n            </div>\\n            <a class=\\"registration-form__reload-link\\" href=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.capcha : depth0)) != null ? stack1[\'reload-url\'] : stack1), depth0))\n    + "\\">Получить новый код</a>\\n        </div>\\n\\n        <input class=\\"registration-form__input-text\\" type=\\"text\\" placeholder=\\"Код с картинки\\" name=\\"regForm[code]\\">\\n        <input class=\\"registration-form__btn registration-form__btn_long-text\\" type=\\"submit\\" value=\\"Зарегистрироваться\\">\\n        <p class=\\"registration-form__entry\\"><a href=\\"#\\" id=\\"entry-link\\">Войти</a></p>\\n    </form>\\n\\n    <form class=\\"recovery-pass-form\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n        <input class=\\"recovery-pass-form__input-text\\" type=\\"text\\" placeholder=\\"Эл. почта или телефон\\" name=\\"recovery-password[login]\\" autofocus>\\n\\n        <div class=\\"recovery-pass-form__capcha recovery-pass-form__capcha_registration\\">\\n            <div class=\\"recovery-pass-form__code-img\\">\\n                <img src=\\"img/assets/recovery-password/captcha.png\\" alt=\\"capcha\\">\\n            </div>\\n            <a class=\\"recovery-pass-form__reload-link\\" href=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.capcha : depth0)) != null ? stack1[\'reload-url\'] : stack1), depth0))\n    + "\\">Получить новый код</a>\\n        </div>\\n\\n        <input class=\\"recovery-pass-form__input-text\\" type=\\"text\\" placeholder=\\"Код с картинки\\" name=\\"recovery-password[code]\\">\\n        <input class=\\"recovery-pass-form__btn\\" type=\\"submit\\" value=\\"Восстановить\\">\\n    </form>\\n\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-main', constructor: require('./catberry_components/page/page-main/index.js'), properties: {"name":"page-main","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"main-page\\">\\n    <cat-main-function id=\\"main-function\\"></cat-main-function>\\n    <cat-dop-function id=\\"dop-function\\"></cat-dop-function>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-master-page', constructor: require('./catberry_components/page/page-master-page/index.js'), properties: {"name":"page-master-page","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<h1 class=\\"h1 h1_style\\">Страница Мастера</h1>\\n<cat-master-page id=\\"master-page\\" cat-store=\\"master/MasterItem\\"></cat-master-page>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-master-rubrika', constructor: require('./catberry_components/page/page-master-rubrika/index.js'), properties: {"name":"page-master-rubrika","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"container\\">\\n    <cat-master-rubrika id=\\"master-rubrika\\" cat-store=\\"Tag\\"></cat-master-rubrika>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-news', constructor: require('./catberry_components/page/page-news/index.js'), properties: {"name":"page-news","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"page_oth_news\\">\\n    <cat-common-h1 id=\\"common-h1\\" name=\\"Новости\\"></cat-common-h1>\\n\\n    <div class=\\"page_oth_news__list\\">\\n        <cat-other-news id=\\"other-news\\" cat-store=\\"other/News\\"></cat-other-news>\\n        <cat-common-paginator id=\\"common-paginator\\" cat-store=\\"Paginator\\" model=\\"other/News\\"></cat-common-paginator>\\n    </div>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-news-item', constructor: require('./catberry_components/page/page-news-item/index.js'), properties: {"name":"page-news-item","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"page_oth_news\\">\\n    <cat-other-news-item id=\\"other-news\\" cat-store=\\"other/NewsItem\\"></cat-other-news-item>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-oferta', constructor: require('./catberry_components/page/page-oferta/index.js'), properties: {"name":"page-oferta","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"oferta-page\\">\\n\\n    <h1 class=\\"h1 h1_style\\">ОФЕРТА от 01.03.2015 </h1>\\n\\n    <div class=\\"oferta\\">\\n        <p><strong>на пользование Услугами Сайта www.facemaster.ru</strong></p>\\n\\n        <p>ЗАО «ФейсМастер.ру», именуемое в дальнейшем «Компания», предоставляет любому лицу услуги по использованию\\n            сайта Компании в личных целях посредством предоставления сервисов сайта на приведенных ниже условиях.</p>\\n\\n        <p>Безусловным принятием (акцептом) условий настоящей оферты считается пользование Сайтом <strong>http://www.facemaster.ru</strong>,\\n            включая просмотр страниц Сайта, не зависимо от прохождения процедуры Регистрации.</p>\\n\\n        <p>Настоящая Оферта может быть изменена по усмотрению Компании в любое время без какого-либо специального\\n            уведомления об этом Пользователя. Новая редакция Оферты, изменения и дополнения к ней вступают в силу с\\n            момента их размещения на Сайте. Регулярное ознакомление с действующей редакцией Оферты является обязанностью\\n            Пользователя. Пользование Сайтом после вступления в силу новой редакции Оферты, дополнений и изменений к ней\\n            означает согласие Пользователя со всеми такими изменениями или дополнениями, новой редакцией Оферты.</p>\\n\\n        <br>\\n\\n        <p><strong>1. ТЕРМИНЫ и ОБОЗНАЧЕНИЯ</strong></p>\\n\\n        <p><strong>Компания</strong> – ЗАО «ФейсМастер.ру»: ОГРН 1136320020825 ИНН 6321323406, Юридический адрес:\\n            445056, г.Тольятти, ул.Автостроителей, 41А, корп.1<br>\\n            <br>\\n            <strong>Пользователь/Клиент</strong> – дееспособное, в возрасте от 18 лет, физическое лицо/правоспособное\\n            юридическое лицо, прошедшие Регистрацию на сайте Компании, имеющие все правовые полномочия в соответствии с\\n            действующим законодательством РФ на заключение Оферты и иных сопутствующих документов для использования\\n            возможностей Сайта Компании.<br>\\n            <br>\\n            <strong>Сайт</strong> – Интернет-сайт, размещенный в сети Интернет по адресу: www.facemaster.ru, включающий\\n            в себя комплекс элементов: программы для ЭВМ, базы данных, интерфейс (дизайн), как в совокупности, так и\\n            отдельные элементы дизайна, и др.<br>\\n            <br>\\n            <strong>Гость</strong> – любое лицо, не прошедшее Регистрацию, имеющее возможность просматривать страницы\\n            Сайта и Информацию, размещенную Пользователями для общего доступа.<br>\\n            <br>\\n            <strong>Регистрация</strong> – комплекс действий по принятию оферты, размещенной на Сайте, созданию Личного\\n            кабинета, путем ввода учетных данных и иных необходимых сведений, и получению права на пользование Услугами\\n            Интернет-сайта.<br>\\n            <br>\\n            <strong>Учетные данные </strong>— уникальный логин (номер телефона) и пароль, создаваемые в процессе\\n            Регистрации на Сайте, используемые для доступа Пользователя/Клиента в Личный кабинет путем Авторизации.<br>\\n            <br>\\n            <strong>Авторизация</strong> — идентификация Пользователя/Клиента посредством введения в соответствующие\\n            поля на Сайте Учетных данных.<br>\\n            <br>\\n            <strong>Личный кабинет </strong>— персональная страница Пользователя/Клиента, формируемая после Регистрации,\\n            доступ к которой предоставляется Пользователю/Клиенту в результате Авторизации.<br>\\n            <br>\\n            <strong>Оферта</strong> – настоящее предложение Компании, адресованное неопределенному кругу лиц, содержащее\\n            правила и условия пользования Услугами Сайта, а также права и обязанности Пользователей/Клиентов\\n            обязательные для исполнения при размещении Информации на Сайте для общего доступа.<br>\\n            <br>\\n            <strong>Услуги</strong> - возможности (права), предоставляемые Компанией и позволяющие\\n            Пользователю/Клиенту/Гостю размещать, осуществлять поиск и просмотр Информации, а также любые иные\\n            возможности и функции, доступные на Сайте. <strong>Бесплатные услуги</strong> – базовый набор услуг,\\n            предоставляемый без взимания платы. <strong>Платные услуги</strong> – набор дополнительных услуг, за\\n            использование которых взимается плата согласно тарифам Компании.</p>\\n\\n        <p><strong>Информация – </strong>услуги и предложения Пользователя/Клиента, сведения о которых он размещает на\\n            Сайте, адресованные и доступные неопределенному кругу лиц (Гостям и/или другим Пользователям).<br>\\n            <br>\\n            <strong>Договор</strong> – соглашение, формируемое при Регистрации Пользователя/Клиента и вступающее в силу\\n            в момент оплаты первого счета за Услуги.</p>\\n\\n        <br>\\n\\n        <p><strong>2. ОБЩИЕ ПОЛОЖЕНИЯ</strong></p>\\n\\n        <p>2.1 Компания предоставляет Пользователю/Клиенту/Гостю на условиях настоящей Оферты, Договора и Дополнительных\\n            соглашений, приложений право на пользование Услугами Сайта с возможностью размещать, осуществлять поиск и\\n            просмотр Информации других Пользователей\\\Клиентов.<br>\\n            2.2 Все сделки: «Пользователь/Клиент – Пользователь/Клиент» либо «Пользователь/Клиент – Гость» заключаются\\n            напрямую. При этом, Компания не является участником таких сделок, а предоставляет лишь коммуникационную\\n            платформу для Информации Пользователей/Клиентов.<br>\\n            2.3 Услуги не предоставляются и не должны использоваться лицами младше 18 лет, лицами признанными\\n            недееспособными, а также ограниченно дееспособными лицами. Лица, не достигшие 18 лет, или лица, признанные\\n            недееспособными или ограничено дееспособными, могут пользоваться Услугами только с согласия своих законных\\n            представителей.</p>\\n\\n        <br>\\n\\n        <p><strong>3. ПРАВИЛА ПОЛЬЗОВАНИЯ САЙТОМ</strong></p>\\n\\n        <p>3.1. Гость вправе просматривать Информацию Пользователей/Клиентов, находящуюся в открытом доступе, и\\n            воспользоваться услугами, содержащимися в Информации, без Регистрации на Сайте.<br>\\n            3.2. Пользователь/Клиент получает право воспользоваться Услугами Сайта по размещению Информации для доступа\\n            к ней неопределенного круга лиц, после прохождения процедуры Регистрации – для Бесплатных Услуг, а также,\\n            дополнительно, после оформления Договора, листа заказа и оплаты счета - для Платных Услуг.<br>\\n            3.3. При Регистрации, а также оформлении договора и листа заказа Пользователь/Клиент заполняет все\\n            необходимые поля специальных форм. Не заполнение хотя бы одного обязательного поля (в т.ч. ввод некорректных\\n            данных) влечет недействительность регистрации либо листа заказа.<br>\\n            3.4. После прохождения Регистрации Пользователь/Клиент получает на указанный им номер мобильного телефона\\n            ПАРОЛЬ, который в дальнейшем используется Пользователем/Клиентом для Авторизации и входа в Личный\\n            кабинет.<br>\\n            3.5. Пользователь/Клиент несет полную ответственность за все действия с использованием его Логина (номер\\n            мобильного телефона) и Пароля. Пользователь/Клиент имеет право пользоваться Услугами Сайта только при помощи\\n            собственного номера мобильного телефона и пароля.<br>\\n            3.6. При пользовании Сайтом <strong>ЗАПРЕЩЕНО:</strong><br>\\n            - использовать автоматические программы для получения доступа на Сайт;<br>\\n            - использовать компьютерные программы, позволяющие размещать на Сайте Информацию, минуя обычный порядок\\n            размещения (к примеру использование программ по автозагрузке Информации);<br>\\n            - предпринимать какие-либо действия, которые могут привести к непропорционально большой нагрузке на\\n            инфраструктуру Сайта;<br>\\n            - копировать, воспроизводить, изменять, распространять и представлять общественности любую информацию,\\n            содержащуюся на Сайте (кроме Сведений, предоставленных самим Пользователем/Клиентом) без предварительного\\n            письменного разрешения Компании;<br>\\n            - препятствовать работе Сайта, а также препятствовать действию автоматических систем или процессов, с целью\\n            воспрепятствовать или ограничить доступ на Сайт;<br>\\n            - использовать сведения, предоставленные другим Пользователем/Клиентом, без письменного разрешения\\n            Пользователя/Клиента, разместившего такие сведения, или без подтверждения каким-либо другим способом права\\n            использовать такие сведения. Все сведения, полученные Пользователем/Клиентом о других Пользователях в связи\\n            с использованием Сайта, могут быть использованы только для совершения и исполнения сделок в отношении услуг,\\n            содержащихся в Информации Пользователей/Клиентов. Таким образом, Пользователю/Клиенту не разрешается\\n            использовать электронный адрес, ровно, как и номер телефона другого Пользователя/Клиента для целей прямой\\n            рекламной рассылки или другой рассылки нежелательных электронных сообщений, а также для иных противоправных\\n            действий или действий, совершаемых без ведома и/или согласия другой стороны;<br>\\n            - нарушать информационную безопасность Сайта;<br>\\n            - внедрять исполняемый код на стороне Пользователя/Клиента, любые внедряемые объекты, использовать frame и\\n            iframe, каскадные таблицы стилей, html-код;<br>\\n            - представляться чужим именем или от чужого имени — зарегистрированного на Сайте Пользователя/Клиента,\\n            сотрудника Компании. Вводить в заблуждение других Пользователей\\\Клиентов и администрацию Сайта относительно\\n            своей идентификации любым иным способом<br>\\n            - размещать дублирующую Информацию одного Пользователя/Клиента с использованием разных E-mail и номеров\\n            мобильных телефонов;<br>\\n            - использовать Услуги Сайта для незаконной деятельности либо деятельности, которая может привести к\\n            нарушению Компанией и/или Пользователем/Клиентом действующего законодательства РФ.</p>\\n\\n        <br>\\n\\n        <p><strong>4. ПРАВА И ОБЯЗАННОСТИ ПОЛЬЗОВАТЕЛЯ/КЛИЕНТА</strong></p>\\n\\n        <p>4.1.&nbsp;&nbsp;&nbsp; Пользователь/Клиент обязуется:<br>\\n            4.1.1. Соблюдать требования, определенные в настоящей Оферте, Договоре, листе заказа и иных документах,\\n            определяющих пользование Сайтом.<br>\\n            4.1.2. При Регистрации на Сайте использовать только реальные данные о себе и размещаемой Информации.<br>\\n            4.1.3. Следить за сохранностью своего Пароля и не раскрывать его посторонним лицам.<br>\\n            4.1.4. Не передавать или продавать свои Учетные данные для Авторизации на Сайте третьим лицам.<br>\\n            4.1.5. При размещении Информации соблюдать требования действующего законодательства РФ, в т.ч. ФЗ «О\\n            рекламе» от 13.03.2006г. № 38-ФЗ.<br>\\n            4.1.6. Предоставить, по требованию Компании, документально подтверждённые сведения о соответствии Информации\\n            требованиям действующего законодательства РФ, в том числе надлежащим образом заверенные копии дипломов,\\n            лицензий, сертификатов, свидетельств о регистрации, в случае если услуги подлежат лицензированию,\\n            обязательной сертификации, государственной регистрации.<br>\\n            4.1.7. Не размещать Информацию, входящую в «Список запрещенной к размещению Информации».<br>\\n            4.1.8. Не уничтожать и/или не изменять любые материалы на Сайте, автором которых Пользователь/Клиент не\\n            является.<br>\\n            4.1.9. Заполнить все необходимые формы и предоставить только свое Фото (Пользователя)/Логотип (Клиента).\\n            Информация, содержащая лицензируемые виды деятельности, должна содержать номер лицензии. 4.1.10. Размещать\\n            Информацию, соответствующую по содержанию выбранной Рубрике/подрубрике.<br>\\n            4.1.11. Оплачивать Платные Услуги Компании в порядке и сроки, определенные Офертой, Договором и листом\\n            заказа.<br>\\n            4.2.  Пользователь/Клиент имеет право:<br>\\n            4.2.1 Получать право воспользоваться Платными Услугами Сайта после полной оплаты счета, выставленного при\\n            оформлении листа заказа на данные Услуги.<br>\\n            4.2.2. Воспользоваться услугами менеджеров Компании для оказания помощи при Регистрации, как по телефону: +7\\n            (8482) 74-44-19, так и непосредственно при встрече.<br>\\n            4.2.3. Размещать Информацию об услугах, которые Пользователь/Клиент может оказывать, имея соответствующие\\n            навыки, образование и разрешения. 4.2.4. Разрешить оплату счета за Платные Услуги третьему лицу\\n            (Плательщику) с учетом требований действующего законодательства и оформленного договора. 4.3. Компания\\n            обязуется:<br>\\n            4.3.1. Предоставить Пользователю/Клиенту право пользоваться Услугами Сайта в порядке и сроки, определенными\\n            в Оферте, Договоре и листе заказа.<br>\\n            4.3.2. Предоставить возможность Пользователям/Клиентам управлять доступом к своим персональным данным и\\n            размещенной Информации.<br>\\n            4.4.&nbsp;&nbsp;&nbsp;  Компания имеет право:<br>\\n            4.4.1. Удалить Информацию, заблокировать доступ/удалить Учетные данные Пользователей/Клиентов, нарушивших\\n            положения настоящей Оферты, Договора и листа заказа, без извещения Пользователя/Клиента.</p>\\n\\n        <br>\\n\\n        <p><strong>5. ИНФОРМАЦИЯ, ЗАПРЕЩЕННАЯ К РАЗМЕЩЕНИЮ</strong></p>\\n\\n        <p>5.1. Пользователю/Клиенту запрещено размещать, а в случае размещения, подлежит удалению Информация,\\n            содержащая:</p>\\n\\n        <ul>\\n            <li>\\n                <p>ложные, неточные или вводящие в заблуждение сведения;</p>\\n            </li>\\n            <li>\\n                <p>сведения, способствующие мошенничеству, обману или злоупотреблению доверием;</p>\\n            </li>\\n            <li>\\n                <p>оскорбления чьей-либо чести, достоинства или деловой репутации, нарушения частной жизни;</p>\\n            </li>\\n            <li>\\n                <p>клевету или угрозы кому бы то ни было;</p>\\n            </li>\\n            <li>\\n                <p>нарушения интеллектуальных прав третьих лиц, прав на изображение гражданина, и иные права третьих\\n                    лиц;</p>\\n            </li>\\n            <li>\\n                <p>призывы к совершению преступления и разжиганию межнациональной розни;</p>\\n            </li>\\n            <li>\\n                <p>сведения, способствующие, поддерживающие или призывающие к террористической и экстремистской\\n                    деятельности;</p>\\n            </li>\\n            <li>\\n                <p>сведения непристойные, либо носящие характер порнографии;</p>\\n            </li>\\n            <li>\\n                <p>компьютерные вирусы, а также иные компьютерные программы, направленные, в частности, на нанесение\\n                    вреда, неуполномоченное вторжение, тайный перехват либо присвоение данных любой системы либо самой\\n                    системы, либо ее части, либо личной информации или иных данных (включая данные Компании);</p>\\n            </li>\\n            <li>\\n                <p>Сведения, причиняющие вред Компании, став причиной полной либо частичной потери Компанией услуг\\n                    провайдеров сети интернет, либо услуг любых иных лиц;</p>\\n            </li>\\n            <li>\\n                <p>сведения, иным образом нарушающие действующее законодательство РФ.</p>\\n            </li>\\n        </ul>\\n\\n        <p>5.2. Удаление Информации производится Компанией в любое время без извещения Пользователя/Клиента.</p>\\n\\n        <br>\\n\\n        <p><strong>6. ОПЛАТА ПЛАТНЫХ УСЛУГ</strong></p>\\n\\n        <p>6.1. После оформления листа заказа на пользование Платными Услугами Сайта Пользователь/Клиент либо Плательщик\\n            (при наличии), получает счет и выбирает способ его оплаты из предложенного на Сайте списка. Счет необходимо\\n            оплатить в указанный в нем срок. 6.2. Срок пользования Платными Услугами начинается с даты оплаты счета.\\n            Если при Регистрации не были заполнены обязательные поля или поля были заполнены некорректно, не была\\n            загружена фотография или иным образом нарушены правила Регистрации, Информация не отражается на Сайте до\\n            момента внесения соответствующих исправлений, при этом срок начала пользования Платными Услугами не\\n            продляется на срок, в течение которого Информация не отображалась на Сайте по вине Пользователя/Клиента.\\n            6.3. Каждый способ оплаты сопровождается подробной инструкцией, размещенной на Сайте. При этом Компания не\\n            несет ответственность за действия Пользователя/Клиента/Плательшика при оплате счета, в следствие которых\\n            денежные средства не поступили на счет Компании, и эти суммы Компания не компенсирует и не возвращает.<br>\\n            6.4. Оплата Услуг сайта производится в порядке 100% предоплаты. Услуги считаются оплаченными в момент\\n            извещения Компании об оплате счета. Валютой расчетов является Российский рубль.<br>\\n            6.5. В случае отказа Пользователя/Клиента от оплаченных Услуг Сайта до окончания срока пользования денежные\\n            средства не возвращаются.</p>\\n\\n        <br>\\n\\n        <p><strong>7. ОГРАНИЧЕНИЯ ОТВЕТСТВЕННОСТИ</strong></p>\\n\\n        <p>7.1. В соответствии с требованиями Федерального закона от 27.07.2006 г. № 152-ФЗ «О персональных данных»: в\\n            процессе пользования Услугами Сайта (в том числе при Регистрации, взаимодействии с другими\\n            Пользователями/Клиентами через интерфейс Сайта, размещении Информации, просмотре страниц Сайта и т.п.),\\n            Пользователь самостоятельно добровольно принимает решение о предоставлении Компании персональных и иных\\n            данных о Пользователе (фамилия, имя, отчество, адрес электронной почты, номер мобильного телефона, а также\\n            любая иная информация, предоставленная Пользователем, информация о действиях Пользователя на Сайте и пр.)\\n            для целей исполнения Оферты, а также настоящим заявляет о своем согласии на обработку и хранение Компанией\\n            персональных и иных данных Пользователя, их передачу для обработки другим Пользователям и/или третьим лицам,\\n            действующим по поручению Компании, в том числе для целей: получения статистических и аналитических данных\\n            для улучшения функционирования Сайта и/или Услуг, расширения спектра оказываемых Услуг, получения\\n            информационных и/или рекламных сообщений Компании или третьих лиц, предупреждения или пресечения незаконных\\n            и/или несанкционированных действий Пользователей или третьих лиц, обеспечения соблюдения требований\\n            действующего законодательства Российской Федерации. Компания принимает все необходимые меры для защиты\\n            персональных данных Пользователя от несанкционированного доступа третьих лиц<br>\\n            7.2. Компания не отвечает за возможное нецелевое использование информации с Сайта Пользователями/Клиентами\\n            или иными лицами и/или организациями, которое произошло без уведомления Компании с нарушением или без\\n            информационной безопасности Сайта.<br>\\n            7.3. Компания прилагает все возможные усилия для того, чтобы избежать несанкционированного использования\\n            третьими лицами персональных данных Пользователей/Клиентов. Но Компания также не несет ответственности за\\n            возможное нецелевое использование персональных данных пользователей/Клиентов, произошедшее в случае:<br>\\n            - технических неполадок в программном обеспечении, серверах или компьютерных сетях, находящихся вне контроля\\n            Компании;<br>\\n            - перебоев в работе Сайта, связанных с намеренным или ненамеренным использованием Сайта не по назначению\\n            третьими лицами;<br>\\n            - передачи паролей или информации с Сайта Пользователями/Клиентами другим лицам, не являющимися\\n            зарегистрированными пользователями Сайта или другим пользователям, не имеющим доступа к данной информации в\\n            силу условий регистрации и заключенных договоров с Компанией.<br>\\n            7.4. Каждый Пользователь/Клиент отвечает за Информацию, размещаемую от его имени, и за последствия этого\\n            размещения.<br>\\n            7.5. Пользователь/Клиент самостоятельно, по своему усмотрению и вне контроля со стороны Компании размещает\\n            Информацию на Сайте, Пользователь/Клиент несет ответственность как рекламодатель и рекламораспространитель в\\n            отношении всей размещенной им Информации в соответствии с ФЗ \\"О рекламе\\" и КоАП РФ.<br>\\n            7.6. Пользователь/Клиент самостоятельно несет ответственность за достоверность размещаемой Информации и\\n            качество предоставляемых им услуг, которые содержатся в Информации, а также освобождает Компанию от всех\\n            требований, обязательств, компенсаций по возмещению ущерба, убытков, затрат и издержек, включая судебные и\\n            иные расходы, возникшие в результате или в связи с требованиями третьих лиц.</p>\\n\\n        <br>\\n\\n        <p><strong>8. ЗАКЛЮЧИТЕЛЬНЫЕ ПОЛОЖЕНИЯ</strong></p>\\n\\n        <p>8.1 Пользователь/Клиент предоставляет Компании право использовать сведения, содержащиеся в Информации\\n            Пользователя/Клиента, для целей оказания Услуг, путем передачи Компании не эксклюзивного, действующего\\n            повсеместно, бессрочного права относительно авторских прав, торговых марок, логотипов, публикаций и баз\\n            данных, которое имеет Пользователь/Клиент и предоставленных им на всех известных или не известных\\n            информационных носителях.<br>\\n            8.2. Настоящая Оферта начинает действовать и, считается, безусловно принятой\\n            Пользователем\\\Клиентом\\\Гостем\\\плательщиком с момента начала пользования Услугам Сайта, независимо от факта\\n            Регистрации, и действует бессрочно.<br>\\n            8.3. Пользователь/Клиент вправе отказаться от пользования Услугами Сайта, после чего размещение Информации\\n            на Сайте от данного Пользователя/Клиента невозможно.<br>\\n            8.4. Компания оставляет за собой право по собственному усмотрению прекратить доступ к Услугам\\n            Пользователя/Клиента, нарушающего Оферту, Договор либо лист заказа. Пользователь/Клиент, доступ которого к\\n            Услугам был прекращен, или Информация которого перестала быть действительной, не имеет права\\n            регистрироваться повторно без соответствующего согласия Компании, а также такой Пользователь/Клиент не имеет\\n            права использовать для доступа на Сайт Учетные данные другого Пользователя/Клиента.<br>\\n            8.5. Споры, возникающие в ходе пользования Сайтом, разрешаются с соблюдением обязательного претензионного\\n            порядка. Срок ответа на претензию 15 дней со дня получения претензии. В случае неудовлетворения претензии\\n            полностью или в какой-либо части, а также в случае неполучения ответа на претензию в установленный срок,\\n            заинтересованная сторона вправе обратиться за разрешением спора в суд с территориальной подсудностью\\n            Компании.<br>\\n            8.6. В случае признания судом отдельных положений настоящей Оферты недействительными, остальные условия\\n            Оферты продолжают действовать.\\n        </p>\\n        <br>\\n    </div>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-recommendation', constructor: require('./catberry_components/page/page-recommendation/index.js'), properties: {"name":"page-recommendation","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"page_oht_recommendation\\">\\n    <cat-common-h1 id=\\"common-h1\\" name=\\"Мастера о сайте\\"></cat-common-h1>\\n\\n    <div class=\\"page_oht_recommendation__list\\">\\n\\n        <cat-other-recommendation id=\\"other-recommendation\\" cat-store=\\"other/Recommendation\\"></cat-other-recommendation>\\n        <cat-common-paginator id=\\"common-paginator\\" cat-store=\\"Paginator\\" model=\\"other/Recommendation\\"></cat-common-paginator>\\n\\n    </div>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-registration', constructor: require('./catberry_components/page/page-registration/index.js'), properties: {"name":"page-registration","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<cat-registration-header id=\\"registration-header\\"></cat-registration-header>\\n<div id=\\"form1\\">\\n    <cat-registration-form id=\\"registration-form-1\\"></cat-registration-form>\\n</div>\\n<cat-registration-about id=\\"registration-about\\"></cat-registration-about>\\n<cat-registration-why-we id=\\"registration-why-we\\"></cat-registration-why-we>\\n<cat-registration-price id=\\"registration-price\\"></cat-registration-price>\\n<div id=\\"form2\\">\\n    <cat-registration-form id=\\"registration-form-2\\"></cat-registration-form>\\n</div>\\n<cat-registration-more-page id=\\"registration-more-page\\"></cat-registration-more-page>\\n<cat-registration-faq id=\\"registration-faq\\"></cat-registration-faq>\\n<div id=\\"form3\\">\\n    <cat-registration-form id=\\"registration-form-3\\"></cat-registration-form>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-request', constructor: require('./catberry_components/page/page-request/index.js'), properties: {"name":"page-request","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"callback_request\\">\\n<h1 class=\\"h1 h1_style\\">Заявка мастеру</h1>\\n\\n    <form class=\\"callback_request__form\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\" id=\\"callback-request-form\\">\\n        <p class=\\"callback_request__intro\\">Опишите вашу задачу</p>\\n\\n        <div class=\\"callback_request__input\\">\\n            <textarea class=\\"textarea\\" placeholder=\\"Я хочу (отремонтировать, организовать, установить, доставить)\\" name=\\"callbackRequestForm[text]\\"></textarea>\\n        </div>\\n        <p class=\\"callback_request__intro\\">\\n            Оставьте ваши контакты\\n        </p>\\n\\n        <div class=\\"callback_request__input\\">\\n            <input class=\\"input-text\\" type=\\"text\\" placeholder=\\"Ваше имя\\" name=\\"callbackRequestForm[name]\\">\\n        </div>\\n        <div class=\\"callback_request__input\\">\\n            <input class=\\"input-text\\" type=\\"text\\" placeholder=\\"Ваш телефон\\" name=\\"callbackRequestForm[phone]\\">\\n        </div>\\n        <div class=\\"callback_request__input\\">\\n            <input class=\\"input-text\\" type=\\"text\\" placeholder=\\"Ваш email\\" name=\\"callbackRequestForm[email]\\">\\n        </div>\\n        <div class=\\"callback_request__submit\\">\\n            <input class=\\"btn-accent\\" type=\\"submit\\" value=\\"отправить заявку\\">\\n        </div>\\n    </form>\\n    <div class=\\"success_response\\">Ваша заявка отправлена</div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-sale', constructor: require('./catberry_components/page/page-sale/index.js'), properties: {"name":"page-sale","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<h1 class=\\"h1 h1_style\\">Каталог скидок и подарков</h1>\\n<cat-sale id=\\"sale\\" cat-store=\\"sale/SaleByRubrika\\"></cat-sale>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-sovety', constructor: require('./catberry_components/page/page-sovety/index.js'), properties: {"name":"page-sovety","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\nСоветы каталог";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-vacancy', constructor: require('./catberry_components/page/page-vacancy/index.js'), properties: {"name":"page-vacancy","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"vacancy-page\\">\\n    <h1 class=\\"h1 h1_style\\">Наши вакансии</h1>\\n    <img class=\\"vacancy-page__img\\" src=\\"/img/other/vacancy.png\\" alt=\\"Наши вакансии\\">\\n\\n    <p class=\\"vacancy-page__text\\">\\n        Мы - молодой коллектив единомышленников, если у Вас есть желание работать в нашей компании, то присоединяйтесь к\\n        нам, участвуйте в создании нового интересного продукта. Вместе с нами вы сможете воплотить свои самые смелые\\n        идеи, раскрыть свой творческий потенциал и реализоваться в карьерном плане. Мы ищем целеустремленных и уверенных\\n        специалистов, которые верят в свои силы и успех.\\n    </p>\\n\\n    <cat-other-vacancy id=\\"other-vacancy\\" cat-store=\\"other/Vacancy\\"></cat-other-vacancy>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-vacancy-item', constructor: require('./catberry_components/page/page-vacancy-item/index.js'), properties: {"name":"page-vacancy-item","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<cat-other-vacancy-item id=\\"other-vacancy-item\\" cat-store=\\"other/VacancyItem\\"></cat-other-vacancy-item>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'page-video', constructor: require('./catberry_components/page/page-video/index.js'), properties: {"name":"page-video","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\nВидео каталог\\n\\n<cat-common-paginator id=\\"common-paginator\\" cat-store=\\"Paginator\\" model=\\"master/MasterVideo\\"></cat-common-paginator>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'pages-content', constructor: require('./catberry_components/pages/pages-content/index.js'), properties: {"name":"pages-content","template":"./template.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  return "            <cat-breadcrumps id=\\"breadcrumps\\" cat-store=\\"Breadcrumps\\"></cat-breadcrumps>\\n";\n  },"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<div class=\\"page container\\">\\n    <div class=\\"page__row\\">\\n        <cat-loader id=\\"pages-content-loader\\"></cat-loader>\\n\\n";\n  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 != null ? depth0.isActive : depth0)) != null ? stack1.main : stack1), {"name":"unless","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n        <div class=\\"content\\">\\n            <cat-page-"\n    + escapeExpression(((helper = (helper = helpers.current || (depth0 != null ? depth0.current : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"current","hash":{},"data":data}) : helper)))\n    + " id=\\"page-current-"\n    + escapeExpression(((helper = (helper = helpers.current || (depth0 != null ? depth0.current : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"current","hash":{},"data":data}) : helper)))\n    + "\\"></cat-page-"\n    + escapeExpression(((helper = (helper = helpers.current || (depth0 != null ? depth0.current : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"current","hash":{},"data":data}) : helper)))\n    + ">\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: null},
{name: 'pages-footer', constructor: require('./catberry_components/pages/pages-footer/index.js'), properties: {"name":"pages-footer","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                    <a class=\\"footer__links-a\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</a>&nbsp;\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<footer class=\\"footer\\">\\n    <div class=\\"container\\">\\n\\n        <div class=\\"to-top\\" id=\\"to-top\\">\\n            <a href=\\"\\"><span>↑</span> вверх</a>\\n        </div>\\n\\n\\n        <div class=\\"row\\">\\n            <div class=\\"footer__coordinator\\">Координатор сайта: "\n    + escapeExpression(((helper = (helper = helpers.phone || (depth0 != null ? depth0.phone : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"phone","hash":{},"data":data}) : helper)))\n    + "</div>\\n\\n            <div class=\\"footer__copyright\\">\\n                <p class=\\"footer__copyright-who\\">© FaceMaster — Фейсмастер</p>\\n                <p class=\\"footer__copyright-text\\">При полном или частичном воспроизведении информации\\n                    активная ссылка на Фейсмастер обязательна.</p>\\n            </div>\\n\\n\\n            <div class=\\"footer__links\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.links : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            </div>\\n\\n\\n            <div class=\\"footer__counters\\">\\n                <!--{ { > footer/counters/counters counters} }-->\\n            </div>\\n        </div>\\n    </div>\\n</footer>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'pages-header', constructor: require('./catberry_components/pages/pages-header/index.js'), properties: {"name":"pages-header","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  return "                    <div class=\\"login\\">\\n                        <a class=\\"login__btn btn\\" href=\\"/login\\">Вход для Мастеров</a>\\n                    </div>\\n";\n  },"3":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                    <div class=\\"login\\">\\n                        <a class=\\"login__btn btn\\" href=\\"<!--ERROR-->\\"><!--ERROR - username--></a>\\n\\n                        <div class=\\"menu-user\\">\\n                            <ul class=\\"menu-user__ul\\">\\n                                <!--ERROR MENUUSER-->\\n";\n  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 != null ? depth0.authData : depth0)) != null ? stack1.menuUser : stack1), {"name":"each","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                            </ul>\\n                        </div>\\n                    </div>\\n";\n},"4":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                                    <li class=\\"menu-user__item\\">\\n                                        <a class=\\"menu-user__item-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</a>\\n                                    </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "<header class=\\"header\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <div class=\\"header__left-col\\">\\n                <div class=\\"logo\\">\\n                    <div class=\\"logo__img\\">\\n                        <a class=\\"logo__link\\" href=\\"/main\\">\\n                            <img alt=\\"Facemaster.ru Logo\\" src=\\"/img/logo.svg\\" width=\\"100%\\">\\n                        </a>\\n                    </div>\\n                    <div class=\\"visitor\\">\\n                        <p class=\\"visitor__count\\">"\n    + escapeExpression(((helper = (helper = helpers.visitCount || (depth0 != null ? depth0.visitCount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"visitCount","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n                        <p class=\\"visitor__mera\\">в неделю</p>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\"header__title\\">\\n                <a class=\\"title\\" href=\\"/main\\">\\n                    <p class=\\"title__text h1\\">ПОИСК МАСТЕРОВ В СФЕРЕ УСЛУГ</p>\\n                </a>\\n            </div>\\n            <div class=\\"header__login\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.isGuest : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.program(3, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            </div>\\n            <div class=\\"header__menu\\">\\n                <cat-pages-navigation id=\\"pages-navigation\\"></cat-pages-navigation>\\n            </div>\\n            <div class=\\"header__social\\">\\n                <cat-social id=\\"social\\"></cat-social>\\n            </div>\\n        </div>\\n    </div>\\n</header>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'pages-navigation', constructor: require('./catberry_components/pages/pages-navigation/index.js'), properties: {"name":"pages-navigation","template":"./template.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "            <li class=\\"main-menu__item\\">\\n                <a class=\\"main-menu__item-link link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.link || (depth0 != null ? depth0.link : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"link","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</a>\\n            </li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<nav class=\\"menu\\">\\n    <ul class=\\"main-menu\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.menu : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    </ul>\\n</nav>\\n";\n},"useData":true}', errorTemplateSource: null},
{name: 'registration-about', constructor: require('./catberry_components/registration/registration-about/index.js'), properties: {"name":"registration-about","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"about-wr\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <section class=\\"about\\">\\n                <ul class=\\"about__list row\\">\\n                    <li class=\\"about-list-item\\">\\n                        <p class=\\"about-list-item__text\\">\\n                            <span class=\\"about-list-item__text-ver-al\\">\\n                                ЗАРЕГИСТРИРУЙСЯ<br>НА САЙТЕ\\n                            </span>\\n                        </p>\\n\\n                        <div class=\\"about-list-item__icon-wr\\">\\n                            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "add-page", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        </div>\\n\\n                        <div class=\\"about-list-item__arrow\\">\\n                            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "arrow", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        </div>\\n                    </li>\\n                    <li class=\\"about-list-item\\">\\n                        <p class=\\"about-list-item__text\\">\\n                            <span class=\\"about-list-item__text-ver-al\\">\\n                                ОПУБЛИКУЙСЯ\\n                            </span>\\n                        </p>\\n\\n                        <div class=\\"about-list-item__icon-wr\\">\\n                            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "picture", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        </div>\\n                        <div class=\\"about-list-item__arrow\\">\\n                            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "arrow", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        </div>\\n                    </li>\\n                    <li class=\\"about-list-item\\">\\n                        <p class=\\"about-list-item__text\\">\\n                            <span class=\\"about-list-item__text-ver-al\\">\\n                                ПОЛУЧАЙ<br>КЛИЕНТОВ\\n                            </span>\\n                        </p>\\n\\n                        <div class=\\"about-list-item__icon-wr\\">\\n                            "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "people", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        </div>\\n                    </li>\\n                </ul>\\n            </section>\\n        </div>\\n    </div>\\n</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-faq', constructor: require('./catberry_components/registration/registration-faq/index.js'), properties: {"name":"registration-faq","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n<div class=\\"container corner corner_bg\\">\\n    <div class=\\"row\\">\\n        <section class=\\"faq\\">\\n            <p class=\\"page-title page-title_landing\\">Частые вопросы:</p>\\n\\n            <div class=\\"faq__block\\">\\n                <div class=\\"faq__item\\">\\n                    <p class=\\"faq__item-title\\"><span class=\\"faq__item-title-inner\\">Как оплатить сервис?</span></p>\\n\\n                    <p class=\\"faq__item-text\\">На данный момент, чтобы совершить оплату,\\n                        вам нужно приехать в наш офис по адресу Автостроителей 41А к.1 с 9:00 до 17:00 (пн-пт).\\n                        Менеджер предоставит вам всю необходимую информацию по выбору\\n                        тарифного плана и проведению оплаты. Также мы работаем над системой\\n                        электронных платежей.\\n                    </p>\\n                </div>\\n                <div class=\\"faq__item\\">\\n                    <p class=\\"faq__item-title\\"><span class=\\"faq__item-title-inner\\">Что будет, когда закончится месяц?</span></p>\\n\\n                    <p class=\\"faq__item-text\\">Вы получите уведомление на ваш e-mail, зарегистрированный в системе, с предложением продлить действующий тарифный план или перейти на новый. Если в течение 30 дней вы ни разу не совершили вход в кабинет сайта FaceMaster, то ваш кабинет будет удалён.</p>\\n                </div>\\n            </div>\\n            <div class=\\"faq__block\\">\\n                <div class=\\"faq__item\\">\\n                    <p class=\\"faq__item-title\\"><span class=\\"faq__item-title-inner\\">Могу ли я изменить тарифный план?</span></p>\\n\\n                    <p class=\\"faq__item-text\\">Если вы пользуетесь бесплатной мини-страницей, то получить все возможности эффективного продвижения на сайте FaceMaster вы можете в любое время, выбрав тарифный план и оплатив его. Если вы уже совершили оплату и хотите поменять один тарифный план на другой, то вам нужно подождать, пока закончится первый.</p>\\n                </div>\\n                <div class=\\"faq__item\\">\\n                    <p class=\\"faq__item-title\\"><span class=\\"faq__item-title-inner\\">У меня есть вопрос!</span></p>\\n\\n                    <p class=\\"faq__item-text\\">Будем рады представить вам\\n                        дополнительную информацию о работе платформы и о ценах по телефону (8482) 74-44-19.</p>\\n                </div>\\n            </div>\\n        </section>\\n    </div>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-form', constructor: require('./catberry_components/registration/registration-form/index.js'), properties: {"name":"registration-form","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"section-reg\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <section class=\\"form form_reg-master\\">\\n                <div class=\\"form__cont\\">\\n                    <h2 class=\\"form__title\\">Начать регистрацию</h2>\\n\\n                    <form class=\\"form__form\\" action=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\" method=\\""\n    + escapeExpression(((helper = (helper = helpers.method || (depth0 != null ? depth0.method : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"method","hash":{},"data":data}) : helper)))\n    + "\\" data-url-lk=\\""\n    + escapeExpression(((helper = (helper = helpers.urlLK || (depth0 != null ? depth0.urlLK : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"urlLK","hash":{},"data":data}) : helper)))\n    + "\\">\\n                        <div class=\\"form__row\\">\\n                            <input type=\\"text\\" placeholder=\\"Как Вас зовут?\\" name=\\"regmaster[name]\\">\\n                        </div>\\n                        <div class=\\"form__row row\\">\\n                            <div class=\\"form__row_half\\">\\n                                <input type=\\"text\\" placeholder=\\"Укажите Ваш телефон\\" name=\\"regmaster[phone]\\">\\n                            </div>\\n                            <div class=\\"form__row_half\\">\\n                                <input type=\\"password\\" placeholder=\\"Придумайте пароль\\" name=\\"regmaster[password]\\">\\n                            </div>\\n                        </div>\\n                        <div class=\\"form__row\\">\\n                            <input class=\\"form__btn btn\\" type=\\"submit\\" value=\\"ЗАРАГИСТРИРОВАТЬСЯ\\">\\n                        </div>\\n                        <div class=\\"form__row\\">\\n                            <label><input type=\\"checkbox\\" checked value=\\"true\\">я согласен с <a href=\\"/oferta\\">условиями</a> </label>\\n                        </div>\\n                    </form>\\n                </div>\\n            </section>\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-header', constructor: require('./catberry_components/registration/registration-header/index.js'), properties: {"name":"registration-header","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"container\\">\\n    <div class=\\"row\\">\\n        <section class=\\"landing-header\\">\\n            <h1 class=\\"page-title page-title_landing\\">FaceMaster — сайт поиска специалистов\\n                в сфере услуг в Тольятти</h1>\\n        </section>\\n    </div>\\n</div>";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-more-page', constructor: require('./catberry_components/registration/registration-more-page/index.js'), properties: {"name":"registration-more-page","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "<div class=\\"more-page-wr\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <section class=\\"more-page\\">\\n                <p class=\\"page-title page-title_landing\\">Подробнее о страницах:</p>\\n\\n                <div class=\\"more-page__item\\">\\n                    <div class=\\"more-page__pic\\">\\n                        <img class=\\"more-page__pic-img\\" alt=\\"страница и мини-страница\\" src=\\"/img/registration/1.png\\" width=\\"100%\\">\\n                    </div>\\n                    <div class=\\"more-page__text\\">\\n                        <div class=\\"more-page__text-title\\">\\n                            <div class=\\"more-page__text-title-count\\"></div>\\n                            <div class=\\"more-page__text-title-header more-page__text-title-header_no-valign\\">Каталог мастеров</div>\\n                            <div class=\\"more-page__text-title-sub-header\\">Мини-страница + личная страница</div>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-title\\">Личная страница</p>\\n\\n                            <p class=\\"more-page__paragraph-text\\">Личная страница – это ваше собственное информационное пространство для продвижения в Сети. Она может стать аналогом персонального сайта, либо, если у вас уже есть свой сайт, мы поможем расширить арсенал для привлечения на него клиентов. Личная страница даёт доступ к множеству сервисов, чтобы помочь специалисту и клиенту найти друг друга: написание статей, фотоальбомы, отзывы, продвижение в социальных сетях, видеокаталог, рубрика «Советы Мастеров», каталог фирм и многое другое.</p>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-title\\">Мини-страница</p>\\n\\n                            <p class=\\"more-page__paragraph-text\\">Мини-страница — это ваша визитка с контактной информацией. Зарегистрировавшись на нашем сайте бесплатно, вы получаете только место в общем каталоге Мастеров, где вашу визитку смогут увидеть посетители. Но вы всегда можете сделать из неё личную страницу и тем самым увеличить приток клиентов. Для этого вам нужно выбрать и оплатить один из тарифных планов.</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"more-page__item\\">\\n                    <div class=\\"more-page__pic\\">\\n                        <img class=\\"more-page__pic-img more-page__pic-img_offset-1\\" alt=\\"страница и мини-страница\\" src=\\"/img/registration/2.png\\" width=\\"100%\\">\\n                    </div>\\n                    <div class=\\"more-page__text\\">\\n\\n                        <div class=\\"more-page__text-title\\">\\n                            <div class=\\"more-page__text-title-count\\"></div>\\n                            <div class=\\"more-page__text-title-header\\">Каталог скидок и подарков</div>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-text\\">Устраивайте акции и скидки, получая ещё больше клиентов! Многие посетители регулярно отслеживают выгодные предложения в нашем каталоге «Скидки и подарки». Поэтому если вы размещаете в нём информацию о скидке, то шансы, что клиент заинтересуется вашим предложением, возрастают вдвое! Кроме того, самые актуальные и интересные акции мы регулярно освещаем в социальных сетях.</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"more-page__line\\"></div>\\n                <div class=\\"more-page__item\\">\\n                    <div class=\\"more-page__pic\\">\\n                        <img class=\\"more-page__pic-img more-page__pic-img_offset-1\\" alt=\\"страница и мини-страница\\" src=\\"/img/registration/3.png\\" width=\\"100%\\">\\n                    </div>\\n                    <div class=\\"more-page__text\\">\\n                        <div class=\\"more-page__text-title\\">\\n                            <div class=\\"more-page__text-title-count\\"></div>\\n                            <div class=\\"more-page__text-title-header\\">Каталог видео</div>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-text\\">В видеокаталоге уже собрана целая коллекция самых полезных роликов, найденных Мастерами на просторах Интернета. Многие специалисты не только отбирают лучшее, исходя из своих знаний и опыта, но и создают его! Вы можете заснять на видео себя, свою работу, довольных клиентов, показать, как что-то работает, или дать дельный совет из собственной практики. Видеоролики способны показать посетителю то, что порой сложно передать одними фотографиями, помогают сформировать интерес к какой-либо услуге или товару.</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"more-page__line\\"></div>\\n                <div class=\\"more-page__item\\">\\n                    <div class=\\"more-page__pic\\">\\n                        <img class=\\"more-page__pic-img more-page__pic-img_offset-1\\" alt=\\"страница и мини-страница\\" src=\\"/img/registration/4.png\\" width=\\"100%\\">\\n                    </div>\\n                    <div class=\\"more-page__text\\">\\n\\n                        <div class=\\"more-page__text-title\\">\\n                            <div class=\\"more-page__text-title-count\\"></div>\\n                            <div class=\\"more-page__text-title-header\\">Каталог советов мастеров</div>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-text\\">Рубрика «Секреты Мастеров» – это сборник статей от наших специалистов для помощи посетителям в самых различных жизненных ситуациях. Чтобы попасть в каталог «Секретов», вам нужно написать на личной странице статью. Интересный и полезный материал демонстрирует клиенту ваш богатый опыт и высокий уровень профессионализма. Когда статья будет опубликована на вашей странице, модераторы проверят, подходит ли она для каталога советов. Главными критериями являются практичность и понятность для посетителя, отсутствие прямой рекламы.</p>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\"more-page__line\\"></div>\\n                <div class=\\"more-page__item\\">\\n                    <div class=\\"more-page__pic\\">\\n                        <img class=\\"more-page__pic-img more-page__pic-img_offset-1\\" alt=\\"страница и мини-страница\\" src=\\"/img/registration/5.png\\" width=\\"100%\\">\\n                    </div>\\n                    <div class=\\"more-page__text\\">\\n\\n                        <div class=\\"more-page__text-title\\">\\n                            <div class=\\"more-page__text-title-count\\"></div>\\n                            <div class=\\"more-page__text-title-header\\">Каталог фирм</div>\\n                        </div>\\n                        <div class=\\"more-page__paragraph\\">\\n                            <p class=\\"more-page__paragraph-text\\">Помимо перечня отдельных специалистов у нас также есть каталог компаний. На сегодняшний день в нём находится более 100 организаций, где работают наши Мастера. Все компании располагаются в соответствии с привычным рубрикатором в зависимости от того, в какой сфере посетитель ищет специалиста. Данный каталог помогает организовать эффективное продвижение не только для отдельного сотрудника, но и для целой компании. Каждая организация может иметь одного своего представителя на FaceMaster или больше. Также в каталоге фирм есть свой рейтинг рекомендаций. Он складывается из суммы «лайков», которые получили все Мастера из одной компании. Таким образом, чем популярнее сотрудники среди клиентов, тем выше рейтинг организации.</p>\\n                        </div>\\n                    </div>\\n                </div>\\n            </section>\\n        </div>\\n    </div>\\n</div>\\n";\n  },"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-price', constructor: require('./catberry_components/registration/registration-price/index.js'), properties: {"name":"registration-price","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "<div class=\\"price-wr corner corner_bg\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <section class=\\"price\\">\\n                <p class=\\"page-title page-title_landing\\">Сколько стоит предложение?</p>\\n\\n                <p class=\\"sub-title sub-title_landing\\">Выберите нужную закладку:</p>\\n\\n                <!--<div id=\\"horizontalTab\\">-->\\n                    <!--<ul block=\\"price-tabs-list\\" mix=\\"block:resp-tabs-list hor_1\\">-->\\n                        <!--<li elem=\\"item\\">Условия для физических лиц</li>-->\\n                        <!--<li elem=\\"item\\">Условия для юридических лиц</li>-->\\n                    <!--</ul>-->\\n                    <div class=\\"price-tabs\\">\\n                        <div class=\\"tab-content tab-content_active\\">\\n                            <div class=\\"tab-content__name\\">\\n                                "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "\\n                                Условия для физических лиц\\n                            </div>\\n                            <div class=\\"ofers-block\\">\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Старт</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">Бесплатно</p>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus ofers-block-plus_single\\">\\n                                                <div class=\\"ofers-block-plus__item ofers-block-plus__item_single\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Специалист</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">8 руб. в день</p>\\n                                        </div>\\n\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus\\">\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Личная страница</p>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Профессионал</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">16 руб. в день</p>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus ofers-block-plus_prof\\">\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Личная страница</p>\\n                                                </div>\\n                                            </div>\\n                                            <div class=\\"ofers-block-plus-dop\\">\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "video", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "gift", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "picture", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "dialog", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <div class=\\"description-tarif__descr-text\\">\\n                                                Скидки + фото + видео + отзывы\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <table class=\\"price-table\\">\\n                                <thead class=\\"price-table__head\\">\\n                                <th class=\\"price-table__empty price-table-first-column\\">&nbsp;</th>\\n                                <th class=\\"price-table__head-text price-table-second-column\\">Новичок</th>\\n                                <th class=\\"price-table__head-text price-table-third-column\\">Специалист</th>\\n                                <th class=\\"price-table__head-text price-table-forth-column\\">Профессионал</th>\\n                                </thead>\\n                                <tbody class=\\"price-table__body\\">\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">90 дней</td>\\n                                    <td class=\\"price-table__td\\">Бесплатно</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">1 500 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">180 дней</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">1 450 руб.</td>\\n                                    <td class=\\"price-table__td\\">2 700 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">360дней</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2 600 руб.</td>\\n                                    <td class=\\"price-table__td\\">4 800 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Мини-страница</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Личная страница</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Ассортимент услуг</td>\\n                                    <td class=\\"price-table__td\\">5шт.</td>\\n                                    <td class=\\"price-table__td\\">8шт.</td>\\n                                    <td class=\\"price-table__td\\">8шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Скидки и подарки + размещение в каталоге \\"Скидки и подарки\\"</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Фотоальбом</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">3шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Видеоролик + размещение в каталоге Видео</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Статья + размещение в каталоге Советов Мастеров</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Лайки, отзывы, рекомендации</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">вкл.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">&nbsp;</td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                        <div class=\\"tab-content\\">\\n                            <div class=\\"tab-content__name\\">\\n                                "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "\\n                                Условия для юридических лиц\\n                            </div>\\n                            <div class=\\"ofers-block\\">\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif description-tarif_long\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Старт<br>Бизнес</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">16 руб. в день</p>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus ofers-block-plus_single\\">\\n                                                <div class=\\"ofers-block-plus__item ofers-block-plus__item_single\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif description-tarif_long\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Специалист Бизнес</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">25 руб. в день</p>\\n                                        </div>\\n\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus\\">\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Личная страница</p>\\n                                                </div>\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                                <div class=\\"ofers-block__item\\">\\n                                    <div class=\\"description-tarif description-tarif_long\\">\\n                                        <div class=\\"description-tarif__part-1\\">\\n                                            <div class=\\"description-tarif__medals\\">\\n                                                <div class=\\"ofers-block-medals\\">\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                    <i class=\\"ofers-block-medals__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "medal_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <p class=\\"description-tarif__title\\">Профессионал Бизнес</p>\\n\\n                                            <p class=\\"description-tarif__sub-title\\">33 руб. в день</p>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-2\\">\\n                                            <div class=\\"ofers-block-plus ofers-block-plus_prof\\">\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "mini-page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Мини<br>страница</p>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus__item\\">\\n                                                    <i class=\\"ofers-block-plus__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "page_color", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                                                    <p class=\\"ofers-block-plus__text\\">Личная страница</p>\\n                                                </div>\\n                                            </div>\\n                                            <div class=\\"ofers-block-plus-dop\\">\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "video", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "gift", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "picture", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                                <div class=\\"ofers-block-plus-dop__item\\">\\n                                                    <i class=\\"ofers-block-plus-dop__icon\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "dialog", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n                                                </div>\\n                                            </div>\\n                                            <div class=\\"description-tarif__descr-text\\">\\n                                                Скидки + фото + видео + отзывы\\n                                            </div>\\n                                        </div>\\n                                        <div class=\\"description-tarif__part-3\\">\\n                                            <div class=\\"description-tarif__btn\\">\\n                                                <a class=\\"btn btn_reg-plus js-scrollto\\" href=\\"#form2\\">Выбрать</a>\\n                                            </div>\\n                                        </div>\\n                                    </div>\\n                                </div>\\n                            </div>\\n                            <table class=\\"price-table\\">\\n                                <thead class=\\"price-table__head\\">\\n                                <th class=\\"price-table__empty price-table-first-column\\">&nbsp;</th>\\n                                <th class=\\"price-table__head-text price-table-second-column\\">Старт<br>Бизнес</th>\\n                                <th class=\\"price-table__head-text price-table-third-column\\">Специалист Бизнес</th>\\n                                <th class=\\"price-table__head-text price-table-forth-column\\">Профессионал Бизнес</th>\\n                                </thead>\\n                                <tbody class=\\"price-table__body\\">\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">90 дней</td>\\n                                    <td class=\\"price-table__td\\">1 500 руб.</td>\\n                                    <td class=\\"price-table__td\\">2 250 руб.</td>\\n                                    <td class=\\"price-table__td\\">3 000 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">180 дней</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">4 050 руб.</td>\\n                                    <td class=\\"price-table__td\\">5 400 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">360дней</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">7 200 руб.</td>\\n                                    <td class=\\"price-table__td\\">9 600 руб.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Мини-страница</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Личная страница</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Ассортимент услуг</td>\\n                                    <td class=\\"price-table__td\\">5шт.</td>\\n                                    <td class=\\"price-table__td\\">8шт.</td>\\n                                    <td class=\\"price-table__td\\">8шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Логотип компании + размещение в каталоге компаний</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_green\\">+</span></td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Скидки и подарки + размещение в каталоге \\"Скидки и подарки\\"</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Фотоальбом</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">3шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Видеоролик + размещение в каталоге Видео</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Статья + размещение в каталоге Советов Мастеров</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">2шт.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">Лайки, отзывы, рекомендации</td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\"><span class=\\"price-table__round price-table__round_grey\\">-</span></td>\\n                                    <td class=\\"price-table__td\\">вкл.</td>\\n                                </tr>\\n                                <tr class=\\"price-table__tr\\">\\n                                    <td class=\\"price-table__td\\">&nbsp;</td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                    <td class=\\"price-table__td\\"><a class=\\"price-table__btn js-scrollto\\" href=\\"#form2\\">Мне подходит!</a></td>\\n                                </tr>\\n                                </tbody>\\n                            </table>\\n                        </div>\\n                    </div>\\n                <!--</div>-->\\n            </section>\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'registration-why-we', constructor: require('./catberry_components/registration/registration-why-we/index.js'), properties: {"name":"registration-why-we","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, buffer = "<div class=\\"why-we-wr\\">\\n    <div class=\\"container\\">\\n        <div class=\\"row\\">\\n            <section class=\\"why-we\\">\\n                <p class=\\"page-title page-title_landing\\">Почему выбирают нас?</p>\\n                <div class=\\"why-we__list\\">\\n                    <div class=\\"row\\">\\n                        <div class=\\"our-plus\\">\\n                            <div class=\\"our-plus__round\\">\\n                                <p class=\\"our-plus__title\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.count : depth0)) != null ? stack1.master : stack1), depth0))\n    + "</p>\\n\\n                                <p class=\\"our-plus__text\\">";\n  stack1 = lambda(((stack1 = (depth0 != null ? depth0.count : depth0)) != null ? stack1.masterName : stack1), depth0);\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\"our-plus\\">\\n                            <div class=\\"our-plus__round\\">\\n                                <p class=\\"our-plus__title\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.count : depth0)) != null ? stack1.visits : stack1), depth0))\n    + "</p>\\n\\n                                <p class=\\"our-plus__text\\">посещений<br>в неделю</p>\\n                            </div>\\n                        </div>\\n                        <div class=\\"our-plus\\">\\n                            <div class=\\"our-plus__round\\">\\n                                <p class=\\"our-plus__title\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.count : depth0)) != null ? stack1.orders : stack1), depth0))\n    + "</p>\\n\\n                                <p class=\\"our-plus__text\\">поступивших<br>заявок</p>\\n                            </div>\\n                        </div>\\n                    </div>\\n                </div>\\n            </section>\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'rubrikator-list', constructor: require('./catberry_components/rubrikator/rubrikator-list/index.js'), properties: {"name":"rubrikator-list","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data,depths) {\n  var stack1, helper, helperMissing=helpers.helperMissing, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", buffer = "";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (data && data.index), "==", 7, {"name":"is","hash":{},"fn":this.program(2, data, depths),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (data && data.index), "==", 15, {"name":"is","hash":{},"fn":this.program(2, data, depths),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n        <div class=\\"rubrika-list\\">\\n            <div class=\\"rubrika-list__title js-rubrika-list\\" style=\\"border-right-color: "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.el : depth0)) != null ? stack1.color : stack1), depth0))\n    + "\\">\\n                <p class=\\"rubrika-list__name\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.el : depth0)) != null ? stack1.name : stack1), depth0))\n    + "</p>\\n\\n                <p class=\\"rubrika-list__count\\">"\n    + escapeExpression(((helper = (helper = helpers.count || (depth0 != null ? depth0.count : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"count","hash":{},"data":data}) : helper)))\n    + "</p>\\n            </div>\\n            <div class=\\"rubrika-list__list\\">\\n                <ul>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.podrubriks : depth0), {"name":"each","hash":{},"fn":this.program(4, data, depths),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </ul>\\n            </div>\\n        </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  return "        </div>\\n        <div class=\\"rubriks-column\\">\\n";\n  },"4":function(depth0,helpers,partials,data,depths) {\n  var stack1, helper, lambda=this.lambda, escapeExpression=this.escapeExpression, functionType="function", helperMissing=helpers.helperMissing;\n  return "                        <li class=\\"rubrika-list__list-li\\"><a class=\\"rubrika-list__list-a\\" href=\\"/"\n    + escapeExpression(lambda(((stack1 = (depths[1] != null ? depths[1].el : depths[1])) != null ? stack1.unique : stack1), depth0))\n    + "/"\n    + escapeExpression(((helper = (helper = helpers.unique || (depth0 != null ? depth0.unique : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"unique","hash":{},"data":data}) : helper)))\n    + "\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\n                            <span class=\\"rubrika-list__list-count\\">"\n    + escapeExpression(((helper = (helper = helpers.masterCount || (depth0 != null ? depth0.masterCount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"masterCount","hash":{},"data":data}) : helper)))\n    + "</span></a></li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data,depths) {\n  var stack1, buffer = "<div class=\\"rubriks-column\\">\\n    <div class=\\"rubrika-list rubrika-list_tool-collapsed js-rubrika-collapsed\\">\\n        <div class=\\"rubrika-list__title\\">\\n            <p class=\\"rubrika-list__name\\">Развернуть все рубрики</p>\\n            <i class=\\"rubrika-list__icon\\"></i>\\n        </div>\\n    </div>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.rubrikator : depth0), {"name":"each","hash":{},"fn":this.program(1, data, depths),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>\\n";\n},"useData":true,"useDepths":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-about', constructor: require('./catberry_components/master/master-block/master-block-about/index.js'), properties: {"name":"master-block-about","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, buffer = "        <p class=\\"about-md__text-caption\\">Образование:</p>\\n        <p class=\\"about-md__text\\">";\n  stack1 = ((helper = (helper = helpers.aboutEduc || (depth0 != null ? depth0.aboutEduc : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"aboutEduc","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</p>\\n";\n},"3":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, buffer = "        <p class=\\"about-md__text-caption\\">Опыт работы:</p>\\n        <p class=\\"about-md__text\\">";\n  stack1 = ((helper = (helper = helpers.aboutExp || (depth0 != null ? depth0.aboutExp : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"aboutExp","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</p>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, buffer = "        <p class=\\"about-md__text-caption\\">Дополнительная информация:</p>\\n        <p class=\\"about-md__text\\">";\n  stack1 = ((helper = (helper = helpers.aboutAddInfo || (depth0 != null ? depth0.aboutAddInfo : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"aboutAddInfo","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</p>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"about-md\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.aboutEduc : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.aboutExp : depth0), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.aboutAddInfo : depth0), {"name":"if","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div><!-- about-md -->\\n\\n\\n\\n\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-article', constructor: require('./catberry_components/master/master-block/master-block-article/index.js'), properties: {"name":"master-block-article","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "        <div class=\\"article-cont-md__item-cont\\">\\n\\n            <div class=\\"article\\">\\n                <a class=\\"article__link js-open-article\\" href=\\"#"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">\\n                    <div class=\\"article__pic\\">\\n                        <img class=\\"article__img\\" src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "\\">\\n                    </div>\\n                    <div class=\\"article__text\\">\\n                        <p>"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</p>\\n                    </div>\\n                    <p class=\\"article__author\\">"\n    + escapeExpression(((helper = (helper = helpers.author || (depth0 != null ? depth0.author : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"author","hash":{},"data":data}) : helper)))\n    + "</p>\\n                </a>\\n            </div>\\n\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"article-cont-md\\">\\n\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.articles : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-link', constructor: require('./catberry_components/master/master-block/master-block-link/index.js'), properties: {"name":"master-block-link","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n  return "        <a href=\\"https://"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.links : depth0)) != null ? stack1.vk : stack1), depth0))\n    + "\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "vk", {"name":"icon","hash":{},"data":data})))\n    + "<span>"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.links : depth0)) != null ? stack1.vk : stack1), depth0))\n    + "</span></a>\\n";\n},"3":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n  return "        <a href=\\"https://"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.links : depth0)) != null ? stack1.ok : stack1), depth0))\n    + "\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "ok", {"name":"icon","hash":{},"data":data})))\n    + "<span>"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.links : depth0)) != null ? stack1.ok : stack1), depth0))\n    + "</span></a>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n  return "        <a href=\\"http://"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.links : depth0)) != null ? stack1.site : stack1), depth0))\n    + "\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "earth", {"name":"icon","hash":{},"data":data})))\n    + "<span>"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.links : depth0)) != null ? stack1.site : stack1), depth0))\n    + "</span></a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"link-mp\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.links : depth0)) != null ? stack1.vk : stack1), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.links : depth0)) != null ? stack1.ok : stack1), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.links : depth0)) != null ? stack1.site : stack1), {"name":"if","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div><!-- link-mp -->";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-photo', constructor: require('./catberry_components/master/master-block/master-block-photo/index.js'), properties: {"name":"master-block-photo","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "        <div class=\\"photo-md__album-cover js-select-album\\" id=\\"album-"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">\\n            <a href=\\"/master-data-edit/json3.json\\">\\n                <img src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, ((stack1 = ((stack1 = (depth0 != null ? depth0.photos : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.imgID : stack1), 200, 200, {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\"><br>\\n                <span>"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</span>\\n            </a>\\n        </div>\\n";\n},"3":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "            <div class=\\"photo-md__album-cont\\" id=\\"cont-album-"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">\\n                <p class=\\"photo-md__album-title\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n                <div class=\\"photo-md__wrapper\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.photos : depth0), {"name":"each","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </div>\\n\\n            </div>\\n";\n},"4":function(depth0,helpers,partials,data) {\n  var helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";\n  return "                        <a class=\\"photo-md__img-prev\\" href=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), {"name":"imgSrc","hash":{},"data":data})))\n    + "\\">\\n                            <img src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), 200, 200, {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.description || (depth0 != null ? depth0.description : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"description","hash":{},"data":data}) : helper)))\n    + "\\"><br>\\n                        </a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"photo-md\\">\\n\\n    <!-- ERROR -->\\n    <p style=\\"color: red; font-weight: bold\\">------ ERROR! ------</p>\\n    !!!фото. API - недостаточно данных\\n    <br><br><br>\\n    <!-- ERROR -->\\n\\n    <div>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.albums : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "    </div>\\n\\n    <div>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.albums : depth0), {"name":"each","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    </div>\\n</div><!-- photo-md -->\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-review', constructor: require('./catberry_components/master/master-block/master-block-review/index.js'), properties: {"name":"master-block-review","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, buffer = "            <p class=\\"recommendations__total\\">Мастера рекомендуют <span class=\\"recommendations__total-count\\">"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.vkLikes : depth0)) != null ? stack1.countLikes : stack1), depth0))\n    + " человек</span></p>\\n\\n            <div class=\\"recommendations__list\\">\\n";\n  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 != null ? depth0.vkLikes : depth0)) != null ? stack1.data : stack1), {"name":"each","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                    <a class=\\"recommendations__item\\" target=\\"_blank\\" href=\\"http://vk.com/id"\n    + escapeExpression(((helper = (helper = helpers.uid || (depth0 != null ? depth0.uid : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"uid","hash":{},"data":data}) : helper)))\n    + "\\">\\n                        <img src=\\""\n    + escapeExpression(((helper = (helper = helpers.photo_100 || (depth0 != null ? depth0.photo_100 : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"photo_100","hash":{},"data":data}) : helper)))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.first_name || (depth0 != null ? depth0.first_name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"first_name","hash":{},"data":data}) : helper)))\n    + " "\n    + escapeExpression(((helper = (helper = helpers.last_name || (depth0 != null ? depth0.last_name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"last_name","hash":{},"data":data}) : helper)))\n    + "\\">\\n                    </a>\\n";\n},"4":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "        <p class=\\"reviews-cont-md__title\\">Мои отзывы</p>\\n\\n        <div class=\\"reviews-cont-md__comments\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.comments : depth0), {"name":"each","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "        </div>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                <div class=\\"reviews-cont-md__item-cont\\">\\n\\n                    <p class=\\"reviews-cont-md__name\\">"\n    + escapeExpression(((helper = (helper = helpers.authorName || (depth0 != null ? depth0.authorName : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"authorName","hash":{},"data":data}) : helper)))\n    + "<span class=\\"reviews-cont-md__date\\">"\n    + escapeExpression(((helpers.formatDate || (depth0 && depth0.formatDate) || helperMissing).call(depth0, (depth0 != null ? depth0.date : depth0), "%R | %d %Z %Y", {"name":"formatDate","hash":{},"data":data})))\n    + "</span></p>\\n\\n                    <p class=\\"reviews-cont-md__text\\">"\n    + escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"text","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n                </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function", buffer = "<div class=\\"reviews-cont-md\\">\\n\\n    <div class=\\"recommendations\\">\\n";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, ((stack1 = (depth0 != null ? depth0.vkLikes : depth0)) != null ? stack1.countLikes : stack1), ">", 0, {"name":"is","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n        <div class=\\"recommendations__buttons-block\\">\\n            <p class=\\"recommendations__buttons-block-title\\">Порекомендуйте мастера:</p>\\n\\n            <div></div>\\n        </div>\\n    </div>\\n\\n    <p class=\\"reviews-cont-md__title\\">Оставить отзыв</p>\\n\\n    <div class=\\"reviews-cont-md__row\\">\\n        <form class=\\"add-comment\\" method=\\"POST\\" action=\\"\\">\\n            <input class=\\"add-comment__text-input\\" type=\\"text\\" placeholder=\\"Ваше имя\\" name=\\"comment_form[name]\\">\\n            <input class=\\"add-comment__text-input\\" type=\\"text\\" placeholder=\\"Ваш номер телефона\\" name=\\"comment_form[phone]\\">\\n            <textarea class=\\"add-comment__textarea\\" placeholder=\\"Текст отзыва\\" name=\\"comment_form[comment_text]\\"></textarea>\\n            <input class=\\"add-comment__btn\\" type=\\"submit\\" value=\\"отправить\\">\\n\\n            <p class=\\"add-comment__success\\">\\n                Ваш отзыв успешно отправлен, спасибо!\\n            </p>\\n        </form>\\n\\n        <div class=\\"social-links\\">\\n            <div class=\\"social-links__wrapper\\">\\n                <p class=\\"social-links__title\\">Разместить ссылку на&nbsp;стра&shy;ницу Мастера в&nbsp;соц.&nbsp;сети:</p>\\n\\n                <div class=\\"social-links__master\\">\\n                    <div class=\\"social-links__photo-cont\\">\\n                        <img src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\">\\n                    </div>\\n\\n                    <p class=\\"social-links__name\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</p>\\n                </div>\\n                <p class=\\"social-links__note\\">Порекомендуйте этого специалиста своим друзям в&nbsp;социальной сети</p>\\n\\n                <div class=\\"social-links__buttons\\">\\n                    <p style=\\"color:red\\">Ссылки! VK, OK, FB, TW</p>\\n                </div>\\n            </div>\\n        </div>\\n\\n    </div>\\n\\n\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.comments : depth0), {"name":"if","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n</div><!--mde-reviews-->\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-sale', constructor: require('./catberry_components/master/master-block/master-block-sale/index.js'), properties: {"name":"master-block-sale","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "    <div class=\\"sale-cont-md__item-cont\\">\\n\\n        <div class=\\"sale\\">\\n            <a class=\\"sale__link js-open-sale\\" href=\\"#"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\">\\n                <p class=\\"sale__title\\">\\n";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 1, {"name":"is","hash":{},"fn":this.program(2, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 2, {"name":"is","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 3, {"name":"is","hash":{},"fn":this.program(6, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </p>\\n                <div class=\\"sale__pic\\">\\n                    <img class=\\"sale__img\\" src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, (depth0 != null ? depth0.imgID : depth0), {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"text","hash":{},"data":data}) : helper)))\n    + "\\">\\n                </div>\\n                <div class=\\"sale__text\\">\\n                    <p>"\n    + escapeExpression(((helper = (helper = helpers.text || (depth0 != null ? depth0.text : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"text","hash":{},"data":data}) : helper)))\n    + "</p>\\n                </div>\\n            </a>\\n        </div>\\n\\n    </div>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  return "                        Подарок\\n";\n  },"4":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        Скидка "\n    + escapeExpression(((helper = (helper = helpers.discount || (depth0 != null ? depth0.discount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"discount","hash":{},"data":data}) : helper)))\n    + "%\\n";\n},"6":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        -"\n    + escapeExpression(((helper = (helper = helpers.discount || (depth0 != null ? depth0.discount : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"discount","hash":{},"data":data}) : helper)))\n    + " руб.\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"sale-cont-md\\">\\n\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.sales : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-service', constructor: require('./catberry_components/master/master-block/master-block-service/index.js'), properties: {"name":"master-block-service","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "            <li>"\n    + escapeExpression(lambda(depth0, depth0))\n    + "</li>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"service-md\\">\\n    <ul class=\\"service-md__list\\">\\n";\n  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 != null ? depth0.services : depth0)) != null ? stack1.part1 : stack1), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "    </ul>\\n\\n    <ul class=\\"service-md__list\\">\\n";\n  stack1 = helpers.each.call(depth0, ((stack1 = (depth0 != null ? depth0.services : depth0)) != null ? stack1.part2 : stack1), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    </ul>\\n\\n    <br class=\\"service-md__clear\\">\\n</div><!--mde-service-->\\n\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-video', constructor: require('./catberry_components/master/master-block/master-block-video/index.js'), properties: {"name":"master-block-video","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "        <div class=\\"video-md__video-cont\\">\\n            <a class=\\"video-md__video-cover\\" href=\\"http://"\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n                <span class=\\"video-md__title-prev\\">"\n    + escapeExpression(((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper)))\n    + "</span><br>\\n                <span class=\\"video-md__img-cont\\"><img src=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.prev : depth0)) != null ? stack1.src : stack1), depth0))\n    + "\\" alt=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.prev : depth0)) != null ? stack1.alt : stack1), depth0))\n    + "\\"></span>\\n            </a>\\n        </div>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"video-md\\">\\n\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.videos : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n</div><!-- video-md -->\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-block-work', constructor: require('./catberry_components/master/master-block/master-block-work/index.js'), properties: {"name":"master-block-work","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                <td>"\n    + escapeExpression(((helper = (helper = helpers.open || (depth0 != null ? depth0.open : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"open","hash":{},"data":data}) : helper)))\n    + "<br>"\n    + escapeExpression(((helper = (helper = helpers.close || (depth0 != null ? depth0.close : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"close","hash":{},"data":data}) : helper)))\n    + "</td>\\n";\n},"3":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, buffer = "";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 1, {"name":"is","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"4":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "                        <li>"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</li>\\n";\n},"6":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, buffer = "";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, (depth0 != null ? depth0.type : depth0), "==", 2, {"name":"is","hash":{},"fn":this.program(4, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer;\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, buffer = "<div class=\\"time-and-work-mp\\">\\n\\n    <table class=\\"time-and-work-mp__timetable\\">\\n        <thead>\\n        <tr>\\n            <td class=\\"time-and-work-mp__day\\">Пн</td>\\n            <td class=\\"time-and-work-mp__day\\">Вт</td>\\n            <td class=\\"time-and-work-mp__day\\">Ср</td>\\n            <td class=\\"time-and-work-mp__day time-and-work-mp__day_today\\">Чт</td>\\n            <td class=\\"time-and-work-mp__day\\">Пт</td>\\n            <td class=\\"time-and-work-mp__day\\">Сб</td>\\n            <td class=\\"time-and-work-mp__day\\">Вс</td>\\n        </tr>\\n        </thead>\\n        <tbody>\\n        <tr>\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.schedule : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "        </tr>\\n        </tbody>\\n    </table>\\n\\n    <p class=\\"time-and-work-mp__list-caption\\">Выезд на дом</p>\\n    <ul class=\\"time-and-work-mp__list\\">\\n        <li>Бесплатно по городу</li>\\n        <li>Выезд за город платно</li>\\n    </ul>\\n\\n\\n    <div class=\\"time-and-work-mp__list-big-cont\\">\\n        <p class=\\"time-and-work-mp__list-caption\\">Районы обслуживания</p>\\n\\n        <div class=\\"time-and-work-mp__list-cont\\">\\n            <p class=\\"time-and-work-mp__list-caption time-and-work-mp__list-caption_mini\\">Город</p>\\n            <ul class=\\"time-and-work-mp__list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.district : depth0), {"name":"each","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "            </ul>\\n        </div><!--list-cont-->\\n\\n        <div class=\\"time-and-work-mp__list-cont\\">\\n            <p class=\\"time-and-work-mp__list-caption time-and-work-mp__list-caption_mini\\">Пригород</p>\\n            <ul class=\\"time-and-work-mp__list\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.district : depth0), {"name":"each","hash":{},"fn":this.program(6, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "            </ul>\\n        </div><!--list-cont-->\\n\\n        <br class=\\"time-and-work-mp__clear\\">\\n    </div><!--list-big-cont-->\\n\\n\\n    <div class=\\"time-and-work-mp__list-big-cont\\">\\n        <p class=\\"time-and-work-mp__list-caption\\">Оплата</p>\\n\\n\\n        <div class=\\"time-and-work-mp__list-cont\\">\\n            <p class=\\"time-and-work-mp__list-caption time-and-work-mp__list-caption_mini\\">Форма сотрудни&shy;чества</p>\\n            <ul class=\\"time-and-work-mp__list\\">\\n                <li>Предоплата</li>\\n                <li>По факту выполненных работ</li>\\n                <li>Рассрочка платежа</li>\\n            </ul>\\n        </div><!--list-cont-->\\n\\n        <div class=\\"time-and-work-mp__list-cont\\">\\n            <p class=\\"time-and-work-mp__list-caption time-and-work-mp__list-caption_mini\\">Способы оплаты</p>\\n            <ul class=\\"time-and-work-mp__list\\">\\n                <li>Наличный</li>\\n                <li>Безналичный\\n                    <ul>\\n                        <li>Оплата через электронные платежные системы</li>\\n                        <li>Оплата по кредитной/дебетовой карте</li>\\n                        <li>Оплата через терминалы</li>\\n                        <li>Банковский перевод</li>\\n                        <li>Предоставление рассрочки</li>\\n                    </ul>\\n                </li>\\n            </ul>\\n        </div><!--list-cont-->\\n        <br class=\\"time-and-work-mp__clear\\">\\n    </div><!--list-cont-->\\n    <br class=\\"time-and-work-mp__clear\\">\\n\\n    <!-- ERROR -->\\n    <p style=\\"color: red; font-weight: bold\\">------ ERROR! (условия - выезд на дом, оплата) ------</p>\\n    !!переделает илья\\n    Условия оплаты: "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.workCondition : depth0)) != null ? stack1.paymentForm : stack1), depth0))\n    + "\\n    Условия оплаты: "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.workCondition : depth0)) != null ? stack1.coopForm : stack1), depth0))\n    + "\\n    Выезд на дом: "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.workCondition : depth0)) != null ? stack1.comming : stack1), depth0))\n    + "\\n    <!-- ERROR -->\\n</div>";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-minicard', constructor: require('./catberry_components/master/master-minicard/master-minicard/index.js'), properties: {"name":"master-minicard","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  return "master-minicard_free";\n  },"3":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "            <i class=\\"master-minicard__like\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "like", {"name":"icon","hash":{},"data":data})))\n    + " "\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.vkLikes : depth0)) != null ? stack1.countLikes : stack1), depth0))\n    + "</i>\\n";\n},"5":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n  return "            <a class=\\"master-minicard__to-page\\" href=\\"/"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.number : stack1), depth0))\n    + "\\">На страницу мастера<i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "strelka", {"name":"icon","hash":{},"data":data})))\n    + "</i></a>\\n";\n},"7":function(depth0,helpers,partials,data) {\n  var stack1, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda;\n  return "        <p class=\\"master-minicard__company\\">\\n            <span><img class=\\"master-minicard__logo\\" src=\\""\n    + escapeExpression(((helpers.imgSrc || (depth0 && depth0.imgSrc) || helperMissing).call(depth0, ((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.imgID : stack1), (depth0 != null ? depth0.null : depth0), 70, {"name":"imgSrc","hash":{},"data":data})))\n    + "\\" alt=\\"\\"></span>\\n            <span>"\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.company : depth0)) != null ? stack1.name : stack1), depth0))\n    + "</span>\\n        </p>\\n";\n},"9":function(depth0,helpers,partials,data) {\n  return "master-minicard__services_half";\n  },"11":function(depth0,helpers,partials,data) {\n  var lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "            <li>"\n    + escapeExpression(lambda(depth0, depth0))\n    + "</li>\\n";\n},"13":function(depth0,helpers,partials,data) {\n  var stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda, functionType="function", buffer = "        <ul class=\\"master-content-widget\\">\\n            <li class=\\"";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.sales : stack1), {"name":"if","hash":{},"fn":this.program(14, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += " master-content-widget__gift\\">\\n                <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "gift", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                <div>\\n                    <p class=\\"master-content-widget__info\\"><span>\\n";\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, ((stack1 = ((stack1 = (depth0 != null ? depth0.sales : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.type : stack1), "==", 1, {"name":"is","hash":{},"fn":this.program(17, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, ((stack1 = ((stack1 = (depth0 != null ? depth0.sales : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.type : stack1), "==", 2, {"name":"is","hash":{},"fn":this.program(19, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  stack1 = ((helpers.is || (depth0 && depth0.is) || helperMissing).call(depth0, ((stack1 = ((stack1 = (depth0 != null ? depth0.sales : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.type : stack1), "==", 3, {"name":"is","hash":{},"fn":this.program(21, data),"inverse":this.noop,"data":data}));\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                    </span></p>\\n\\n                    <p class=\\"master-content-widget__text\\">"\n    + escapeExpression(lambda(((stack1 = ((stack1 = (depth0 != null ? depth0.sales : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.title : stack1), depth0))\n    + "</p>\\n                </div>\\n            </li>\\n            <li class=\\"";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.albums : stack1), {"name":"if","hash":{},"fn":this.program(23, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += " master-content-widget__photo\\">\\n                <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "picture", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                <div>\\n                    <p class=\\"master-content-widget__info\\">\\n                        <span>\\n                            У Мастера:<br>\\n                            <strong>"\n    + escapeExpression(((helpers.getNumEnding || (depth0 && depth0.getNumEnding) || helperMissing).call(depth0, (depth0 != null ? depth0.albumsCount : depth0), "фотоальбом, фотоальбома, фотоальбомов", {"name":"getNumEnding","hash":{},"data":data})))\n    + "</strong>\\n                        </span>\\n                    </p>\\n\\n                    <p class=\\"master-content-widget__text\\">"\n    + escapeExpression(((helper = (helper = helpers.albumsTitle || (depth0 != null ? depth0.albumsTitle : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"albumsTitle","hash":{},"data":data}) : helper)))\n    + "</p>\\n                </div>\\n            </li>\\n            <li class=\\"";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.videos : stack1), {"name":"if","hash":{},"fn":this.program(25, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += " master-content-widget__video\\">\\n                <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "video", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                <div>\\n                    <p class=\\"master-content-widget__info\\"><span>"\n    + escapeExpression(((helper = (helper = helpers.imgID || (depth0 != null ? depth0.imgID : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"imgID","hash":{},"data":data}) : helper)))\n    + "</span></p>\\n\\n                    <p class=\\"master-content-widget__text\\">"\n    + escapeExpression(lambda(((stack1 = ((stack1 = (depth0 != null ? depth0.videos : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.title : stack1), depth0))\n    + "</p>\\n                </div>\\n            </li>\\n            <li class=\\"";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.comments : stack1), {"name":"if","hash":{},"fn":this.program(27, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + " master-content-widget__comment\\">\\n                <i>"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "dialog", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n\\n                <div>\\n                    <p class=\\"master-content-widget__info\\">\\n                        <span>\\n                            У Мастера:<br>\\n                            <strong>\\n                                "\n    + escapeExpression(((helpers.getNumEnding || (depth0 && depth0.getNumEnding) || helperMissing).call(depth0, ((stack1 = (depth0 != null ? depth0.vkLikes : depth0)) != null ? stack1.countLikes : stack1), "рекомендация, рекомендации, рекомендаций", {"name":"getNumEnding","hash":{},"data":data})))\n    + "<br>\\n                                "\n    + escapeExpression(((helpers.getNumEnding || (depth0 && depth0.getNumEnding) || helperMissing).call(depth0, (depth0 != null ? depth0.commentsCount : depth0), "отзыв, отзыва, отзывов", {"name":"getNumEnding","hash":{},"data":data})))\n    + "\\n                            </strong>\\n                        </span>\\n                    </p>\\n\\n                    <p class=\\"master-content-widget__text\\">«"\n    + escapeExpression(lambda(((stack1 = ((stack1 = (depth0 != null ? depth0.comments : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.text : stack1), depth0))\n    + "»</p>\\n                </div>\\n            </li>\\n        </ul>\\n";\n},"14":function(depth0,helpers,partials,data) {\n  var stack1;\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = ((stack1 = (depth0 != null ? depth0.sales : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.title : stack1), {"name":"if","hash":{},"fn":this.program(15, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { return stack1; }\n  else { return \'\'; }\n  },"15":function(depth0,helpers,partials,data) {\n  return "act";\n  },"17":function(depth0,helpers,partials,data) {\n  return "                            Подарок\\n";\n  },"19":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                            Скидка "\n    + escapeExpression(lambda(((stack1 = ((stack1 = (depth0 != null ? depth0.sales : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.discount : stack1), depth0))\n    + "%\\n";\n},"21":function(depth0,helpers,partials,data) {\n  var stack1, lambda=this.lambda, escapeExpression=this.escapeExpression;\n  return "                            -"\n    + escapeExpression(lambda(((stack1 = ((stack1 = (depth0 != null ? depth0.sales : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.discount : stack1), depth0))\n    + " руб.\\n";\n},"23":function(depth0,helpers,partials,data) {\n  var stack1;\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = ((stack1 = (depth0 != null ? depth0.albums : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.name : stack1), {"name":"if","hash":{},"fn":this.program(15, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { return stack1; }\n  else { return \'\'; }\n  },"25":function(depth0,helpers,partials,data) {\n  var stack1;\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = ((stack1 = (depth0 != null ? depth0.videos : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.title : stack1), {"name":"if","hash":{},"fn":this.program(15, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { return stack1; }\n  else { return \'\'; }\n  },"27":function(depth0,helpers,partials,data) {\n  var stack1;\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = ((stack1 = (depth0 != null ? depth0.comments : depth0)) != null ? stack1[\'0\'] : stack1)) != null ? stack1.text : stack1), {"name":"if","hash":{},"fn":this.program(15, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { return stack1; }\n  else { return \'\'; }\n  },"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, lambda=this.lambda, buffer = "<div class=\\"";\n  stack1 = helpers.unless.call(depth0, ((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.id : stack1), {"name":"unless","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += " master-minicard\\">\\n\\n    <div class=\\"master-minicard__photo-cont\\">\\n        <img class=\\"master-minicard__photo\\" src=\\"http://api-fm.present-tlt.ru/files?key="\n    + escapeExpression(((helper = (helper = helpers.imgID || (depth0 != null ? depth0.imgID : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"imgID","hash":{},"data":data}) : helper)))\n    + "\\" alt=\\""\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.page : depth0), {"name":"if","hash":{},"fn":this.program(3, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "    </div>\\n\\n    <div class=\\"master-minicard__contact-wrap\\">\\n        <cat-master-phone-btn id=\\"master-phone-btn-"\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\" phone=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.contacts : depth0)) != null ? stack1.phone : stack1), depth0))\n    + "\\" page=\\""\n    + escapeExpression(lambda(((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.number : stack1), depth0))\n    + "\\" owner=\\""\n    + escapeExpression(((helper = (helper = helpers.id || (depth0 != null ? depth0.id : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"id","hash":{},"data":data}) : helper)))\n    + "\\"></cat-master-phone-btn>\\n\\n";\n  stack1 = helpers[\'if\'].call(depth0, ((stack1 = (depth0 != null ? depth0.page : depth0)) != null ? stack1.number : stack1), {"name":"if","hash":{},"fn":this.program(5, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "        <a class=\\"master-minicard__show-services js-services-toggle\\" href=\\"#\\">Показать услуги</a>\\n    </div>\\n\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.company : depth0), {"name":"if","hash":{},"fn":this.program(7, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "\\n    <p class=\\"master-minicard__name\\">"\n    + escapeExpression(((helper = (helper = helpers.name || (depth0 != null ? depth0.name : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"name","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n    <p class=\\"master-minicard__spec\\">"\n    + escapeExpression(((helper = (helper = helpers.spec || (depth0 != null ? depth0.spec : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"spec","hash":{},"data":data}) : helper)))\n    + "</p>\\n\\n    <ul class=\\"";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.isWidget : depth0), {"name":"if","hash":{},"fn":this.program(9, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += " master-minicard__services js-minicard-services-cut\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.services : depth0), {"name":"each","hash":{},"fn":this.program(11, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "    </ul>\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.page : depth0), {"name":"if","hash":{},"fn":this.program(13, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</div>\\n\\n\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'master-phone-btn', constructor: require('./catberry_components/master/master-minicard/master-phone-btn/index.js'), properties: {"name":"master-phone-btn","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n  return "            <a class=\\"phone-btn__url\\" href=\\"/"\n    + escapeExpression(((helper = (helper = helpers.page || (depth0 != null ? depth0.page : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"page","hash":{},"data":data}) : helper)))\n    + "\\">еще контакты</a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function", buffer = "<div class=\\"phone-btn\\">\\n    <p class=\\"phone-btn__tip js-master-phone-tip\\">\\n        Пожалуйста скажите мастеру что нашли его на нашем сайте\\n        <i class=\\"js-close-tip\\">"\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "close", {"name":"icon","hash":{},"data":data})))\n    + "</i>\\n    </p>\\n    <button class=\\"phone-btn__button js-show-phone\\" data-id=\\""\n    + escapeExpression(((helper = (helper = helpers.owner || (depth0 != null ? depth0.owner : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"owner","hash":{},"data":data}) : helper)))\n    + "\\">\\n        Показать телефон\\n    </button>\\n    <div class=\\"phone-btn__phone-details js-show-phone-details\\">\\n        <p class=\\"phone-btn__phone\\">"\n    + escapeExpression(((helper = (helper = helpers.phone || (depth0 != null ? depth0.phone : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"phone","hash":{},"data":data}) : helper)))\n    + "</p>\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.page : depth0), {"name":"if","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'dop-function', constructor: require('./catberry_components/page/page-main/dop-function/index.js'), properties: {"name":"dop-function","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"1":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                    <li class=\\"become-master__item\\">\\n";\n  stack1 = helpers[\'if\'].call(depth0, (depth0 != null ? depth0.icon : depth0), {"name":"if","hash":{},"fn":this.program(2, data),"inverse":this.program(4, data),"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                    </li>\\n";\n},"2":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                        <a class=\\"become-master__item-link become-master__item-link_hover\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">\\n                            <span class=\\"become-master__icon\\"></span>\\n                            ";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "\\n                        </a>\\n";\n},"4":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                        <a class=\\"become-master__item-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</a>\\n";\n},"6":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                    <li class=\\"about-company__item\\">\\n                        <a class=\\"about-company__item-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</a>\\n                    </li>\\n";\n},"8":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "                    <li class=\\"bayda__item-cube\\">\\n";\n  stack1 = helpers.unless.call(depth0, (depth0 != null ? depth0.empty : depth0), {"name":"unless","hash":{},"fn":this.program(9, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                    </li>\\n";\n},"9":function(depth0,helpers,partials,data) {\n  var stack1, helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, buffer = "                        <a class=\\"bayda__item-cube-link\\" href=\\""\n    + escapeExpression(((helper = (helper = helpers.url || (depth0 != null ? depth0.url : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"url","hash":{},"data":data}) : helper)))\n    + "\\">";\n  stack1 = ((helper = (helper = helpers.title || (depth0 != null ? depth0.title : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"title","hash":{},"data":data}) : helper));\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "</a>\\n";\n},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var stack1, buffer = "<div class=\\"dop-function\\">\\n    <div class=\\"dop-function__inner\\">\\n        <div class=\\"become-master\\">\\n            <div class=\\"become-master__inner\\">\\n                <div class=\\"become-master__title dop-function-block-js\\">Мастерам</div>\\n                <ul class=\\"become-master__menu\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.menuMaster : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </ul>\\n            </div>\\n        </div>\\n        <div class=\\"about-company\\">\\n            <div class=\\"about-company__inner\\">\\n                <div class=\\"about-company__title dop-function-block-js\\">О компании</div>\\n                <ul class=\\"about-company__menu\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.menuAbout : depth0), {"name":"each","hash":{},"fn":this.program(6, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  buffer += "                </ul>\\n            </div>\\n        </div>\\n        <div class=\\"bayda\\">\\n            <div class=\\"bayda__inner\\">\\n                <div class=\\"bayda__title dop-function-block-js\\">Развлечения</div>\\n                <ul class=\\"bayda__menu-cube\\">\\n";\n  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.menuBayda : depth0), {"name":"each","hash":{},"fn":this.program(8, data),"inverse":this.noop,"data":data});\n  if (stack1 != null) { buffer += stack1; }\n  return buffer + "                </ul>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'},
{name: 'main-function', constructor: require('./catberry_components/page/page-main/main-function/index.js'), properties: {"name":"main-function","template":"./template.hbs","errorTemplate":"./error.hbs","logic":"index.js"}, templateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  var helper, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, functionType="function";\n  return "<div class=\\"main-function\\">\\n    <div class=\\"main-function__inner\\">\\n        <cat-search id=\\"search\\"></cat-search>\\n        <div class=\\"or\\">или</div>\\n        <div class=\\"find-master js-find-master\\">\\n            <a class=\\"find-master__inner\\" href=\\"/catalog\\">\\n                <div class=\\"find-master__inner-rel\\">\\n                    <div class=\\"find-master__icon\\">\\n                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "man-in-sun", "icon_white", {"name":"icon","hash":{},"data":data})))\n    + "\\n                    </div>\\n\\n                    <p class=\\"find-master__title\\">Выбери Мастера</p>\\n                    <span class=\\"find-master__btn\\">У нас "\n    + escapeExpression(((helper = (helper = helpers.countMaster || (depth0 != null ? depth0.countMaster : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"countMaster","hash":{},"data":data}) : helper)))\n    + "</span>\\n                </div>\\n            </a>\\n        </div>\\n        <div class=\\"call-back\\">\\n            <a class=\\"call-back__inner\\" href=\\"/request\\">\\n                <div class=\\"call-back__inner-rel\\">\\n                    <div class=\\"call-back__icon\\">\\n                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "star-in-sun", {"name":"icon","hash":{},"data":data})))\n    + "\\n                        "\n    + escapeExpression(((helpers.icon || (depth0 && depth0.icon) || helperMissing).call(depth0, "star-line", {"name":"icon","hash":{},"data":data})))\n    + "\\n                    </div>\\n\\n                    <p class=\\"call-back__title\\">Закажи услугу</p>\\n\\n                    <p class=\\"call-back__text\\">Мы бесплатно отправим вашу заявку всем подходящим Мастерам</p>\\n                    <span class=\\"call-back__btn\\">Создать заявку</span>\\n                </div>\\n            </a>\\n        </div>\\n        <div class=\\"catalogs\\">\\n            <div class=\\"catalogs__inner\\">\\n                <div class=\\"catalogs__services\\">\\n                    <a class=\\"catalogs__services-link\\" href=\\"/catalog\\">Весь каталог услуг</a>\\n                </div>\\n                <div class=\\"catalogs__dop\\">\\n                    <cat-catalog-list id=\\"catalog-list\\" data-mod=\\"page_main\\"></cat-catalog-list>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n";\n},"useData":true}', errorTemplateSource: '{"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {\n  return "\\n";\n  },"useData":true}'}
];

var util = require('util'),
	routeDefinitions = require('./routes.js') || [],
	Catberry = require('./node_modules/catberry/browser/Catberry.js'),
	Logger = require('./node_modules/catberry/browser/Logger.js'),
	BootstrapperBase =
		require('./node_modules/catberry/lib/base/BootstrapperBase.js'),
	StoreDispatcher = require('./node_modules/catberry/lib/StoreDispatcher'),
	ModuleApiProvider =
		require('./node_modules/catberry/browser/providers/ModuleApiProvider'),
	CookieWrapper = require('./node_modules/catberry/browser/CookieWrapper');

var DEBUG_DOCUMENT_UPDATED = 'Document updated (%d store(s) changed)',
	DEBUG_COMPONENT_BOUND = 'Component "%s" is bound',
	DEBUG_COMPONENT_UNBOUND = 'Component "%s" is unbound';

util.inherits(Bootstrapper, BootstrapperBase);

/**
 * Creates new instance of the browser Catberry's bootstrapper.
 * @constructor
 * @extends BootstrapperBase
 */
function Bootstrapper() {
	BootstrapperBase.call(this, Catberry);
}

/**
 * Configures Catberry's service locator.
 * @param {Object} configObject Application config object.
 * @param {ServiceLocator} locator Service locator to configure.
 */
Bootstrapper.prototype.configure = function (configObject, locator) {
	BootstrapperBase.prototype.configure.call(this, configObject, locator);

	// if browser still does not have promises then add it.
	if (!('Promise' in window)) {
		window.Promise = locator.resolve('promise');
	}

	locator.register('storeDispatcher', StoreDispatcher, configObject, true);
	locator.register(
		'moduleApiProvider', ModuleApiProvider, configObject, true
	);
	locator.register('cookieWrapper', CookieWrapper, configObject, true);

	locator.registerInstance('window', window);

	var loggerConfig = configObject.logger || {},
		logger = new Logger(loggerConfig.levels);
	locator.registerInstance('logger', logger);
	window.onerror = function errorHandler(msg, uri, line) {
		logger.fatal(uri + ':' + line + ' ' + msg);
		return true;
	};
	var eventBus = locator.resolve('eventBus');
	this._wrapEventsWithLogger(configObject, eventBus, logger);

	routeDefinitions.forEach(function (routeDefinition) {
		locator.registerInstance('routeDefinition', routeDefinition);
	});

	stores.forEach(function (store) {
		locator.registerInstance('store', store);
	});

	components.forEach(function (component) {
		locator.registerInstance('component', component);
	});
};

/**
 * Wraps event bus with log messages.
 * @param {Object} config Application config.
 * @param {EventEmitter} eventBus Event emitter that implements event bus.
 * @param {Logger} logger Logger to write messages.
 * @protected
 */
Bootstrapper.prototype._wrapEventsWithLogger =
	function (config, eventBus, logger) {
		BootstrapperBase.prototype._wrapEventsWithLogger
			.call(this, config, eventBus, logger);

		var isRelease = Boolean(config.isRelease);
		if (isRelease) {
			return;
		}
		eventBus
			.on('documentUpdated', function (args) {
				logger.debug(util.format(DEBUG_DOCUMENT_UPDATED, args.length));
			})
			.on('componentBound', function (args) {
				logger.debug(util.format(
					DEBUG_COMPONENT_BOUND,
					args.element.tagName + (args.id ? '#' + args.id : '')
				));
			})
			.on('componentUnbound', function (args) {
				logger.debug(util.format(
					DEBUG_COMPONENT_UNBOUND,
					args.element.tagName + (args.id ? '#' + args.id : '')
				));
			});
	};

module.exports = new Bootstrapper();
},{"./catberry_components/_common/common-h1/index.js":3,"./catberry_components/_common/common-paginator/index.js":4,"./catberry_components/breadcrumps/index.js":5,"./catberry_components/catalog-list/index.js":6,"./catberry_components/document/index.js":7,"./catberry_components/head/index.js":8,"./catberry_components/loader/index.js":9,"./catberry_components/master/master-block/master-block-about/index.js":10,"./catberry_components/master/master-block/master-block-article/index.js":11,"./catberry_components/master/master-block/master-block-link/index.js":12,"./catberry_components/master/master-block/master-block-photo/index.js":13,"./catberry_components/master/master-block/master-block-review/index.js":14,"./catberry_components/master/master-block/master-block-sale/index.js":15,"./catberry_components/master/master-block/master-block-service/index.js":16,"./catberry_components/master/master-block/master-block-video/index.js":17,"./catberry_components/master/master-block/master-block-work/index.js":18,"./catberry_components/master/master-filter/index.js":19,"./catberry_components/master/master-list/index.js":20,"./catberry_components/master/master-minicard/master-minicard/index.js":21,"./catberry_components/master/master-minicard/master-phone-btn/index.js":22,"./catberry_components/master/master-page/index.js":23,"./catberry_components/master/master-recommended/index.js":24,"./catberry_components/master/master-rubrika/index.js":25,"./catberry_components/other/other-news-item/index.js":26,"./catberry_components/other/other-news/index.js":27,"./catberry_components/other/other-recommendation/index.js":28,"./catberry_components/other/other-vacancy-item/index.js":29,"./catberry_components/other/other-vacancy/index.js":30,"./catberry_components/page/page-catalog/index.js":31,"./catberry_components/page/page-contact/index.js":32,"./catberry_components/page/page-feedback/index.js":33,"./catberry_components/page/page-login/index.js":34,"./catberry_components/page/page-main/dop-function/index.js":35,"./catberry_components/page/page-main/index.js":36,"./catberry_components/page/page-main/main-function/index.js":37,"./catberry_components/page/page-master-page/index.js":38,"./catberry_components/page/page-master-rubrika/index.js":39,"./catberry_components/page/page-news-item/index.js":40,"./catberry_components/page/page-news/index.js":41,"./catberry_components/page/page-oferta/index.js":42,"./catberry_components/page/page-recommendation/index.js":43,"./catberry_components/page/page-registration/index.js":44,"./catberry_components/page/page-request/index.js":45,"./catberry_components/page/page-sale/index.js":46,"./catberry_components/page/page-sovety/index.js":47,"./catberry_components/page/page-vacancy-item/index.js":48,"./catberry_components/page/page-vacancy/index.js":49,"./catberry_components/page/page-video/index.js":50,"./catberry_components/pages/pages-content/index.js":51,"./catberry_components/pages/pages-footer/index.js":52,"./catberry_components/pages/pages-header/index.js":53,"./catberry_components/pages/pages-navigation/index.js":54,"./catberry_components/registration/registration-about/index.js":55,"./catberry_components/registration/registration-faq/index.js":56,"./catberry_components/registration/registration-form/index.js":57,"./catberry_components/registration/registration-header/index.js":58,"./catberry_components/registration/registration-more-page/index.js":59,"./catberry_components/registration/registration-price/index.js":60,"./catberry_components/registration/registration-why-we/index.js":61,"./catberry_components/rubrikator/rubrikator-list/index.js":62,"./catberry_components/sale/index.js":63,"./catberry_components/search/index.js":64,"./catberry_components/service-request/index.js":65,"./catberry_components/social/index.js":66,"./catberry_stores/Breadcrumps.js":67,"./catberry_stores/Head.js":68,"./catberry_stores/Pages.js":69,"./catberry_stores/Paginator.js":70,"./catberry_stores/Tag.js":71,"./catberry_stores/master/MasterItem.js":72,"./catberry_stores/master/MasterList.js":73,"./catberry_stores/master/MasterSovety.js":74,"./catberry_stores/master/MasterVideo.js":75,"./catberry_stores/master/Recommended.js":76,"./catberry_stores/other/News.js":77,"./catberry_stores/other/NewsItem.js":78,"./catberry_stores/other/Recommendation.js":79,"./catberry_stores/other/Vacancy.js":80,"./catberry_stores/other/VacancyItem.js":81,"./catberry_stores/rubrika/Rubrika.js":82,"./catberry_stores/rubrika/Rubrikator.js":83,"./catberry_stores/rubrika/RubrikatorCompany.js":84,"./catberry_stores/rubrika/RubrikatorParent.js":85,"./catberry_stores/rubrika/RubrikatorSale.js":86,"./catberry_stores/sale/SaleByRubrika.js":87,"./node_modules/catberry/browser/Catberry.js":92,"./node_modules/catberry/browser/CookieWrapper":93,"./node_modules/catberry/browser/Logger.js":95,"./node_modules/catberry/browser/providers/ModuleApiProvider":100,"./node_modules/catberry/lib/StoreDispatcher":104,"./node_modules/catberry/lib/base/BootstrapperBase.js":105,"./routes.js":149,"util":121}],2:[function(require,module,exports){
'use strict';

var catberry = require('catberry'),
// this config will be replaced by `./config/browser.json` when building
// because of `browser` field in `package.json`
    config = require('./config/environment.json'),
    templateEngine = require('./special_modules/catberry-handlebars'),
    helpers = require('./special_modules/catberry-handlebars-helpers'),
    cat = catberry.create(config);

// register template provider to Catberry Service Locator
templateEngine.register(cat.locator);
helpers.register(cat.locator)

cat.startWhenReady();


},{"./config/environment.json":88,"./special_modules/catberry-handlebars":156,"./special_modules/catberry-handlebars-helpers":153,"catberry":101}],3:[function(require,module,exports){
'use strict';

module.exports = CommonH1;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "common-h1" component.
 * @constructor
 */
function CommonH1() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
CommonH1.prototype.render = function () {
    return this.$context.attributes;
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
CommonH1.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
CommonH1.prototype.unbind = function () {

};

},{}],4:[function(require,module,exports){
'use strict';

module.exports = CommonPaginator;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "common-paginator" component.
 * @constructor
 */
function CommonPaginator() {
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
CommonPaginator.prototype.render = function () {
    var self = this;
    var model = this.$context.attributes.model;
    if (!model)
        return {
            "is-paginator": false
        };

    return this.$context.sendAction("setModel", model)
        .then(function () {
            return self.$context.getStoreData();
        });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
CommonPaginator.prototype.bind = function () {
    return {
        click: {
            '.paginator__number': this._handleClick
        }
    }
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
CommonPaginator.prototype.unbind = function () {

};
CommonPaginator.prototype._handleClick = function(){
    window.scrollTo(0,0);
};
},{}],5:[function(require,module,exports){
'use strict';

module.exports = Breadcrumps;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "breadcrumps" component.
 * @constructor
 */
function Breadcrumps() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Breadcrumps.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Breadcrumps.prototype.bind = function () {
    return {
        click: {
            '.js-parent-rub': this._clickHandler,
        }
    }
};


Breadcrumps.prototype._clickHandler = function (obj) {
    //var el = obj.target;
    var pos = $('.js-parent-rub').position().left + $('.js-parent-rub').width();
    $('.js-breadcrumbs-list').css('left', pos).toggle();
    return false;
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Breadcrumps.prototype.unbind = function () {

};

},{}],6:[function(require,module,exports){
'use strict';

module.exports = DopCatalogs;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "dop-catalogs" component.
 * @constructor
 */
function DopCatalogs() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
DopCatalogs.prototype.render = function () {

    return {
        'data-mod': this.$context.attributes['data-mod'],
        catalogs: [
            {
                url: "/sale",
                ico: "gift",
                title: "Поиск по скидке"
            },
            {
                url: "/video",
                ico: "video",
                title: "Поиск по видео"
            },
            {
                url: "/sovety",
                ico: "qwestion",
                title: "Секреты Мастеров"
            },
            {
                url: "/company",
                ico: "case",
                title: "Каталог фирм"
            }
        ]
    };
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
DopCatalogs.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
DopCatalogs.prototype.unbind = function () {

};

},{}],7:[function(require,module,exports){
'use strict';

module.exports = Document;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "document" component.
 * @constructor
 */
function Document() { }

},{}],8:[function(require,module,exports){
'use strict';

module.exports = Head;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "head" component.
 * @constructor
 */
function Head() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Head.prototype.render = function () {
	return this.$context.getStoreData();
};


},{}],9:[function(require,module,exports){
'use strict';

module.exports = Loader;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "loader" component.
 * @constructor
 */
function Loader() { }


},{}],10:[function(require,module,exports){
'use strict';

module.exports = MasterBlockAbout;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-about" component.
 * @constructor
 */
function MasterBlockAbout() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockAbout.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                data.aboutEduc = data.aboutEduc.replace(/\n/g, "<br>");
                data.aboutExp = data.aboutExp.replace(/\n/g, "<br>");
                data.aboutAddInfo = data.aboutAddInfo.replace(/\n/g, "<br>");
                return {
                    aboutEduc: data.aboutEduc,
                    aboutExp: data.aboutExp,
                    aboutAddInfo: data.aboutAddInfo
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockAbout.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockAbout.prototype.unbind = function () {

};

},{}],11:[function(require,module,exports){
'use strict';

module.exports = MasterBlockArticle;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-article" component.
 * @constructor
 */
function MasterBlockArticle() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockArticle.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                data.articles.forEach(function (item) {
                    item.author = data.name; //добавляем автора для каждой статьи
                });
                //console.log(data.articles);
                return {
                    articles: data.articles
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockArticle.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockArticle.prototype.unbind = function () {

};

},{}],12:[function(require,module,exports){
'use strict';

module.exports = MasterBlockLink;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-link" component.
 * @constructor
 */
function MasterBlockLink() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockLink.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                //console.log(data.contacts);
                data.contacts.links = JSON.parse(data.contacts.links);
                return {
                    links: data.contacts.links
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockLink.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockLink.prototype.unbind = function () {

};

},{}],13:[function(require,module,exports){
'use strict';

module.exports = MasterBlockPhoto;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-photo" component.
 * @constructor
 */
function MasterBlockPhoto() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockPhoto.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                //console.log(data.albums);
                return {
                    albums: [
                        {
                            "id": 1991,
                            "ownerType": 1,
                            "ownerID": 1019,
                            "name": "Альбом №1",
                            "status": 1,
                            "photos": [
                                {
                                    "id": 63853,
                                    "albumID": 1991,
                                    "imgID": "5693458623041",
                                    "description": null
                                },
                                {
                                    "id": 63854,
                                    "albumID": 1991,
                                    "imgID": "569345868bbb3",
                                    "description": null
                                },
                                {
                                    "id": 63855,
                                    "albumID": 1991,
                                    "imgID": "5693458701367",
                                    "description": null
                                },
                                {
                                    "id": 63856,
                                    "albumID": 1991,
                                    "imgID": "5693458771840",
                                    "description": null
                                },
                                {
                                    "id": 63857,
                                    "albumID": 1991,
                                    "imgID": "56934587d8e05",
                                    "description": null
                                },
                                {
                                    "id": 63858,
                                    "albumID": 1991,
                                    "imgID": "5693458845eb4",
                                    "description": null
                                },
                                {
                                    "id": 63859,
                                    "albumID": 1991,
                                    "imgID": "56934588af766",
                                    "description": null
                                }
                            ]
                        },
                        {
                            "id": 1993,
                            "ownerType": 1,
                            "ownerID": 1058,
                            "name": "Сертификаты",
                            "status": 1,
                            "photos": [
                                {
                                    "id": 64068,
                                    "albumID": 1993,
                                    "imgID": "569345ba20dc9",
                                    "description": null
                                },
                                {
                                    "id": 64069,
                                    "albumID": 1993,
                                    "imgID": "569345ba80f84",
                                    "description": null
                                },
                                {
                                    "id": 64070,
                                    "albumID": 1993,
                                    "imgID": "569345baeb4d9",
                                    "description": ""
                                },
                                {
                                    "id": 64071,
                                    "albumID": 1993,
                                    "imgID": "569345bb5f92a",
                                    "description": null
                                },
                                {
                                    "id": 64072,
                                    "albumID": 1993,
                                    "imgID": "569345bc6aee8",
                                    "description": null
                                },
                                {
                                    "id": 88332,
                                    "albumID": 1993,
                                    "imgID": "5693503e61284",
                                    "description": null
                                },
                                {
                                    "id": 88333,
                                    "albumID": 1993,
                                    "imgID": "5693503ec5377",
                                    "description": null
                                },
                                {
                                    "id": 119761,
                                    "albumID": 1993,
                                    "imgID": "56936e0849ae9",
                                    "description": null
                                }
                            ]
                        }
                    ]
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockPhoto.prototype.bind = function () {
    var album = $('.photo-md__album-cover');
    var albumCont = $('.photo-md__album-cont');
    var albumPhotos = $('.photo-md__img-prev');
    album.bind('click', showAlbum);
    albumPhotos.bind('click', showAlbumImg);
    album.first().addClass('act');

    function showAlbum() {
        albumCont.hide();
        album.removeClass('act');
        $(this).addClass('act');
        $('#cont-' + ($(this).attr('id'))).show();
        return false;
    }

    function showAlbumImg() {
        $.fancybox(albumPhotos, {
            type: 'image',
            index : albumPhotos.index(this),
            helpers: {
                overlay: {
                    locked: false
                }
            }
        });
        return false;
    }
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockPhoto.prototype.unbind = function () {
    var album = $('.photo-md__album-cover');
    var albumPhotos = $('.photo-md__img-prev');

    album.unbind('click');
    albumPhotos.unbind('click');
};

},{}],14:[function(require,module,exports){
'use strict';

module.exports = MasterBlockReview;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-review" component.
 * @constructor
 */
function MasterBlockReview() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockReview.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                data.vkLikes.data = JSON.parse(data.vkLikes.data);
                data.vkLikes.data.length = 9; //укорачиваем массив до 9 элементов
                //console.log(data.comments);
                return {
                    comments: data.comments.reverse(),
                    vkLikes: data.vkLikes,
                    name: data.name,
                    imgID: data.imgID
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockReview.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockReview.prototype.unbind = function () {

};

},{}],15:[function(require,module,exports){
'use strict';

module.exports = MasterBlockSale;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-sale" component.
 * @constructor
 */
function MasterBlockSale() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockSale.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                //console.log(data.sales);
                return {
                    sales: data.sales
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockSale.prototype.bind = function () {
    var sale = $('.sale');
    sale.find('a').bind('click', showSalePopup);

    function showSalePopup() {
        var tmp = $(this).parent().clone();
        tmp.addClass('popup');
        $.fancybox.open(tmp, {
            padding: 0,
            helpers: {
                overlay: {
                    locked: false
                }
            }
        });
        return false;
    }
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockSale.prototype.unbind = function () {

};

},{}],16:[function(require,module,exports){
'use strict';

module.exports = MasterBlockService;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-service" component.
 * @constructor
 */
function MasterBlockService() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockService.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                //console.log(data.services);
                var fieldsValSum = 0;
                var fieldsValHalfSum = 0;
                var part1 = [];
                var part2 = [];

                data.services.forEach(function (item) {
                    var fieldsValLength;

                    fieldsValLength = item.length;
                    if (fieldsValLength < 20) {
                        fieldsValLength = 20;
                    }
                    fieldsValSum += fieldsValLength;
                });
                data.services.forEach(function (item) {
                    var fieldsValLength;

                    fieldsValLength = item.length;
                    if (fieldsValHalfSum < fieldsValSum / 2) {
                        part1.push(item);
                    } else {
                        part2.push(item);
                    }
                    fieldsValHalfSum += fieldsValLength;
                });
                data.services = [];
                data.services.part1 = part1;
                data.services.part2 = part2;
                return {
                    services: data.services
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockService.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockService.prototype.unbind = function () {

};

},{}],17:[function(require,module,exports){
'use strict';

module.exports = MasterBlockVideo;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-video" component.
 * @constructor
 */
function MasterBlockVideo() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockVideo.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                //console.log(data.videos);
                return {
                    videos: data.videos
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockVideo.prototype.bind = function () {
    var video = $('.video-md__video-cover');
    video.bind('click', showVideo);

    function showVideo() {
        $.fancybox.open(this, {
            padding: 0,
            type: 'iframe',
            helpers: {
                overlay: {
                    locked: false
                }
            }
        });
        return false;
    }
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockVideo.prototype.unbind = function () {
    $('.video-md__video-cover').unbind('click');
};

},{}],18:[function(require,module,exports){
'use strict';

module.exports = MasterBlockWork;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-block-work" component.
 * @constructor
 */
function MasterBlockWork() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterBlockWork.prototype.render = function () {
    if (this.$context.attributes['master-page']) {
        return this.$context.getStoreData()
            .then(function (data) {
                var tempArr = new Array(7);
                data.schedule.forEach(function (item) {
                    item.open = item.open.substr(0, 5);
                    item.close = item.close.substr(0, 5);
                    tempArr[item.day - 1] = item;
                });
                data.schedule = tempArr;
                return {
                    schedule: data.schedule,
                    district: data.districts,
                    workCondition: data.workCondition
                }
            });
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterBlockWork.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterBlockWork.prototype.unbind = function () {

};

},{}],19:[function(require,module,exports){
'use strict';
module.exports = MasterFilter;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-filter" component.
 * @constructor
 */
function MasterFilter() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterFilter.prototype.render = function () {
    var self = this;
    var path, currentTag;
    var result = [];

    return this.$context.getStoreData()
        .then(function (data) {
            path = '/' + data.rubrika.parent.unique + '/' + data.rubrika.unique;

            return self.$context.getStoreData('master/MasterList')
                .then(function (master) {
                    if (Object.keys(master).length > 0)
                        result.push({
                            url: path,
                            sectionName: "master",
                            title: "Мастера",
                            ico: "man"
                        });
                })
                .then(function () {
                    return self.$context.getStoreData('master/MasterVideo')
                })
                .then(function (video) {
                    //if (Object.keys(master).length > 0)
                    result.push({
                        url: path + '/video',
                        sectionName: "video",
                        title: "Видео Мастеров",
                        ico: "video"
                    });
                })
                .then(function () {
                    //return self.$context.getStoreData('master/MasterVideo')
                })
                .then(function (sales) {
                    //if (Object.keys(master).length > 0)
                    result.push({
                        url: path + '/sale',
                        sectionName: "sale",
                        title: "Скидки Мастеров",
                        ico: "gift"
                    });
                })
                .then(function () {
                    //return self.$context.getStoreData('master/MasterVideo')
                })
                .then(function (secrets) {
                    //if (Object.keys(master).length > 0)
                    result.push({
                        url: path + '/sovety',
                        sectionName: "sovety",
                        title: "Секреты Мастеров",
                        ico: "qwestion"
                    });
                })
                .then(function () {
                    //return self.$context.getStoreData('master/MasterVideo')
                })
                .then(function (company) {
                    //if (Object.keys(master).length > 0)
                    result.push({
                        url: path + '/company',
                        sectionName: "company",
                        title: "Каталог фирм",
                        ico: "case"
                    });
                })
                .then(function () {
                    self._decoreOpenSection(result, data);
                    return {filterSection: result};
                })
        });
};
/**
 * Декарирование открытой секции (добавление тегов, ортировки)
 * @param result массив для декорирования
 * @param rubrika рубрика из стора
 * @private
 */
MasterFilter.prototype._decoreOpenSection = function (result, data) {
    var currentSection = data.section;

    for (var i = 0; i < result.length; ++i) {
        if (result[i].sectionName == currentSection) {

            var tags = this._getTags(data);
            result[i].openSection = {tagsGroup: tags};
            if (currentSection == 'masters') {
                result[i].openSection.sortBy = {
                    "url": "",
                    "method": "get"
                };
            }
            return;
        }
    }
};

/**
 * Перестройка тегов
 * @param tagsJson тэги из json
 * @param path абсолютный родительский путь для ссылок в тегах
 * @param currentTag текущий тег для выделения
 * @returns {Array} теги разбитые по группам
 * @private
 */
MasterFilter.prototype._getTags = function (data) {
    var path = '/' + data.rubrika.parent.unique + '/' + data.rubrika.unique;
    var tagsJson = data.rubrika.tags;
    var currentTag = data.tag.unique ;
    var currentSection = data.section;
    var tags = [];

    Object.keys(tagsJson)
        .forEach(function (n) {
            var tag = tagsJson[n];
            tag.isActive = false;

            if (!tags[tag.group])
                tags[tag.group] = [];

            if (tag.unique == currentTag) {
                tag.isActive = true;
                tag.urlBack = path;
            }
            if (currentSection == 'master') {
                tag.path = path + '/' + tag.unique;
            } else {
                tag.path = path + '/' + tag.unique + '/' + currentSection;
            }

            tags[tag.group].push(tag);
        });

    //сортируем
    var tagsGroup = [];
    Object.keys(tags).sort().forEach(function (key) {
        tagsGroup.push({
            title: key,
            tags: tags[key]
        });
    });
    return tagsGroup;
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterFilter.prototype.bind = function () {
    return {
        click: {
            '.js-filter-toggle-btn.active': this._clickSection
        }
    }
};

MasterFilter.prototype._clickSection = function (obj) {
    var dom = obj.target;
    var el;
    if (!($(dom).hasClass('js-filter-toggle-btn') && $(dom).hasClass('active')))
        el = $(dom).parents('.js-filter-toggle-btn');
    else
        el = $(dom);
    el.parent().find('.js-filter-toggle-section').slideToggle();
    el.find('.filter-section__arrow-icon').toggleClass('down');
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterFilter.prototype.unbind = function () {

};

},{}],20:[function(require,module,exports){
'use strict';

module.exports = MasterList;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-list" component.
 * @constructor
 */
function MasterList($serviceLocator) {
// we can use window from the locator in a browser only
    if (this.$context.isBrowser) {
        this._window = $serviceLocator.resolve('window');
        this._handleScroll = this._handleScroll.bind(this);
    }
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterList.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterList.prototype.bind = function () {
    this._window.addEventListener('resize', this._allMinicardServicesCut);
    this._window.addEventListener('scroll', this._handleScroll);
};

MasterList.prototype.unbind = function () {
    this._window.removeEventListener('resize', this._allMinicardServicesCut);
    this._window.removeEventListener('scroll', this._handleScroll);
    this.$context.collectGarbage();
};

/**
 * Handles window scroll for infinite scroll loading.
 * @private
 */
MasterList.prototype._handleScroll = function () {
    var self = this;
    var windowHeight = this._window.innerHeight,
        scrollTop = this._window.pageYOffset,
        doc = this._window.document.documentElement;
    try {
        // when scroll to the bottom of the page load more items
        if (
            !this._isBusy &&
            (scrollTop >= (doc.scrollHeight - windowHeight * 2) ||
            doc.scrollHeight <= windowHeight)
        ) {
            this._isBusy = true;
            if (!this._isFinish) {
                $('#wait-spinner').show();
                this._loadMoreItems()
                    .then(function (finish) {
                        if (finish === null) {
                            self._isFinish = true;
                        }
                        self._isBusy = false;
                        $('#wait-spinner').fadeOut(800);
                    });
            }
        }
    } catch (e) {
        // do nothing
    }
};
MasterList.prototype._isBusy = false;
MasterList.prototype._isFinish = false;
/**
 * Loads more items to feed.
 * @private
 */
MasterList.prototype._loadMoreItems = function () {
    return this.$context.sendAction('getNextPage');
};

MasterList.prototype._allMinicardServicesCut = function () {
    $('.master-minicard').each(function () {
        var minicardServices = $(this).find('.master-minicard__services');
        var servicesList = minicardServices.find('li');
        var maxHeight =
            $(this).height() - ($(this).find('.master-minicard__name').height() + $(this).find('.master-minicard__spec').height());
        var servicesCount = minicardServices.find('li').length;

        if (minicardServices.height() > maxHeight) {
            while (minicardServices.height() > maxHeight && servicesCount >= 0) {
                $(servicesList[servicesCount - 1]).hide();
                servicesCount--;
            }
        } else if ((minicardServices.height() + 10) < maxHeight) {
            var i = 0;
            while (minicardServices.height() < maxHeight && i < servicesCount + 1) {
                $(servicesList[i]).show();
                i++;
            }
            if (minicardServices.height() > maxHeight) {
                $(servicesList[i - 1]).hide();
            }
        }
    });
};


},{}],21:[function(require,module,exports){
'use strict';

module.exports = MasterMinicard;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-minicard" component.
 * @constructor
 */
function MasterMinicard() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterMinicard.prototype.render = function () {
    var self = this;
    return this.$context.getStoreData()
        .then(function (data) {
            if (!data)
                return;
            var masterID = self.$context.attributes['master-id'];
            for (var i = 0; i < data.length; ++i) {
                if (data[i].id == masterID) {
                    return data[i];
                }
            }
        })
        .then(function (master) {
            if (!master)
                return;
            if (master.page && (
                    (master.page.sales && master.sales[0]) ||
                    (master.page.albums && master.albums[0]) ||
                    (master.page.videos && master.videos[0]) ||
                    (master.page.comments && master.comments[0])
                )) {
                master.isWidget = true;
            }
            if (master.page && master.page.albums && master.albums) {
                master.albumsCount = master.albums.length;
                master.albumsTitle = [];
                master.albums.forEach(function (el) {
                    master.albumsTitle.push(el.name);
                });
                master.albumsTitle = master.albumsTitle.join(', ');
            }
            if (master.page && master.page.comments && master.comments) {
                master.commentsCount = master.comments.length;
            }
            var servicesNormally = [];
            Object.keys(master.services).forEach(function (item, i, arr) {
                var service = master.services[item];
                service = service.replace(/\u00A0/g, " ");
                servicesNormally.push(service);
            });
            master.services = servicesNormally;
            //console.log(Object.keys(master.services));
            return master;
        });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterMinicard.prototype.bind = function () {
    $('.master-content-widget li').bind('mouseenter', showWidgetTab);

    $('.master-content-widget').each(function () {
        $(this).find('.act').first().addClass('show');
    });
    function showWidgetTab() {
        if ($(this).hasClass('act')) {
            $(this).siblings().removeClass('show');
            $(this).addClass('show');
        }
    }

    this._minicardServicesCut();
    return {};
};
MasterMinicard.prototype._minicardServicesCut = function () {
    var minicard = $('#' + this.$context.element.id);
    var minicardServices = minicard.find('.master-minicard__services');
    var maxHeight =
        minicard.find('.master-minicard').height() - (minicard.find('.master-minicard__name').height() + minicard.find('.master-minicard__spec').height());
    var servicesCount = minicardServices.find('li').length;

    while (minicardServices.height() > maxHeight && servicesCount != 0) {
        $(minicardServices.find('li')[servicesCount]).hide();
        servicesCount--;
    }
};
/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterMinicard.prototype.unbind = function () {
    $('.master-content-widget li').unbind('mouseenter');
};

},{}],22:[function(require,module,exports){
'use strict';

module.exports = MasterPhoneBtn;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-phone-btn" component.
 * @constructor
 */
function MasterPhoneBtn() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterPhoneBtn.prototype.render = function () {
    return this.$context.attributes;
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterPhoneBtn.prototype.bind = function () {
    return {
        click: {
            '.js-show-phone': this._clickPhoneHandler,
            '.js-close-tip': this._clickCloseTipHandler
        }
    }
};

MasterPhoneBtn.prototype._clickPhoneHandler = function (obj) {
    var el = obj.target;
    $(el).hide();
    $(el).siblings('.js-show-phone-details').show();
    $(el).closest('.master-minicard').find('.js-master-phone-tip').fadeIn(400).delay(4000).fadeOut(500);
};
MasterPhoneBtn.prototype._clickCloseTipHandler = function (obj) {
    var el = obj.target;
    $(el).closest('.js-master-phone-tip').stop().fadeOut(500);
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterPhoneBtn.prototype.unbind = function () {

};

},{}],23:[function(require,module,exports){
'use strict';

module.exports = MasterPage;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-page" component.
 * @constructor
 */
function MasterPage() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterPage.prototype.render = function () {
    return this.$context.getStoreData().then(function (data) {
        //console.log(data.company);
        return data;
    });
};

MasterPage.prototype._ta = null;
/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterPage.prototype.bind = function () {
    var menu = $('.menu-mp');
    var menuOffset = menu.offset();
    var ta = $('textarea');

    $(window).bind('scroll', fixedSectionMenu);
    $(window).bind('scroll', menuHighlight);
    $('.menu-mp a').bind('click', scrollToSection);
    $('.contacts-mp__show-contact').bind('click', showContact);
    $('.js-show-callback-popup').bind('click', showCallbackPopup);
    autosize(ta);

    //показать контакты
    function showContact() {
        $(this).closest('.contacts-mp__cap').hide();
        return false;
    }

    //плавающего меню
    function fixedSectionMenu() {
        if ($(window).scrollTop() + 30 > menuOffset.top) {
            menu.addClass('fixed');
        } else {
            menu.removeClass('fixed');
        }
    }

    //скролл до секции
    function menuHighlight() {
        $('.master-page__section-cont').each(function () {
            if ($(window).scrollTop() + 50 > $(this).offset().top && $(window).scrollTop() + 30 < $(this).offset().top + $(this).innerHeight()) {
                menu.find('.act').removeClass('act');
                menu.find('[href=#' + $(this).children().attr('id') + ']').addClass('act');
            }
        });
    }

    //навигации внутри страницы мастера
    function scrollToSection() {
        $(window).unbind('scroll', menuHighlight);
        setTimeout(function () {
            $(window).bind('scroll', menuHighlight);
        }, 1050);
        menu.find('.act').removeClass('act');
        $(this).addClass('act');
        $('html, body').animate({
            scrollTop: $($(this).attr('href')).offset().top - 50
        }, 1000);
        return false;
    }

    //показать popup - заказать звонок
    function showCallbackPopup() {
        var form = $('.callback-popup');
        $.fancybox.open(form, {
            padding: 0
        });
        return false;
    }
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterPage.prototype.unbind = function () {
    var ta = document.querySelector('textarea');
    var evt = document.createEvent('Event');

    $(window).unbind('scroll');
    $('.menu-mp').find('a').unbind('click');
    $('.contacts-mp__show-contact').unbind('click');
    $('.js-show-callback-popup').unbind('click');
    evt.initEvent('autosize:destroy', true, false);
    ta.dispatchEvent(evt);
};
},{}],24:[function(require,module,exports){
'use strict';

module.exports = MasterRecommended;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-recommended" component.
 * @constructor
 */
function MasterRecommended() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterRecommended.prototype.render = function () {
    //return this.$context.getStoreData();
    return {
        "is-recommended-masters": true,
        "url-arrow-left": "404",
        "url-arrow-right": "404",
        "recommended-master": [
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/3720.jpg",
                "alt": "Князев А.Ю.",
                "master-name": "Князев А.Ю.",
                "recommendation-number": "27 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/4617.jpg",
                "alt": "Хальзов А.",
                "master-name": "Хальзов А.",
                "recommendation-number": "6 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/7428.jpg",
                "alt": "Булгаков В.А.",
                "master-name": "Булгаков В.А.",
                "recommendation-number": "5 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/3720.jpg",
                "alt": "Князев А.Ю.",
                "master-name": "Князев А.Ю.",
                "recommendation-number": "27 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/4617.jpg",
                "alt": "Хальзов А.",
                "master-name": "Хальзов А.",
                "recommendation-number": "6 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/7428.jpg",
                "alt": "Булгаков В.А.",
                "master-name": "Булгаков В.А.",
                "recommendation-number": "5 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/3720.jpg",
                "alt": "Князев А.Ю.",
                "master-name": "Князев А.Ю.",
                "recommendation-number": "27 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/4617.jpg",
                "alt": "Хальзов А.",
                "master-name": "Хальзов А.",
                "recommendation-number": "6 человек"
            },
            {
                "master-url": "404",
                "src": "/img/assets/master_recommended/7428.jpg",
                "alt": "Булгаков В.А.",
                "master-name": "Булгаков В.А.",
                "recommendation-number": "5 человек"
            }
        ]
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterRecommended.prototype.bind = function () {
    this.bindSlick();
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterRecommended.prototype.unbind = function () {
    this.unbindSlick();
};

MasterRecommended.prototype.bindSlick = function () {
    $('.master_recommended__slider').slick({
        dots: false,
        infinite: false,
        speed: 700,
        slidesToShow: 4,
        slidesToScroll: 3,
        prevArrow: '<div class="slick-prev">' +
        '<svg class="icon icon_strelka" title="icon_strelka" role="img">' +
        '<use xlink:href="/icon-svg/svg-symbols.svg#icon_strelka"/>' +
        '</svg>' +
        '</div>',
        nextArrow: '<div class="slick-next">' +
        '<svg class="icon icon_strelka" title="icon_strelka" role="img">' +
        '<use xlink:href="/icon-svg/svg-symbols.svg#icon_strelka"/>' +
        '</svg>' +
        '</div>'
    });
};
MasterRecommended.prototype.unbindSlick = function () {
    $('.master_recommended__slider').slick("unslick");
};
},{}],25:[function(require,module,exports){
'use strict';

module.exports = MasterRubrika;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "master-rubrika" component.
 * @constructor
 */
function MasterRubrika() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MasterRubrika.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MasterRubrika.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MasterRubrika.prototype.unbind = function () {

};

},{}],26:[function(require,module,exports){
'use strict';

module.exports = OtherNewsItem;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "other-news-item" component.
 * @constructor
 */
function OtherNewsItem() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
OtherNewsItem.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
OtherNewsItem.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
OtherNewsItem.prototype.unbind = function () {

};

},{}],27:[function(require,module,exports){
'use strict';

module.exports = OtherNews;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "other-news" component.
 * @constructor
 */
function OtherNews() {
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
OtherNews.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
OtherNews.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
OtherNews.prototype.unbind = function () {

};

},{}],28:[function(require,module,exports){
'use strict';

module.exports = OtherRecommendation;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "other-recommendation" component.
 * @constructor
 */
function OtherRecommendation() {
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
OtherRecommendation.prototype.render = function () {
    return this.$context.getStoreData()
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
OtherRecommendation.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
OtherRecommendation.prototype.unbind = function () {

};

},{}],29:[function(require,module,exports){
'use strict';

module.exports = OtherVacancyItem;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "other-vacancy-item" component.
 * @constructor
 */
function OtherVacancyItem() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
OtherVacancyItem.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
OtherVacancyItem.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
OtherVacancyItem.prototype.unbind = function () {

};

},{}],30:[function(require,module,exports){
'use strict';

module.exports = OtherVacancy;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "other-vacancy" component.
 * @constructor
 */
function OtherVacancy() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
OtherVacancy.prototype.render = function () {
    return this.$context.getStoreData()
        .then (function (res) {
        return {
            vacancy: res
        }
    });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
OtherVacancy.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
OtherVacancy.prototype.unbind = function () {

};

},{}],31:[function(require,module,exports){
'use strict';

module.exports = Rubikator;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "rubikator" component.
 * @constructor
 */
function Rubikator() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Rubikator.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Rubikator.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Rubikator.prototype.unbind = function () {

};

},{}],32:[function(require,module,exports){
'use strict';

module.exports = PageContact;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-contact" component.
 * @constructor
 */
function PageContact() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageContact.prototype.render = function () {
    return {
        "phone": "(8482) 741-147",
        "email": "info@facemaster.ru",
        "adress": "г. Тольятти, ул. Автостроителей 41А-1"
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageContact.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageContact.prototype.unbind = function () {

};

},{}],33:[function(require,module,exports){
'use strict';

module.exports = PageFeedback;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-feedback" component.
 * @constructor
 */
function PageFeedback() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageFeedback.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageFeedback.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageFeedback.prototype.unbind = function () {

};

},{}],34:[function(require,module,exports){
'use strict';

module.exports = PageLogin;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-login" component.
 * @constructor
 */
function PageLogin() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageLogin.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageLogin.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageLogin.prototype.unbind = function () {

};

},{}],35:[function(require,module,exports){
'use strict';

module.exports = DopFunction;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "dop-function" component.
 * @constructor
 */
function DopFunction() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
DopFunction.prototype.render = function () {
    return {
        "menuMaster": [
            {
                "url": "/registration",
                "title": "Стать Мастером",
                "icon": true
            },
            {
                "url": "/recommendation",
                "title": "Мастера о сайте"
            }
        ],
        "menuAbout": [
            {
                "url": "/news",
                "title": "Новости"
            },
            {
                "url": "/vacancy",
                "title": "Вакансии"
            }
        ],
        "menuBayda": [
            {
                "url": "/404",
                "title": "Конкурсы газеты Презент"
            },
            {
                "url": "/404",
                "title": "Маршрутки Тольятти с 01.01.2015"
            },
            {
                "url": "/404",
                "title": "Дачные перевозки"
            },
            {
                "empty": true
            }
        ]
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
DopFunction.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
DopFunction.prototype.unbind = function () {

};

},{}],36:[function(require,module,exports){
'use strict';

module.exports = Main;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "main" component.
 * @constructor
 */
function Main() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Main.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Main.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Main.prototype.unbind = function () {

};

},{}],37:[function(require,module,exports){
'use strict';

module.exports = MainFunction;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "main-function" component.
 * @constructor
 */
function MainFunction() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
MainFunction.prototype.render = function () {
  return {
    countMaster: '1 234 Мастера'
  }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
MainFunction.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
MainFunction.prototype.unbind = function () {

};

},{}],38:[function(require,module,exports){
'use strict';

module.exports = PageMasterPage;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-master-page" component.
 * @constructor
 */
function PageMasterPage() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageMasterPage.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageMasterPage.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageMasterPage.prototype.unbind = function () {

};

},{}],39:[function(require,module,exports){
'use strict';

module.exports = PageMasterRubrika;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-master-rubrika" component.
 * @constructor
 */
function PageMasterRubrika() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageMasterRubrika.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageMasterRubrika.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageMasterRubrika.prototype.unbind = function () {

};

},{}],40:[function(require,module,exports){
'use strict';

module.exports = PageNewsItem;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-news-item" component.
 * @constructor
 */
function PageNewsItem() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageNewsItem.prototype.render = function () {
    return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageNewsItem.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageNewsItem.prototype.unbind = function () {

};

},{}],41:[function(require,module,exports){
'use strict';

module.exports = PageNews;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-news" component.
 * @constructor
 */
function PageNews() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageNews.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageNews.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageNews.prototype.unbind = function () {

};

},{}],42:[function(require,module,exports){
'use strict';

module.exports = PageOferta;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-oferta" component.
 * @constructor
 */
function PageOferta() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageOferta.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageOferta.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageOferta.prototype.unbind = function () {

};

},{}],43:[function(require,module,exports){
'use strict';

module.exports = PageRecommendation;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-recommendation" component.
 * @constructor
 */
function PageRecommendation() {
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageRecommendation.prototype.render = function () {
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageRecommendation.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageRecommendation.prototype.unbind = function () {

};

},{}],44:[function(require,module,exports){
'use strict';

module.exports = PageRegistration;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-registration" component.
 * @constructor
 */
function PageRegistration() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageRegistration.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageRegistration.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageRegistration.prototype.unbind = function () {

};

},{}],45:[function(require,module,exports){
'use strict';

module.exports = PageRequest;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-request" component.
 * @constructor
 */
function PageRequest() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageRequest.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageRequest.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageRequest.prototype.unbind = function () {

};

},{}],46:[function(require,module,exports){
'use strict';

module.exports = PageSaleCatalog;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-sale-catalog" component.
 * @constructor
 */
function PageSaleCatalog() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageSaleCatalog.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageSaleCatalog.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageSaleCatalog.prototype.unbind = function () {

};

},{}],47:[function(require,module,exports){
'use strict';

module.exports = PageSovetyCatalog;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-sovety-catalog" component.
 * @constructor
 */
function PageSovetyCatalog() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageSovetyCatalog.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageSovetyCatalog.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageSovetyCatalog.prototype.unbind = function () {

};

},{}],48:[function(require,module,exports){
'use strict';

module.exports = PageVacancyItem;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-vacancy-item" component.
 * @constructor
 */
function PageVacancyItem() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageVacancyItem.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageVacancyItem.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageVacancyItem.prototype.unbind = function () {

};

},{}],49:[function(require,module,exports){
'use strict';

module.exports = PageVacancy;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-vacancy" component.
 * @constructor
 */
function PageVacancy() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageVacancy.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageVacancy.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageVacancy.prototype.unbind = function () {

};

},{}],50:[function(require,module,exports){
'use strict';

module.exports = PageVideoCatalog;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "page-video-catalog" component.
 * @constructor
 */
function PageVideoCatalog() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PageVideoCatalog.prototype.render = function () {
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PageVideoCatalog.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PageVideoCatalog.prototype.unbind = function () {

};

},{}],51:[function(require,module,exports){
'use strict';

module.exports = PagesContent;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "pages-content" component.
 * @constructor
 */
function PagesContent() { }

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PagesContent.prototype.render = function () {
	return this.$context.getStoreData();
};

/**
 * Returns event binding settings for the component.
 */
PagesContent.prototype.bind = function () {
	this.hideLoader();
};

/**
 * Hides loader in template.
 */
PagesContent.prototype.hideLoader = function () {
	var loaders = this.$context.element.getElementsByTagName('cat-loader');
	for (var i = 0; i < loaders.length; i++) {
		loaders[i].style.display = 'none';
	}
	window.scrollTo(0,0);
};

},{}],52:[function(require,module,exports){
'use strict';

module.exports = Footer;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "pages-footer" component.
 * @constructor
 */
function Footer() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Footer.prototype.render = function () {
    return {
        links: [
            {
                "url": "/oferta",
                "title": "Оферта"
            },
            {
                "url": "/contact",
                "title": "Контакты"
            },
            {
                "url": "/feedback",
                "title": "Обратная связь"
            }
        ]
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Footer.prototype.bind = function () {
    var windowHeight = $(window).height();
    $('#to-top a').bind('click', scrollToTop);
    $(window).bind('scroll', isVisibleToTop);

    function scrollToTop() {
        $('html, body').animate({
            scrollTop: 0
        }, 1000);
        return false;
    }

    function isVisibleToTop() {
        if (windowHeight / 2 > $(window).scrollTop()) {
            $('#to-top').fadeOut(400);
        } else {
            $('#to-top').fadeIn(400);
        }
    }
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Footer.prototype.unbind = function () {
    $('#to-top a').unbind('click');
    $(window).unbind('scroll');
};

},{}],53:[function(require,module,exports){
'use strict';

module.exports = PagesHeader;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "pages-header" component.
 * @constructor
 */
function PagesHeader() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PagesHeader.prototype.render = function () {
    return this.$context.getStoreData()
        .then(function (data) {
            return data.header;
        });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
PagesHeader.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
PagesHeader.prototype.unbind = function () {

};

},{}],54:[function(require,module,exports){
'use strict';

var PAGES = require("../../../config/pages.json");

module.exports = PagesNavigation;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "pages-navigation" component.
 * @constructor
 */
function PagesNavigation() {
}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
PagesNavigation.prototype.render = function () {
    return {
        menu: [
            {
                link: '/catalog',
                name: PAGES.catalog.title
            },
            {
                link: '/request',
                name: PAGES.request.title
            },
            {
                link: '/registration',
                name: PAGES.registration.title
            }
        ]
    };
};

},{"../../../config/pages.json":89}],55:[function(require,module,exports){
'use strict';

module.exports = RegistrationAbout;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-about" component.
 * @constructor
 */
function RegistrationAbout() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationAbout.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationAbout.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationAbout.prototype.unbind = function () {

};

},{}],56:[function(require,module,exports){
'use strict';

module.exports = RegistrationFaq;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-faq" component.
 * @constructor
 */
function RegistrationFaq() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationFaq.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationFaq.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationFaq.prototype.unbind = function () {

};

},{}],57:[function(require,module,exports){
'use strict';

module.exports = RegistrationForm;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-form" component.
 * @constructor
 */
function RegistrationForm() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationForm.prototype.render = function () {
    return {
        url: "/reg-master/success.json",
        urlLK: "404",
        method: "get"
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationForm.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationForm.prototype.unbind = function () {

};

},{}],58:[function(require,module,exports){
'use strict';

module.exports = RegistrationHeader;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-header" component.
 * @constructor
 */
function RegistrationHeader() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationHeader.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationHeader.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationHeader.prototype.unbind = function () {

};

},{}],59:[function(require,module,exports){
'use strict';

module.exports = RegistrationMorePage;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-more-page" component.
 * @constructor
 */
function RegistrationMorePage() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationMorePage.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationMorePage.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationMorePage.prototype.unbind = function () {

};

},{}],60:[function(require,module,exports){
'use strict';

module.exports = RegistrationPrice;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-price" component.
 * @constructor
 */
function RegistrationPrice() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationPrice.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationPrice.prototype.bind = function () {
    return {
        click: {
            '.tab-content__name': this._clickHandle
        }
    }
};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationPrice.prototype.unbind = function () {

};

RegistrationPrice.prototype._clickHandle = function (obj) {
    var el = $(obj.target);
    if (!el.hasClass('tab-content__name'))
        el = el.parents('.tab-content__name');

    var parent = el.parents('.tab-content');
    if (parent.hasClass('tab-content_active'))
        return;
    $('.tab-content_active').removeClass('tab-content_active');
    parent.addClass('tab-content_active');
};

},{}],61:[function(require,module,exports){
'use strict';

module.exports = RegistrationWhyWe;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "registration-why-we" component.
 * @constructor
 */
function RegistrationWhyWe() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
RegistrationWhyWe.prototype.render = function () {
    return {
        count: {
            master: "1 000",
            masterName: "мастеров<br>на сайте",
            visits: "12 000",
            orders: "1 000"
        }
    }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
RegistrationWhyWe.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
RegistrationWhyWe.prototype.unbind = function () {

};

},{}],62:[function(require,module,exports){
'use strict';

module.exports = Catalog;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "catalog" component.
 * @constructor
 */
function Catalog() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Catalog.prototype.render = function () {
    return this.$context.getStoreData()
        .then(function (data) {
            return {
                rubrikator: data
            }
        });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Catalog.prototype.bind = function () {
    return {
        click: {
            '.js-rubrika-list': this._clickHandler,
            '.js-rubrika-collapsed': this._clickAllHandler
        }
    }
};

Catalog.prototype._clickHandler = function (obj) {
    var el = obj.target;
    $(el).parents('.rubrika-list').find('.rubrika-list__list').toggle();
}

Catalog.prototype._clickAllHandler = function (obj) {
    var el = obj.target;
    var self = $(el).parents('.js-rubrika-collapsed');

    var cl = 'master-rubrikator-page';
    var cl_col = cl + '_collapsed';
    var el = $('.master-rubrikator-page');

    if (el.hasClass(cl_col)) {
        el.removeClass(cl_col);
        $('.rubrika-list__list').show();
        self.find('.rubrika-list__name').html('Свернуть все рубрики')
            .end().find('.rubrika-list__icon').addClass('rubrika-list__icon_rotate');
    } else {
        el.addClass(cl_col);
        $('.rubrika-list__list').hide();
        self.find('.rubrika-list__name').html('Развернуть все рубрики')
            .end().find('.rubrika-list__icon').removeClass('rubrika-list__icon_rotate');
    }
}
/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Catalog.prototype.unbind = function () {

};



},{}],63:[function(require,module,exports){
'use strict';

module.exports = Sale;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "sale" component.
 * @constructor
 */
function Sale() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Sale.prototype.render = function () {
    return this.$context.getStoreData()
        .then(function (data) {
            //console.log(data);
            return data;
        });
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Sale.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Sale.prototype.unbind = function () {

};

},{}],64:[function(require,module,exports){
'use strict';

module.exports = Search;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "search" component.
 * @constructor
 */
function Search() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Search.prototype.render = function () {
  return {
    modificator: this.$context.attributes.modificator,
    url: '',
    method: ''
  }
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Search.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Search.prototype.unbind = function () {

};

},{}],65:[function(require,module,exports){
'use strict';

module.exports = ServiceRequest;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "service-request" component.
 * @constructor
 */
function ServiceRequest() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
ServiceRequest.prototype.render = function () {

};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
ServiceRequest.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
ServiceRequest.prototype.unbind = function () {

};

},{}],66:[function(require,module,exports){
'use strict';

module.exports = Social;

/*
 * This is a Catberry Cat-component file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#cat-components
 */

/**
 * Creates new instance of the "social" component.
 * @constructor
 */
function Social() {

}

/**
 * Gets data context for template engine.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Data context
 * for template engine.
 */
Social.prototype.render = function () {
  return [
    {
      url: 'http://vk.com/fm_mf',
      ico: 'vk'
    },
    {
      url: 'http://www.facebook.com/face.mast',
      ico: 'fb'
    },
    {
      url: 'http://www.odnoklassniki.ru/facemaster',
      ico: 'ok'
    },
    {
      url: 'http://twitter.com/FacemasterRu',
      ico: 'tw'
    }
  ];
};

/**
 * Returns event binding settings for the component.
 * This method is optional.
 * @returns {Promise<Object>|Object|null|undefined} Binding settings.
 */
Social.prototype.bind = function () {

};

/**
 * Does cleaning for everything that have NOT been set by .bind() method.
 * This method is optional.
 * @returns {Promise|undefined} Promise or nothing.
 */
Social.prototype.unbind = function () {

};

},{}],67:[function(require,module,exports){
'use strict';

var PAGES = require("../config/pages.json");

module.exports = Breadcrumps;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "breadcrumps" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Breadcrumps($uhr) {
    this._uhr = $uhr;
    this.$context.setDependency('Pages');
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Breadcrumps.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Breadcrumps.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Breadcrumps.prototype.load = function () {
    var self = this;
    var brcrmp = [];
    return this.$context.getStoreData('Pages')
        .then(function (page) {
            if (page.current == "master-rubrika")
                return self._loadForRubrika();

            if (page.current == "news-item")
                return self._loadForNewsItem();

            brcrmp.push({
                title: PAGES[page.current].title
            });
            return brcrmp;
        });
};

Breadcrumps.prototype._loadForRubrika = function () {
    var self = this;
    return this.$context.getStoreData('Tag')
        .then(function (data) {
            var links;
            if (data.tag.unique) {
                links = self._getForTag(data);
            } else {
                links = self._getForRubrika(data);
            }
            return links;
        });
};

Breadcrumps.prototype._getForTag = function (data) {
    var links = this._getForRubAndTag(data);
    links.push({
        title: data.rubrika.name,
        url: '/' + data.rubrika.parent.unique + '/' + data.rubrika.unique
    });
    links.push({
        title: data.tag.name
    });
    return links;
};

Breadcrumps.prototype._getForRubrika = function (data) {
    var links = this._getForRubAndTag(data);
    links.push({
        title: data.rubrika.name
    });
    return links;
};

Breadcrumps.prototype._getForRubAndTag = function (data) {
    var podrubriks = data.rubrika.nearby;
    var linksPodrubriks = [];
    var links = [];

    Object.keys(podrubriks)
        .forEach(function (num) {
            if (podrubriks[num].status == 1)
                linksPodrubriks.push({
                    title: podrubriks[num].name,
                    url: '/' + data.rubrika.parent.unique + '/' + podrubriks[num].unique
                });
        });

    links.push({
        title: "Каталог услуг",
        url: "/catalog"
    });

    links.push({
        title: data.rubrika.parent.name,
        url: "/" + data.rubrika.parent.unique,
        links: linksPodrubriks
    });
    return links;
};

Breadcrumps.prototype._loadForNewsItem = function () {
    var self = this;
    return this.$context.getStoreData('other/NewsItem')
        .then(function (data) {
            var links = [];
            links.push({
                title: "Новости",
                url: "/news"
            });
            links.push({
                title: data.title
            });
            return links;
        });
};
/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Breadcrumps.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{"../config/pages.json":89}],68:[function(require,module,exports){
'use strict';

var PAGES = require("../config/pages.json");

module.exports = Head;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "head" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Head($uhr) {
    this._uhr = $uhr;
    this.currentPage = "main";
    this.$context.setDependency('Pages');
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Head.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Head.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Head.prototype.load = function () {
    var self = this;
    return this.$context.getStoreData('Pages')
        .then(function (page) {
            if (page.current == "master-rubrika")
                return self._loadForRubrika();
            if (page.current == "news-item")
                return self._loadForNewsItem();

            var data = PAGES[page.current];
            return {
                //title: data.title + '. FaceMaster.ru. Специалисты Тольятти',
                //description: data.description,
                //keywords: data.keywords
            }
        });
};

Head.prototype._loadForRubrika = function () {
    return this.$context.getStoreData('Tag')
        .then(function (data) {
            return {
                title: data.currentSeo.headTitle,
                description: data.currentSeo.description,
                keywords: data.currentSeo.keywords
            }
        });
};

Head.prototype._loadForNewsItem = function () {
    return this.$context.getStoreData('other/NewsItem')
        .then(function (data) {
            return {
                title: data.title,
                description: data.preview,
                keywords: 'новость, facemaster'
            }
        });
};
/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Head.prototype.handleSetCurrentPage = function (page) {
    this.currentPage = page;
    this.$context.changed();
};

},{"../config/pages.json":89}],69:[function(require,module,exports){
'use strict';

var PAGES = require("../config/pages.json");

module.exports = Pages;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "Pages" store.
 * @param {Object} $config Application config.
 * @constructor
 */
function Pages($config) {
    this._config = $config;
    this.$context.setDependency('Tag');
}

/**
 * Current application config.
 * @type {Object}
 * @private
 */
Pages.prototype._config = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Pages.prototype.$lifetime = 3600000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Pages.prototype.load = function () {
    var self = this;
    var currentPage = self.$context.state.page;

    return Promise.resolve(1)
        .then(function () {
            if (currentPage == "master-rubrika")
                return self.$context.getStoreData('Tag');
            if (currentPage == "master-page")
                return self.$context.getStoreData('master/MasterItem');
            if (currentPage == "news-item")
                return self.$context.getStoreData('other/NewsItem');
            if (currentPage == "vacancy-item")
                return self.$context.getStoreData('other/VacancyItem');
        })
        .then(function () {
            if (!currentPage) {
                return self.$context.redirect('/main');
            }

            if (!PAGES.hasOwnProperty(currentPage)) {
                self.$context.notFound();
            }

            var result = {
                current: currentPage,
                isActive: {},

                header: self.getHeaderData(),
                footer: self.getFooterData()
            };
            Object.keys(PAGES)
                .forEach(function (page) {
                    result.isActive[page] = (currentPage === page);
                });
            return result;
        });
};

Pages.prototype.getHeaderData = function () {
    return {
        visitCount: '12 323 посещений',
        isGuest: true
    };
};

Pages.prototype.getFooterData = function () {
    return {
        phone: '(8482) 74-44-19'
    };
};
},{"../config/pages.json":89}],70:[function(require,module,exports){
'use strict';

module.exports = Paginator;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "Paginator" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Paginator($uhr) {
    this._uhr = $uhr;
    this._model;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Paginator.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Paginator.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Paginator.prototype.load = function () {
    if (!this._model)
        return null;
    var self = this;
    var currentPage = this.$context.state.currentPage || 1;

    return Promise.resolve(1)
        .then(function () {
            return self.$context.getStoreData(self._model);
        })
        .then(function () {
            return self.$context.sendAction(self._model, "getPaginator")
        })
        .then(function (data) {
            if (data['is-paginator'] == false)
                return data;
            var start = data.current - 4 < 0 ? 1 : data.current - 4;
            var end = start + 9 < data.count ? start + 9 : data.count;
            var list = [];
            for (var i = start; i <= end; ++i) {
                list.push({
                    "is-selected": (data.current == i),
                    "url": data.url + i,
                    "number": i
                });
            }

            return {
                model: self._model,
                "is-paginator": true,
                start: {
                    url: data.url + 1
                },
                end: {
                    url: data.url + data.count
                },
                list: list
            }
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Paginator.prototype.handleSetModel = function (model) {
    this._model = model;
};
Paginator.prototype.handleGetCurrentPage = function () {
    return this.$context.state.currentPage || 1;
}

},{}],71:[function(require,module,exports){
'use strict';

module.exports = Tag;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "tag" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Tag($uhr) {
    this._uhr = $uhr;
    this.$context.setDependency('rubrika/Rubrika');
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Tag.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Tag.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Tag.prototype.load = function () {
    var self = this;
    var section = this.$context.state.section || 'master';
    var tag = this.$context.state.tag || '';
    var data = {};

    return this.$context.getStoreData("rubrika/Rubrika")
        .then(function (rubrika) {
            data.rubrika = rubrika;
        })
        .then(function () {
            if (tag) {
                var path = 'http://api-fm.present-tlt.ru/tag';
                var option = {
                    data: {
                        filter: '["and",["=", "unique", "' + tag + '"],["=","status","1"]]',
                        expand: 'seo'
                    }
                };
                return self._uhr.get(path, option)
                    .then(function (result) {
                        if (result.status.code >= 400 && result.status.code < 600) {
                            throw new Error(result.status.text);
                        }
                        return result.content[0];
                    });
            }

            return {};
        })
        .then(function (tagData) {
            if (tag && tagData == {})
                self.$context.notFound();

            data.tag = tagData;
            data.section = section;
            data.currentSeo = tag ? self._getCurrentSeo(data.tag, data.section) : self._getCurrentSeo(data.rubrika, data.section);
            return data;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Tag.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

Tag.prototype._getCurrentSeo = function (data, section) {
    var result;
    var seo = data.seo;

    Object.keys(seo)
        .forEach(function (key) {
            if (section == seo[key].section)
                result = seo[key];
        });
    if (!result)
        return {
            headTitle: data.name,
            pageTitle: data.name
        };
    return result;
};
},{}],72:[function(require,module,exports){
'use strict';

var dateFormat = require('../../lib/util/DateFormat');

module.exports = MasterItem;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "master/MasterItem" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function MasterItem($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
MasterItem.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
MasterItem.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
MasterItem.prototype.load = function () {
    var self = this;
    var id = this.$context.state.item;
    if (!id)
        return;

    var now = Date.now();
    now = dateFormat(now, "yyyy-mm-dd");
    var path = 'http://api-fm.present-tlt.ru/master-page';
    var options = {
        data: {
            filter: '["and", ["=","number", "' + id + '"],["<=", "dateStart", "' + now + '"],[">=", "dateEnd", "' + now + '"]]'
        }
    };
    return this._uhr.get(path, options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            if (result.content.length == 0)
                self.$context.notFound();

            return result.content[0];
        })
        .then(function (page) {
            var pathM = 'http://api-fm.present-tlt.ru/master';
            var optionM = {
                data: {
                    filter: '["and", ["=", "id", "' + page.masterID + '"],["=","publicStatus", "1"]]',
                    expand: 'contacts,articles,comments,districts,albums,sales,schedule,videos,workCondition,callbacks,vkLikes,rubrika,tags,company'
                }
            };
            return self._uhr.get(pathM, optionM)
                .then(function (result) {
                    if (result.status.code >= 400 && result.status.code < 600) {
                        throw new Error(result.status.text);
                    }
                    if (result.content.length == 0)
                        self.$context.notFound();

                    var data = result.content[0];
                    data.services = JSON.parse(data.services);
                    data.isBlock = {
                        service: {
                            access: page.services,
                            name: "Услуги",
                            active: true
                        },
                        work: {
                            access: true,
                            name: "Условия работы",
                            active: true
                        },
                        sale: {
                            access: page.sales,
                            name: "Скидки и подарки",
                            active: (data.sales.length > 0)
                        },
                        about: {
                            access: true,
                            name: "О себе",
                            active: data.aboutEduc || data.aboutExp ||data.aboutAddInfo
                        },
                        article: {
                            access: page.articles,
                            name: "Полезно почитать",
                            active: (data.articles.length > 0)
                        },
                        photo: {
                            access: page.albums,
                            name: "Фото",
                            active: (data.albums.length > 0)
                        },
                        video: {
                            access: page.videos,
                            name: "Видео",
                            active: (data.videos.length > 0)
                        },
                        link: {
                            access: page.links,
                            name: "Ссылки",
                            active: (data.contacts.links)
                        },
                        review: {
                            access: page.comments,
                            name: "Отзывы и рекомендации",
                            active: true
                        }
                    };
                    data.page = page;
                    return data;
                });
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
MasterItem.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{"../../lib/util/DateFormat":91}],73:[function(require,module,exports){
'use strict';

module.exports = MasterList;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "master/masterList" store.
 * @param {UHR} $uhr Universal HTTP request.this
 * @constructor
 */
function MasterList($uhr) {
    this._uhr = $uhr;
    this._currentFeed = [];
    this.$context.setDependency('Tag');
}

MasterList.prototype._currentFeed = null;
MasterList.prototype._currentPage = 1;
MasterList.prototype._isFinished = false;

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
MasterList.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
MasterList.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
MasterList.prototype.load = function () {
    var self = this;

    return this.$context.getStoreData('Tag')
        .then(function (tag) {
            if (!tag.rubrika)
                return;
            self._clearFeed(tag);
            return self._loadDataPerPage(self._currentPage, tag.rubrika.id, tag.tag.id);
        })
        .then(function (result) {
            if (!result || result.length === 0) {
                self._isFinished = true;
                return self._currentFeed;
            } else {
                self._strucrurResult(result);
            }
            self._currentFeed = self._currentFeed.concat(result);
            return self._currentFeed;
        });
};
MasterList.prototype._clearFeed = function (tag) {
    this._currentRubrika = this._currentRubrika || tag.rubrika.id;
    this._currentTag = this._currentTag || tag.tag.id;
    if (this._currentRubrika != tag.rubrika.id || this._currentTag != tag.tag.id) {
        this._currentFeed = [];
        this._currentPage = 1;
        this._isFinished = false;
        this._currentRubrika = tag.rubrika.id;
        this._currentTag = tag.tag.id;
    }
};
MasterList.prototype._loadDataPerPage = function (page, rubrikaID, tagID) {
    var self = this;
    var path = 'http://api-fm.present-tlt.ru/master/active';
    var options = {
        data: {
            filter: '["and",["=", "rubrikaID", "' + rubrikaID + '"]]',
            expand: 'comments,sales,videos,vkLikes,albums,contacts,page,company',
            order: 'sort',
            page: page
        }
    };
    if (tagID) {
        path = 'http://api-fm.present-tlt.ru/master/bytag/' + tagID;
    }

    return self._uhr.get(path, options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            return result.content;
        });
};

MasterList.prototype._strucrurResult = function (result) {
    result.forEach(function (master) {
        master.services = JSON.parse(master.services);
        if (master.vkLikes) {
            master.vkLikes.countLikes = master.vkLikes.countLikes ? master.vkLikes.countLikes : 0;
        } else {
            master.vkLikes = {};
            master.vkLikes.countLikes = 0;
        }
    });
};
/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
MasterList.prototype.handleGetNextPage = function () {
    if (this._isFinished) {
        return null;
    }
    var self = this;
    return Promise.resolve()
        .then(function () {
            if (!self._currentFeed || self._currentFeed.length === 0) {
                return self.load();
            }
        })
        .then(function (d) {
            self._currentPage++;
            self.$context.changed();
        });

};

},{}],74:[function(require,module,exports){
'use strict';

module.exports = MasterSovety;

var util = require('util'),
		StorePaginator = require('../../lib/StorePaginator');

util.inherits(MasterSovety, StorePaginator);

function MasterSovety() {
	StorePaginator.call(this);
	this._path = 'http://api-fm.present-tlt.ru/article/active';
	this._options = {
		data: {
			order: 'id DESC'
		}
	};
	this._url = "/sovety/page/";
	this._catalog = this.$context.state.catalog;
	if (this._catalog) {
		this._options.data.filter = '[["=","rubrikaID","' + this._catalog + '"]]';
		this._url = "/sovety/catalog/" + this._catalog + "/page/";
	}
}
},{"../../lib/StorePaginator":90,"util":121}],75:[function(require,module,exports){
'use strict';

module.exports = MasterVideo;

var util = require('util'),
    StorePaginator = require('../../lib/StorePaginator');

util.inherits(MasterVideo, StorePaginator);

function MasterVideo() {
    StorePaginator.call(this);
    this._path = 'http://api-fm.present-tlt.ru/video/active';
    this._options = {
        data: {
            order: 'id DESC'
        }
    };
    this._url = "/video/page/";
    this._catalog = this.$context.state.catalog;
    if (this._catalog) {
        this._options.data.filter = '[["=","rubrikaID","' + this._catalog + '"]]';
        this._url = "/video/catalog/" + this._catalog + "/page/";
    }
}
},{"../../lib/StorePaginator":90,"util":121}],76:[function(require,module,exports){
'use strict';

module.exports = Recommended;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "master/Recommended" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Recommended($uhr) {
	this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Recommended.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Recommended.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Recommended.prototype.load = function () {
	// Here you can do any HTTP requests using this._uhr.
	// Please read details here https://github.com/catberry/catberry-uhr.
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Recommended.prototype.handleSomeAction = function () {
	// Here you can call this.$context.changed() if you know
	// that remote data source has been changed.
	// Also you can have many handle methods for other actions.
};

},{}],77:[function(require,module,exports){
'use strict';

module.exports = News;

var util = require('util'),
    StorePaginator = require('../../lib/StorePaginator');

util.inherits(News, StorePaginator);

function News() {
    StorePaginator.call(this);
    this._path = 'http://api-fm.present-tlt.ru/about-news';
    this._options = {
        data: {
            filter: '["and",["=","status","1"]]',
            order: 'date DESC'
        }
    };
    this._url = "/news/page/";
}
},{"../../lib/StorePaginator":90,"util":121}],78:[function(require,module,exports){
'use strict';

module.exports = NewsItem;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "other/NewsItem" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function NewsItem($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
NewsItem.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
NewsItem.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
NewsItem.prototype.load = function () {
    var self = this;
    var item = this.$context.state.item;
    var path = 'http://api-fm.present-tlt.ru/about-news';
    if (!item)
        return;

    var option = {
        data: {
            filter: '["and",["=","id","' + item + '"],["=", "status", "1"]]'
        }
    };
    return this._uhr.get(path, option)
        .then(function (result) {
            console.log(result);
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            if (result.content.length == 0)
                self.$context.notFound();

            return result.content[0];
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
NewsItem.prototype.handleSomeAction = function () {

    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{}],79:[function(require,module,exports){
'use strict';

module.exports = Recommendation;

var util = require('util'),
    StorePaginator = require('../../lib/StorePaginator');

util.inherits(Recommendation, StorePaginator);

function Recommendation() {
    StorePaginator.call(this);
    this._path = 'http://api-fm.present-tlt.ru/about-comment';
    this._url = "/recommendation/page/";
}
},{"../../lib/StorePaginator":90,"util":121}],80:[function(require,module,exports){
'use strict';
var dateFormat = require('../../lib/util/DateFormat');

module.exports = Vacancy;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "other/vacancy" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Vacancy($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Vacancy.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Vacancy.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Vacancy.prototype.load = function () {
    var path = 'http://api-fm.present-tlt.ru/about-vacancy';
    var now = Date.now();
    now = dateFormat(now, "yyyy-mm-dd");
    now = "2014-03-20"; //для теста - убрать!

    var option = {
        data: {
            filter: '["and",["<=","createDate","' + now + '"],[">=", "endDate", "' + now + '"],["=", "status", "1"]]'
        }
    };
    return this._uhr.get(path, option)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }

            return result.content;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Vacancy.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{"../../lib/util/DateFormat":91}],81:[function(require,module,exports){
'use strict';

var dateFormat = require('../../lib/util/DateFormat');

module.exports = VacancyItem;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "other/vacancyItem" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function VacancyItem($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
VacancyItem.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
VacancyItem.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
VacancyItem.prototype.load = function () {
    var self = this;
    var id = this.$context.state.item;
    if (!id)
        return;
    var path = 'http://api-fm.present-tlt.ru/about-vacancy';
    var now = Date.now();
    now = dateFormat(now, "yyyy-mm-dd");
    now = "2014-03-20"; //для теста - убрать!

    var option = {
        data: {
            filter: '["and",["=", "id", "' + id + '"],["<=","createDate","' + now + '"],[">=", "endDate", "' + now + '"],["=", "status", "1"]]'
        }
    };
    return this._uhr.get(path, option)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            if (result.content.length == 0)
                self.$context.notFound();
            console.log(result.content[0]);
            return result.content[0];
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
VacancyItem.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{"../../lib/util/DateFormat":91}],82:[function(require,module,exports){
'use strict';

module.exports = Rubrika;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "rubrika/Rubrika" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Rubrika($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Rubrika.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Rubrika.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
Rubrika.prototype.load = function () {
    var self = this;
    var rubrika = this.$context.state.rubrika;
    var podrubrika = this.$context.state.podrubrika;

    if (!podrubrika) {
        self.$context.notFound();
    }

    var url = 'http://api-fm.present-tlt.ru/rubrika';
    var options = {
        data: {
            filter: '["and", ["=", "unique", "' + podrubrika + '"],["=","status","1"]]',
            expand: "tags,parent,nearby,seo"
        }
    };
    return this._uhr.get(url, options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            if (result.content.length == 0)
                self.$context.notFound();

            var data = result.content[0];

            if (data.parentID == 0)
                self.$context.notFound();

            if (rubrika != data.parent.unique)
                self.$context.notFound();

            data.podrubrika = podrubrika;
            data.rubrika = rubrika;
            return data;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
},{}],83:[function(require,module,exports){
'use strict';

module.exports = Rubrikator;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "rubrika/Rubrikator" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function Rubrikator($uhr) {
    this._uhr = $uhr;
    this._path = 'http://api-fm.present-tlt.ru/rubrika';
    this._options = {
        data: {
            filter: '["and",["=", "status", "1"]]',
            expand: 'masterCount',
            order: 'sort',
            limit: 300
        }
    };
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
Rubrikator.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
Rubrikator.prototype.$lifetime = 600000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */

Rubrikator.prototype.load = function () {
    return this._uhr.get(this._path, this._options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            var data = result.content;
            var podrubriksTree = {};
            var rootTree = {};
            var rootTreeCount = {};

            Object.keys(data)
                .forEach(function (key) {
                    var el = data[key];
                    if (el.parentID == 0) {
                        rootTree[el.sort] = {el: el};
                    } else {
                        if (!podrubriksTree[el.parentID])
                            podrubriksTree[el.parentID] = [];
                        podrubriksTree[el.parentID].push(el);
                        rootTreeCount[el.parentID] = +el.masterCount + (rootTreeCount[el.parentID] ? rootTreeCount[el.parentID] :  0);
                    }
                });

            Object.keys(rootTree)
                .forEach(function (key) {
                    podrubriksTree[rootTree[key].el.id].sort(function (a, b) {
                        return a.name > b.name;
                    });
                    rootTree[key].podrubriks = podrubriksTree[rootTree[key].el.id];
                    rootTree[key].count = rootTreeCount[rootTree[key].el.id];
                });
            return rootTree;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
Rubrikator.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{}],84:[function(require,module,exports){
'use strict';

module.exports = RubrikatorCompany;

var util = require('util'),
		Rubrikator = require('./Rubrikator');

util.inherits(RubrikatorCompany, Rubrikator);

function RubrikatorCompany() {
	Rubrikator.call(this);
	this._path = 'http://api-fm.present-tlt.ru/rubrika-company';
	this._options = {
		data: {
			filter: '["and",["=", "status", "1"]]',
			order: 'sort',
			limit: 200
		}
	};
}
},{"./Rubrikator":83,"util":121}],85:[function(require,module,exports){
'use strict';

module.exports = RubrikatorParent;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "rubrika/RubrikatorParent" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function RubrikatorParent($uhr) {
    this._uhr = $uhr;
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
RubrikatorParent.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
RubrikatorParent.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
RubrikatorParent.prototype.load = function () {
    var path = 'http://api-fm.present-tlt.ru/rubrika';
    var options = {
        data: {
            filter: '["and",["=", "parentID", "0"]]',
            order: 'name',
            limit: 200
        }
    };
    return this._uhr.get(path, options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            return result.content;
        });
};

/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
RubrikatorParent.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{}],86:[function(require,module,exports){
'use strict';

module.exports = RubrikatorSale;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "rubrika/rubrikatorSale" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function RubrikatorSale($uhr) {
    this._uhr = $uhr;
    this._path = 'http://api-fm.present-tlt.ru/rubrika';
    this._options = {
        data: {
            filter: '["and",["=", "status", "1"]]',
            expand: 'saleCount',
            order: 'sort',
            limit: 300
        }
    };
    this._groups = [
        {
            name: "Ремонт, строительство, интерьер",
            childrenID: [86, 87, 88, 102]
        },
        {
            name: "Здоровье, красота, мода",
            childrenID: [24, 143, 113, 27, 132]
        },
        {
            name: "Отдых и праздники",
            childrenID: [36, 103, 125, 149]
        },
        {
            name: "Консультации",
            childrenID: [5, 114]
        },
        {
            name: "Автоуслуги и доставка",
            childrenID: [19, 106]
        },
        {
            name: "Недвижимость",
            childrenID: [1]
        },
        {
            name: "Техника",
            childrenID: [42]
        },
        {
            name: "Дригие услуги",
            childrenID: []
        }
    ];
    this._parentToGroup = {};
    this.loadRubriks = false;
    var self = this;
    for (var i = 0; i < this._groups.length; ++i) {
        var el = this._groups[i];
        el.childrenID.forEach(function (id) {
            self._parentToGroup[id] = i;
        });
    }
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
RubrikatorSale.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
RubrikatorSale.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
RubrikatorSale.prototype.load = function () {
    var self = this;
    var currentRubrika = self.$context.state.catalog;

    if (self.loadRubriks) {
        return {
            active: currentRubrika,
            list: self._groups
        }
    }
    return this._loadData()
        .then(function () {
            self.loadRubriks = true;
            return {
                active: currentRubrika,
                list: self._groups
            }
        });
};
/**
 * Загрузка рубрикатора и перестройка под нужный формат
 * @returns {*}
 * @private
 */
RubrikatorSale.prototype._loadData = function () {
    var self = this;

    return this._uhr.get(this._path, this._options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            var data = result.content;
            var dataLevel = {};

            //сначата выстраиваем древовидную структуру
            data.forEach(function (el) {
                if (el.parentID == 0) {
                    if (!dataLevel[el.id])
                        dataLevel[el.id] = {root: el, child: [], saleCount: 0};
                    dataLevel[el.id].root = el;

                    if (self._parentToGroup[el.id] == undefined) {
                        self._groups[self._groups.length - 1].childrenID.push(el.id);
                    }
                } else {
                    if (!dataLevel[el.parentID])
                        dataLevel[el.parentID] = {root: {}, child: [], saleCount: 0};

                    dataLevel[el.parentID].saleCount += +el.saleCount;
                    dataLevel[el.parentID].child.push(el);
                }
            });

            //затем прицепляем к главному дереву
            self._groups.forEach(function (el) {
                el.children = [];
                el.saleCount = 0;

                if (el.childrenID.length == 1) {
                    var id = el.childrenID[0];
                    el.saleCount = dataLevel[id].saleCount;
                    dataLevel[id].root = false;
                    el.children.push(dataLevel[id]);
                } else {
                    el.childrenID.forEach(function (id) {
                        el.saleCount += dataLevel[id].saleCount;
                        el.children.push(dataLevel[id]);
                    });
                }
            });
        });
};
/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
RubrikatorSale.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{}],87:[function(require,module,exports){
'use strict';
module.exports = SaleByRubrika;

var util = require('util'),
    StorePaginator = require('../../lib/StorePaginator');
/**
 * наследуемся от пагинатора для постраничной навигации
 */
util.inherits(SaleByRubrika, StorePaginator);

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * Creates new instance of the "sale/SaleByRubrika" store.
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function SaleByRubrika($uhr) {
    StorePaginator.call(this);

    this.$context.setDependency("rubrika/RubrikatorSale");
    this._path = 'http://api-fm.present-tlt.ru/sale/active';
    this._options = {
        data: {
            expand: 'owner'
        }
    };
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
SaleByRubrika.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
SaleByRubrika.prototype.$lifetime = 60000;
/**
 * Хранилище для рубрикатора
 * @type {Array}
 * @private
 */
SaleByRubrika.prototype._rubrikator = [];

/**
 * Устанавливаем значение для url в пагинаторе
 * Вызовем этот метод, когда узнаем текущую рубрику
 * @param rubrika
 * @private
 */
SaleByRubrika.prototype._setUrlForPage = function (rubrika) {
    this._url = "/sale/catalog/" + rubrika + "/page/";
};

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
SaleByRubrika.prototype.load = function () {
    var self = this;
    return Promise.resolve(1)
        .then(function () {
            // выясним текущую страницу
            return self.$context.sendAction("Paginator", "getCurrentPage");
        })
        .then(function (page) {
            //установим значения для страницы
            self._currentPage = page;
            self._options.data.page = page;
            //выясним текущие данные по рубрике
            return self.$context.getStoreData("rubrika/RubrikatorSale")
        })
        .then(function (rubrikator) {
            //запомним весь рубрикатор в переменной
            self._rubrikator = rubrikator.list;
            //если нет активной рубрики значит это главная страница
            if (!rubrikator.active)
                return self._getDataForMainPage();//сформируем данные для главной страницы

            //иначее сформируем данные для рубрики
            //но для начала установим url для навигации по текущей рубрике
            self._setUrlForPage(rubrikator.active);
            return self._getDataForRubrikaPage(rubrikator.active);
        });
};
/**
 * Формирование данных для главной страницы каталога скидок
 * @returns {Promise}
 * @private
 */
SaleByRubrika.prototype._getDataForMainPage = function () {
    var self = this;
    var promises = [];//массив для промисов

    //Сформируем список id по группам рубрик, для того чтобы достать по 4 акции для каждой группы
    this._rubrikator.forEach(function (el) {
        var listID = [];
        el.children.forEach(function (child) {
            child.child.forEach(function (rubrika) {
                listID.push(rubrika.id);
            });
        });
        //для каждого делаем запрос к api
        promises.push(self._getSaleData(listID));
    });
    //ждем когда все промисы выполнятся
    return Promise.all(promises)
        //затем добавим к данным по рубрикам принадлежащие им скидки
        .then(function (sale) {
            for (var i = 0; i < self._rubrikator.length; i++) {
                self._rubrikator[i].sale = sale[i];
            }
            // и отдадим все это в hbs
            return self._rubrikator;
        });
};

/**
 * Формирование данных для страницы рубрики каталога скидок
 * @param currentRubrika текуая рубрика
 * @returns {Promise}
 * @private
 */
SaleByRubrika.prototype._getDataForRubrikaPage = function (currentRubrika) {
    var self = this;
    var listID = [];

    //переберем весь рубрикатор и отметим активностью те ветви которые необходимо открыть
    //также сразу подготовим список id для запроса по акциям
    this._rubrikator.forEach(function (el) {
        el.active = false;

        el.children.forEach(function (child) {
            if (child.root && child.root.id == currentRubrika) {
                el.active = true;
                child.root.active = true;
                currentRubrika = child.root;

                child.child.forEach(function (rubrika) {
                    rubrika.active = false;
                    listID.push(rubrika.id);
                });
            } else {
                child.child.forEach(function (rubrika) {
                    if (rubrika.id == currentRubrika) {
                        rubrika.active = true;
                        el.active = true;
                        child.root.active = true;
                        currentRubrika = rubrika;
                        listID.push(rubrika.id);
                    } else {
                        rubrika.active = false;
                        if (child.root)
                            child.root.active = false;
                    }
                });
            }
        });
    });

    this._options.data.filter = '["and", ["in", "rubrikaID",[' + listID.join(',') + ']]]';
    this._options.data.limit = 20;
    return this._uhr.get(this._path, this._options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            self._pageCount = result.status.headers['x-pagination-page-count'];
            return result.content;
        })
        .then(function (sale) {
            return {
                currentPage: self._currentPage,
                currentRubrika: currentRubrika,
                rubrikator: self._rubrikator,
                sale: sale
            };
        });
};

/**
 * Возвращает список акций по списку id рубрики
 * @param id масиив список id рубрик
 * @returns {*}
 * @private
 */
SaleByRubrika.prototype._getSaleData = function (id) {
    this._options.data.filter = '["and", ["in", "rubrikaID",[' + id.join(',') + ']]]';
    this._options.data.limit = 4;
    return this._uhr.get(this._path, this._options)
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }
            return result.content;
        });
};


/**
 * Handles action named "some-action" from any component.
 * @returns {Promise<Object>|Object|null|undefined} Response to component.
 */
SaleByRubrika.prototype.handleSomeAction = function () {
    // Here you can call this.$context.changed() if you know
    // that remote data source has been changed.
    // Also you can have many handle methods for other actions.
};

},{"../../lib/StorePaginator":90,"util":121}],88:[function(require,module,exports){
module.exports={
	"title": "FaceMaster.ru",
	"isRelease": true
}

},{}],89:[function(require,module,exports){
module.exports={
  "main": {
    "title": "Поиск Мастеров в сфере услуг",
    "description": "Поиск Мастеров в сфере услуг",
    "keywords": "поиск услуг, мастера, специалисты Тольятти"
  },
  "catalog": {
    "title": "Каталог услуг",
    "description": "",
    "keywords": ""
  },
  "request": {
    "title": "Заказать услугу",
    "description": "",
    "keywords": ""
  },
  "registration": {
    "title": "Стать Мастером",
    "description": "",
    "keywords": ""
  },
  "login": {
    "title": "Вход для Мастеров",
    "description": "",
    "keywords": ""
  },
  "sale": {
    "title": " Каталог скидки и подарки",
    "description": "",
    "keywords": ""
  },
  "video": {
    "title": "Видео Мастеров",
    "description": "",
    "keywords": ""
  },
  "sovety": {
    "title": "Секреты мастеров",
    "description": "",
    "keywords": ""
  },
  "company": {
    "title": "Каталог компаний",
    "description": "",
    "keywords": ""
  },
  "recommendation": {
    "title": "Рекомендации Мастеров",
    "description": "Рекомендации Мастеров",
    "keywords": "отзывы, рекомендации"
  },
  "news": {
    "title": "Новости",
    "description": "",
    "keywords": ""
  },
  "vacancy": {
    "title": "Вакансии",
    "description": "",
    "keywords": ""
  },
  "oferta": {
    "title": "Оферта",
    "description": "",
    "keywords": ""
  },
  "contact": {
    "title": "Контакты",
    "description": "",
    "keywords": ""
  },
  "feedback": {
    "title": "Обратная связь",
    "description": "",
    "keywords": ""
  },
  "master-rubrika": {},
  "master-page": {},
  "news-item": {},
  "vacancy-item": {},
  "konkurs-item": {}
}
},{}],90:[function(require,module,exports){
'use strict';

module.exports = StorePaginator;

/*
 * This is a Catberry Store file.
 * More details can be found here
 * https://github.com/catberry/catberry/blob/master/docs/index.md#stores
 */

/**
 * @param {UHR} $uhr Universal HTTP request.
 * @constructor
 */
function StorePaginator() {
    this._uhr = this.$context.locator.resolve('uhr');
    this._pageCount = 1;
    this._currentPage = 1;
    this._path = '';
    this._options = {data: {}};
    this._url = '';

    this.$context.setDependency("Paginator");
}

/**
 * Current universal HTTP request to do it in isomorphic way.
 * @type {UHR}
 * @private
 */
StorePaginator.prototype._uhr = null;

/**
 * Current lifetime of data (in milliseconds) that is returned by this store.
 * @type {number} Lifetime in milliseconds.
 */
StorePaginator.prototype.$lifetime = 60000;

/**
 * Loads data from remote source.
 * @returns {Promise<Object>|Object|null|undefined} Loaded data.
 */
StorePaginator.prototype.load = function () {
    var self = this;
    var path = this._path;

    return Promise.resolve(1)
        .then(function () {
            return self.$context.sendAction("Paginator", "getCurrentPage");
        })
        .then(function (page) {
            self._currentPage = page;
            self._options.data.page = page;
            return self._uhr.get(path, self._options)
        })
        .then(function (result) {
            if (result.status.code >= 400 && result.status.code < 600) {
                throw new Error(result.status.text);
            }

            self._pageCount = result.status.headers['x-pagination-page-count'];
            return {
                currentPage: self._currentPage,
                data: result.content
            };
        });
};


StorePaginator.prototype.handleGetPaginator = function () {
    if (!this._pageCount || this._pageCount == 1) {
        return {
            "is-paginator": false
        }
    }
    return {
        "is-paginator": true,
        "url": this._url,
        "count": this._pageCount,
        "current": this._currentPage
    };
};
},{}],91:[function(require,module,exports){
/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

var dateFormat = function () {
    var	token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
        timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
        timezoneClip = /[^-+\dA-Z]/g,
        pad = function (val, len) {
            val = String(val);
            len = len || 2;
            while (val.length < len) val = "0" + val;
            return val;
        };

    // Regexes and supporting functions are cached through closure
    return function (date, mask, utc) {
        var dF = dateFormat;

        // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
        if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
            mask = date;
            date = undefined;
        }

        // Passing date through Date applies Date.parse, if necessary
        date = date ? new Date(date) : new Date;
        if (isNaN(date)) throw SyntaxError("invalid date");

        mask = String(dF.masks[mask] || mask || dF.masks["default"]);

        // Allow setting the utc argument via the mask
        if (mask.slice(0, 4) == "UTC:") {
            mask = mask.slice(4);
            utc = true;
        }

        var	_ = utc ? "getUTC" : "get",
            d = date[_ + "Date"](),
            D = date[_ + "Day"](),
            m = date[_ + "Month"](),
            y = date[_ + "FullYear"](),
            H = date[_ + "Hours"](),
            M = date[_ + "Minutes"](),
            s = date[_ + "Seconds"](),
            L = date[_ + "Milliseconds"](),
            o = utc ? 0 : date.getTimezoneOffset(),
            flags = {
                d:    d,
                dd:   pad(d),
                ddd:  dF.i18n.dayNames[D],
                dddd: dF.i18n.dayNames[D + 7],
                m:    m + 1,
                mm:   pad(m + 1),
                mmm:  dF.i18n.monthNames[m],
                mmmm: dF.i18n.monthNames[m + 12],
                yy:   String(y).slice(2),
                yyyy: y,
                h:    H % 12 || 12,
                hh:   pad(H % 12 || 12),
                H:    H,
                HH:   pad(H),
                M:    M,
                MM:   pad(M),
                s:    s,
                ss:   pad(s),
                l:    pad(L, 3),
                L:    pad(L > 99 ? Math.round(L / 10) : L),
                t:    H < 12 ? "a"  : "p",
                tt:   H < 12 ? "am" : "pm",
                T:    H < 12 ? "A"  : "P",
                TT:   H < 12 ? "AM" : "PM",
                Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
                o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
            };

        return mask.replace(token, function ($0) {
            return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
        });
    };
}();

// Some common format strings
dateFormat.masks = {
    "default":      "ddd mmm dd yyyy HH:MM:ss",
    shortDate:      "m/d/yy",
    mediumDate:     "mmm d, yyyy",
    longDate:       "mmmm d, yyyy",
    fullDate:       "dddd, mmmm d, yyyy",
    shortTime:      "h:MM TT",
    mediumTime:     "h:MM:ss TT",
    longTime:       "h:MM:ss TT Z",
    isoDate:        "yyyy-mm-dd",
    isoTime:        "HH:MM:ss",
    isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
    isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};

// Internationalization strings
dateFormat.i18n = {
    dayNames: [
        "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
    ],
    monthNames: [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
        "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
    ]
};



module.exports = dateFormat;
},{}],92:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = Catberry;

var util = require('util'),
	CatberryBase = require('../lib/base/CatberryBase');

util.inherits(Catberry, CatberryBase);

/**
 * Creates new instance of the browser version of Catberry.
 * @constructor
 * @extends CatberryBase
 */
function Catberry() {
	CatberryBase.call(this);
}

/**
 * Current request router.
 * @type {RequestRouter}
 * @private
 */
Catberry.prototype._router = null;

/**
 * Wraps current HTML document with Catberry event handlers.
 */
Catberry.prototype.wrapDocument = function () {
	this._router = this.locator.resolve('requestRouter');
};

/**
 * Starts Catberry application when DOM is ready.
 * @returns {Promise} Promise for nothing.
 */
Catberry.prototype.startWhenReady = function () {
	if (window.catberry) {
		return Promise.resolve();
	}
	var self = this;

	return new Promise(function (fulfill) {
		window.document.addEventListener('DOMContentLoaded', function () {
			self.wrapDocument();
			window.catberry = self;
			fulfill();
		});
	});
};
},{"../lib/base/CatberryBase":106,"util":121}],93:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = CookieWrapper;

var util = require('util'),
	CookieWrapperBase = require('../lib/base/CookieWrapperBase');

util.inherits(CookieWrapper, CookieWrapperBase);

/**
 * Creates new instance of the browser cookie wrapper.
 * @param {Window} $window Window object.
 * @constructor
 */
function CookieWrapper($window) {
	CookieWrapperBase.call(this);
	this._window = $window;
}

/**
 * Current browser window.
 * @type {Window}
 * @private
 */
CookieWrapper.prototype._window = null;

/**
 * Gets current cookie string.
 * @returns {string} Cookie string.
 */
CookieWrapper.prototype.getCookieString = function () {
	return this._window.document.cookie ?
		this._window.document.cookie.toString() :
		'';
};

/**
 * Sets cookie to this wrapper.
 * @param {Object} cookieSetup Cookie setup object.
 * @param {string} cookieSetup.key Cookie key.
 * @param {string} cookieSetup.value Cookie value.
 * @param {number?} cookieSetup.maxAge Max cookie age in seconds.
 * @param {Date?} cookieSetup.expires Expire date.
 * @param {string?} cookieSetup.path URI path for cookie.
 * @param {string?} cookieSetup.domain Cookie domain.
 * @param {boolean?} cookieSetup.secure Is cookie secured.
 * @param {boolean?} cookieSetup.httpOnly Is cookie HTTP only.
 * @returns {string} Cookie setup string.
 */
CookieWrapper.prototype.set = function (cookieSetup) {
	var cookie = this._convertToCookieSetup(cookieSetup);
	this._window.document.cookie = cookie;
	return cookie;
};
},{"../lib/base/CookieWrapperBase":107,"util":121}],94:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = DocumentRenderer;

var util = require('util'),
	morphdom = require('morphdom'),
	errorHelper = require('../lib/helpers/errorHelper'),
	moduleHelper = require('../lib/helpers/moduleHelper'),
	hrTimeHelper = require('../lib/helpers/hrTimeHelper'),
	DocumentRendererBase = require('../lib/base/DocumentRendererBase');

util.inherits(DocumentRenderer, DocumentRendererBase);

var WARN_ID_NOT_SPECIFIED = 'Component "%s" does not have an ID, skipping...',
	WARN_SAME_ID =
		'The duplicated ID "%s" has been found, skipping component "%s"...';

var SPECIAL_IDS = {
		$$head: '$$head',
		$$document: '$$document'
	},
	TAG_NAMES = {
		TITLE: 'TITLE',
		HTML: 'HTML',
		HEAD: 'HEAD',
		BASE: 'BASE',
		STYLE: 'STYLE',
		SCRIPT: 'SCRIPT',
		NOSCRIPT: 'NOSCRIPT',
		META: 'META',
		LINK: 'LINK'
	},
	NODE_TYPES = {
		ELEMENT_NODE: 1,
		TEXT_NODE: 3,
		PROCESSING_INSTRUCTION_NODE: 7,
		COMMENT_NODE: 8
	},
	ERROR_CREATE_WRONG_ARGUMENTS = 'Tag name should be a string ' +
		'and attributes should be an object',
	ERROR_CREATE_WRONG_NAME = 'Component for tag "%s" not found',
	ERROR_CREATE_WRONG_ID = 'The ID is not specified or already used',
	// http://www.w3.org/TR/2015/WD-uievents-20150319/#event-types-list
	NON_BUBBLING_EVENTS = {
		abort: true,
		blur: true,
		error: true,
		focus: true,
		load: true,
		mouseenter: true,
		mouseleave: true,
		resize: true,
		unload: true
	};

/**
 * Creates new instance of the document renderer.
 * @param {ServiceLocator} $serviceLocator Locator to resolve dependencies.
 * @constructor
 * @extends DocumentRendererBase
 */
function DocumentRenderer($serviceLocator) {
	DocumentRendererBase.call(this, $serviceLocator);
	this._componentInstances = Object.create(null);
	this._componentElements = Object.create(null);
	this._componentBindings = Object.create(null);
	this._currentChangedStores = Object.create(null);
	this._window = $serviceLocator.resolve('window');
	this._logger = $serviceLocator.resolve('logger');
	this._config = $serviceLocator.resolve('config');
	this._storeDispatcher = $serviceLocator.resolve('storeDispatcher');

	var self = this;

	this._eventBus.on('storeChanged', function (storeName) {
		self._currentChangedStores[storeName] = true;
		if (self._isStateChanging) {
			return;
		}
		self._updateStoreComponents();
	});
}

/**
 * Current application config.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._config = null;

/**
 * Current logger.
 * @type {Logger}
 * @private
 */
DocumentRenderer.prototype._logger = null;

/**
 * Current store dispatcher.
 * @type {StoreDispatcher}
 * @protected
 */
DocumentRenderer.prototype._storeDispatcher = null;

/**
 * Current set of component instances by unique keys.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._componentInstances = null;

/**
 * Current set of component elements by unique keys.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._componentElements = null;

/**
 * Current set of component bindings by unique keys.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._componentBindings = null;

/**
 * Current routing context.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._currentRoutingContext = null;

/**
 * Current set of changed stores.
 * @type {Object}
 * @private
 */
DocumentRenderer.prototype._currentChangedStores = null;

/**
 * Current promise for rendered page.
 * @type {Promise}
 * @private
 */
DocumentRenderer.prototype._renderedPromise = null;

/**
 * Current state of updating components.
 * @type {boolean}
 * @private
 */
DocumentRenderer.prototype._isUpdating = false;

/**
 * Current awaiting routing.
 * @type {{state: Object, routingContext: Object}}
 * @private
 */
DocumentRenderer.prototype._awaitingRouting = null;

/**
 * Sets the initial state of the application.
 * @param {Object} state New state of application.
 * @param {Object} routingContext Routing context.
 * @returns {Promise} Promise for nothing.
 */
DocumentRenderer.prototype.initWithState = function (state, routingContext) {
	var self = this;
	return self._getPromiseForReadyState()
		.then(function () {
			self._currentRoutingContext = routingContext;
			return self._storeDispatcher.setState(state, routingContext);
		})
		.then(function () {
			var components = self._componentLoader.getComponentsByNames(),
				elements = self._findComponents(
					self._window.document.body, components, true
				);
			elements.unshift(self._window.document.head);
			elements.unshift(self._window.document.documentElement);
			return self._initialWrap(components, elements);
		});
};

/**
 * Renders new state of application.
 * @param {Object} state New state of application.
 * @param {Object} routingContext Routing context.
 * @returns {Promise} Promise for nothing.
 */
DocumentRenderer.prototype.render = function (state, routingContext) {
	this._awaitingRouting = {
		state: state,
		routingContext: routingContext
	};
	if (this._isStateChanging) {
		return this._renderedPromise;
	}

	// we should set this flag to avoid "storeChanged"
	// event handling for now
	this._isStateChanging = true;

	var self = this;
	self._renderedPromise = this._getPromiseForReadyState()
		.then(function () {
			// and then we update all components of these stores in a batch.
			return self._updateStoreComponents();
		})
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
		})
		.then(function () {
			self._isStateChanging = false;
		});

	return this._renderedPromise;
};

/**
 * Renders component into HTML element.
 * @param {Element} element HTML element of component
 * @param {Object?} renderingContext Rendering context for group rendering.
 */
DocumentRenderer.prototype.renderComponent =
	function (element, renderingContext) {
		var self = this;
		return this._getPromiseForReadyState()
			.then(function () {
				var id = self._getId(element);
				if (!id) {
					self._logger.warn(
						util.format(WARN_ID_NOT_SPECIFIED, componentName)
					);
					return;
				}

				if (!renderingContext) {
					renderingContext = self._createRenderingContext([]);
					renderingContext.rootIds[id] = true;
				}

				var componentName = moduleHelper.getOriginalComponentName(
						element.tagName
					),
					hadChildren = element.hasChildNodes(),
					component = renderingContext.components[componentName],
					instance = self._componentInstances[id];

				if (!component) {
					return;
				}

				if (id in renderingContext.renderedIds) {
					self._logger.warn(
						util.format(WARN_SAME_ID, id, componentName)
					);
					return;
				}

				renderingContext.renderedIds[id] = true;

				if (!instance) {
					component.constructor.prototype.$context =
						self._getComponentContext(component, element);
					instance = self._serviceLocator.resolveInstance(
						component.constructor, renderingContext.config
					);
					instance.$context = component.constructor.prototype.$context;
					self._componentInstances[id] = instance;
				}

				var eventArgs = {
					name: componentName,
					context: instance.$context
				};

				self._componentElements[id] = element;

				var startTime = hrTimeHelper.get();
				self._eventBus.emit('componentRender', eventArgs);

				return Promise.resolve()
					.then(function () {
						// we need unbind the whole hierarchy only at
						// the beginning and not for new elements
						if (!(id in renderingContext.rootIds) ||
							!hadChildren) {
							return;
						}

						return self._unbindAll(element, renderingContext);
					})
					.catch(function (reason) {
						self._eventBus.emit('error', reason);
					})
					.then(function () {
						if (instance.$context.element !== element) {
							instance.$context = self._getComponentContext(
								component, element
							);
						}
						var renderMethod = moduleHelper.getMethodToInvoke(
							instance, 'render'
						);
						return moduleHelper.getSafePromise(renderMethod);
					})
					.then(function (dataContext) {
						return component.template.render(dataContext);
					})
					.catch(function (reason) {
						return self._handleRenderError(
							element, component, reason
						);
					})
					.then(function (html) {
						var isHead = element.tagName === TAG_NAMES.HEAD;
						if (html === '' && isHead) {
							return;
						}
						var tmpElement = self._createTemporaryElement(element);
						tmpElement.innerHTML = html;

						if (isHead) {
							self._mergeHead(element, tmpElement);
							return;
						}

						morphdom(element, tmpElement, {
							onBeforeMorphElChildren: function (foundElement) {
								return foundElement === element ||
									!self._isComponent(
										renderingContext.components,
										foundElement
									);
							}
						});

						var promises = self._findComponents(
							element, renderingContext.components, false
						)
							.map(function (innerComponent) {
								return self.renderComponent(
									innerComponent, renderingContext
								);
							});
						return Promise.all(promises);
					})
					.then(function () {
						eventArgs.hrTime = hrTimeHelper.get(startTime);
						eventArgs.time = hrTimeHelper.toMilliseconds(
							eventArgs.hrTime
						);
						self._eventBus.emit('componentRendered', eventArgs);
						return self._bindComponent(element);
					})
					.then(function () {
						// collecting garbage only when
						// the entire rendering is finished
						if (!(id in renderingContext.rootIds) ||
							!hadChildren) {
							return;
						}
						self._collectRenderingGarbage(renderingContext);
					})
					.catch(function (reason) {
						self._eventBus.emit('error', reason);
					});
			});
	};

/**
 * Gets component instance by ID.
 * @param {string} id Component ID.
 * @returns {Object|null} Component instance.
 */
DocumentRenderer.prototype.getComponentById = function (id) {
	return this._componentInstances[id] || null;
};

/**
 * Gets component instance by a DOM element.
 * @param {Element} element Component's Element.
 * @returns {Object|null} Component instance.
 */
DocumentRenderer.prototype.getComponentByElement = function (element) {
	if (!element) {
		return null;
	}
	var id = element.getAttribute(moduleHelper.ATTRIBUTE_ID);
	return this.getComponentById(id);
};

/**
 * Checks that every instance of component has element on the page and
 * removes all references to components removed from DOM.
 * @returns {Promise} Promise for nothing.
 */
DocumentRenderer.prototype.collectGarbage = function () {
	var self = this;
	return this._getPromiseForReadyState()
		.then(function () {
			var promises = [];
			Object.keys(self._componentElements)
				.forEach(function (id) {
					if (SPECIAL_IDS.hasOwnProperty(id)) {
						return;
					}
					var element = self._window.document.getElementById(id);
					if (element) {
						return;
					}

					var promise = self._unbindComponent(self._componentElements[id])
						.then(function () {
							self._removeComponent(id);
						});
					promises.push(promise);
				});
			return Promise.all(promises);
		});
};

/**
 * Creates and renders component element.
 * @param {string} tagName Name of HTML tag.
 * @param {Object} attributes Element attributes.
 * @returns {Promise<Element>} Promise for HTML element with rendered component.
 */
DocumentRenderer.prototype.createComponent = function (tagName, attributes) {
	if (typeof (tagName) !== 'string' || !attributes ||
		typeof (attributes) !== 'object') {
		return Promise.reject(
			new Error(ERROR_CREATE_WRONG_ARGUMENTS)
		);
	}

	var self = this;
	return this._getPromiseForReadyState()
		.then(function () {
			var components = self._componentLoader.getComponentsByNames(),
				componentName = moduleHelper.getOriginalComponentName(tagName);

			if (moduleHelper.isHeadComponent(componentName) ||
				moduleHelper.isDocumentComponent(componentName) ||
				!(componentName in components)) {
				return Promise.reject(
					new Error(util.format(ERROR_CREATE_WRONG_NAME, tagName))
				);
			}

			var safeTagName = moduleHelper.getTagNameForComponentName(componentName);

			var id = attributes[moduleHelper.ATTRIBUTE_ID];
			if (!id || id in self._componentInstances) {
				return Promise.reject(new Error(ERROR_CREATE_WRONG_ID));
			}

			var element = self._window.document.createElement(safeTagName);
			Object.keys(attributes)
				.forEach(function (attributeName) {
					element.setAttribute(attributeName, attributes[attributeName]);
				});

			return self.renderComponent(element)
				.then(function () {
					return element;
				});
		});
};

/**
 * Clears all references to removed components during rendering process.
 * @param {Object} renderingContext Context of rendering.
 * @private
 */
DocumentRenderer.prototype._collectRenderingGarbage =
	function (renderingContext) {
		var self = this;
		Object.keys(renderingContext.unboundIds)
			.forEach(function (id) {
				// this component has been rendered again and we do not need to
				// remove it.
				if (id in renderingContext.renderedIds) {
					return;
				}

				// if someone added an element with the same ID during the
				// rendering process
				if (self._window.document.getElementById(id) !== null) {
					return;
				}

				self._removeComponent(id);
			});
	};

/**
 * Unbinds all event handlers from specified component and all it's descendants.
 * @param {Element} element Component HTML element.
 * @param {Object} renderingContext Context of rendering.
 * @returns {Promise} Promise for nothing.
 * @private
 */
DocumentRenderer.prototype._unbindAll = function (element, renderingContext) {
	var self = this,
		rootId = this._getId(element),
		promises = [];

	self._findComponents(element, renderingContext.components, true)
		.forEach(function (innerElement) {
			var id = self._getId(innerElement);
			renderingContext.unboundIds[id] = true;
			promises.push(self._unbindComponent(innerElement));
		});

	renderingContext.unboundIds[rootId] = true;
	promises.push(this._unbindComponent(element));

	return Promise.all(promises);
};

/**
 * Unbinds all event handlers from specified component.
 * @param {Element} element Component HTML element.
 * @returns {Promise} Promise for nothing.
 * @private
 */
DocumentRenderer.prototype._unbindComponent = function (element) {
	var id = this._getId(element),
		self = this,
		instance = this._componentInstances[id];
	if (!instance) {
		return Promise.resolve();
	}
	if (id in this._componentBindings) {
		Object.keys(this._componentBindings[id])
			.forEach(function (eventName) {
				element.removeEventListener(
					eventName,
					self._componentBindings[id][eventName].handler,
					NON_BUBBLING_EVENTS.hasOwnProperty(eventName)
				);
			});
		delete this._componentBindings[id];
	}
	var unbindMethod = moduleHelper.getMethodToInvoke(instance, 'unbind');
	return moduleHelper.getSafePromise(unbindMethod)
		.then(function () {
			self._eventBus.emit('componentUnbound', {
				element: element,
				id: !SPECIAL_IDS.hasOwnProperty(id) ? id : null
			});
		})
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
		});
};

/**
 * Removes component from the list.
 * @param {string} id Component's ID
 * @private
 */
DocumentRenderer.prototype._removeComponent = function (id) {
	delete this._componentElements[id];
	delete this._componentInstances[id];
	delete this._componentBindings[id];
};

/**
 * Binds all required event handlers to component.
 * @param {Element} element Component HTML element.
 * @returns {Promise} Promise for nothing.
 * @private
 */
DocumentRenderer.prototype._bindComponent = function (element) {
	var id = this._getId(element),
		self = this,
		instance = this._componentInstances[id];
	if (!instance) {
		return Promise.resolve();
	}

	var bindMethod = moduleHelper.getMethodToInvoke(instance, 'bind');
	return moduleHelper.getSafePromise(bindMethod)
		.then(function (bindings) {
			if (!bindings || typeof (bindings) !== 'object') {
				self._eventBus.emit('componentBound', {
					element: element,
					id: !SPECIAL_IDS.hasOwnProperty(id) ? id : null
				});
				return;
			}
			self._componentBindings[id] = Object.create(null);
			Object.keys(bindings)
				.forEach(function (eventName) {
					eventName = eventName.toLowerCase();
					if (eventName in self._componentBindings[id]) {
						return;
					}
					var selectorHandlers = Object.create(null);
					Object.keys(bindings[eventName])
						.forEach(function (selector) {
							var handler = bindings[eventName][selector];
							if (typeof (handler) !== 'function') {
								return;
							}
							selectorHandlers[selector] = handler.bind(instance);
						});
					self._componentBindings[id][eventName] = {
						handler: self._createBindingHandler(
							element, selectorHandlers
						),
						selectorHandlers: selectorHandlers
					};
					element.addEventListener(
						eventName,
						self._componentBindings[id][eventName].handler,
						NON_BUBBLING_EVENTS.hasOwnProperty(eventName)
					);
				});
			self._eventBus.emit('componentBound', {
				element: element,
				id: id
			});
		});
};

/**
 * Creates universal event handler for delegated events.
 * @param {Element} componentRoot Root element of component.
 * @param {Object} selectorHandlers Map of event handlers by CSS selectors.
 * @returns {Function} Universal event handler for delegated events.
 * @private
 */
DocumentRenderer.prototype._createBindingHandler =
	function (componentRoot, selectorHandlers) {
		var selectors = Object.keys(selectorHandlers);
		return function (event) {
			var dispatchedEvent = createCustomEvent(event, function () {
					return element;
				}),
				element = event.target,
				targetMatches = getMatchesMethod(element),
				isHandled = selectors.some(function (selector) {
					if (targetMatches(selector)) {
						selectorHandlers[selector](dispatchedEvent);
						return true;
					}
					return false;
				});
			if (isHandled || !event.bubbles) {
				return;
			}

			while (element.parentElement && element !== componentRoot) {
				element = element.parentElement;
				targetMatches = getMatchesMethod(element);
				for (var i = 0; i < selectors.length; i++) {
					if (!targetMatches(selectors[i])) {
						continue;
					}
					isHandled = true;
					selectorHandlers[selectors[i]](dispatchedEvent);
					break;
				}

				if (isHandled) {
					break;
				}
			}
		};
	};

/**
 * Checks if the element is a component.
 * @param {Object} components Current components.
 * @param {Element} element DOM element.
 * @private
 */
DocumentRenderer.prototype._isComponent = function (components, element) {
	var currentNodeName = element.nodeName;
	return moduleHelper.COMPONENT_PREFIX_REGEXP.test(currentNodeName) &&
		(moduleHelper.getOriginalComponentName(currentNodeName) in components);
};

/**
 * Finds all descendant components of specified component element.
 * @param {Element} element Root component HTML element to begin search with.
 * @param {Object} components Map of components by names.
 * @param {boolean} goInComponents Go inside nested components.
 * @private
 */
DocumentRenderer.prototype._findComponents =
	function (element, components, goInComponents) {
		var elements = [],
			queue = [element],
			currentChildren, i;

		while (queue.length > 0) {
			currentChildren = queue.shift().childNodes;
			for (i = 0; i < currentChildren.length; i++) {
				// we need only Element nodes
				if (currentChildren[i].nodeType !== 1) {
					continue;
				}

				// and they should be components
				if (!this._isComponent(components, currentChildren[i])) {
					queue.push(currentChildren[i]);
					continue;
				}

				if (goInComponents) {
					queue.push(currentChildren[i]);
				}
				elements.push(currentChildren[i]);
			}
		}

		return elements;
	};

/**
 * Handles error while rendering.
 * @param {Element} element Component HTML element.
 * @param {Object} component Component instance.
 * @param {Error} error Error to handle.
 * @returns {Promise<string>} Promise for HTML string.
 * @private
 */
DocumentRenderer.prototype._handleRenderError =
	function (element, component, error) {
		this._eventBus.emit('error', error);

		// do not corrupt existed HEAD when error occurs
		if (element.tagName === TAG_NAMES.HEAD) {
			return Promise.resolve('');
		}

		if (!this._config.isRelease && error instanceof Error) {
			return Promise.resolve(errorHelper.prettyPrint(
				error, this._window.navigator.userAgent
			));
		} else if (component.errorTemplate) {
			return component.errorTemplate.render(error);
		}

		return Promise.resolve('');
	};

/**
 * Updates all components that depend on current set of changed stores.
 * @returns {Promise} Promise for nothing.
 * @private
 */
DocumentRenderer.prototype._updateStoreComponents = function () {
	if (this._isUpdating) {
		return Promise.resolve();
	}

	var self = this;

	// if document component is changed we should reload the page
	var documentStore = this._window.document.documentElement.getAttribute(
		moduleHelper.ATTRIBUTE_STORE
	);
	if (documentStore in this._currentChangedStores) {
		var newLocation = this._currentRoutingContext.location.toString();
		if (newLocation === this._window.location.toString()) {
			this._window.location.reload();
			return Promise.resolve();
		}
		this._window.location.assign(newLocation);
		return Promise.resolve();
	}

	this._isUpdating = true;

	// if we have awaiting routing we should apply state to the stores
	if (this._awaitingRouting) {
		var components = this._componentLoader.getComponentsByNames(),
			changedByState = this._storeDispatcher.setState(
				this._awaitingRouting.state,
				this._awaitingRouting.routingContext
			);

		changedByState.forEach(function (name) {
			self._currentChangedStores[name] = true;
		});

		// we should update contexts of the stores with the new routing context
		this._currentRoutingContext = this._awaitingRouting.routingContext;
		Object.keys(this._componentInstances)
			.forEach(function (id) {
				var instance = self._componentInstances[id];
				instance.$context = self._getComponentContext(
					components[instance.$context.name],
					instance.$context.element
				);
			});
		this._awaitingRouting = null;
	}

	var changedStores = Object.keys(this._currentChangedStores);
	if (changedStores.length === 0) {
		this._isUpdating = false;
		return Promise.resolve();
	}

	this._currentChangedStores = Object.create(null);

	var renderingContext = this._createRenderingContext(changedStores),
		promises = renderingContext.roots.map(function (root) {
			renderingContext.rootIds[self._getId(root)] = true;
			return self.renderComponent(root, renderingContext);
		});

	return Promise.all(promises)
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
		})
		.then(function () {
			self._isUpdating = false;
			self._eventBus.emit('documentUpdated', changedStores);
			return self._updateStoreComponents();
		});
};

/**
 * Merges new and existed head elements and change only difference.
 * @param {Element} head HEAD DOM element.
 * @param {Element} newHead New head element.
 * @private
 */
/*jshint maxcomplexity:false */
DocumentRenderer.prototype._mergeHead = function (head, newHead) {
	if (!newHead) {
		return;
	}
	var self = this;

	var map = this._getHeadMap(head.childNodes),
		current, i, key, oldKey, oldItem,
		sameMetaElements = Object.create(null);

	for (i = 0; i < newHead.childNodes.length; i++) {
		current = newHead.childNodes[i];

		if (!(current.nodeName in map)) {
			map[current.nodeName] = Object.create(null);
		}

		switch (current.nodeName) {
			// these elements can be only replaced
			case TAG_NAMES.TITLE:
			case TAG_NAMES.BASE:
			case TAG_NAMES.NOSCRIPT:
				key = this._getNodeKey(current);
				oldItem = head.getElementsByTagName(current.nodeName)[0];
				if (oldItem) {
					oldKey = this._getNodeKey(oldItem);
					head.replaceChild(current, oldItem);
				} else {
					head.appendChild(current);
				}
				// when we do replace or append current is removed from newHead
				// therefore we need to decrement index
				i--;
				break;

			// these elements can not be deleted from head
			// therefore we just add new elements that differs from existed
			case TAG_NAMES.STYLE:
			case TAG_NAMES.LINK:
			case TAG_NAMES.SCRIPT:
				key = self._getNodeKey(current);
				if (!(key in map[current.nodeName])) {
					head.appendChild(current);
					i--;
				}
				break;
			// meta and other elements can be deleted
			// but we should not delete and append same elements
			default:
				key = self._getNodeKey(current);
				if (key in map[current.nodeName]) {
					sameMetaElements[key] = true;
				} else {
					head.appendChild(current);
					i--;
				}
				break;
		}
	}

	if (TAG_NAMES.META in map) {
		// remove meta tags which a not in a new head state
		Object.keys(map[TAG_NAMES.META])
			.forEach(function (metaKey) {
				if (metaKey in sameMetaElements) {
					return;
				}

				head.removeChild(map[TAG_NAMES.META][metaKey]);
			});
	}
};

/**
 * Gets map of all HEAD's elements.
 * @param {NodeList} headChildren Head children DOM nodes.
 * @returns {Object} Map of HEAD elements.
 * @private
 */
DocumentRenderer.prototype._getHeadMap = function (headChildren) {
	// Create map of <meta>, <link>, <style> and <script> tags
	// by unique keys that contain attributes and content
	var map = Object.create(null),
		i, current,
		self = this;

	for (i = 0; i < headChildren.length; i++) {
		current = headChildren[i];
		if (!(current.nodeName in map)) {
			map[current.nodeName] = Object.create(null);
		}
		map[current.nodeName][self._getNodeKey(current)] = current;
	}
	return map;
};

/**
 * Gets unique element key using element's attributes and its content.
 * @param {Node} node HTML element.
 * @returns {string} Unique key for element.
 * @private
 */
DocumentRenderer.prototype._getNodeKey = function (node) {
	var current, i,
		attributes = [];

	if (node.nodeType !== NODE_TYPES.ELEMENT_NODE) {
		return node.nodeValue || '';
	}

	if (node.hasAttributes()) {
		for (i = 0; i < node.attributes.length; i++) {
			current = node.attributes[i];
			attributes.push(current.name + '=' + current.value);
		}
	}

	return attributes
			.sort()
			.join('|') + '>' + node.textContent;
};

/**
 * Does initial wrapping for every component on the page.
 * @param {Array} components Current components list.
 * @param {Array} element Elements list.
 * @private
 */
DocumentRenderer.prototype._initialWrap = function (components, elements) {
	var self = this,
		current = elements.pop();

	return Promise.resolve()
		.then(function () {
			var id = self._getId(current);
			if (!id) {
				return;
			}

			var componentName = moduleHelper.getOriginalComponentName(
					current.nodeName
				);
			if (!(componentName in components)) {
				return;
			}
			var constructor = components[componentName].constructor;
			constructor.prototype.$context = self._getComponentContext(
				components[componentName], current
			);

			var instance = self._serviceLocator.resolveInstance(
				constructor, self._config
			);
			instance.$context = constructor.prototype.$context;
			self._componentElements[id] = current;
			self._componentInstances[id] = instance;
			// initialize the store of the component
			self._storeDispatcher.getStore(
				current.getAttribute(moduleHelper.ATTRIBUTE_STORE)
			);
			self._eventBus.emit('componentRendered', {
				name: componentName,
				attributes: instance.$context.attributes,
				context: instance.$context
			});
			return self._bindComponent(current);
		})
		.then(function () {
			if (elements.length > 0) {
				return self._initialWrap(components, elements);
			}

			self._eventBus.emit(
				'documentRendered', self._currentRoutingContext
			);
		});
};

/**
 * Gets component context using basic context.
 * @param {Object} component Component details.
 * @param {Element} element DOM element of component.
 * @returns {Object} Component context.
 * @private
 */
DocumentRenderer.prototype._getComponentContext =
	function (component, element) {
		var self = this,
			storeName = element.getAttribute(moduleHelper.ATTRIBUTE_STORE),
			componentContext = Object.create(this._currentRoutingContext);

		// initialize the store of the component
		this._storeDispatcher.getStore(storeName);

		Object.defineProperties(componentContext, {
			name: {
				get: function () {
					return component.name;
				},
				enumerable: true
			},
			attributes: {
				get: function () {
					return attributesToObject(element.attributes);
				},
				enumerable: true
			}
		});

		componentContext.element = element;
		componentContext.getComponentById = function (id) {
			return self.getComponentById(id);
		};
		componentContext.getComponentByElement = function (element) {
			return self.getComponentByElement(element);
		};
		componentContext.createComponent = function (tagName, attributes) {
			return self.createComponent(tagName, attributes);
		};
		componentContext.collectGarbage = function () {
			return self.collectGarbage();
		};
		componentContext.getStoreData = function () {
			var currentStoreName = element
				.getAttribute(moduleHelper.ATTRIBUTE_STORE);
			return self._storeDispatcher
				.getStoreData(currentStoreName);
		};
		componentContext.sendAction = function (name, args) {
			var currentStoreName = element
				.getAttribute(moduleHelper.ATTRIBUTE_STORE);
			return self._storeDispatcher
				.sendAction(currentStoreName, name, args);
		};
		componentContext.sendBroadcastAction = function (name, args) {
			return self._storeDispatcher
				.sendBroadcastAction(name, args);
		};

		return Object.freeze(componentContext);
	};

/**
 * Finds all rendering roots on page for all changed stores.
 * @param {Array} changedStoreNames List of store names which has been changed.
 * @returns {Array<Element>} HTML elements that are rendering roots.
 * @private
 */
DocumentRenderer.prototype._findRenderingRoots = function (changedStoreNames) {
	var self = this,
		headStore = this._window.document.head.getAttribute(
			moduleHelper.ATTRIBUTE_STORE
		),
		components = this._componentLoader.getComponentsByNames(),
		componentsElements = Object.create(null),
		storeNamesSet = Object.create(null),
		rootsSet = Object.create(null),
		roots = [];

	// we should find all components and then looking for roots
	changedStoreNames
		.forEach(function (storeName) {
			storeNamesSet[storeName] = true;
			componentsElements[storeName] = self._window.document
				.querySelectorAll(
					'[' +
					moduleHelper.ATTRIBUTE_ID +
					']' +
					'[' +
					moduleHelper.ATTRIBUTE_STORE +
					'="' +
					storeName +
					'"]'
				);
		});

	if (moduleHelper.HEAD_COMPONENT_NAME in components &&
		headStore in storeNamesSet) {
		rootsSet[this._getId(this._window.document.head)] = true;
		roots.push(this._window.document.head);
	}

	changedStoreNames
		.forEach(function (storeName) {
			var current, currentId,
				lastRoot, lastRootId,
				currentStore, currentComponentName;

			for (var i = 0; i < componentsElements[storeName].length; i++) {
				current = componentsElements[storeName][i];
				currentId = componentsElements[storeName][i]
					.getAttribute(moduleHelper.ATTRIBUTE_ID);
				lastRoot = current;
				lastRootId = currentId;
				currentComponentName = moduleHelper.getOriginalComponentName(
					current.tagName
				);

				while (current.parentElement) {
					current = current.parentElement;
					currentId = self._getId(current);
					currentStore = current.getAttribute(
						moduleHelper.ATTRIBUTE_STORE
					);

					// store did not change state
					if (!currentStore || !(currentStore in storeNamesSet)) {
						continue;
					}

					// is not an active component
					if (!(currentComponentName in components)) {
						continue;
					}

					lastRoot = current;
					lastRootId = currentId;
				}
				if (lastRootId in rootsSet) {
					continue;
				}
				rootsSet[lastRootId] = true;
				roots.push(lastRoot);
			}
		});

	return roots;
};

/**
 * Creates rendering context.
 * @param {Array?} changedStores Names of changed stores.
 * @returns {{
 *   config: Object,
 *   renderedIds: {},
 *   unboundIds: {},
 *   isHeadRendered: boolean,
 *   bindMethods: Array,
 *   routingContext: Object,
 *   components: Object,
 *   roots: Array.<Element>
 * }} The context object.
 * @private
 */
DocumentRenderer.prototype._createRenderingContext = function (changedStores) {
	var components = this._componentLoader.getComponentsByNames();

	return {
		config: this._config,
		renderedIds: Object.create(null),
		unboundIds: Object.create(null),
		isHeadRendered: false,
		bindMethods: [],
		routingContext: this._currentRoutingContext,
		components: components,
		rootIds: Object.create(null),
		roots: changedStores ? this._findRenderingRoots(changedStores) : []
	};
};

/**
 * Gets ID of the element.
 * @param {Element} element HTML element of component.
 * @returns {string} ID.
 */
DocumentRenderer.prototype._getId = function (element) {
	if (element === this._window.document.documentElement) {
		return SPECIAL_IDS.$$document;
	}
	if (element === this._window.document.head) {
		return SPECIAL_IDS.$$head;
	}
	return element.getAttribute(moduleHelper.ATTRIBUTE_ID);
};

/**
 * Creates temporary clone of the element.
 * @param {Element} element DOM element.
 * @returns {Element} clone.
 * @private
 */
DocumentRenderer.prototype._createTemporaryElement = function (element) {
	var tmp = this._window.document.createElement(element.tagName),
		attributes = element.attributes;
	for (var i = 0; i < attributes.length; i++) {
		tmp.setAttribute(attributes[i].name, attributes[i].value);
	}
	return tmp;
};

/**
 * Converts NamedNodeMap of Attr items to key-value object map.
 * @param {NamedNodeMap} attributes List of Element attributes.
 * @returns {Object} Map of attribute values by names.
 */
function attributesToObject(attributes) {
	var result = Object.create(null);
	for (var i = 0; i < attributes.length; i++) {
		result[attributes[i].name] = attributes[i].value;
	}
	return result;
}

/**
 * Gets cross-browser "matches" method for the element.
 * @param {Element} element HTML element.
 * @returns {Function} "matches" method.
 */
function getMatchesMethod(element) {
	var method = (element.matches ||
		element.webkitMatchesSelector ||
		element.mozMatchesSelector ||
		element.oMatchesSelector ||
		element.msMatchesSelector);

	return method.bind(element);
}

/**
 * Creates imitation of original Event object but with specified currentTarget.
 * @param {Event} event Original event object.
 * @param {Function} currentTargetGetter Getter for currentTarget.
 * @returns {Event} Wrapped event.
 */
function createCustomEvent(event, currentTargetGetter) {
	var catEvent = Object.create(event),
		keys = [],
		properties = {};
	for (var key in event) {
		keys.push(key);
	}
	keys.forEach(function (key) {
		if (typeof (event[key]) === 'function') {
			properties[key] = {
				get: function () {
					return event[key].bind(event);
				}
			};
			return;
		}

		properties[key] = {
			get: function () {
				return event[key];
			},
			set: function (value) {
				event[key] = value;
			}
		};
	});

	properties.currentTarget = {
		get: currentTargetGetter
	};
	Object.defineProperties(catEvent, properties);
	Object.seal(catEvent);
	Object.freeze(catEvent);
	return catEvent;
}
},{"../lib/base/DocumentRendererBase":108,"../lib/helpers/errorHelper":111,"../lib/helpers/hrTimeHelper":97,"../lib/helpers/moduleHelper":112,"morphdom":133,"util":121}],95:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = Logger;

var LEVELS = {
	DEBUG: 'debug',
	TRACE: 'trace',
	INFO: 'info',
	WARN: 'warn',
	ERROR: 'error',
	FATAL: 'fatal'
};

/**
 * Creates browser logger.
 * @param {Object|string} levels Levels to log.
 * @constructor
 */
function Logger(levels) {
	if (typeof (levels) === 'object') {
		this._levels = levels;
	}

	if (typeof (levels) === 'string') {
		this._levels = {};
		Object.keys(LEVELS)
			.forEach(function (level) {
				this._levels[LEVELS[level]] =
					(levels.search(LEVELS[level]) !== -1);
			}, this);
	}

	this.debug = this.debug.bind(this);
	this.trace = this.trace.bind(this);
	this.info = this.info.bind(this);
	this.warn = this.warn.bind(this);
	this.error = this.error.bind(this);
	this.fatal = this.fatal.bind(this);
}

/**
 * Current levels of logging.
 * @type {Object}
 * @private
 */
Logger.prototype._levels = {
	debug: true,
	trace: true,
	info: true,
	warn: true,
	error: true,
	fatal: true
};

/**
 * Logs trace message.
 * @param {string} message Trace message.
 */
Logger.prototype.trace = function (message) {
	if (!this._levels.trace) {
		return;
	}

	if (console.log) {
		console.log(message);
	}
};

/**
 * Logs trace message.
 * @param {string} message Trace message.
 */
Logger.prototype.debug = function (message) {
	if (!this._levels.debug) {
		return;
	}

	if (console.log) {
		console.log(message);
	}
};

/**
 * Logs info message.
 * @param {string} message Information message.
 */
Logger.prototype.info = function (message) {
	if (!this._levels.info) {
		return;
	}

	if (console.info) {
		console.info(message);
	}
};

/**
 * Logs warn message.
 * @param {string} message Warning message.
 */
Logger.prototype.warn = function (message) {
	if (!this._levels.warn) {
		return;
	}

	if (console.warn) {
		console.warn(message);
	}
};
/**
 * Logs error message.
 * @param {string|Error} error Error object or message.
 */
Logger.prototype.error = function (error) {
	if (!this._levels.error) {
		return;
	}

	writeError(error);
};

/**
 * Logs error message.
 * @param {string|Error} error Error object or message.
 */
Logger.prototype.fatal = function (error) {
	if (!this._levels.fatal) {
		return;
	}
	writeError(error);
};

/**
 * Writes error to console.
 * @param {Error|string} error Error to write.
 */
function writeError(error) {
	try {
		if (!(error instanceof Error)) {
			error = typeof (error) === 'string' ? new Error(error) : new Error();
		}
		if (console.error) {
			console.error(error);
		}
	} catch (e) {
		writeError(e);
	}
}
},{}],96:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = RequestRouter;

var util = require('util'),
	URI = require('catberry-uri').URI;

var MOUSE_PRIMARY_KEY = 0,
	HREF_ATTRIBUTE_NAME = 'href',
	TARGET_ATTRIBUTE_NAME = 'target',
	A_TAG_NAME = 'A',
	BODY_TAG_NAME = 'BODY';

/**
 * Creates new instance of the browser request router.
 * @param {ServiceLocator} $serviceLocator Service locator to resolve services.
 * @constructor
 */
function RequestRouter($serviceLocator) {
	this._eventBus = $serviceLocator.resolve('eventBus');
	this._window = $serviceLocator.resolve('window');
	this._documentRenderer = $serviceLocator.resolve('documentRenderer');
	this._stateProvider = $serviceLocator.resolve('stateProvider');
	this._contextFactory = $serviceLocator.resolve('contextFactory');

	this._isHistorySupported = this._window.history &&
		this._window.history.pushState instanceof Function;
	var self = this;

	// add event handlers
	self._wrapDocument();

	// set initial state from current URI
	this._changeState(new URI(this._window.location.toString()))
		.catch(function (reason) {
			self._handleError(reason);
		});
}

/**
 * Current initialization flag.
 * @type {boolean}
 * @private
 */
RequestRouter.prototype._isStateInitialized = false;

/**
 * Current referrer.
 * @type {URI}
 * @private
 */
RequestRouter.prototype._referrer = '';

/**
 * Current location.
 * @type {URI}
 * @private
 */
RequestRouter.prototype._location = null;

/**
 * Current event bus.
 * @type {EventEmitter}
 * @private
 */
RequestRouter.prototype._eventBus = null;

/**
 * Current context factory.
 * @type {ContextFactory}
 * @private
 */
RequestRouter.prototype._contextFactory = null;

/**
 * Current state provider.
 * @type {StateProvider}
 * @private
 */
RequestRouter.prototype._stateProvider = null;

/**
 * Current document renderer.
 * @type {DocumentRenderer}
 * @private
 */
RequestRouter.prototype._documentRenderer = null;

/**
 * Current browser window.
 * @type {Window}
 * @private
 */
RequestRouter.prototype._window = null;

/**
 * True if current browser supports history API.
 * @type {boolean}
 * @private
 */
RequestRouter.prototype._isHistorySupported = false;

/**
 * Routes browser render request.
 * @returns {Promise} Promise for nothing.
 */
RequestRouter.prototype.route = function () {
	var self = this;
	// because now location was not change yet and
	// different browsers handle `popstate` differently
	// we need to do route in next iteration of event loop
	return Promise.resolve()
		.then(function () {
			var newLocation = new URI(self._window.location.toString()),
				newAuthority = newLocation.authority ?
					newLocation.authority.toString() : null,
				currentAuthority = self._location.authority ?
					self._location.authority.toString() : null;

			if (newLocation.scheme !== self._location.scheme ||
				newAuthority !== currentAuthority) {
				return;
			}

			// if only URI fragment is changed
			var newQuery = newLocation.query ?
					newLocation.query.toString() : null,
				currentQuery = self._location.query ?
					self._location.query.toString() : null;
			if (newLocation.path === self._location.path &&
				newQuery === currentQuery) {
				self._location = newLocation;
				return;
			}
			return self._changeState(newLocation);
		});
};

/**
 * Sets application state to specified URI.
 * @param {string} locationString URI to go.
 * @returns {Promise} Promise for nothing.
 */
RequestRouter.prototype.go = function (locationString) {
	var self = this;
	return Promise.resolve()
		.then(function () {
			var location = new URI(locationString);
			location = location.resolveRelative(self._location);
			locationString = location.toString();

			var currentAuthority = self._location.authority ?
					self._location.authority.toString() : null,
				newAuthority = location.authority ?
					location.authority.toString() : null;

			// we must check if this is an external link before map URI
			// to internal application state
			if (!self._isHistorySupported ||
				location.scheme !== self._location.scheme ||
				newAuthority !== currentAuthority) {
				self._window.location.assign(locationString);
				return;
			}

			var state = self._stateProvider.getStateByUri(location);
			if (!state) {
				self._window.location.assign(locationString);
				return;
			}

			self._window.history.pushState(state, '', locationString);
			return self.route();
		});
};

/**
 * Changes current application state with new location.
 * @param {URI} newLocation New location.
 * @returns {Promise} Promise for nothing.
 * @private
 */
RequestRouter.prototype._changeState = function (newLocation) {
	var self = this;
	return Promise.resolve()
		.then(function () {
			self._location = newLocation;
			var state = self._stateProvider.getStateByUri(newLocation),
				routingContext = self._contextFactory.create({
					referrer: self._referrer || self._window.document.referrer,
					location: self._location,
					userAgent: self._window.navigator.userAgent
				});

			if (!self._isStateInitialized) {
				self._isStateInitialized = true;
				return self._documentRenderer.initWithState(
					state, routingContext
				);
			}

			if (state === null) {
				window.location.reload();
				return;
			}

			return self._documentRenderer
				.render(state, routingContext);
		})
		.then(function () {
			self._referrer = self._location;
		});
};

/**
 * Wraps document with required events to route requests.
 * @private
 */
RequestRouter.prototype._wrapDocument = function () {
	var self = this;

	if (!this._isHistorySupported) {
		return;
	}

	this._window.addEventListener('popstate', function () {
		self.route().catch(self._handleError.bind(self));
	});

	this._window.document.body.addEventListener('click', function (event) {
		if (event.defaultPrevented) {
			return;
		}
		if (event.target.tagName === A_TAG_NAME) {
			self._linkClickHandler(event, event.target);
		} else {
			var link = closestLink(event.target);
			if (!link) {
				return;
			}
			self._linkClickHandler(event, link);
		}
	});
};

/**
 * Handles link click on the page.
 * @param {Event} event Event-related object.
 * @param {Element} element Link element.
 * @private
 */
RequestRouter.prototype._linkClickHandler = function (event, element) {
	var targetAttribute = element.getAttribute(TARGET_ATTRIBUTE_NAME);
	if (targetAttribute) {
		return;
	}

	// if middle mouse button was clicked
	if (event.button !== MOUSE_PRIMARY_KEY ||
		event.ctrlKey || event.altKey || event.shiftKey) {
		return;
	}

	var locationString = element.getAttribute(HREF_ATTRIBUTE_NAME);
	if (!locationString) {
		return;
	}
	if (locationString[0] === '#') {
		return;
	}

	event.preventDefault();
	this.go(locationString)
		.catch(this._handleError.bind(this));
};

/**
 * Handles all errors.
 * @param {Error} error Error to handle.
 * @private
 */
RequestRouter.prototype._handleError = function (error) {
	this._eventBus.emit('error', error);
};

/**
 * Finds the closest ascending "A" element node.
 * @param {Node} element DOM element.
 * @returns {Node|null} The closest "A" element or null.
 */
function closestLink(element) {
	while (element && element.nodeName !== A_TAG_NAME &&
		element.nodeName !== BODY_TAG_NAME) {
		element = element.parentNode;
	}
	return element && element.nodeName === A_TAG_NAME ? element : null;
}
},{"catberry-uri":127,"util":121}],97:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = {
	/**
	 * Gets the high resolution time or the difference between
	 * previous and current time.
	 * @param {Array?} Previous high resolution timestamp.
	 * @returns {Array} The high resolution time.
	 */
	get: require('browser-process-hrtime'),
	/**
	 * Converts the high resolution timestamp to text message.
	 * @param {Array}
	 * @returns {string} Time message.
	 */
	toMessage: require('pretty-hrtime'),
	/**
	 * Converts high resolution time to milliseconds number.
	 * @param {Array} hrTime High resolution time tuple.
	 */
	toMilliseconds: function (hrTime) {
		return hrTime[0] * 1e3 + Math.round(hrTime[1] / 1e6);
	}
};
},{"browser-process-hrtime":116,"pretty-hrtime":134}],98:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ComponentLoader;

var moduleHelper = require('../../lib/helpers/moduleHelper'),
	util = require('util'),
	LoaderBase = require('../../lib/base/LoaderBase');

util.inherits(ComponentLoader, LoaderBase);

/**
 * Creates new instance of the component loader.
 * @param {ServiceLocator} $serviceLocator Locator to resolve dependencies.
 * @constructor
 * @extends LoaderBase
 */
function ComponentLoader($serviceLocator) {
	this._serviceLocator = $serviceLocator;
	this._eventBus = $serviceLocator.resolve('eventBus');
	this._templateProvider = $serviceLocator.resolve('templateProvider');
	LoaderBase.call(this, $serviceLocator.resolveAll('componentTransform'));
}

/**
 * Current event bus.
 * @type {EventEmitter}
 * @private
 */
ComponentLoader.prototype._eventBus = null;

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @private
 */
ComponentLoader.prototype._serviceLocator = null;

/**
 * Current template provider.
 * @type {TemplateProvider}
 * @private
 */
ComponentLoader.prototype._templateProvider = null;

/**
 * Current map of loaded components by names.
 * @type {Object} Map of components by names.
 * @private
 */
ComponentLoader.prototype._loadedComponents = null;

/**
 * Loads components when it is in a browser.
 * @returns {Promise} Promise for nothing.
 */
ComponentLoader.prototype.load = function () {
	if (this._loadedComponents) {
		return Promise.resolve(this._loadedComponents);
	}

	this._loadedComponents = Object.create(null);

	var self = this;
	return Promise.resolve()
		.then(function () {
			var components = self._serviceLocator.resolveAll('component'),
				componentPromises = [];

			// the list is a stack, we should reverse it
			components.forEach(function (component) {
				componentPromises.unshift(
					self._processComponent(component)
				);
			});
			return Promise.all(componentPromises);
		})
		.then(function (components) {
			components.forEach(function (component) {
				if (!component || typeof (component) !== 'object') {
					return;
				}
				self._loadedComponents[component.name] = component;
			});
			self._eventBus.emit('allComponentsLoaded', components);
			return self._loadedComponents;
		});
};

/**
 * Processes component and apply required operations.
 * @param {Object} componentDetails Loaded component details.
 * @returns {Object} Component object.
 * @private
 */
ComponentLoader.prototype._processComponent = function (componentDetails) {
	var self = this,
		component = Object.create(componentDetails);

	return this._applyTransforms(component)
		.then(function (transformed) {
			component = transformed;
			self._templateProvider.registerCompiled(
				component.name, component.templateSource
			);
			component.template = {
				render: function (dataContext) {
					return self._templateProvider.render(
						component.name, dataContext
					);
				}
			};
			if (typeof (component.errorTemplateSource) === 'string') {
				var errorTemplateName = moduleHelper.getNameForErrorTemplate(
					component.name
				);
				self._templateProvider.registerCompiled(
					errorTemplateName, component.errorTemplateSource
				);
				component.errorTemplate = {
					render: function (dataContext) {
						return self._templateProvider.render(
							errorTemplateName, dataContext
						);
					}
				};
			}
			self._eventBus.emit('componentLoaded', component);
			return component;
		})
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
			return null;
		});
};

/**
 * Gets map of components by names.
 * @returns {Object} Map of components by names.
 */
ComponentLoader.prototype.getComponentsByNames = function () {
	return this._loadedComponents || Object.create(null);
};
},{"../../lib/base/LoaderBase":109,"../../lib/helpers/moduleHelper":112,"util":121}],99:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = StoreLoader;

var util = require('util'),
	LoaderBase = require('../../lib/base/LoaderBase');

util.inherits(StoreLoader, LoaderBase);

/**
 * Creates instance of the store loader.
 * @param {ServiceLocator} $serviceLocator Locator to resolve stores.
 * @constructor
 * @extends LoaderBase
 */
function StoreLoader($serviceLocator) {
	this._serviceLocator = $serviceLocator;
	this._eventBus = $serviceLocator.resolve('eventBus');
	LoaderBase.call(this, $serviceLocator.resolveAll('storeTransform'));
}

/**
 * Current event bus.
 * @type {EventEmitter}
 * @private
 */
StoreLoader.prototype._eventBus = null;

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @private
 */
StoreLoader.prototype._serviceLocator = null;

/**
 * Current set of loaded stores.
 * @type {Object}
 * @private
 */
StoreLoader.prototype._loadedStores = null;

/**
 * Loads all stores when it is in a browser.
 * @returns {Promise} Promise for nothing.
 */
StoreLoader.prototype.load = function () {
	if (this._loadedStores) {
		return Promise.resolve(this._loadedStores);
	}

	this._loadedStores = Object.create(null);
	var self = this;

	return Promise.resolve()
		.then(function () {
			var stores = self._serviceLocator.resolveAll('store'),
				storePromises = [];

			// the list is a stack, we should reverse it
			stores.forEach(function (store) {
				storePromises.unshift(
					self._getStore(store)
				);
			});

			return Promise.all(storePromises);
		})
		.then(function (stores) {
			stores.forEach(function (store) {
				if (!store || typeof (store) !== 'object') {
					return;
				}
				self._loadedStores[store.name] = store;
			});
			self._eventBus.emit('allStoresLoaded', self._loadedStores);
			return Promise.resolve(self._loadedStores);
		});
};

/**
 * Gets the store from store details.
 * @param {Object} storeDetails Store details.
 * @returns {Promise<Object>} Promise for store.
 * @private
 */
StoreLoader.prototype._getStore = function (storeDetails) {
	var self = this;
	return this._applyTransforms(storeDetails)
		.then(function (transformed) {
			self._eventBus.emit('storeLoaded', transformed);
			return transformed;
		})
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
			return null;
		});
};

/**
 * Gets stores map by names.
 * @returns {Object} Map of stores by names.
 */
StoreLoader.prototype.getStoresByNames = function () {
	return this._loadedStores || Object.create(null);
};
},{"../../lib/base/LoaderBase":109,"util":121}],100:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ModuleApiProvider;

var util = require('util'),
	propertyHelper = require('../../lib/helpers/propertyHelper'),
	ModuleApiProviderBase = require('../../lib/base/ModuleApiProviderBase');

util.inherits(ModuleApiProvider, ModuleApiProviderBase);

/**
 * Creates new instance of the module API provider.
 * @param {ServiceLocator} $serviceLocator Service locator
 * to resolve dependencies.
 * @constructor
 * @extends ModuleApiProviderBase
 */
function ModuleApiProvider($serviceLocator) {
	ModuleApiProviderBase.call(this, $serviceLocator);
	propertyHelper.defineReadOnly(this, 'isBrowser', true);
	propertyHelper.defineReadOnly(this, 'isServer', false);
}

/**
 * Reloads the page for handling "not found" error.
 * @returns {Promise} Promise for nothing.
 */
ModuleApiProvider.prototype.notFound = function () {
	var window = this.locator.resolve('window');
	window.location.reload();
	return Promise.resolve();
};

/**
 * Redirects current page to specified URI.
 * @param {string} uriString URI to redirect.
 * @returns {Promise} Promise for nothing.
 */
ModuleApiProvider.prototype.redirect = function (uriString) {
	var requestRouter = this.locator.resolve('requestRouter');
	return requestRouter.go(uriString);
};

/**
 * Clears current location URI's fragment.
 * @returns {Promise} Promise for nothing.
 */
ModuleApiProvider.prototype.clearFragment = function () {
	var window = this.locator.resolve('window'),
		position = window.document.body.scrollTop;
	window.location.hash = '';
	window.document.body.scrollTop = position;
	return Promise.resolve();
};
},{"../../lib/base/ModuleApiProviderBase":110,"../../lib/helpers/propertyHelper":113,"util":121}],101:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = require('./lib/Bootstrapper');

},{"./lib/Bootstrapper":1}],102:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ContextFactory;

var propertyHelper = require('./helpers/propertyHelper');

/**
 * Creates new instance of the context factory.
 * @param {ServiceLocator} $serviceLocator Locator to resolve dependencies.
 * @constructor
 */
function ContextFactory($serviceLocator) {
	this._serviceLocator = $serviceLocator;
}

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @private
 */
ContextFactory.prototype._serviceLocator = null;

/**
 * Creates new context for modules.
 * @param {Object} additional Additional parameters.
 * @param {URI} additional.referrer Current referrer.
 * @param {URI} additional.location Current location.
 * @param {string} additional.userAgent Current user agent.
 */
ContextFactory.prototype.create = function (additional) {
	var apiProvider = this._serviceLocator.resolve('moduleApiProvider'),
		context = Object.create(apiProvider);
	Object.keys(additional)
		.forEach(function (key) {
			propertyHelper.defineReadOnly(context, key, additional[key]);
		});
	return context;
};
},{"./helpers/propertyHelper":113}],103:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = SerialWrapper;

var events = require('events');

var ERROR_NO_SUCH_METHOD = 'There is no such registered method';

/**
 * Creates new instance of the serial wrapper for promises.
 * @constructor
 */
function SerialWrapper() {
	this._emitter = new events.EventEmitter();
	this._emitter.setMaxListeners(0);
	this._toInvoke = Object.create(null);
	this._inProgress = Object.create(null);
}

/**
 * Current event emitter.
 * @type {EventEmitter}
 * @private
 */
SerialWrapper.prototype._emitter = null;

/**
 * Current set of named methods to invoke.
 * @type {Object}
 * @private
 */
SerialWrapper.prototype._toInvoke = null;

/**
 * Current set of flags if the method is in progress.
 * @type {Object}
 * @private
 */
SerialWrapper.prototype._inProgress = null;

/**
 * Adds method to the set.
 * @param {string} name Method name.
 * @param {Function} toInvoke Function that returns promise.
 */
SerialWrapper.prototype.add = function (name, toInvoke) {
	this._toInvoke[name] = toInvoke;
};

/**
 * Returns true if method with such name was registered to the set.
 * @param {string} name Name of method.
 * @returns {boolean} True if method name is registered.
 */
SerialWrapper.prototype.isRegistered = function (name) {
	return typeof (this._toInvoke[name]) === 'function';
};

/**
 * Invokes method without concurrency.
 * @param {string} name Method name.
 * @returns {Promise<Object>} Promise for result.
 */
SerialWrapper.prototype.invoke = function (name) {
	var self = this;

	if (!this.isRegistered(name)) {
		return Promise.reject(new Error(ERROR_NO_SUCH_METHOD));
	}

	if (this._inProgress[name]) {
		return new Promise(function (fulfill, reject) {
			self._emitter.once(name, fulfill);
			self._emitter.once(name + '--error', reject);
		});
	}

	this._inProgress[name] = true;
	this._toInvoke[name]()
		.then(function (result) {
			self._emitter.emit(name, result);
			self._inProgress[name] = null;
		})
		.catch(function (reason) {
			self._emitter.emit(name + '--error', reason);
			self._inProgress[name] = null;
		});

	return this.invoke(name);
};
},{"events":117}],104:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = StoreDispatcher;

var util = require('util'),
	SerialWrapper = require('./SerialWrapper'),
	moduleHelper = require('./helpers/moduleHelper');

var ERROR_STORE_NOT_FOUND = 'Store "%s" not found',
	ERROR_STATE = 'State should be set before any request',
	DEFAULT_LIFETIME = 60000;

/**
 * Creates new instance of store dispatcher.
 * @param {ServiceLocator} $serviceLocator Locator to resolve dependencies.
 * @param {StoreLoader} $storeLoader Store loader to load stores.
 * @param {EventEmitter} $eventBus Event bus to emit events.
 * @constructor
 */
function StoreDispatcher($serviceLocator, $storeLoader, $eventBus) {
	this._serviceLocator = $serviceLocator;
	this._storeLoader = $storeLoader;
	this._eventBus = $eventBus;
	this._storeInstances = Object.create(null);
	this._lastData = Object.create(null);
	this._dependants = Object.create(null);
	this._serialWrapper = new SerialWrapper();
}

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @private
 */
StoreDispatcher.prototype._serviceLocator = null;

/**
 * Current event bus.
 * @type {EventEmitter}
 * @private
 */
StoreDispatcher.prototype._eventBus = null;

/**
 * Current store loader.
 * @type {StoreLoader}
 * @private
 */
StoreDispatcher.prototype._storeLoader = null;

/**
 * Current map of all store instances.
 * @type {null}
 * @private
 */
StoreDispatcher.prototype._storeInstances = null;

/**
 * Current map of last data for each store.
 * @type {Object}
 * @private
 */
StoreDispatcher.prototype._lastData = null;

/**
 * Current map of last state of store dispatcher.
 * @type {Object}
 * @private
 */
StoreDispatcher.prototype._lastState = null;

/**
 * Current serial wrapper.
 * @type {SerialWrapper}
 * @private
 */
StoreDispatcher.prototype._serialWrapper = null;

/**
 * Current basic context for all store contexts.
 * @type {Object}
 * @private
 */
StoreDispatcher.prototype._currentBasicContext = null;

/**
 * Current set of store dependency graph.
 * @type {Object}
 * @private
 */
StoreDispatcher.prototype._dependants = null;

/**
 * Gets store data and creates store instance if required.
 * @param {string} storeName Name of store.
 * @returns {Object} Store's data.
 */
StoreDispatcher.prototype.getStoreData = function (storeName) {
	if (!this._lastState) {
		return Promise.reject(new Error(ERROR_STATE));
	}
	if (typeof (storeName) !== 'string') {
		return Promise.resolve(null);
	}
	if (storeName in this._lastData) {
		var existTime = Date.now() - this._lastData[storeName].createdAt;
		if (existTime <= this._lastData[storeName].lifetime) {
			return Promise.resolve(this._lastData[storeName].data);
		}
		delete this._lastData[storeName];
	}
	var self = this,
		lifetime = DEFAULT_LIFETIME;
	self._eventBus.emit('storeDataLoad', {
		name: storeName
	});
	var store = this.getStore(storeName);
	if (!store) {
		return Promise.reject(new Error(
				util.format(ERROR_STORE_NOT_FOUND, storeName))
		);
	}
	if (typeof (store.$lifetime) === 'number') {
		lifetime = store.$lifetime;
	}
	return self._serialWrapper.invoke(storeName)
		.then(function (data) {
			self._lastData[storeName] = {
				data: data,
				lifetime: lifetime,
				createdAt: Date.now()
			};
			self._eventBus.emit('storeDataLoaded', {
				name: storeName,
				data: data,
				lifetime: lifetime
			});
			return data;
		});
};

/**
 * Sends action to specified store and resolves promises in serial mode.
 * @param {string} storeName Name of the store.
 * @param {string} actionName Name of the action.
 * @param {Object} args Action arguments.
 * @returns {Promise<*>} Promise for action handling result.
 */
StoreDispatcher.prototype.sendAction = function (storeName, actionName, args) {
	if (!this._lastState) {
		return Promise.reject(new Error(ERROR_STATE));
	}
	var self = this,
		actionDetails = {
			storeName: storeName,
			actionName: actionName,
			args: args
		};
	this._eventBus.emit('actionSend', actionDetails);
	var store = this.getStore(storeName);
	if (!store) {
		return Promise.reject(new Error(
			util.format(ERROR_STORE_NOT_FOUND, storeName))
		);
	}
	var handleMethod = moduleHelper.getMethodToInvoke(
		store, 'handle', actionName
	);
	return moduleHelper.getSafePromise(function () {
		return handleMethod(args);
	})
		.then(function (result) {
			self._eventBus.emit('actionSent', actionDetails);
			return result;
		});
};

/**
 * Sends action to every store that has handle method for such action.
 * @param {string} actionName Name of the action.
 * @param {Object} arg Action arguments.
 * @returns {Promise<Array<*>>} Promise for the action handling result.
 */
StoreDispatcher.prototype.sendBroadcastAction = function (actionName, arg) {
	var promises = [],
		self = this,
		storesByNames = this._storeLoader.getStoresByNames(),
		methodName = moduleHelper.getCamelCaseName('handle', actionName);
	Object.keys(storesByNames)
		.forEach(function (storeName) {
			var store = storesByNames[storeName],
				protoMethod = store.constructor.prototype[methodName];
			if (typeof (protoMethod) !== 'function') {
				return;
			}
			var sendActionPromise = self.sendAction(
				store.name, actionName, arg
			);
			promises.push(sendActionPromise);
		});
	return Promise.all(promises);
};

/**
 * Sets new state to store dispatcher and invokes "changed" method for all
 * stores which state have been changed.
 * @param {Object} parameters Map of new parameters.
 * @param {Object} basicContext Basic context for all stores.
 * @returns {Array<string>} Names of stores that have been changed.
 */
StoreDispatcher.prototype.setState = function (parameters, basicContext) {
	parameters = parameters || Object.create(null);
	if (!this._lastState) {
		this._currentBasicContext = basicContext;
		this._lastState = parameters;
		return [];
	}

	// some store's parameters can be removed since last time
	var self = this,
		changed = Object.create(null);

	Object.keys(this._lastState)
		.filter(function (storeName) {
			return !(storeName in parameters);
		})
		.forEach(function (name) {
			changed[name] = true;
		});

	Object.keys(parameters)
		.forEach(function (storeName) {
			// new parameters were set for store
			if (!(storeName in self._lastState)) {
				changed[storeName] = true;
				return;
			}

			// new and last parameters has different values
			var lastParameterNames =
					Object.keys(self._lastState[storeName]),
				currentParameterNames =
					Object.keys(parameters[storeName]);

			if (currentParameterNames.length !==
				lastParameterNames.length) {
				changed[storeName] = true;
				return;
			}

			currentParameterNames.every(function (parameterName) {
				if (parameters[storeName][parameterName] !==
					self._lastState[storeName][parameterName]) {
					changed[storeName] = true;
					return false;
				}
				return true;
			});
		});

	this._lastState = parameters;
	if (this._currentBasicContext !== basicContext) {
		this._currentBasicContext = basicContext;
		Object.keys(this._storeInstances)
			.forEach(function (storeName) {
				self._storeInstances[storeName].$context =
					self._getStoreContext(storeName);
			});
	}

	var changedStoreNames = Object.create(null);
	Object.keys(changed)
		.forEach(function (storeName) {
			var store = self.getStore(storeName);
			if (!store) {
				return;
			}
			store.$context.changed()
				.forEach(function (name) {
					changedStoreNames[name] = true;
				});
		});

	this._eventBus.emit('stateChanged', {
		oldState: this._lastState,
		newState: parameters
	});
	return Object.keys(changedStoreNames);
};

/**
 * Gets context for store using component's context as a prototype.
 * @param {string} storeName Name of store.
 * @returns {Object} Store context.
 * @private
 */
StoreDispatcher.prototype._getStoreContext = function (storeName) {
	var self = this,
		storeContext = Object.create(this._currentBasicContext);
	storeContext.name = storeName;
	storeContext.state = this._lastState[storeName] || Object.create(null);
	storeContext.changed = function () {
		var walked = Object.create(null),
			current,
			toChange = [storeName];

		while (toChange.length > 0) {
			current = toChange.shift();
			if (current in walked) {
				continue;
			}
			walked[current] = true;
			if (current in self._dependants) {
				toChange = toChange.concat(
					Object.keys(self._dependants[current])
				);
			}
			delete self._lastData[current];
			self._eventBus.emit('storeChanged', current);
		}
		return Object.keys(walked);
	};
	storeContext.getStoreData = function (sourceStoreName) {
		if (sourceStoreName === storeName) {
			return Promise.resolve(null);
		}
		return self.getStoreData(sourceStoreName);
	};
	storeContext.setDependency = function (name) {
		if (!(name in self._dependants)) {
			self._dependants[name] = Object.create(null);
		}
		self._dependants[name][storeName] = true;
	};
	storeContext.unsetDependency = function (name) {
		if (!(name in self._dependants)) {
			return;
		}
		delete self._dependants[name][storeName];
	};
	storeContext.sendAction = function (storeName, name, args) {
		return self.sendAction(storeName, name, args);
	};
	storeContext.sendBroadcastAction = function (name, args) {
		return self.sendBroadcastAction(name, args);
	};

	return storeContext;
};

/**
 * Gets store instance and creates it if required.
 * @param {string} storeName Name of store.
 * @returns {Promise<Object>} Promise for store.
 */
StoreDispatcher.prototype.getStore = function (storeName) {
	if (!storeName) {
		return null;
	}
	var store = this._storeInstances[storeName];
	if (store) {
		return store;
	}
	var self = this;

	var stores = self._storeLoader.getStoresByNames(),
		config = self._serviceLocator.resolve('config');
	if (!(storeName in stores)) {
		return null;
	}

	var constructor = stores[storeName].constructor;
	constructor.prototype.$context = self._getStoreContext(storeName);
	self._storeInstances[storeName] = self._serviceLocator
		.resolveInstance(constructor, config);
	self._storeInstances[storeName].$context = constructor.prototype.$context;

	self._serialWrapper.add(storeName, function () {
		var loadMethod = moduleHelper.getMethodToInvoke(
			self._storeInstances[storeName], 'load'
		);
		return moduleHelper.getSafePromise(loadMethod);
	});
	return self._storeInstances[storeName];
};
},{"./SerialWrapper":103,"./helpers/moduleHelper":112,"util":121}],105:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = BootstrapperBase;

var util = require('util'),
	moduleHelper = require('../helpers/moduleHelper'),
	hrTimeHelper = require('../helpers/hrTimeHelper'),
	uhr = require('catberry-uhr'),
	Promise = require('promise'),
	StateProvider = require('../providers/StateProvider'),
	StoreLoader = require('../loaders/StoreLoader'),
	ComponentLoader = require('../loaders/ComponentLoader'),
	DocumentRenderer = require('../DocumentRenderer'),
	RequestRouter = require('../RequestRouter'),
	ModuleApiProviderBase = require('../base/ModuleApiProviderBase'),
	ContextFactory = require('../ContextFactory'),
	EventEmitter = require('events').EventEmitter;

var INFO_COMPONENT_LOADED = 'Component "%s" loaded',
	INFO_STORE_LOADED = 'Store "%s" loaded',
	INFO_ALL_STORES_LOADED = 'All stores loaded',
	INFO_ALL_COMPONENTS_LOADED = 'All components loaded',
	DEBUG_DOCUMENT_RENDERED = 'Document rendered for URI %s',
	DEBUG_RENDER_COMPONENT = 'Component "%s%s" is being rendered...',
	DEBUG_COMPONENT_RENDERED = 'Component "%s%s" rendered%s';

/**
 * Creates new instance of base Catberry bootstrapper.
 * @param {Function} catberryConstructor Constructor
 * of the Catberry's main module.
 * @constructor
 */
function BootstrapperBase(catberryConstructor) {
	this._catberryConstructor = catberryConstructor;
}

/**
 * Current constructor of the Catberry's main module.
 * @type {Function}
 * @private
 */
BootstrapperBase.prototype._catberryConstructor = null;

/**
 * Creates new full-configured instance of the Catberry application.
 * @param {Object?} configObject Configuration object.
 * @returns {Catberry} Catberry application instance.
 */
BootstrapperBase.prototype.create = function (configObject) {
	var currentConfig = configObject || {},
		catberry = new this._catberryConstructor();

	this.configure(currentConfig, catberry.locator);
	catberry.events = catberry.locator.resolveInstance(ModuleApiProviderBase);
	return catberry;
};

/**
 * Configures locator with all required type registrations.
 * @param {Object} configObject Configuration object.
 * @param {ServiceLocator} locator Service locator to configure.
 */
BootstrapperBase.prototype.configure = function (configObject, locator) {
	var eventBus = new EventEmitter();
	eventBus.setMaxListeners(0);
	locator.registerInstance('promise', Promise);
	locator.registerInstance('eventBus', eventBus);
	locator.registerInstance('config', configObject);
	locator.register('stateProvider', StateProvider, configObject, true);
	locator.register('contextFactory', ContextFactory, configObject, true);
	locator.register('storeLoader', StoreLoader, configObject, true);
	locator.register('componentLoader', ComponentLoader, configObject, true);
	locator.register('documentRenderer', DocumentRenderer, configObject, true);
	locator.register('requestRouter', RequestRouter, configObject, true);

	uhr.register(locator);
};

/**
 * Wraps event bus with log messages.
 * @param {Object} config Application config.
 * @param {EventEmitter} eventBus Event emitter that implements event bus.
 * @param {Logger} logger Logger to write messages.
 * @protected
 */
BootstrapperBase.prototype._wrapEventsWithLogger =
	function (config, eventBus, logger) {
		var isRelease = Boolean(config.isRelease);
		eventBus
			.on('componentLoaded', function (args) {
				logger.info(util.format(INFO_COMPONENT_LOADED, args.name));
			})
			.on('storeLoaded', function (args) {
				logger.info(util.format(INFO_STORE_LOADED, args.name));
			})
			.on('allStoresLoaded', function () {
				logger.info(INFO_ALL_STORES_LOADED);
			})
			.on('allComponentsLoaded', function () {
				logger.info(INFO_ALL_COMPONENTS_LOADED);
			})
			.on('error', function (error) {
				logger.error(error);
			});

		if (isRelease) {
			return;
		}
		eventBus
			.on('componentRender', function (args) {
				var id = args.context.attributes[moduleHelper.ATTRIBUTE_ID];
				logger.debug(util.format(DEBUG_RENDER_COMPONENT,
					moduleHelper.getTagNameForComponentName(args.name),
					id ? '#' + id : ''
				));
			})
			.on('componentRendered', function (args) {
				var id = args.context.attributes[moduleHelper.ATTRIBUTE_ID];
				logger.debug(util.format(
					DEBUG_COMPONENT_RENDERED,
					moduleHelper.getTagNameForComponentName(args.name),
					id ? '#' + id : '',
					util.isArray(args.hrTime) ?
						' (' + hrTimeHelper.toMessage(args.hrTime) + ')' : ''
				));
			})
			.on('documentRendered', function (args) {
				logger.debug(util.format(
					DEBUG_DOCUMENT_RENDERED, args.location.toString()
				));
			});
	};
},{"../ContextFactory":102,"../DocumentRenderer":94,"../RequestRouter":96,"../base/ModuleApiProviderBase":110,"../helpers/hrTimeHelper":97,"../helpers/moduleHelper":112,"../loaders/ComponentLoader":98,"../loaders/StoreLoader":99,"../providers/StateProvider":115,"catberry-uhr":125,"events":117,"promise":135,"util":121}],106:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = CatberryBase;

var ServiceLocator = require('catberry-locator');

/**
 * Creates new instance of the basic Catberry application module.
 * @constructor
 */
function CatberryBase() {
	this.locator = new ServiceLocator();
	this.locator.registerInstance('serviceLocator', this.locator);
	this.locator.registerInstance('catberry', this);
}

/**
 * Current version of catberry.
 */
CatberryBase.prototype.version = '7.0.3';

/**
 * Current object with events.
 * @type {ModuleApiProvider}
 */
CatberryBase.prototype.events = null;

/**
 * Current service locator.
 * @type {ServiceLocator}
 */
CatberryBase.prototype.locator = null;
},{"catberry-locator":123}],107:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = CookieWrapperBase;

var util = require('util');

/**
 * Creates new instance of the basic cookie wrapper.
 * @constructor
 */
function CookieWrapperBase() {
}

/**
 * Gets map of cookie values by name.
 * @returns {Object} Cookies map by names.
 */
CookieWrapperBase.prototype.getAll = function () {
	var string = this.getCookieString();
	return this._parseCookieString(string);
};

/**
 * Gets cookie value by name.
 * @param {string} name Cookie name.
 * @returns {string} Cookie value.
 */
CookieWrapperBase.prototype.get = function (name) {
	if (typeof (name) !== 'string') {
		return '';
	}

	return this.getAll()[name] || '';
};

/**
 * Parses cookie string into map of cookie key/value pairs.
 * @param {string} string Cookie string.
 * @returns {Object} Object with cookie values by keys.
 * @protected
 */
CookieWrapperBase.prototype._parseCookieString = function (string) {
	var cookie = Object.create(null);

	if (typeof (string) !== 'string') {
		return cookie;
	}
	string
		.split(/; */)
		.forEach(function (cookiePair) {
			var equalsIndex = cookiePair.indexOf('=');
			if (equalsIndex < 0) {
				return;
			}

			var key = cookiePair.substr(0, equalsIndex).trim(),
				value = cookiePair.substr(
					equalsIndex + 1, cookiePair.length
				).trim();

			value = value.replace(/^"|"$/g, '');
			cookie[key] = value;
		});

	return cookie;
};

/**
 * Converts cookie setup object to cookie string.
 * @param {Object} cookieSetup Cookie setup object.
 * @param {string} cookieSetup.key Cookie key.
 * @param {string} cookieSetup.value Cookie value.
 * @param {number?} cookieSetup.maxAge Max cookie age in seconds.
 * @param {Date?} cookieSetup.expires Expire date.
 * @param {string?} cookieSetup.path URI path for cookie.
 * @param {string?} cookieSetup.domain Cookie domain.
 * @param {boolean?} cookieSetup.secure Is cookie secured.
 * @param {boolean?} cookieSetup.httpOnly Is cookie HTTP only.
 * @returns {string} Cookie string.
 * @protected
 */
CookieWrapperBase.prototype._convertToCookieSetup = function (cookieSetup) {
	if (typeof (cookieSetup.key) !== 'string' ||
		typeof (cookieSetup.value) !== 'string') {
		throw new Error('Wrong key or value');
	}

	var cookie = cookieSetup.key + '=' + cookieSetup.value;

	// http://tools.ietf.org/html/rfc6265#section-4.1.1
	if (typeof (cookieSetup.maxAge) === 'number') {
		cookie += '; Max-Age=' + cookieSetup.maxAge.toFixed();
		if (!cookieSetup.expires) {
			// by default expire date = current date + max-age in seconds
			cookieSetup.expires = new Date(Date.now() +
				cookieSetup.maxAge * 1000);
		}
	}
	if (cookieSetup.expires instanceof Date) {
		cookie += '; Expires=' + cookieSetup.expires.toUTCString();
	}
	if (typeof (cookieSetup.path) === 'string') {
		cookie += '; Path=' + cookieSetup.path;
	}
	if (typeof (cookieSetup.domain) === 'string') {
		cookie += '; Domain=' + cookieSetup.domain;
	}
	if (typeof (cookieSetup.secure) === 'boolean' &&
		cookieSetup.secure) {
		cookie += '; Secure';
	}
	if (typeof (cookieSetup.httpOnly) === 'boolean' &&
		cookieSetup.httpOnly) {
		cookie += '; HttpOnly';
	}

	return cookie;
};
},{"util":121}],108:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = DocumentRendererBase;

/**
 * Creates new instance of the basic document renderer.
 * @param {ServiceLocator} $serviceLocator Locator to resolve dependencies.
 * @constructor
 */
function DocumentRendererBase($serviceLocator) {
	var self = this;
	this._serviceLocator = $serviceLocator;
	this._contextFactory = $serviceLocator.resolve('contextFactory');
	this._componentLoader = $serviceLocator.resolve('componentLoader');
	this._eventBus = $serviceLocator.resolve('eventBus');

	var storeLoader = $serviceLocator.resolve('storeLoader');
	this._loading = Promise.all([
		this._componentLoader.load(),
		storeLoader.load()
	])
		.then(function () {
			self._loading = null;
			self._eventBus.emit('ready');
		})
		.catch(function (reason) {
			self._eventBus.emit('error', reason);
		});
}

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @protected
 */
DocumentRendererBase.prototype._serviceLocator = null;

/**
 * Current component loader.
 * @type {ComponentLoader}
 * @protected
 */
DocumentRendererBase.prototype._componentLoader = null;

/**
 * Current module loading promise.
 * @type {Promise}
 * @protected
 */
DocumentRendererBase.prototype._loading = null;

/**
 * Current context factory.
 * @type {ContextFactory}
 * @protected
 */
DocumentRendererBase.prototype._contextFactory = null;

/**
 * Gets promise for ready state when it will be able handle requests.
 * @returns {Promise} Promise for nothing.
 * @protected
 */
DocumentRendererBase.prototype._getPromiseForReadyState = function () {
	return this._loading ?
		this._loading :
		Promise.resolve();
};
},{}],109:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = LoaderBase;

/**
 * Create basic implementation of a module loader.
 * @param {Array} transforms Array of module transformations.
 * @constructor
 */
function LoaderBase(transforms) {
	this._transforms = transforms;
}

/**
 * Current list of component transforms.
 * @type {Array}
 * @private
 */
LoaderBase.prototype._transforms = null;

/**
 * Applies all transformations registered in Service Locator.
 * @param {Object} module Loaded module.
 * @param {number?} index Transformation index in a list.
 * @returns {Promise<Object>} Transformed module.
 * @protected
 */
LoaderBase.prototype._applyTransforms = function (module, index) {
	if (index === undefined) {
		// the list is a stack, we should reverse it
		index = this._transforms.length - 1;
	}

	if (index < 0) {
		return Promise.resolve(module);
	}

	var self = this,
		transformation = this._transforms[index];

	return Promise.resolve()
		.then(function () {
			return transformation.transform(module);
		})
		.then(function (transformedModule) {
			return self._applyTransforms(transformedModule, index - 1);
		});
};
},{}],110:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ModuleApiProviderBase;

var ERROR_EVENT_NAME = 'Event name should be a string',
	ERROR_EVENT_HANDLER = 'Event handler should be a function';

/**
 * Creates new instance of the basic API provider.
 * @param {ServiceLocator} $serviceLocator Service locator
 * to resolve dependencies.
 * @constructor
 */
function ModuleApiProviderBase($serviceLocator) {
	this.locator = $serviceLocator;
	this.cookie = $serviceLocator.resolve('cookieWrapper');
	this._eventBus = $serviceLocator.resolve('eventBus');
}

/**
 * Current cookie provider.
 * @type {CookieWrapper}
 */
ModuleApiProviderBase.prototype.cookie = null;

/**
 * Current service locator.
 * @type {ServiceLocator}
 * @protected
 */
ModuleApiProviderBase.prototype.locator = null;

/**
 * Current event bus.
 * @type {EventEmitter}
 * @private
 */
ModuleApiProviderBase.prototype._eventBus = null;

/**
 * Subscribes on the specified event in Catberry.
 * @param {string} eventName Name of the event.
 * @param {Function} handler Event handler.
 * @returns {ModuleApiProviderBase} This object for chaining.
 */
ModuleApiProviderBase.prototype.on = function (eventName, handler) {
	checkEventNameAndHandler(eventName, handler);
	this._eventBus.on(eventName, handler);
	return this;
};

/**
 * Subscribes on the specified event in Catberry to handle once.
 * @param {string} eventName Name of the event.
 * @param {Function} handler Event handler.
 * @returns {ModuleApiProviderBase} This object for chaining.
 */
ModuleApiProviderBase.prototype.once = function (eventName, handler) {
	checkEventNameAndHandler(eventName, handler);
	this._eventBus.once(eventName, handler);
	return this;
};

/**
 * Removes the specified handler from the specified event.
 * @param {string} eventName Name of the event.
 * @param {Function} handler Event handler.
 * @returns {ModuleApiProviderBase} This object for chaining.
 */
ModuleApiProviderBase.prototype.removeListener = function (eventName, handler) {
	checkEventNameAndHandler(eventName, handler);
	this._eventBus.removeListener(eventName, handler);
	return this;
};

/**
 * Removes all handlers from the specified event in Catberry.
 * @param {string} eventName Name of the event.
 * @returns {ModuleApiProviderBase} This object for chaining.
 */
ModuleApiProviderBase.prototype.removeAllListeners = function (eventName) {
	checkEventNameAndHandler(eventName, dummy);
	this._eventBus.removeAllListeners(eventName);
	return this;
};

/**
 * Checks if event name is a string and handler is a function.
 * @param {*} eventName Name of the event to check.
 * @param {*} handler The event handler to check.
 */
function checkEventNameAndHandler(eventName, handler) {
	if (typeof (eventName) !== 'string') {
		throw new Error(ERROR_EVENT_NAME);
	}

	if (typeof (handler) !== 'function') {
		throw new Error(ERROR_EVENT_HANDLER);
	}
}

/**
 * Does nothing. It is used as a default callback.
 */
function dummy() {}

},{}],111:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

var util = require('util');

var TITLE = 'Catberry@7.0.3 (' +
		'<a href="https://github.com/catberry/catberry/issues" ' +
		'target="_blank">' +
		'report an issue' +
		'</a>' +
		')',
	AMP = /&/g,
	LT = /</g,
	GT = />/g,
	QUOT = /\"/g,
	SINGLE_QUOT = /\'/g,
	ERROR_MESSAGE_REGEXP = /^(?:[\w$]+): (?:.+)\r?\n/i,
	ERROR_MESSAGE_FORMAT = '<span ' +
		'style="color: red; font-size: 16pt; font-weight: bold;">' +
		'%s%s' +
		'</span>',
	NEW_LINE = /\r?\n/g;

module.exports = {
	/**
	 * Prints error with pretty formatting.
	 * @param {Error} error Error to print.
	 * @param {string} userAgent User agent information.
	 * @returns {string} HTML with all information about error.
	 */
	prettyPrint: function (error, userAgent) {
		if (!error || typeof (error) !== 'object') {
			return '';
		}
		var dateString = (new Date()).toUTCString() + ';<br/>',
			userAgentString = (userAgent ? (userAgent + ';<br/>') : ''),
			name = (typeof (error.name) === 'string' ? error.name + ': ' : ''),
			message = String(error.message || ''),
			stack = String(error.stack || '').replace(ERROR_MESSAGE_REGEXP, ''),
			fullMessage = util.format(
				ERROR_MESSAGE_FORMAT, escape(name), escape(message)
			);

		return '<div style="background-color: white; font-size: 12pt;">' +
			dateString +
			userAgentString +
			TITLE + '<br/><br/>' +
			fullMessage + '<br/><br/>' +
			escape(stack) +
			'</div>';
	}
};

/**
 * Escapes error text.
 * @param {string} value Error text.
 * @returns {string} escaped and formatted string.
 */
function escape(value) {
	return value
		.replace(AMP, '&amp;')
		.replace(LT, '&lt;')
		.replace(GT, '&gt;')
		.replace(QUOT, '&quot;')
		.replace(SINGLE_QUOT, '&#39;')
		.replace(NEW_LINE, '<br/>');
}
},{"util":121}],112:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

var helper = {
	COMPONENT_PREFIX: 'cat-',
	COMPONENT_PREFIX_REGEXP: /^cat-/i,
	COMPONENT_ERROR_TEMPLATE_POSTFIX: '--error',
	DOCUMENT_COMPONENT_NAME: 'document',
	DOCUMENT_ELEMENT_NAME: 'html',
	HEAD_COMPONENT_NAME: 'head',
	ATTRIBUTE_ID: 'id',
	ATTRIBUTE_STORE: 'cat-store',
	DEFAULT_LOGIC_FILENAME: 'index.js',

	/**
	 * Creates name for error template of component.
	 * @param {string} componentName name of component.
	 * @returns {string} Name of error template of the component.
	 */
	getNameForErrorTemplate: function (componentName) {
		if (typeof (componentName) !== 'string') {
			return '';
		}
		return componentName + helper.COMPONENT_ERROR_TEMPLATE_POSTFIX;
	},

	/**
	 * Determines if specified component name is the "document" component name.
	 * @param {string} componentName Name of the component.
	 * @returns {boolean} True if specified component is the "document" component.
	 */
	isDocumentComponent: function (componentName) {
		return componentName.toLowerCase() === helper.DOCUMENT_COMPONENT_NAME;
	},
	/**
	 * Determines if specified component name is the "head" component name.
	 * @param {string} componentName Name of the component.
	 * @returns {boolean} True if specified component is the "head" component.
	 */
	isHeadComponent: function (componentName) {
		return componentName.toLowerCase() === helper.HEAD_COMPONENT_NAME;
	},

	/**
	 * Gets the original component name without prefix.
	 * @param {string} fullComponentName Full component name (tag name).
	 * @returns {string} The original component name without prefix.
	 */
	getOriginalComponentName: function (fullComponentName) {
		if (typeof (fullComponentName) !== 'string') {
			return '';
		}
		fullComponentName = fullComponentName.toLowerCase();
		if (fullComponentName === helper.HEAD_COMPONENT_NAME) {
			return fullComponentName;
		}
		if (fullComponentName === helper.DOCUMENT_COMPONENT_NAME ||
			fullComponentName === helper.DOCUMENT_ELEMENT_NAME) {
			return helper.DOCUMENT_COMPONENT_NAME;
		}
		return fullComponentName.replace(helper.COMPONENT_PREFIX_REGEXP, '');
	},

	/**
	 * Gets valid tag name for component.
	 * @param {string} componentName Name of the component.
	 * @returns {string} Name of the tag.
	 */
	getTagNameForComponentName: function (componentName) {
		if (typeof (componentName) !== 'string') {
			return '';
		}
		var upperComponentName = componentName.toUpperCase();
		if (componentName === helper.HEAD_COMPONENT_NAME) {
			return upperComponentName;
		}
		if (componentName === helper.DOCUMENT_COMPONENT_NAME) {
			return helper.DOCUMENT_ELEMENT_NAME.toUpperCase();
		}
		return helper.COMPONENT_PREFIX.toUpperCase() + upperComponentName;
	},

	/**
	 * Gets method of the module that can be invoked.
	 * @param {Object} module Module implementation.
	 * @param {string} prefix Method prefix (i.e. handle).
	 * @param {string?} name Name of the entity to invoke method for
	 * (will be converted to camel casing).
	 * @returns {Function} Method to invoke.
	 */
	getMethodToInvoke: function (module, prefix, name) {
		if (!module || typeof (module) !== 'object') {
			return defaultPromiseMethod;
		}
		var methodName = helper.getCamelCaseName(prefix, name);
		if (typeof (module[methodName]) === 'function') {
			return module[methodName].bind(module);
		}
		if (typeof (module[prefix]) === 'function') {
			return module[prefix].bind(module, name);
		}

		return defaultPromiseMethod;
	},

	/**
	 * Gets name in camel casing for everything.
	 * @param {string} prefix Prefix for the name.
	 * @param {string} name Name to convert.
	 */
	getCamelCaseName: function (prefix, name) {
		if (!name) {
			return '';
		}
		var parts = name.split(/[^a-z0-9]/i),
			camelCaseName = String(prefix || '');

		parts.forEach(function (part) {
			if (!part) {
				return;
			}

			// first character in method name must be in lowercase
			camelCaseName += camelCaseName ?
				part[0].toUpperCase() :
				part[0].toLowerCase();
			camelCaseName += part.substring(1);
		});

		return camelCaseName;
	},

	/**
	 * Gets safe promise resolved from action.
	 * @param {Function} action Action to wrap with safe promise.
	 * @returns {Promise} Promise for done action.
	 */
	getSafePromise: function (action) {
		var result;
		try {
			result = action();
		} catch (e) {
			return Promise.reject(e);
		}
		return Promise.resolve(result);
	}
};

module.exports = helper;

/**
 * Just returns resolved promise.
 * @returns {Promise} Promise for nothing.
 */
function defaultPromiseMethod() {
	return Promise.resolve();
}
},{}],113:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = {
	/**
	 * Defines read-only property.
	 * @param {Object} object Object to define property in.
	 * @param {string} name Name of the property.
	 * @param {*} value Property value.
	 */
	defineReadOnly: function (object, name, value) {
		Object.defineProperty(object, name, {
			enumerable: false,
			configurable: false,
			writable: false,
			value: value
		});
	}
};
},{}],114:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

var util = require('util'),
	URI = require('catberry-uri').URI;

var URI_PATH_REPLACEMENT_REG_EXP_SOURCE = '([^\\/\\\\]*)',
	URI_QUERY_REPLACEMENT_REG_EXP_SOURCE = '([^&?=]*)';

var PATH_END_SLASH_REG_EXP = /(.+)\/($|\?|#)/,
	EXPRESSION_ESCAPE_REG_EXP = /[\-\[\]\{\}\(\)\*\+\?\.\\\^\$\|]/g,
	IDENTIFIER_REG_EXP_SOURCE = '[$A-Z_][\\dA-Z_$]*',
	STORE_LIST_REG_EXP_SOURCE = '(?:(?:\\\\[[ ]*' +
		'[^\\[\\],]+' +
		'([ ]*,[ ]*' +
		'[^\\[\\],]+' +
		')*[ ]*\\\\])|(?:\\\\[[ ]*\\\\]))?',
	PARAMETER_REG_EXP = new RegExp(
			':' +
			IDENTIFIER_REG_EXP_SOURCE +
			STORE_LIST_REG_EXP_SOURCE, 'gi'),
	SLASHED_BRACKETS_REG_EXP = /\\\[|\\\]/,
	STORE_LIST_SEPARATOR = ',';

module.exports = {
	/**
	 * Removes slash from the end of URI path.
	 * @param {string} uriPath URI path to process.
	 * @returns {string} URI without end slash.
	 */
	removeEndSlash: function (uriPath) {
		if (!uriPath || typeof (uriPath) !== 'string') {
			return '';
		}
		if (uriPath === '/') {
			return uriPath;
		}
		return uriPath.replace(PATH_END_SLASH_REG_EXP, '$1$2');
	},
	/**
	 * Gets URI mapper from the route expression like
	 * /some/:id[store1, store2, store3]/details?filter=:filter[store3].
	 * @param {URI} routeUri Expression that defines route.
	 * @returns {{expression: RegExp, map: Function}?} URI mapper object.
	 * URI mapper object.
	 */
	compileRoute: function (routeUri) {
		if (!routeUri) {
			return null;
		}

		// escape regular expression characters
		var escaped = routeUri.path.replace(
			EXPRESSION_ESCAPE_REG_EXP, '\\$&'
		);

		// get all occurrences of routing parameters in URI path
		var regExpSource = '^' + escaped.replace(
					PARAMETER_REG_EXP,
					URI_PATH_REPLACEMENT_REG_EXP_SOURCE) + '$',
			expression = new RegExp(regExpSource, 'i'),
			queryMapper,
			pathMapper,
			pathParameterMatches = escaped.match(
				PARAMETER_REG_EXP
			),
			pathParameters = pathParameterMatches ?
				pathParameterMatches.map(getParameterDescriptor) : null;

		if (pathParameters) {
			pathMapper = createUriPathMapper(expression, pathParameters);
		}

		if (routeUri.query) {
			var queryParameters = Object.create(null);
			Object.keys(routeUri.query.values)
				.forEach(function (name) {
					// arrays in routing definitions are not supported
					if (util.isArray(routeUri.query.values[name])) {
						return;
					}

					// escape regular expression characters
					var escaped = routeUri.query.values[name].replace(
						EXPRESSION_ESCAPE_REG_EXP, '\\$&'
					);

					// get all occurrences of routing parameters in URI path
					var regExpSource = '^' + escaped.replace(
							PARAMETER_REG_EXP,
							URI_QUERY_REPLACEMENT_REG_EXP_SOURCE) + '$';
					var queryParameterMatches = escaped.match(
							PARAMETER_REG_EXP
						);
					if (!queryParameterMatches ||
						queryParameterMatches.length === 0) {
						return;
					}

					var parameter = getParameterDescriptor(
						queryParameterMatches[queryParameterMatches.length - 1]
					);
					var expression = new RegExp(regExpSource, 'i');
					parameter.map = createUriQueryValueMapper(expression);
					queryParameters[name] = parameter;
				});
			queryMapper = createUriQueryMapper(queryParameters);
		}

		return {
			expression: expression,
			map: function (uri) {
				var state = Object.create(null);
				if (pathMapper) {
					pathMapper(uri.path, state);
				}

				if (queryMapper && uri.query) {
					queryMapper(uri.query.values, state);
				}

				return state;
			}
		};
	}
};

/**
 * Creates new URI path-to-state object mapper.
 * @param {RegExp} expression Regular expression to match URI path.
 * @param {Array} parameters List of parameter descriptors.
 * @returns {Function} URI mapper function.
 */
function createUriPathMapper(expression, parameters) {
	return function (uriPath, state) {
		var matches = uriPath.match(expression);
		if (!matches || matches.length < 2) {
			return state;
		}

		// start with second match because first match is always
		// the whole URI path
		matches = matches.splice(1);

		parameters.forEach(function (parameter, index) {
			var value = matches[index];
			try {
				value = decodeURIComponent(value);
			} catch (e) {
				// nothing to do
			}
			parameter.storeNames.forEach(function (storeName) {
				if (!state[storeName]) {
					state[storeName] = Object.create(null);
				}
				state[storeName][parameter.name] = value;
			});
		});
	};
}

/**
 * Creates new URI query-to-state object mapper.
 * @param {Object} parameters List of possible query parameter descriptors by
 * query parameter names.
 * @returns {Function} URI mapper function.
 */
function createUriQueryMapper(parameters) {
	return function (queryValues, state) {
		queryValues = queryValues || Object.create(null);

		Object.keys(queryValues)
			.forEach(function (queryKey) {
				var parameter = parameters[queryKey];
				if (!parameter) {
					return;
				}

				var value = util.isArray(queryValues[queryKey]) ?
						queryValues[queryKey]
							.map(parameter.map)
							.filter(function (value) {
								return value !== null;
							}) :
						parameter.map(queryValues[queryKey]);

				if (value === null) {
					return;
				}
				parameter.storeNames.forEach(function (storeName) {
					if (!state[storeName]) {
						state[storeName] = Object.create(null);
					}
					state[storeName][parameter.name] = value;
				});
			});
	};
}

/**
 * Maps query parameter value using the parameters expression.
 * @param {RegExp} expression Regular expression to get parameter value.
 * @returns {Function} URI query string parameter value mapper function.
 */
function createUriQueryValueMapper(expression) {
	return function (value) {
		value = value
			.toString()
			// we have to temporary encode these characters for not breaking
			// expression parsing, because it's terminated by query separator
			.replace(/=/g, '%3D')
			.replace(/\?/g, '%3F')
			.replace(/&/g, '%26');
		var matches = value.match(expression);
		if (!matches || matches.length === 0) {
			return null;
		}

		// the value is the second item, the first is a whole string
		var mappedValue = matches[matches.length - 1];
		try {
			mappedValue = decodeURIComponent(mappedValue);
		} catch (e) {
			// nothing to do
		}

		return mappedValue;
	};
}

/**
 * Gets description of parameters from its expression.
 * @param {string} parameter Parameter expression.
 * @returns {{name: string, storeNames: Array}} Parameter descriptor.
 */
function getParameterDescriptor(parameter) {
	var parts = parameter.split(SLASHED_BRACKETS_REG_EXP);

	return {
		name: parts[0]
			.trim()
			.substring(1),
		storeNames: (parts[1] ? parts[1] : '')
			.split(STORE_LIST_SEPARATOR)
			.map(function (storeName) {
				return storeName.trim();
			})
			.filter(function (storeName) {
				return storeName.length > 0;
			})
	};
}
},{"catberry-uri":127,"util":121}],115:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = StateProvider;

var routeHelper = require('./../helpers/routeHelper'),
	catberryUri = require('catberry-uri'),
	URI = catberryUri.URI;

/**
 * Create new instance of the state provider.
 * @param {ServiceLocator} $serviceLocator Service locator
 * to resolve URI mappers.
 * @constructor
 */
function StateProvider($serviceLocator) {
	this._uriMappers = getUriMappers($serviceLocator);
}

/**
 * Current list of URI mappers.
 * @type {Array}
 * @private
 */
StateProvider.prototype._uriMappers = null;

/**
 * Gets state by specified location URI.
 * @param {URI} location URI location.
 * @returns {Object?} State object.
 */
StateProvider.prototype.getStateByUri = function (location) {
	if (this._uriMappers.length === 0) {
		return null;
	}

	location = location.clone();

	location.path = routeHelper.removeEndSlash(location.path);
	var state = getState(this._uriMappers, location);

	if (!state) {
		return null;
	}

	// make state object immutable
	Object.keys(state)
		.forEach(function (storeName) {
			Object.freeze(state[storeName]);
		});
	Object.freeze(state);

	return state;
};

/**
 * Gets list of URI mappers.
 * @param {ServiceLocator} serviceLocator Service locator to get route
 * definitions.
 * @returns {Array} List of URI mappers.
 */
function getUriMappers(serviceLocator) {
	var uriMappers = [];

	serviceLocator.resolveAll('routeDefinition')
		.forEach(function (route) {
			// just colon-parametrized string
			if (typeof (route) === 'string') {
				var routeUri = new URI(route);
				routeUri.path = routeHelper.removeEndSlash(routeUri.path);
				uriMappers.push(routeHelper.compileRoute(routeUri));
				return;
			}

			// extended colon-parametrized mapper
			if (typeof (route) === 'object' &&
				(typeof (route.expression) === 'string') &&
				(route.map instanceof Function)) {
				var mapperUri = new URI(route.expression);
				mapperUri.path = routeHelper.removeEndSlash(mapperUri.path);
				var mapper = routeHelper.compileRoute(mapperUri);
				uriMappers.push({
					expression: mapper.expression,
					map: function (uri) {
						var state = mapper.map(uri);
						return route.map(state);
					}
				});
				return;
			}

			// regular expression mapper
			if (typeof (route) === 'object' &&
				(route.expression instanceof RegExp) &&
				(route.map instanceof Function)) {
				uriMappers.push(route);
			}
		});
	return uriMappers;
}

/**
 * Gets state.
 * @param {Array} uriMappers List of URI mappers.
 * @param {URI} location URI that describes the state.
 * @returns {Object|null} The state from URI.
 */
function getState(uriMappers, location) {
	var state = null;

	uriMappers.some(function (mapper) {
		if (mapper.expression.test(location.path)) {
			state = mapper.map(location) || Object.create(null);
			return true;
		}
		return false;
	});

	return state;
}
},{"./../helpers/routeHelper":114,"catberry-uri":127}],116:[function(require,module,exports){
(function (process,global){
module.exports = process.hrtime || hrtime

// polyfil for window.performance.now
var performance = global.performance || {}
var performanceNow =
  performance.now        ||
  performance.mozNow     ||
  performance.msNow      ||
  performance.oNow       ||
  performance.webkitNow  ||
  function(){ return (new Date()).getTime() }

// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp){
  var clocktime = performanceNow.call(performance)*1e-3
  var seconds = Math.floor(clocktime)
  var nanoseconds = Math.floor((clocktime%1)*1e9)
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0]
    nanoseconds = nanoseconds - previousTimestamp[1]
    if (nanoseconds<0) {
      seconds--
      nanoseconds += 1e9
    }
  }
  return [seconds,nanoseconds]
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":119}],117:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],118:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],119:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],120:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],121:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":120,"_process":119,"inherits":118}],122:[function(require,module,exports){
/*
 * catberry-locator
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-locator's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry-locator that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ConstructorTokenizer;

var STATES = {
	ILLEGAL: -1,
	NO: 0,
	IDENTIFIER: 1,
	FUNCTION: 2,
	PARENTHESES_OPEN: 3,
	PARENTHESES_CLOSE: 4,
	COMMA: 5,
	END: 6
};
ConstructorTokenizer.STATES = STATES;

var KEYWORDS = {
	FUNCTION: 'function'
};

var WHITESPACE_TEST = /^\s$/,
	IDENTIFIER_TEST = /^[\$\w]$/;

function ConstructorTokenizer(constructorSource) {
	this._source = String(constructorSource || '');
}

/**
 * Current source code of constructor.
 * @type {string}
 * @private
 */
ConstructorTokenizer.prototype._source = '';

/**
 * Current index in source code.
 * @type {number}
 * @private
 */
ConstructorTokenizer.prototype._currentIndex = 0;

/**
 * Current index in source code.
 * @type {number}
 * @private
 */
ConstructorTokenizer.prototype._currentEnd = 0;

/**
 * Current state.
 * @type {number}
 * @private
 */
ConstructorTokenizer.prototype._currentState = STATES.NO;

/**
 * Gets next token in source.
 * @returns {{state: (number), start: number, end: number}} Token descriptor.
 */
ConstructorTokenizer.prototype.next = function () {
	if (this._currentState === STATES.ILLEGAL ||
		this._currentState === STATES.END) {
		return {
			state: this._currentState,
			start: this._currentIndex,
			end: this._currentIndex + 1
		};
	}

	var start = this._currentIndex,
		state = this._currentState;

	switch (this._currentState) {
		case STATES.PARENTHESES_OPEN:
			this.parenthesesOpenState();
			break;
		case STATES.PARENTHESES_CLOSE:
			this.parenthesesCloseState();
			break;
		case STATES.IDENTIFIER:
			this.identifierState();
			break;
		case STATES.COMMA:
			this.commaState();
			break;
		case STATES.FUNCTION:
			this.functionState();
			break;
		default:
			this.skipWhitespace();
			var expected = this._source.substr(
				this._currentIndex, KEYWORDS.FUNCTION.length
			);
			if (expected === KEYWORDS.FUNCTION) {
				this._currentState = STATES.FUNCTION;
				return this.next();
			}

			state = STATES.ILLEGAL;
	}

	return {
		state: state,
		start: start,
		end: this._currentEnd
	};
};

/**
 * Skips all whitespace characters.
 */
ConstructorTokenizer.prototype.skipWhitespace = function () {
	while (
		this._currentIndex < this._source.length &&
		WHITESPACE_TEST.test(this._source[this._currentIndex])) {
		this._currentIndex++;
	}
};

/**
 * Describes PARENTHESES_OPEN state of machine.
 */
ConstructorTokenizer.prototype.parenthesesOpenState = function () {
	this._currentIndex++;
	this._currentEnd = this._currentIndex;

	this.skipWhitespace();
	if (IDENTIFIER_TEST.test(this._source[this._currentIndex])) {
		this._currentState = STATES.IDENTIFIER;
	} else if (this._source[this._currentIndex] === ')') {
		this._currentState = STATES.PARENTHESES_CLOSE;
	} else {
		this._currentState = STATES.ILLEGAL;
	}
};

/**
 * Describes PARENTHESES_CLOSE state of machine.
 */
ConstructorTokenizer.prototype.parenthesesCloseState = function () {
	this._currentIndex++;
	this._currentEnd = this._currentIndex;
	this._currentState = STATES.END;
};

/**
 * Describes FUNCTION state of machine.
 */
ConstructorTokenizer.prototype.functionState = function () {
	this._currentIndex += KEYWORDS.FUNCTION.length;
	this._currentEnd = this._currentIndex;

	this.skipWhitespace();

	if (this._source[this._currentIndex] === '(') {
		this._currentState = STATES.PARENTHESES_OPEN;
	} else if (IDENTIFIER_TEST.test(this._source[this._currentIndex])) {
		this._currentState = STATES.IDENTIFIER;
	} else {
		this._currentState = STATES.ILLEGAL;
	}
};

/**
 * Describes IDENTIFIER state of machine.
 */
ConstructorTokenizer.prototype.identifierState = function () {
	while (
		this._currentIndex < this._source.length &&
		IDENTIFIER_TEST.test(this._source[this._currentIndex])) {
		this._currentIndex++;
	}

	this._currentEnd = this._currentIndex;

	this.skipWhitespace();
	if (this._source[this._currentIndex] === '(') {
		this._currentState = STATES.PARENTHESES_OPEN;
	} else if (this._source[this._currentIndex] === ')') {
		this._currentState = STATES.PARENTHESES_CLOSE;
	} else if (this._source[this._currentIndex] === ',') {
		this._currentState = STATES.COMMA;
	} else {
		this._currentState = STATES.ILLEGAL;
	}
};

/**
 * Describes COMMA state of machine.
 */
ConstructorTokenizer.prototype.commaState = function () {
	this._currentIndex++;
	this._currentEnd = this._currentIndex;

	this.skipWhitespace();
	if (IDENTIFIER_TEST.test(this._source[this._currentIndex])) {
		this._currentState = STATES.IDENTIFIER;
		return;
	}
	this._currentState = STATES.ILLEGAL;
};
},{}],123:[function(require,module,exports){
/*
 * catberry-locator
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-locator's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry-locator that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = ServiceLocator;

var util = require('util'),
	ConstructorTokenizer = require('./ConstructorTokenizer');

var DEPENDENCY_REGEXP = /^\$\w+/,
	ERROR_CONSTRUCTOR_SHOULD_BE_FUNCTION = 'Constructor should be a function',
	ERROR_TYPE_NOT_REGISTERED = 'Type "%s" not registered',
	ERROR_TYPE_SHOULD_BE_STRING = 'Type name "%s" should be a string';

/**
 * Creates new instance of service locator.
 * @constructor
 */
function ServiceLocator() {
	this._registrations = Object.create(null);
}

/**
 * Current type registrations.
 * @type {Object}
 * @protected
 */
ServiceLocator.prototype._registrations = null;

/**
 * Registers new type in service locator.
 * @param {string} type Type name, which will be alias in other constructors.
 * @param {Function} constructor Constructor which
 * initializes instance of specified type.
 * @param {Object?} parameters Set of named parameters
 * which will be also injected.
 * @param {boolean?} isSingleton If true every resolve will return
 * the same instance.
 */
ServiceLocator.prototype.register =
	function (type, constructor, parameters, isSingleton) {
		throwIfNotFunction(constructor);
		throwIfNotString(type);

		initializeRegistration(type, this);
		var parameterNames = getParameterNames(constructor);

		this._registrations[type].unshift({
			constructor: constructor,
			parameters: parameters || {},
			parameterNames: parameterNames,
			isSingleton: Boolean(isSingleton),
			singleInstance: null
		});
	};

/**
 * Registers single instance for specified type.
 * @param {string} type Type name.
 * @param {Object} instance Instance to register.
 */
ServiceLocator.prototype.registerInstance = function (type, instance) {
	throwIfNotString(type);
	initializeRegistration(type, this);

	this._registrations[type].unshift({
		constructor: instance.constructor,
		parameters: {},
		parameterNames: [],
		isSingleton: true,
		singleInstance: instance
	});
};

/**
 * Resolves last registered implementation by type name
 * including all its dependencies recursively.
 * @param {string} type Type name.
 * @returns {Object} Instance of specified type.
 */
ServiceLocator.prototype.resolve = function (type) {
	throwIfNotString(type);
	throwIfNoType(this._registrations, type);
	var firstRegistration = this._registrations[type][0];
	return createInstance(firstRegistration, this);
};

/**
 * Resolves all registered implementations by type name
 * including all dependencies recursively.
 * @param {string} type Type name.
 * @returns {Array} Array of instances specified type.
 */
ServiceLocator.prototype.resolveAll = function (type) {
	throwIfNotString(type);
	try {
		throwIfNoType(this._registrations, type);
	} catch (e) {
		return [];
	}
	return this._registrations[type].map(function (registration) {
		return createInstance(registration, this);
	}, this);
};

/**
 * Resolves instance of specified constructor including dependencies.
 * @param {Function} constructor Constructor for instance creation.
 * @param {Object?} parameters Set of its parameters values.
 * @returns {Object} Instance of specified constructor.
 */
ServiceLocator.prototype.resolveInstance = function (constructor, parameters) {
	return createInstance({
		constructor: constructor,
		parameters: parameters || {},
		parameterNames: getParameterNames(constructor),
		isSingleton: false,
		singleInstance: null
	}, this);
};

/**
 * Unregisters all registrations of specified type.
 * @param {string} type Type name.
 */
ServiceLocator.prototype.unregister = function (type) {
	throwIfNotString(type);
	delete this._registrations[type];
};

/**
 * Initializes registration array for specified type.
 * @param {string} type Type name.
 * @param {ServiceLocator} context Context of execution.
 */
function initializeRegistration(type, context) {
	if (!(type in context._registrations)) {
		context._registrations[type] = [];
	}
}

/**
 * Throws error if specified registration is not found.
 * @param {Object} registrations Current registrations set.
 * @param {string} type Type to check.
 */
function throwIfNoType(registrations, type) {
	if (!(type in registrations) || registrations[type].length === 0) {
		throw new Error(util.format(ERROR_TYPE_NOT_REGISTERED, type));
	}
}

/**
 * Throws error if specified constructor is not a function.
 * @param {Function} constructor Constructor to check.
 */
function throwIfNotFunction(constructor) {
	if (constructor instanceof Function) {
		return;
	}

	throw new Error(ERROR_CONSTRUCTOR_SHOULD_BE_FUNCTION);
}

/**
 * Throws error if specified type name is not a string.
 * @param {string} type Type name to check.
 */
function throwIfNotString(type) {
	if (typeof (type) === 'string') {
		return;
	}

	throw new Error(util.format(ERROR_TYPE_SHOULD_BE_STRING, type));
}

/**
 * Creates instance of type specified and parameters in registration.
 * @param {Object} registration Specified registration of type.
 * @param {ServiceLocator} context Context of execution.
 * @returns {Object} Instance of type specified in registration.
 */
function createInstance(registration, context) {
	if (registration.isSingleton && registration.singleInstance !== null) {
		return registration.singleInstance;
	}

	var instanceParameters = getParameters(registration, context),
		instance = Object.create(registration.constructor.prototype);
	registration.constructor.apply(instance, instanceParameters);

	if (registration.isSingleton) {
		registration.singleInstance = instance;
	}

	return instance;
}

/**
 * Gets constructor parameters specified in type constructor.
 * @param {Object} registration Type registration.
 * @param {ServiceLocator} context Context of execution.
 * @returns {Array} Array of resolved dependencies to inject.
 */
function getParameters(registration, context) {
	return registration.parameterNames.map(function (parameterName) {
		var dependencyName = getDependencyName(parameterName);
		return dependencyName === null ?
			registration.parameters[parameterName] :
			this.resolve(dependencyName);
	}, context);
}

/**
 * Gets name of dependency type.
 * @param {string} parameterName Name of constructor parameter.
 * @returns {string|null} Name of dependency type.
 */
function getDependencyName(parameterName) {
	if (!DEPENDENCY_REGEXP.test(parameterName)) {
		return null;
	}

	return parameterName.substr(1, parameterName.length - 1);
}

/**
 * Gets all parameter names used in constructor function.
 * @param {Function} constructor Constructor function.
 * @returns {Array<string>} Array of parameter names.
 */
function getParameterNames(constructor) {
	var source = constructor.toString(),
		tokenizer = new ConstructorTokenizer(source),
		result = [],
		token = {
			state: ConstructorTokenizer.STATES.NO,
			start: 0,
			end: 0
		},
		areParametersStarted = false;

	while (
		token.state !== ConstructorTokenizer.STATES.END &&
		token.state !== ConstructorTokenizer.STATES.ILLEGAL) {
		token = tokenizer.next();
		if (token.state === ConstructorTokenizer.STATES.PARENTHESES_OPEN) {
			areParametersStarted = true;
		}

		if (areParametersStarted &&
			token.state === ConstructorTokenizer.STATES.IDENTIFIER) {
			result.push(source.substring(token.start, token.end));
		}
	}
	return result;
}
},{"./ConstructorTokenizer":122,"util":121}],124:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = UHR;

var UHRBase = require('../lib/UHRBase'),
	Promise = require('promise'),
	URI = require('catberry-uri').URI,
	util = require('util');

// if browser still does not have promises then add it.
if (!('Promise' in window)) {
	window.Promise = Promise;
}

util.inherits(UHR, UHRBase);

var NON_SAFE_HEADERS = {
	cookie: true,
	'accept-charset': true
};

var ERROR_CONNECTION = 'Connection error',
	ERROR_TIMEOUT = 'Request timeout',
	ERROR_ABORTED = 'Request aborted';

/**
 * Creates new instance of client-side HTTP(S) request implementation.
 * @param {Window} $window Current window object.
 * @constructor
 */
function UHR($window) {
	UHRBase.call(this);
	this.window = $window;
}

/**
 * Current instance of window.
 * @type {Window}
 */
UHR.prototype.window = null;

/**
 * Does request with specified parameters using protocol implementation.
 * @param {Object} parameters Request parameters.
 * @param {string} parameters.method HTTP method.
 * @param {string} parameters.url URL for request.
 * @param {URI} parameters.uri URI object.
 * @param {Object} parameters.headers HTTP headers to send.
 * @param {string|Object} parameters.data Data to send.
 * @param {number} parameters.timeout Request timeout.
 * @param {boolean} parameters.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 * @protected
 */
UHR.prototype._doRequest = function (parameters) {
	var self = this;

	Object.keys(parameters.headers)
		.forEach(function (name) {
			if (NON_SAFE_HEADERS.hasOwnProperty(name.toLowerCase())) {
				delete parameters.headers[name];
			}
		});

	return new Promise(function (fulfill, reject) {
		var requestError = null,
			xhr = new self.window.XMLHttpRequest();

		xhr.onabort = function () {
			requestError = new Error(ERROR_ABORTED);
			reject(requestError);
		};
		xhr.ontimeout = function () {
			requestError = new Error(ERROR_TIMEOUT);
			reject(requestError);
		};
		xhr.onerror = function () {
			requestError = new Error(xhr.statusText || ERROR_CONNECTION);
			reject(requestError);
		};
		xhr.onreadystatechange = function () {
			if (xhr.readyState !== 4) {
				return;
			}
			if (requestError) {
				return;
			}
			var statusObject = getStatusObject(xhr),
				content = self.convertResponse(
					statusObject.headers,
					xhr.responseText
				);
			fulfill({
				status: statusObject,
				content: content
			});
		};

		var user = parameters.uri.authority.userInfo ?
				parameters.uri.authority.userInfo.user : null,
			password = parameters.uri.authority.userInfo ?
				parameters.uri.authority.userInfo.password : null;
		xhr.open(
			parameters.method, parameters.uri.toString(), true,
			user || undefined, password || undefined
		);
		xhr.timeout = parameters.timeout;

		if (parameters.withCredentials) {
			xhr.withCredentials = true;
		}

		Object.keys(parameters.headers)
			.forEach(function (headerName) {
				xhr.setRequestHeader(
					headerName, parameters.headers[headerName]
				);
			});

		xhr.send(parameters.data);
	});
};

/**
 * Gets state object for specified jQuery XHR object.
 * @param {Object?} xhr XHR object.
 * @returns {{code: number, text: string, headers: Object}} Status object.
 */
function getStatusObject(xhr) {
	var headers = {};

	if (!xhr) {
		return {
			code: 0,
			text: '',
			headers: headers
		};
	}

	xhr
		.getAllResponseHeaders()
		.split('\n')
		.forEach(function (header) {
			var delimiterIndex = header.indexOf(':');
			if (delimiterIndex <= 0) {
				return;
			}
			var headerName = header
				.substring(0, delimiterIndex)
				.trim()
				.toLowerCase();
			headers[headerName] = header
				.substring(delimiterIndex + 1)
				.trim();
		});

	return {
		// handle IE9 bug: http://goo.gl/idspSr
		code: xhr.status === 1223 ? 204 : xhr.status,
		text: xhr.status === 1223 ? 'No Content' : xhr.statusText,
		headers: headers
	};
}
},{"../lib/UHRBase":126,"catberry-uri":127,"promise":135,"util":121}],125:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

var UHR = require('./lib/UHR');

module.exports = {
	/**
	 * Registers UHR in server-side service locator.
	 * @param {ServiceLocator} locator Catberry's service locator.
	 */
	register: function (locator) {
		var config = locator.resolve('config');
		locator.register('uhr', UHR, config, true);
	},
	UHR: UHR
};
},{"./lib/UHR":124}],126:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = UHRBase;

var catberryUri = require('catberry-uri'),
	Query = catberryUri.Query,
	URI = catberryUri.URI;

var ERROR_UNSUPPORTED_PROTOCOL = 'Protocol is unsupported',
	ERROR_PARAMETERS_SHOULD_BE_OBJECT = 'Request parameters should be object',
	ERROR_URL_IS_REQUIRED = 'URL is required parameter',
	ERROR_METHOD_IS_REQUIRED = 'Request method is required parameter',
	ERROR_HOST_IS_REQUIRED = 'Host in URL is required',
	ERROR_SCHEME_IS_REQUIRED = 'Scheme in URL is required',
	ERROR_TIMEOUT_SHOULD_BE_NUMBER = 'Timeout should be a number',
	DEFAULT_TIMEOUT = 30000,
	HTTP_PROTOCOL_REGEXP = /^(http)s?$/i;

var METHODS = {
	GET: 'GET',
	HEAD: 'HEAD',
	POST: 'POST',
	PUT: 'PUT',
	PATCH: 'PATCH',
	DELETE: 'DELETE',
	OPTIONS: 'OPTIONS',
	TRACE: 'TRACE',
	CONNECT: 'CONNECT'
};

UHRBase.TYPES = {
	URL_ENCODED: 'application/x-www-form-urlencoded',
	JSON: 'application/json',
	PLAIN_TEXT: 'text/plain',
	HTML: 'text/html'
};

UHRBase.CHARSET = 'UTF-8';

UHRBase.DEFAULT_GENERAL_HEADERS = {
	Accept: UHRBase.TYPES.JSON + '; q=0.7, ' +
		UHRBase.TYPES.HTML + '; q=0.2, ' +
		UHRBase.TYPES.PLAIN_TEXT + '; q=0.1',
	'Accept-Charset': UHRBase.CHARSET + '; q=1'
};

UHRBase.CHARSET_PARAMETER = '; charset=' + UHRBase.CHARSET;
UHRBase.URL_ENCODED_ENTITY_CONTENT_TYPE = UHRBase.TYPES.URL_ENCODED +
	UHRBase.CHARSET_PARAMETER;

UHRBase.JSON_ENTITY_CONTENT_TYPE = UHRBase.TYPES.JSON +
	UHRBase.CHARSET_PARAMETER;

UHRBase.PLAIN_TEXT_ENTITY_CONTENT_TYPE = UHRBase.TYPES.PLAIN_TEXT +
	UHRBase.CHARSET_PARAMETER;

// This module were developed using HTTP/1.1v2 RFC 2616
// (http://www.w3.org/Protocols/rfc2616/)
/**
 * Creates new instance of Basic Universal HTTP(S) Request implementation.
 * @constructor
 */
function UHRBase() { }

/**
 * Does GET request to HTTP server.
 * @param {string} url URL to request.
 * @param {Object?} options Request parameters.
 * @param {Object?} options.headers HTTP headers to send.
 * @param {(string|Object)?} options.data Data to send.
 * @param {number?} options.timeout Request timeout.
 * @param {boolean?} options.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.get = function (url, options) {
	options = options || {};
	var parameters = Object.create(options);
	parameters.method = METHODS.GET;
	parameters.url = url;
	return this.request(parameters);
};

/**
 * Does POST request to HTTP server.
 * @param {string} url URL to request.
 * @param {Object?} options Request parameters.
 * @param {Object?} options.headers HTTP headers to send.
 * @param {(string|Object)?} options.data Data to send.
 * @param {number?} options.timeout Request timeout.
 * @param {boolean?} options.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.post = function (url, options) {
	options = options || {};
	var parameters = Object.create(options);
	parameters.method = METHODS.POST;
	parameters.url = url;
	return this.request(parameters);
};

/**
 * Does PUT request to HTTP server.
 * @param {string} url URL to request.
 * @param {Object?} options Request parameters.
 * @param {Object?} options.headers HTTP headers to send.
 * @param {(string|Object)?} options.data Data to send.
 * @param {number?} options.timeout Request timeout.
 * @param {boolean?} options.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.put = function (url, options) {
	options = options || {};
	var parameters = Object.create(options);
	parameters.method = METHODS.PUT;
	parameters.url = url;
	return this.request(parameters);
};

/**
 * Does PATCH request to HTTP server.
 * @param {string} url URL to request.
 * @param {Object?} options Request parameters.
 * @param {Object?} options.headers HTTP headers to send.
 * @param {(string|Object)?} options.data Data to send.
 * @param {number?} options.timeout Request timeout.
 * @param {boolean?} options.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.patch = function (url, options) {
	options = options || {};
	var parameters = Object.create(options);
	parameters.method = METHODS.PATCH;
	parameters.url = url;
	return this.request(parameters);
};

/**
 * Does DELETE request to HTTP server.
 * @param {string} url URL to request.
 * @param {Object?} options Request parameters.
 * @param {Object?} options.headers HTTP headers to send.
 * @param {(string|Object)?} options.data Data to send.
 * @param {number?} options.timeout Request timeout.
 * @param {boolean?} options.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.delete = function (url, options) {
	var parameters = Object.create(options);
	parameters.method = METHODS.DELETE;
	parameters.url = url;
	return this.request(parameters);
};

/**
 * Does request with specified parameters.
 * @param {Object} parameters Request parameters.
 * @param {string} parameters.method HTTP method.
 * @param {string} parameters.url URL for request.
 * @param {Object?} parameters.headers HTTP headers to send.
 * @param {(string|Object)?} parameters.data Data to send.
 * @param {number?} parameters.timeout Request timeout.
 * @param {boolean?} parameters.unsafeHTTPS If true then requests
 * to servers with invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 */
UHRBase.prototype.request = function (parameters) {
	var self = this;
	return this._validateRequest(parameters)
		.then(function (validated) {
			return self._doRequest(validated);
		});
};

/**
 * Validates UHR parameters.
 * @param {Object} parameters Request parameters.
 * @param {string} parameters.method HTTP method.
 * @param {string} parameters.url URL for request.
 * @param {Object?} parameters.headers HTTP headers to send.
 * @param {(string|Object)?} parameters.data Data to send.
 * @param {number?} parameters.timeout Request timeout.
 * @param {boolean?} parameters.unsafeHTTPS If true then requests
 * to servers with invalid HTTPS certificates are allowed.
 * @returns {Promise} Promise for nothing.
 * @private
 */
/*jshint maxcomplexity:false */
UHRBase.prototype._validateRequest = function (parameters) {
	if (!parameters || typeof (parameters) !== 'object') {
		return Promise.reject(new Error(ERROR_PARAMETERS_SHOULD_BE_OBJECT));
	}

	var validated = Object.create(parameters);

	if (typeof (parameters.url) !== 'string') {
		return Promise.reject(new Error(ERROR_URL_IS_REQUIRED));
	}
	validated.uri = new URI(validated.url);
	if (!validated.uri.scheme) {
		return Promise.reject(new Error(ERROR_SCHEME_IS_REQUIRED));
	}
	if (!HTTP_PROTOCOL_REGEXP.test(validated.uri.scheme)) {
		return Promise.reject(new Error(ERROR_UNSUPPORTED_PROTOCOL));
	}
	if (!validated.uri.authority || !validated.uri.authority.host) {
		return Promise.reject(new Error(ERROR_HOST_IS_REQUIRED));
	}
	if (typeof (validated.method) !== 'string' ||
		!(validated.method in METHODS)) {
		return Promise.reject(new Error(ERROR_METHOD_IS_REQUIRED));
	}

	validated.timeout = validated.timeout || DEFAULT_TIMEOUT;
	if (typeof (validated.timeout) !== 'number') {
		return Promise.reject(new Error(ERROR_TIMEOUT_SHOULD_BE_NUMBER));
	}

	validated.headers = this._createHeaders(validated.headers);

	if (!this._isUpstreamRequest(parameters.method) &&
		validated.data && typeof (validated.data) === 'object') {

		var dataKeys = Object.keys(validated.data);

		if (dataKeys.length > 0 && !validated.uri.query) {
			validated.uri.query = new Query('');
		}

		dataKeys.forEach(function (key) {
			validated.uri.query.values[key] = validated.data[key];
		});
		validated.data = null;
	} else {
		var dataAndHeaders = this._getDataToSend(
			validated.headers, validated.data
		);
		validated.headers = dataAndHeaders.headers;
		validated.data = dataAndHeaders.data;
	}

	return Promise.resolve(validated);
};

/**
 * Gets data for sending via HTTP request using Content Type HTTP header.
 * @param {Object} headers HTTP headers.
 * @param {Object|string} data Data to send.
 * @returns {{headers: Object, data: Object|string}} Data and headers to send.
 * @private
 */
UHRBase.prototype._getDataToSend = function (headers, data) {
	var found = findContentType(headers),
		contentTypeHeader = found.name,
		contentType = found.type;

	if (!data || typeof (data) !== 'object') {
		data = data ? String(data) : '';
		if (!contentType) {
			headers[contentTypeHeader] = UHRBase.PLAIN_TEXT_ENTITY_CONTENT_TYPE;
		}
		return {
			headers: headers,
			data: data
		};
	}

	if (contentType === UHRBase.TYPES.JSON) {
		return {
			headers: headers,
			data: JSON.stringify(data)
		};
	}

	// otherwise object will be sent with
	// application/x-www-form-urlencoded
	headers[contentTypeHeader] = UHRBase.URL_ENCODED_ENTITY_CONTENT_TYPE;

	var query = new Query();
	query.values = data;
	return {
		headers: headers,
		data: query.toString()
			.replace(/\+/g, '%2B')
			.replace(/%20/g, '+')
	};
};

/**
 * Creates HTTP headers for request using defaults and current parameters.
 * @param {Object} parameterHeaders HTTP headers of UHR.
 * @protected
 */
UHRBase.prototype._createHeaders = function (parameterHeaders) {
	if (!parameterHeaders || typeof (parameterHeaders) !== 'object') {
		parameterHeaders = {};
	}
	var headers = {};

	Object.keys(UHRBase.DEFAULT_GENERAL_HEADERS)
		.forEach(function (headerName) {
			headers[headerName] = UHRBase.DEFAULT_GENERAL_HEADERS[headerName];
		});

	Object.keys(parameterHeaders)
		.forEach(function (headerName) {
			if (parameterHeaders[headerName] === null ||
				parameterHeaders[headerName] === undefined) {
				delete headers[headerName];
				return;
			}
			headers[headerName] = parameterHeaders[headerName];
		});

	return headers;
};

/**
 * Does request with specified parameters using protocol implementation.
 * @param {Object} parameters Request parameters.
 * @param {string} parameters.method HTTP method.
 * @param {string} parameters.url URL for request.
 * @param {URI} parameters.uri URI object.
 * @param {Object} parameters.headers HTTP headers to send.
 * @param {string|Object} parameters.data Data to send.
 * @param {number} parameters.timeout Request timeout.
 * @param {boolean} parameters.unsafeHTTPS If true then requests to servers with
 * invalid HTTPS certificates are allowed.
 * @returns {Promise<Object>} Promise for result with status object and content.
 * @protected
 * @abstract
 */
// jscs:disable disallowUnusedParams
UHRBase.prototype._doRequest = function (parameters) { };

/**
 * Converts response data according content type.
 * @param {Object} headers HTTP headers.
 * @param {string} responseData Data from response.
 * @returns {string|Object} Converted data.
 */
UHRBase.prototype.convertResponse = function (headers, responseData) {
	if (typeof (responseData) !== 'string') {
		responseData = '';
	}
	var found = findContentType(headers),
		contentType = found.type || UHRBase.TYPES.PLAIN_TEXT;

	switch (contentType) {
		case UHRBase.TYPES.JSON:
			var json;
			try {
				json = JSON.parse(responseData);
			} catch (e) {
				// nothing to do
			}
			return json || {};
		case UHRBase.TYPES.URL_ENCODED:
			var object;
			try {
				var query = new Query(responseData.replace('+', '%20'));
				object = query.values;
			} catch (e) {
				// nothing to do
			}
			return object || {};
		default:
			return responseData;
	}
};

/**
 * Determines is current query needs to use upstream.
 * @param {string} method HTTP method.
 * @returns {boolean} Is current HTTP method means upstream usage.
 * @protected
 */
UHRBase.prototype._isUpstreamRequest = function (method) {
	return (
		method === METHODS.POST ||
		method === METHODS.PUT ||
		method === METHODS.PATCH
		);
};

/**
 * Finds content type header in headers object.
 * @param {Object} headers HTTP headers.
 * @returns {{name: string, type: string}} Name of header and content type.
 */
function findContentType(headers) {
	var contentTypeString = '',
		contentTypeHeader = 'Content-Type';

	Object.keys(headers)
		.forEach(function (key) {
			if (key.toLowerCase() !== 'content-type') {
				return;
			}
			contentTypeHeader = key;
			contentTypeString = headers[key];
		});

	var typeAndParameters = contentTypeString.split(';'),
		contentType = typeAndParameters[0].toLowerCase();
	return {
		name: contentTypeHeader,
		type: contentType
	};
}

},{"catberry-uri":127}],127:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = {
	URI: require('./lib/URI'),
	Authority: require('./lib/Authority'),
	UserInfo: require('./lib/UserInfo'),
	Query: require('./lib/Query')
};
},{"./lib/Authority":128,"./lib/Query":129,"./lib/URI":130,"./lib/UserInfo":131}],128:[function(require,module,exports){
/*
 * catberry-uri
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-uri's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry-uri that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = Authority;

var UserInfo = require('./UserInfo'),
	percentEncodingHelper = require('./percentEncodingHelper');

var PORT_REGEXP = /^\d+$/,
	ERROR_PORT = 'URI authority port must satisfy expression ' +
		PORT_REGEXP.toString();

/**
 * Creates new instance of URI authority component parser.
 * https://tools.ietf.org/html/rfc3986#section-3.2
 * @param {string?} authorityString URI authority component string.
 * @constructor
 */
function Authority(authorityString) {
	if (typeof (authorityString) === 'string' && authorityString.length > 0) {
		var firstAtIndex = authorityString.indexOf('@');
		if (firstAtIndex !== -1) {
			var userInfoString = authorityString.substring(0, firstAtIndex);
			this.userInfo = new UserInfo(userInfoString);
			authorityString = authorityString.substring(firstAtIndex + 1);
		}

		var lastColonIndex = authorityString.lastIndexOf(':');
		if (lastColonIndex !== -1) {
			var portString = authorityString.substring(lastColonIndex + 1);
			if (lastColonIndex === authorityString.length - 1) {
				this.port = '';
				authorityString = authorityString.substring(0, lastColonIndex);
			} else if (PORT_REGEXP.test(portString)) {
				this.port = portString;
				authorityString = authorityString.substring(0, lastColonIndex);
			}
		}

		this.host = percentEncodingHelper.decode(authorityString);
	}
}

/**
 * Current user information.
 * https://tools.ietf.org/html/rfc3986#section-3.2.1
 * @type {UserInfo}
 */
Authority.prototype.userInfo = null;

/**
 * Current host.
 * https://tools.ietf.org/html/rfc3986#section-3.2.2
 * @type {string}
 */
Authority.prototype.host = null;

/**
 * Current port.
 * https://tools.ietf.org/html/rfc3986#section-3.2.3
 * @type {string}
 */
Authority.prototype.port = null;

/**
 * Clones current authority.
 * @returns {Authority} New clone of current object.
 */
Authority.prototype.clone = function () {
	var authority = new Authority();
	if (this.userInfo) {
		authority.userInfo = this.userInfo.clone();
	}
	if (typeof (this.host) === 'string') {
		authority.host = this.host;
	}
	if (typeof (this.port) === 'string') {
		authority.port = this.port;
	}
	return authority;
};

/**
 * Recombine all authority components into authority string.
 * @returns {string} Authority component string.
 */
Authority.prototype.toString = function () {
	var result = '';
	if (this.userInfo) {
		result += this.userInfo.toString() + '@';
	}
	if (this.host !== undefined && this.host !== null) {
		var host = String(this.host);
		result += percentEncodingHelper.encodeHost(host);
	}
	if (this.port !== undefined && this.port !== null) {
		var port = String(this.port);
		if (port.length > 0 && !PORT_REGEXP.test(port)) {
			throw new Error(ERROR_PORT);
		}
		result += ':' + port;
	}
	return result;
};
},{"./UserInfo":131,"./percentEncodingHelper":132}],129:[function(require,module,exports){
/*
 * catberry-uri
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-uri's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry-uri that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = Query;

var percentEncodingHelper = require('./percentEncodingHelper');

/**
 * Creates new instance of URI query component parser.
 * https://tools.ietf.org/html/rfc3986#section-3.4
 * @param {string?} queryString URI query component string.
 * @constructor
 */
function Query(queryString) {
	if (typeof (queryString) === 'string') {
		this.values = {};

		queryString
			.split('&')
			.forEach(function (pair) {
				var parts = pair.split('='),
					key = percentEncodingHelper.decode(parts[0]);
				if (!key) {
					return;
				}
				if (key in this.values &&
					!(this.values[key] instanceof Array)) {
					this.values[key] = [this.values[key]];
				}

				var value = typeof (parts[1]) === 'string' ?
					percentEncodingHelper.decode(parts[1]) : null;

				if (this.values[key] instanceof Array) {
					this.values[key].push(value);
				} else {
					this.values[key] = value;
				}
			}, this);
	}
}

/**
 * Current set of values of query.
 * @type {Object}
 */
Query.prototype.values = null;

/**
 * Clones current query to a new object.
 * @returns {Query} New clone of current object.
 */
Query.prototype.clone = function () {
	var query = new Query();
	if (this.values) {
		query.values = {};
		Object.keys(this.values)
			.forEach(function (key) {
				query.values[key] = this.values[key];
			}, this);
	}
	return query;
};

/**
 * Converts current set of query values to string.
 * @returns {string} Query component string.
 */
Query.prototype.toString = function () {
	if (!this.values) {
		return '';
	}

	var queryString = '';
	Object.keys(this.values)
		.forEach(function (key) {
			var values = this.values[key] instanceof Array ?
				this.values[key] : [this.values[key]];

			values.forEach(function (value) {
				queryString += '&' + percentEncodingHelper
					.encodeQuerySubComponent(key);
				if (value === undefined || value === null) {
					return;
				}
				value = String(value);
				queryString += '=' +
					percentEncodingHelper.encodeQuerySubComponent(value);
			});
		}, this);

	return queryString.replace(/^&/, '');
};
},{"./percentEncodingHelper":132}],130:[function(require,module,exports){
/*
 * catberry
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = URI;

var Authority = require('./Authority'),
	percentEncodingHelper = require('./percentEncodingHelper'),
	Query = require('./Query');

// https://tools.ietf.org/html/rfc3986#appendix-B
var URI_PARSE_REGEXP = new RegExp(
		'^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?'
	),
	// https://tools.ietf.org/html/rfc3986#section-3.1
	SCHEME_REGEXP = /^[a-z]+[a-z\d\+\.-]*$/i,
	ERROR_SCHEME = 'URI scheme must satisfy expression ' +
		SCHEME_REGEXP.toString(),
	ERROR_BASE_SCHEME = 'Scheme component is required to be present ' +
		'in a base URI';

/**
 * Creates new instance of URI according to RFC 3986.
 * @param {string?} uriString URI string to parse components.
 * @constructor
 */
function URI(uriString) {
	if (typeof (uriString) !== 'string') {
		uriString = '';
	}

	// https://tools.ietf.org/html/rfc3986#appendix-B
	var matches = uriString.match(URI_PARSE_REGEXP);

	if (matches) {
		if (typeof (matches[2]) === 'string') {
			this.scheme = percentEncodingHelper.decode(matches[2]);
		}
		if (typeof (matches[4]) === 'string') {
			this.authority = new Authority(matches[4]);
		}
		if (typeof (matches[5]) === 'string') {
			this.path = percentEncodingHelper.decodePath(matches[5]);
		}
		if (typeof (matches[7]) === 'string') {
			this.query = new Query(matches[7]);
		}
		if (typeof (matches[9]) === 'string') {
			this.fragment = percentEncodingHelper.decode(matches[9]);
		}
	}
}

/**
 * Current URI scheme.
 * https://tools.ietf.org/html/rfc3986#section-3.1
 * @type {string}
 */
URI.prototype.scheme = null;

/**
 * Current URI authority.
 * https://tools.ietf.org/html/rfc3986#section-3.2
 * @type {Authority}
 */
URI.prototype.authority = null;

/**
 * Current URI path.
 * https://tools.ietf.org/html/rfc3986#section-3.3
 * @type {string}
 */
URI.prototype.path = null;

/**
 * Current URI query.
 * https://tools.ietf.org/html/rfc3986#section-3.4
 * @type {Query}
 */
URI.prototype.query = null;

/**
 * Current URI fragment.
 * https://tools.ietf.org/html/rfc3986#section-3.5
 * @type {string}
 */
URI.prototype.fragment = null;

/**
 * Converts a URI reference that might be relative to a given base URI
 * into the reference's target URI.
 * https://tools.ietf.org/html/rfc3986#section-5.2
 * @param {URI} baseUri Base URI.
 * @returns {URI} Resolved URI.
 */
URI.prototype.resolveRelative = function (baseUri) {
	if (!baseUri.scheme) {
		throw new Error(ERROR_BASE_SCHEME);
	}

	return transformReference(baseUri, this);
};

/**
 * Clones current URI to a new object.
 * @returns {URI} New clone of current object.
 */
URI.prototype.clone = function () {
	var uri = new URI();

	if (typeof (this.scheme) === 'string') {
		uri.scheme = this.scheme;
	}

	if (this.authority) {
		uri.authority = this.authority.clone();
	}

	if (typeof (this.path) === 'string') {
		uri.path = this.path;
	}

	if (this.query) {
		uri.query = this.query.clone();
	}

	if (typeof (this.fragment) === 'string') {
		uri.fragment = this.fragment;
	}

	return uri;
};

/**
 * Recomposes URI components to URI string,
 * https://tools.ietf.org/html/rfc3986#section-5.3
 * @returns {string} URI string.
 */
URI.prototype.toString = function () {
	var result = '';

	if (this.scheme !== undefined && this.scheme !== null) {
		var scheme = String(this.scheme);
		if (!SCHEME_REGEXP.test(scheme)) {
			throw new Error(ERROR_SCHEME);
		}
		result += scheme + ':';
	}

	if (this.authority) {
		result += '//' + this.authority.toString();
	}

	var path = this.path === undefined || this.path === null ?
		'' : String(this.path);
	result += percentEncodingHelper.encodePath(path);

	if (this.query) {
		result += '?' + this.query.toString();
	}

	if (this.fragment !== undefined && this.fragment !== null) {
		var fragment = String(this.fragment);
		result += '#' + percentEncodingHelper.encodeFragment(fragment);
	}

	return result;
};

/**
 * Transforms reference for relative resolution.
 * Whole algorithm has been taken from
 * https://tools.ietf.org/html/rfc3986#section-5.2.2
 * @param {URI} baseUri Base URI for resolution.
 * @param {URI} referenceUri Reference URI to resolve.
 * @returns {URI} Components of target URI.
 */
/*jshint maxdepth:false */
/*jshint maxcomplexity:false */
function transformReference(baseUri, referenceUri) {
	var targetUri = new URI('');

	if (referenceUri.scheme) {
		targetUri.scheme = referenceUri.scheme;
		targetUri.authority = referenceUri.authority ?
			referenceUri.authority.clone() : referenceUri.authority;
		targetUri.path = removeDotSegments(referenceUri.path);
		targetUri.query = referenceUri.query ?
			referenceUri.query.clone() : referenceUri.query;
	} else {
		if (referenceUri.authority) {
			targetUri.authority = referenceUri.authority ?
				referenceUri.authority.clone() : referenceUri.authority;
			targetUri.path = removeDotSegments(referenceUri.path);
			targetUri.query = referenceUri.query ?
				referenceUri.query.clone() : referenceUri.query;
		} else {
			if (referenceUri.path === '') {
				targetUri.path = baseUri.path;
				if (referenceUri.query) {
					targetUri.query = referenceUri.query.clone();
				} else {
					targetUri.query = baseUri.query ?
						baseUri.query.clone() : baseUri.query;
				}
			} else {
				if (referenceUri.path[0] === '/') {
					targetUri.path =
						removeDotSegments(referenceUri.path);
				} else {
					targetUri.path =
						merge(baseUri, referenceUri);
					targetUri.path =
						removeDotSegments(targetUri.path);
				}
				targetUri.query = referenceUri.query ?
					referenceUri.query.clone() : referenceUri.query;
			}
			targetUri.authority = baseUri.authority ?
				baseUri.authority.clone() : baseUri.authority;
		}
		targetUri.scheme = baseUri.scheme;
	}

	targetUri.fragment = referenceUri.fragment;
	return targetUri;
}

/**
 * Merges a relative-path reference with the path of the base URI.
 * https://tools.ietf.org/html/rfc3986#section-5.2.3
 * @param {URI} baseUri Components of base URI.
 * @param {URI} referenceUri Components of reference URI.
 * @returns {string} Merged path.
 */
function merge(baseUri, referenceUri) {
	if (baseUri.authority && baseUri.path === '') {
		return '/' + referenceUri.path;
	}

	var segmentsString = baseUri.path.indexOf('/') !== -1 ?
		baseUri.path.replace(/\/[^\/]+$/, '/') : '';

	return segmentsString + referenceUri.path;
}

/**
 * Removes dots segments from URI path.
 * https://tools.ietf.org/html/rfc3986#section-5.2.4
 * @param {string} uriPath URI path with possible dot segments.
 * @returns {string} URI path without dot segments.
 */
function removeDotSegments(uriPath) {
	if (!uriPath) {
		return '';
	}

	var inputBuffer = uriPath,
		newBuffer = '',
		nextSegment = '',
		outputBuffer = '';

	while (inputBuffer.length !== 0) {

		// If the input buffer begins with a prefix of "../" or "./",
		// then remove that prefix from the input buffer
		newBuffer = inputBuffer.replace(/^\.?\.\//, '');
		if (newBuffer !== inputBuffer) {
			inputBuffer = newBuffer;
			continue;
		}

		// if the input buffer begins with a prefix of "/./" or "/.",
		// where "." is a complete path segment, then replace that
		// prefix with "/" in the input buffer
		newBuffer = inputBuffer.replace(/^((\/\.\/)|(\/\.$))/, '/');
		if (newBuffer !== inputBuffer) {
			inputBuffer = newBuffer;
			continue;
		}

		// if the input buffer begins with a prefix of "/../" or "/..",
		// where ".." is a complete path segment, then replace that
		// prefix with "/" in the input buffer and remove the last
		// segment and its preceding "/" (if any) from the output
		// buffer
		newBuffer = inputBuffer.replace(/^((\/\.\.\/)|(\/\.\.$))/, '/');
		if (newBuffer !== inputBuffer) {
			outputBuffer = outputBuffer.replace(/\/[^\/]+$/, '');
			inputBuffer = newBuffer;
			continue;
		}

		// if the input buffer consists only of "." or "..", then remove
		// that from the input buffer
		if (inputBuffer === '.' || inputBuffer === '..') {
			break;
		}

		// move the first path segment in the input buffer to the end of
		// the output buffer, including the initial "/" character (if
		// any) and any subsequent characters up to, but not including,
		// the next "/" character or the end of the input buffer
		nextSegment = /^\/?[^\/]*(\/|$)/.exec(inputBuffer)[0];
		nextSegment = nextSegment.replace(/([^\/])(\/$)/, '$1');
		inputBuffer = inputBuffer.substring(nextSegment.length);
		outputBuffer += nextSegment;
	}

	return outputBuffer;
}
},{"./Authority":128,"./Query":129,"./percentEncodingHelper":132}],131:[function(require,module,exports){
/*
 * catberry-uri
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-uri's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry-uri that are not externally
 * maintained libraries.
 */

'use strict';

module.exports = UserInfo;

var percentEncodingHelper = require('./percentEncodingHelper');

/**
 * Creates new instance of user information component parser.
 * https://tools.ietf.org/html/rfc3986#section-3.2.1
 * @param {string?} userInfoString User information component string.
 * @constructor
 */
function UserInfo(userInfoString) {
	if (typeof (userInfoString) === 'string' && userInfoString.length > 0) {
		var parts = userInfoString.split(':');
		if (typeof (parts[0]) === 'string') {
			this.user = percentEncodingHelper.decode(parts[0]);
		}
		if (typeof (parts[1]) === 'string') {
			this.password = percentEncodingHelper.decode(parts[1]);
		}
	}
}

/**
 * Current user component.
 * @type {string}
 */
UserInfo.prototype.user = null;

/**
 * Current password.
 * @type {string}
 */
UserInfo.prototype.password = null;

/**
 * Clones current user information.
 * @returns {UserInfo} New clone of current object.
 */
UserInfo.prototype.clone = function () {
	var userInfo = new UserInfo();
	if (typeof (this.user) === 'string') {
		userInfo.user = this.user;
	}
	if (typeof (this.password) === 'string') {
		userInfo.password = this.password;
	}
	return userInfo;
};

/**
 * Recombines user information components to userInfo string.
 * @returns {string} User information component string.
 */
UserInfo.prototype.toString = function () {
	var result = '';
	if (this.user !== undefined && this.user !== null) {
		var user = String(this.user);
		result += percentEncodingHelper
			.encodeUserInfoSubComponent(user);
	}
	if (this.password !== undefined && this.password !== null) {
		var password = String(this.password);
		result += ':' + percentEncodingHelper
			.encodeUserInfoSubComponent(password);
	}

	return result;
};
},{"./percentEncodingHelper":132}],132:[function(require,module,exports){
/*
 * catberry-uri
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-uri's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry-uri that are not externally
 * maintained libraries.
 */

'use strict';

// https://tools.ietf.org/html/rfc3986#section-2.1

module.exports = {
	// \uD800-\uDBFF \uDC00-\uDFFF
	// surrogates pairs like emoji we should ignore
	/**
	 * Encodes authority user information sub-component according to RFC 3986.
	 * @param {string} string Component to encode.
	 * @returns {string} Encoded component.
	 */
	encodeUserInfoSubComponent: function (string) {
		return string.replace(
			// https://tools.ietf.org/html/rfc3986#section-3.2.1
			/[^\w\.~\-!\$&'\(\)\*\+,;=\uD800-\uDBFF\uDC00-\uDFFF]/g,
			encodeURIComponent
		);
	},
	/**
	 * Encodes authority host component according to RFC 3986.
	 * @param {string} string Component to encode.
	 * @returns {string} Encoded component.
	 */
	encodeHost: function (string) {
		return string.replace(
			// https://tools.ietf.org/html/rfc3986#section-3.2.2
			/[^\w\.~\-!\$&'\(\)\*\+,;=:\[\]\uD800-\uDBFF\uDC00-\uDFFF]/g,
			encodeURIComponent
		);
	},
	/**
	 * Encodes URI path component according to RFC 3986.
	 * @param {string} string Component to encode.
	 * @returns {string} Encoded component.
	 */
	encodePath: function (string) {
		return string.split(/%2f/i)
			.map(function (part) {
				return part.replace(
					// https://tools.ietf.org/html/rfc3986#section-3.3
					/[^\w\.~\-!\$&'\(\)\*\+,;=:@\/\uD800-\uDBFF\uDC00-\uDFFF]/g,
					encodeURIComponent
				);
			})
			.reduce(function (prev, current) {
				if (!prev) {
					return current;
				}
				if (!current) {
					return prev;
				}
				return prev + '%2F' + current;
			}, '');
	},
	/**
	 * Encodes query sub-component according to RFC 3986.
	 * @param {string} string Component to encode.
	 * @returns {string} Encoded component.
	 */
	encodeQuerySubComponent: function (string) {
		return string.replace(
			// https://tools.ietf.org/html/rfc3986#section-3.4
			/[^\w\.~\-!\$'\(\)\*\+,;:@\/\?\uD800-\uDBFF\uDC00-\uDFFF]/g,
			encodeURIComponent
		);
	},

	/**
	 * Encodes URI fragment component according to RFC 3986.
	 * @param {string} string Component to encode.
	 * @returns {string} Encoded component.
	 */
	encodeFragment: function (string) {
		return string.replace(
			// https://tools.ietf.org/html/rfc3986#section-3.5
			/[^\w\.~\-!\$&'\(\)\*\+,;=:@\/\?\uD800-\uDBFF\uDC00-\uDFFF]/g,
			encodeURIComponent
		);
	},

	/**
	 * Decodes percent encoded component.
	 * @param {string} string Component to decode.
	 * @returns {string} Decoded component.
	 */
	decode: function (string) {
		return decodeURIComponent(string);
	},

	/**
	 * Decodes percent encoded path component.
	 * @param {string} string Component to decode.
	 * @returns {string} Decoded path component.
	 */
	decodePath: function (string) {
		return string.split(/%2f/i)
			.map(decodeURIComponent)
			.reduce(function (prev, current) {
				if (!prev) {
					return current;
				}
				if (!current) {
					return prev;
				}
				return prev + '%2F' + current;
			}, '');
	}
};
},{}],133:[function(require,module,exports){
// Create a range object for efficently rendering strings to elements.
var range;

function empty(o) {
    for (var k in o) {
        if (o.hasOwnProperty(k)) {
            return false;
        }
    }

    return true;
}
function toElement(str) {
    if (!range) {
        range = document.createRange();
        range.selectNode(document.body);
    }

    var fragment;
    if (range.createContextualFragment) {
        fragment = range.createContextualFragment(str);
    } else {
        fragment = document.createElement('body');
        fragment.innerHTML = str;
    }
    return fragment.childNodes[0];
}

var specialElHandlers = {
    /**
     * Needed for IE. Apparently IE doesn't think
     * that "selected" is an attribute when reading
     * over the attributes using selectEl.attributes
     */
    OPTION: function(fromEl, toEl) {
        if ((fromEl.selected = toEl.selected)) {
            fromEl.setAttribute('selected', '');
        } else {
            fromEl.removeAttribute('selected', '');
        }
    },
    /**
     * The "value" attribute is special for the <input> element
     * since it sets the initial value. Changing the "value"
     * attribute without changing the "value" property will have
     * no effect since it is only used to the set the initial value.
     * Similar for the "checked" attribute.
     */
    INPUT: function(fromEl, toEl) {
        fromEl.checked = toEl.checked;

        if (fromEl.value != toEl.value) {
            fromEl.value = toEl.value;
        }

        if (!toEl.hasAttribute('checked')) {
            fromEl.removeAttribute('checked');
        }

        if (!toEl.hasAttribute('value')) {
            fromEl.removeAttribute('value');
        }
    },

    TEXTAREA: function(fromEl, toEl) {
        var newValue = toEl.value;
        if (fromEl.value != newValue) {
            fromEl.value = newValue;
        }

        if (fromEl.firstChild) {
            fromEl.firstChild.nodeValue = newValue;
        }
    }
};

function noop() {}

/**
 * Loop over all of the attributes on the target node and make sure the
 * original DOM node has the same attributes. If an attribute
 * found on the original node is not on the new node then remove it from
 * the original node
 * @param  {HTMLElement} fromNode
 * @param  {HTMLElement} toNode
 */
function morphAttrs(fromNode, toNode) {
    var attrs = toNode.attributes;
    var i;
    var attr;
    var attrName;
    var attrValue;
    var foundAttrs = {};

    for (i=attrs.length-1; i>=0; i--) {
        attr = attrs[i];
        if (attr.specified !== false) {
            attrName = attr.name;
            attrValue = attr.value;
            foundAttrs[attrName] = true;

            if (fromNode.getAttribute(attrName) !== attrValue) {
                fromNode.setAttribute(attrName, attrValue);
            }
        }
    }

    // Delete any extra attributes found on the original DOM element that weren't
    // found on the target element.
    attrs = fromNode.attributes;

    for (i=attrs.length-1; i>=0; i--) {
        attr = attrs[i];
        if (attr.specified !== false) {
            attrName = attr.name;
            if (!foundAttrs.hasOwnProperty(attrName)) {
                fromNode.removeAttribute(attrName);
            }
        }
    }
}

/**
 * Copies the children of one DOM element to another DOM element
 */
function moveChildren(fromEl, toEl) {
    var curChild = fromEl.firstChild;
    while(curChild) {
        var nextChild = curChild.nextSibling;
        toEl.appendChild(curChild);
        curChild = nextChild;
    }
    return toEl;
}

function defaultGetNodeKey(node) {
    return node.id;
}

function morphdom(fromNode, toNode, options) {
    if (!options) {
        options = {};
    }

    if (typeof toNode === 'string') {
        toNode = toElement(toNode);
    }

    var savedEls = {}; // Used to save off DOM elements with IDs
    var unmatchedEls = {};
    var getNodeKey = options.getNodeKey || defaultGetNodeKey;
    var onNodeDiscarded = options.onNodeDiscarded || noop;
    var onBeforeMorphEl = options.onBeforeMorphEl || noop;
    var onBeforeMorphElChildren = options.onBeforeMorphElChildren || noop;
    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;
    var childrenOnly = options.childrenOnly === true;
    var movedEls = [];

    function removeNodeHelper(node, nestedInSavedEl) {
        var id = getNodeKey(node);
        // If the node has an ID then save it off since we will want
        // to reuse it in case the target DOM tree has a DOM element
        // with the same ID
        if (id) {
            savedEls[id] = node;
        } else if (!nestedInSavedEl) {
            // If we are not nested in a saved element then we know that this node has been
            // completely discarded and will not exist in the final DOM.
            onNodeDiscarded(node);
        }

        if (node.nodeType === 1) {
            var curChild = node.firstChild;
            while(curChild) {
                removeNodeHelper(curChild, nestedInSavedEl || id);
                curChild = curChild.nextSibling;
            }
        }
    }

    function walkDiscardedChildNodes(node) {
        if (node.nodeType === 1) {
            var curChild = node.firstChild;
            while(curChild) {


                if (!getNodeKey(curChild)) {
                    // We only want to handle nodes that don't have an ID to avoid double
                    // walking the same saved element.

                    onNodeDiscarded(curChild);

                    // Walk recursively
                    walkDiscardedChildNodes(curChild);
                }

                curChild = curChild.nextSibling;
            }
        }
    }

    function removeNode(node, parentNode, alreadyVisited) {
        if (onBeforeNodeDiscarded(node) === false) {
            return;
        }

        parentNode.removeChild(node);
        if (alreadyVisited) {
            if (!getNodeKey(node)) {
                onNodeDiscarded(node);
                walkDiscardedChildNodes(node);
            }
        } else {
            removeNodeHelper(node);
        }
    }

    function morphEl(fromEl, toEl, alreadyVisited, childrenOnly) {
        var toElKey = getNodeKey(toEl);
        if (toElKey) {
            // If an element with an ID is being morphed then it is will be in the final
            // DOM so clear it out of the saved elements collection
            delete savedEls[toElKey];
        }

        if (!childrenOnly) {
            if (onBeforeMorphEl(fromEl, toEl) === false) {
                return;
            }

            morphAttrs(fromEl, toEl);

            if (onBeforeMorphElChildren(fromEl, toEl) === false) {
                return;
            }
        }

        if (fromEl.tagName != 'TEXTAREA') {
            var curToNodeChild = toEl.firstChild;
            var curFromNodeChild = fromEl.firstChild;
            var curToNodeId;

            var fromNextSibling;
            var toNextSibling;
            var savedEl;
            var unmatchedEl;

            outer: while(curToNodeChild) {
                toNextSibling = curToNodeChild.nextSibling;
                curToNodeId = getNodeKey(curToNodeChild);

                while(curFromNodeChild) {
                    var curFromNodeId = getNodeKey(curFromNodeChild);
                    fromNextSibling = curFromNodeChild.nextSibling;

                    if (!alreadyVisited) {
                        if (curFromNodeId && (unmatchedEl = unmatchedEls[curFromNodeId])) {
                            unmatchedEl.parentNode.replaceChild(curFromNodeChild, unmatchedEl);
                            morphEl(curFromNodeChild, unmatchedEl, alreadyVisited);
                            curFromNodeChild = fromNextSibling;
                            continue;
                        }
                    }

                    var curFromNodeType = curFromNodeChild.nodeType;

                    if (curFromNodeType === curToNodeChild.nodeType) {
                        var isCompatible = false;

                        if (curFromNodeType === 1) { // Both nodes being compared are Element nodes
                            if (curFromNodeChild.tagName === curToNodeChild.tagName) {
                                // We have compatible DOM elements
                                if (curFromNodeId || curToNodeId) {
                                    // If either DOM element has an ID then we handle
                                    // those differently since we want to match up
                                    // by ID
                                    if (curToNodeId === curFromNodeId) {
                                        isCompatible = true;
                                    }
                                } else {
                                    isCompatible = true;
                                }
                            }

                            if (isCompatible) {
                                // We found compatible DOM elements so transform the current "from" node
                                // to match the current target DOM node.
                                morphEl(curFromNodeChild, curToNodeChild, alreadyVisited);
                            }
                        } else if (curFromNodeType === 3) { // Both nodes being compared are Text nodes
                            isCompatible = true;
                            // Simply update nodeValue on the original node to change the text value
                            curFromNodeChild.nodeValue = curToNodeChild.nodeValue;
                        }

                        if (isCompatible) {
                            curToNodeChild = toNextSibling;
                            curFromNodeChild = fromNextSibling;
                            continue outer;
                        }
                    }

                    // No compatible match so remove the old node from the DOM and continue trying
                    // to find a match in the original DOM
                    removeNode(curFromNodeChild, fromEl, alreadyVisited);
                    curFromNodeChild = fromNextSibling;
                }

                if (curToNodeId) {
                    if ((savedEl = savedEls[curToNodeId])) {
                        morphEl(savedEl, curToNodeChild, true);
                        curToNodeChild = savedEl; // We want to append the saved element instead
                    } else {
                        // The current DOM element in the target tree has an ID
                        // but we did not find a match in any of the corresponding
                        // siblings. We just put the target element in the old DOM tree
                        // but if we later find an element in the old DOM tree that has
                        // a matching ID then we will replace the target element
                        // with the corresponding old element and morph the old element
                        unmatchedEls[curToNodeId] = curToNodeChild;
                    }
                }

                // If we got this far then we did not find a candidate match for our "to node"
                // and we exhausted all of the children "from" nodes. Therefore, we will just
                // append the current "to node" to the end
                fromEl.appendChild(curToNodeChild);

                if (curToNodeChild.nodeType === 1 && (curToNodeId || curToNodeChild.firstChild)) {
                    // The element that was just added to the original DOM may have
                    // some nested elements with a key/ID that needs to be matched up
                    // with other elements. We'll add the element to a list so that we
                    // can later process the nested elements if there are any unmatched
                    // keyed elements that were discarded
                    movedEls.push(curToNodeChild);
                }

                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
            }

            // We have processed all of the "to nodes". If curFromNodeChild is non-null then
            // we still have some from nodes left over that need to be removed
            while(curFromNodeChild) {
                fromNextSibling = curFromNodeChild.nextSibling;
                removeNode(curFromNodeChild, fromEl, alreadyVisited);
                curFromNodeChild = fromNextSibling;
            }
        }

        var specialElHandler = specialElHandlers[fromEl.tagName];
        if (specialElHandler) {
            specialElHandler(fromEl, toEl);
        }
    } // END: morphEl(...)

    var morphedNode = fromNode;
    var morphedNodeType = morphedNode.nodeType;
    var toNodeType = toNode.nodeType;

    if (!childrenOnly) {
        // Handle the case where we are given two DOM nodes that are not
        // compatible (e.g. <div> --> <span> or <div> --> TEXT)
        if (morphedNodeType === 1) {
            if (toNodeType === 1) {
                if (fromNode.tagName !== toNode.tagName) {
                    onNodeDiscarded(fromNode);
                    morphedNode = moveChildren(fromNode, document.createElement(toNode.tagName));
                }
            } else {
                // Going from an element node to a text node
                morphedNode = toNode;
            }
        } else if (morphedNodeType === 3) { // Text node
            if (toNodeType === 3) {
                morphedNode.nodeValue = toNode.nodeValue;
                return morphedNode;
            } else {
                // Text node to something else
                morphedNode = toNode;
            }
        }
    }

    if (morphedNode === toNode) {
        // The "to node" was not compatible with the "from node"
        // so we had to toss out the "from node" and use the "to node"
        onNodeDiscarded(fromNode);
    } else {
        morphEl(morphedNode, toNode, false, childrenOnly);

        /**
         * What we will do here is walk the tree for the DOM element
         * that was moved from the target DOM tree to the original
         * DOM tree and we will look for keyed elements that could
         * be matched to keyed elements that were earlier discarded.
         * If we find a match then we will move the saved element
         * into the final DOM tree
         */
        var handleMovedEl = function(el) {
            var curChild = el.firstChild;
            while(curChild) {
                var nextSibling = curChild.nextSibling;

                var key = getNodeKey(curChild);
                if (key) {
                    var savedEl = savedEls[key];
                    if (savedEl && (curChild.tagName === savedEl.tagName)) {
                        curChild.parentNode.replaceChild(savedEl, curChild);
                        morphEl(savedEl, curChild, true /* already visited the saved el tree */);
                        curChild = nextSibling;
                        if (empty(savedEls)) {
                            return false;
                        }
                        continue;
                    }
                }

                if (curChild.nodeType === 1) {
                    handleMovedEl(curChild);
                }

                curChild = nextSibling;
            }
        };

        // The loop below is used to possibly match up any discarded
        // elements in the original DOM tree with elemenets from the
        // target tree that were moved over without visiting their
        // children
        if (!empty(savedEls)) {
            handleMovedElsLoop:
            while (movedEls.length) {
                var movedElsTemp = movedEls;
                movedEls = [];
                for (var i=0; i<movedElsTemp.length; i++) {
                    if (handleMovedEl(movedElsTemp[i]) === false) {
                        // There are no more unmatched elements so completely end
                        // the loop
                        break handleMovedElsLoop;
                    }
                }
            }
        }

        // Fire the "onNodeDiscarded" event for any saved elements
        // that never found a new home in the morphed DOM
        for (var savedElId in savedEls) {
            if (savedEls.hasOwnProperty(savedElId)) {
                var savedEl = savedEls[savedElId];
                onNodeDiscarded(savedEl);
                walkDiscardedChildNodes(savedEl);
            }
        }
    }

    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {
        // If we had to swap out the from node with a new node because the old
        // node was not compatible with the target node then we need to
        // replace the old DOM node in the original DOM tree. This is only
        // possible if the original DOM node was part of a DOM tree which
        // we know is the case if it has a parent node.
        fromNode.parentNode.replaceChild(morphedNode, fromNode);
    }

    return morphedNode;
}

module.exports = morphdom;

},{}],134:[function(require,module,exports){
/*jshint node:true */

"use strict";

var minimalDesc = ['h', 'min', 's', 'ms', 'μs', 'ns'];
var verboseDesc = ['hour', 'minute', 'second', 'millisecond', 'microsecond', 'nanosecond'];
var convert = [60*60, 60, 1, 1e6, 1e3, 1];

module.exports = function (source, opts) {
	var verbose, precise, i, spot, sourceAtStep, valAtStep, decimals, strAtStep, results;

	verbose = false;
	precise = false;
	if (opts) {
		verbose = opts.verbose || false;
		precise = opts.precise || false;
	}

	if (!Array.isArray(source) || source.length !== 2) {
		return '';
	}
	if (typeof source[0] !== 'number' || typeof source[1] !== 'number') {
		return '';
	}

	results = '';

	// foreach unit
	for (i = 0; i < 6; i++) {
		spot = i < 3 ? 0 : 1; // grabbing first or second spot in source array
		sourceAtStep = source[spot];
		if (i !== 3 && i !== 0) {
			sourceAtStep = sourceAtStep % convert[i-1]; // trim off previous portions
		}
		if (i === 2) {
			sourceAtStep += source[1]/1e9; // get partial seconds from other portion of the array
		}
		valAtStep = sourceAtStep / convert[i]; // val at this unit
		if (valAtStep >= 1) {
			if (verbose) {
				valAtStep = Math.floor(valAtStep); // deal in whole units, subsequent laps will get the decimal portion
			}
			if (!precise) {
				// don't fling too many decimals
				decimals = valAtStep >= 10 ? 0 : 2;
				strAtStep = valAtStep.toFixed(decimals);
			} else {
				strAtStep = valAtStep.toString();
			}
			if (strAtStep.indexOf('.') > -1 && strAtStep[strAtStep.length-1] === '0') {
				strAtStep = strAtStep.replace(/\.?0+$/,''); // remove trailing zeros
			}
			if (results) {
				results += ' '; // append space if we have a previous value
			}
			results += strAtStep; // append the value
			// append units
			if (verbose) {
				results += ' '+verboseDesc[i];
				if (strAtStep !== '1') {
					results += 's';
				}
			} else {
				results += ' '+minimalDesc[i];
			}
			if (!verbose) {
				break; // verbose gets as many groups as necessary, the rest get only one
			}
		}
	}

	return results;
};

},{}],135:[function(require,module,exports){
'use strict';

module.exports = require('./lib')

},{"./lib":140}],136:[function(require,module,exports){
'use strict';

var asap = require('asap/raw');

function noop() {}

// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable

// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.


// to avoid using try/catch inside critical functions, we
// extract them to here.
var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}
function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

module.exports = Promise;

function Promise(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }
  if (typeof fn !== 'function') {
    throw new TypeError('not a function');
  }
  this._45 = 0;
  this._81 = 0;
  this._65 = null;
  this._54 = null;
  if (fn === noop) return;
  doResolve(fn, this);
}
Promise._10 = null;
Promise._97 = null;
Promise._61 = noop;

Promise.prototype.then = function(onFulfilled, onRejected) {
  if (this.constructor !== Promise) {
    return safeThen(this, onFulfilled, onRejected);
  }
  var res = new Promise(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function (resolve, reject) {
    var res = new Promise(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
};
function handle(self, deferred) {
  while (self._81 === 3) {
    self = self._65;
  }
  if (Promise._10) {
    Promise._10(self);
  }
  if (self._81 === 0) {
    if (self._45 === 0) {
      self._45 = 1;
      self._54 = deferred;
      return;
    }
    if (self._45 === 1) {
      self._45 = 2;
      self._54 = [self._54, deferred];
      return;
    }
    self._54.push(deferred);
    return;
  }
  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  asap(function() {
    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      if (self._81 === 1) {
        resolve(deferred.promise, self._65);
      } else {
        reject(deferred.promise, self._65);
      }
      return;
    }
    var ret = tryCallOne(cb, self._65);
    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}
function resolve(self, newValue) {
  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
  if (newValue === self) {
    return reject(
      self,
      new TypeError('A promise cannot be resolved with itself.')
    );
  }
  if (
    newValue &&
    (typeof newValue === 'object' || typeof newValue === 'function')
  ) {
    var then = getThen(newValue);
    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }
    if (
      then === self.then &&
      newValue instanceof Promise
    ) {
      self._81 = 3;
      self._65 = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }
  self._81 = 1;
  self._65 = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._81 = 2;
  self._65 = newValue;
  if (Promise._97) {
    Promise._97(self, newValue);
  }
  finale(self);
}
function finale(self) {
  if (self._45 === 1) {
    handle(self, self._54);
    self._54 = null;
  }
  if (self._45 === 2) {
    for (var i = 0; i < self._54.length; i++) {
      handle(self, self._54[i]);
    }
    self._54 = null;
  }
}

function Handler(onFulfilled, onRejected, promise){
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(fn, function (value) {
    if (done) return;
    done = true;
    resolve(promise, value);
  }, function (reason) {
    if (done) return;
    done = true;
    reject(promise, reason);
  })
  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}

},{"asap/raw":144}],137:[function(require,module,exports){
'use strict';

var Promise = require('./core.js');

module.exports = Promise;
Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this;
  self.then(null, function (err) {
    setTimeout(function () {
      throw err;
    }, 0);
  });
};

},{"./core.js":136}],138:[function(require,module,exports){
'use strict';

//This file contains the ES6 extensions to the core Promises/A+ API

var Promise = require('./core.js');

module.exports = Promise;

/* Static Functions */

var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new Promise(Promise._61);
  p._81 = 1;
  p._65 = value;
  return p;
}
Promise.resolve = function (value) {
  if (value instanceof Promise) return value;

  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(value));
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex);
      });
    }
  }
  return valuePromise(value);
};

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr);

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;
    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof Promise && val.then === Promise.prototype.then) {
          while (val._81 === 3) {
            val = val._65;
          }
          if (val._81 === 1) return res(i, val._65);
          if (val._81 === 2) reject(val._65);
          val.then(function (val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;
          if (typeof then === 'function') {
            var p = new Promise(then.bind(val));
            p.then(function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }
      args[i] = val;
      if (--remaining === 0) {
        resolve(args);
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    values.forEach(function(value){
      Promise.resolve(value).then(resolve, reject);
    });
  });
};

/* Prototype Methods */

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};

},{"./core.js":136}],139:[function(require,module,exports){
'use strict';

var Promise = require('./core.js');

module.exports = Promise;
Promise.prototype['finally'] = function (f) {
  return this.then(function (value) {
    return Promise.resolve(f()).then(function () {
      return value;
    });
  }, function (err) {
    return Promise.resolve(f()).then(function () {
      throw err;
    });
  });
};

},{"./core.js":136}],140:[function(require,module,exports){
'use strict';

module.exports = require('./core.js');
require('./done.js');
require('./finally.js');
require('./es6-extensions.js');
require('./node-extensions.js');
require('./synchronous.js');

},{"./core.js":136,"./done.js":137,"./es6-extensions.js":138,"./finally.js":139,"./node-extensions.js":141,"./synchronous.js":142}],141:[function(require,module,exports){
'use strict';

// This file contains then/promise specific extensions that are only useful
// for node.js interop

var Promise = require('./core.js');
var asap = require('asap');

module.exports = Promise;

/* Static Functions */

Promise.denodeify = function (fn, argumentCount) {
  if (
    typeof argumentCount === 'number' && argumentCount !== Infinity
  ) {
    return denodeifyWithCount(fn, argumentCount);
  } else {
    return denodeifyWithoutCount(fn);
  }
}

var callbackFn = (
  'function (err, res) {' +
  'if (err) { rj(err); } else { rs(res); }' +
  '}'
);
function denodeifyWithCount(fn, argumentCount) {
  var args = [];
  for (var i = 0; i < argumentCount; i++) {
    args.push('a' + i);
  }
  var body = [
    'return function (' + args.join(',') + ') {',
    'var self = this;',
    'return new Promise(function (rs, rj) {',
    'var res = fn.call(',
    ['self'].concat(args).concat([callbackFn]).join(','),
    ');',
    'if (res &&',
    '(typeof res === "object" || typeof res === "function") &&',
    'typeof res.then === "function"',
    ') {rs(res);}',
    '});',
    '};'
  ].join('');
  return Function(['Promise', 'fn'], body)(Promise, fn);
}
function denodeifyWithoutCount(fn) {
  var fnLength = Math.max(fn.length - 1, 3);
  var args = [];
  for (var i = 0; i < fnLength; i++) {
    args.push('a' + i);
  }
  var body = [
    'return function (' + args.join(',') + ') {',
    'var self = this;',
    'var args;',
    'var argLength = arguments.length;',
    'if (arguments.length > ' + fnLength + ') {',
    'args = new Array(arguments.length + 1);',
    'for (var i = 0; i < arguments.length; i++) {',
    'args[i] = arguments[i];',
    '}',
    '}',
    'return new Promise(function (rs, rj) {',
    'var cb = ' + callbackFn + ';',
    'var res;',
    'switch (argLength) {',
    args.concat(['extra']).map(function (_, index) {
      return (
        'case ' + (index) + ':' +
        'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' +
        'break;'
      );
    }).join(''),
    'default:',
    'args[argLength] = cb;',
    'res = fn.apply(self, args);',
    '}',
    
    'if (res &&',
    '(typeof res === "object" || typeof res === "function") &&',
    'typeof res.then === "function"',
    ') {rs(res);}',
    '});',
    '};'
  ].join('');

  return Function(
    ['Promise', 'fn'],
    body
  )(Promise, fn);
}

Promise.nodeify = function (fn) {
  return function () {
    var args = Array.prototype.slice.call(arguments);
    var callback =
      typeof args[args.length - 1] === 'function' ? args.pop() : null;
    var ctx = this;
    try {
      return fn.apply(this, arguments).nodeify(callback, ctx);
    } catch (ex) {
      if (callback === null || typeof callback == 'undefined') {
        return new Promise(function (resolve, reject) {
          reject(ex);
        });
      } else {
        asap(function () {
          callback.call(ctx, ex);
        })
      }
    }
  }
}

Promise.prototype.nodeify = function (callback, ctx) {
  if (typeof callback != 'function') return this;

  this.then(function (value) {
    asap(function () {
      callback.call(ctx, null, value);
    });
  }, function (err) {
    asap(function () {
      callback.call(ctx, err);
    });
  });
}

},{"./core.js":136,"asap":143}],142:[function(require,module,exports){
'use strict';

var Promise = require('./core.js');

module.exports = Promise;
Promise.enableSynchronous = function () {
  Promise.prototype.isPending = function() {
    return this.getState() == 0;
  };

  Promise.prototype.isFulfilled = function() {
    return this.getState() == 1;
  };

  Promise.prototype.isRejected = function() {
    return this.getState() == 2;
  };

  Promise.prototype.getValue = function () {
    if (this._81 === 3) {
      return this._65.getValue();
    }

    if (!this.isFulfilled()) {
      throw new Error('Cannot get a value of an unfulfilled promise.');
    }

    return this._65;
  };

  Promise.prototype.getReason = function () {
    if (this._81 === 3) {
      return this._65.getReason();
    }

    if (!this.isRejected()) {
      throw new Error('Cannot get a rejection reason of a non-rejected promise.');
    }

    return this._65;
  };

  Promise.prototype.getState = function () {
    if (this._81 === 3) {
      return this._65.getState();
    }
    if (this._81 === -1 || this._81 === -2) {
      return 0;
    }

    return this._81;
  };
};

Promise.disableSynchronous = function() {
  Promise.prototype.isPending = undefined;
  Promise.prototype.isFulfilled = undefined;
  Promise.prototype.isRejected = undefined;
  Promise.prototype.getValue = undefined;
  Promise.prototype.getReason = undefined;
  Promise.prototype.getState = undefined;
};

},{"./core.js":136}],143:[function(require,module,exports){
"use strict";

// rawAsap provides everything we need except exception management.
var rawAsap = require("./raw");
// RawTasks are recycled to reduce GC churn.
var freeTasks = [];
// We queue errors to ensure they are thrown in right order (FIFO).
// Array-as-queue is good enough here, since we are just dealing with exceptions.
var pendingErrors = [];
var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);

function throwFirstError() {
    if (pendingErrors.length) {
        throw pendingErrors.shift();
    }
}

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */
module.exports = asap;
function asap(task) {
    var rawTask;
    if (freeTasks.length) {
        rawTask = freeTasks.pop();
    } else {
        rawTask = new RawTask();
    }
    rawTask.task = task;
    rawAsap(rawTask);
}

// We wrap tasks with recyclable task objects.  A task object implements
// `call`, just like a function.
function RawTask() {
    this.task = null;
}

// The sole purpose of wrapping the task is to catch the exception and recycle
// the task object after its single use.
RawTask.prototype.call = function () {
    try {
        this.task.call();
    } catch (error) {
        if (asap.onerror) {
            // This hook exists purely for testing purposes.
            // Its name will be periodically randomized to break any code that
            // depends on its existence.
            asap.onerror(error);
        } else {
            // In a web browser, exceptions are not fatal. However, to avoid
            // slowing down the queue of pending tasks, we rethrow the error in a
            // lower priority turn.
            pendingErrors.push(error);
            requestErrorThrow();
        }
    } finally {
        this.task = null;
        freeTasks[freeTasks.length] = this;
    }
};

},{"./raw":144}],144:[function(require,module,exports){
(function (global){
"use strict";

// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
module.exports = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
        flushing = true;
    }
    // Equivalent to push, but avoids a function call.
    queue[queue.length] = task;
}

var queue = [];
// Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
var flushing = false;
// `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.
var requestFlush;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;

// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while (index < queue.length) {
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
}

// `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
var BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;

// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
if (typeof BrowserMutationObserver === "function") {
    requestFlush = makeRequestCallFromMutationObserver(flush);

// MessageChannels are desirable because they give direct access to the HTML
// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
// 11-12, and in web workers in many engines.
// Although message channels yield to any queued rendering and IO tasks, they
// would be better than imposing the 4ms delay of timers.
// However, they do not work reliably in Internet Explorer or Safari.

// Internet Explorer 10 is the only browser that has setImmediate but does
// not have MutationObservers.
// Although setImmediate yields to the browser's renderer, it would be
// preferrable to falling back to setTimeout since it does not have
// the minimum 4ms penalty.
// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
// Desktop to a lesser extent) that renders both setImmediate and
// MessageChannel useless for the purposes of ASAP.
// https://github.com/kriskowal/q/issues/396

// Timers are implemented universally.
// We fall back to timers in workers in most engines, and in foreground
// contexts in the following browsers.
// However, note that even this simple case requires nuances to operate in a
// broad spectrum of browsers.
//
// - Firefox 3-13
// - Internet Explorer 6-9
// - iPad Safari 4.3
// - Lynx 2.8.7
} else {
    requestFlush = makeRequestCallFromTimer(flush);
}

// `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.js’s
// `process.on("uncaughtException")` or by a domain.
rawAsap.requestFlush = requestFlush;

// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
    var toggle = 1;
    var observer = new BrowserMutationObserver(callback);
    var node = document.createTextNode("");
    observer.observe(node, {characterData: true});
    return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
    };
}

// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html

// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.

// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }

// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.

// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }

// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.

// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.

function makeRequestCallFromTimer(callback) {
    return function requestCall() {
        // We dispatch a timeout with a specified delay of 0 for engines that
        // can reliably accommodate that request. This will usually be snapped
        // to a 4 milisecond delay, but once we're flushing, there's no delay
        // between events.
        var timeoutHandle = setTimeout(handleTimer, 0);
        // However, since this timer gets frequently dropped in Firefox
        // workers, we enlist an interval handle that will try to fire
        // an event 20 times per second until it succeeds.
        var intervalHandle = setInterval(handleTimer, 50);

        function handleTimer() {
            // Whichever timer succeeds will cancel both timers and
            // execute the callback.
            clearTimeout(timeoutHandle);
            clearInterval(intervalHandle);
            callback();
        }
    };
}

// This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

// ASAP was originally a nextTick shim included in Q. This was factored out
// into this ASAP package. It was later adapted to RSVP which made further
// amendments. These decisions, particularly to marginalize MessageChannel and
// to capture the MutationObserver implementation in a closure, were integrated
// back into ASAP proper.
// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],145:[function(require,module,exports){
/**
 * digits <https://github.com/jonschlinkert/digits>
 *
 * Copyright (c) 2013-2015 Jon Schlinkert
 * Licensed under the MIT License (MIT)
 */

'use strict';

var pad = require('pad-left');
var longest = require('longest');

/**
 * Expose `digits`
 */

module.exports = digits;

/**
 * Left pad the given `value` with the specified `number` of zeros
 * or alternate `character`.
 *
 * ```js
 * digits('abc', 10);
 * //=> '0000000000abc'
 *
 * digits('abc', 10, '~');
 * //=> '~~~~~~~~~~abc'
 * ```
 *
 * @param {String} `value`
 * @param {String} `number`
 * @return {String} `character`
 * @api public
 */

function digits(val, num, ch) {
  return pad(val, num - val.length, ch);
}

/**
 * Pad left pad each value in the given `array` to align with the
 * longest item/number in the array. Zeros are used by default, but
 * a custom `character` can be passed as the second argument.
 *
 * **Example**
 *
 * ```js
 * digits.each([1, 100, 1000])
 * //=> ['0001', '0100', '1000']
 *
 * digits.each([a, bb, ccc], ' ')
 * //=> ['  a', ' bb', 'ccc']
 * ```
 *
 * @param {Number} `arr` The array of values to pad.
 * @param {Number} `len` Amount to pad the number.
 * @return {String} Padded number
 * @api public
 */

digits.each = function(arr, ch) {
  var len = longest(arr).length;

  return arr.map(function(ele) {
    return digits(ele, len, ch);
  });
};

/**
 * Strip leading digits from a string
 *
 * ```js
 * digits.stripleft('010foo.md');
 * // => "foo.md"
 * ```
 *
 * @param  {String} `str`
 * @return {String}
 */

digits.stripleft = function(str) {
  return str.replace(/^\d+\-?/g, '');
};

/**
 * Strip trailing digits from a string
 *
 * ```js
 * digits.stripright('bar010.md');
 * // => "bar.md"
 * ```
 * @param  {String} `str`
 * @return {String}
 */

digits.stripright = function(str) {
  return str.replace(/\-?\d+$/g, '');
};

/**
 * Count digits on the left side of a string
 *
 * ```js
 * digits.countleft('001-foo.md');
 * //=> 3
 * ```
 *
 * @param  {String} `str`
 * @return {String}
 */

digits.countleft = function(str) {
  return String(str.match(/^\d+/g)).length;
};

/**
 * Count digits on the right side of a string
 *
 * ```js
 * digits.countleft('foo-001.md');
 * //=> 3
 * ```
 * @param  {String} `str`
 * @return {String}
 */

digits.countright = function(str) {
  return String(str.match(/\d+$/g)).length;
};

},{"longest":146,"pad-left":147}],146:[function(require,module,exports){
/**
 * longest item in an array
 * Copyright (c) 2014 Jon Schlinkert, contributors.
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(arr) {
  var c = 0,
    len = 0,
    l = 0,
    idx = arr.length;
  if (idx) {
    while (idx--) {
      len = arr[idx].length;
      if (len > c) {
        l = idx;
        c = len;
      }
    }
  }
  return arr[l];
};
},{}],147:[function(require,module,exports){
/*!
 * pad-left <https://github.com/jonschlinkert/pad-left>
 *
 * Copyright (c) 2014 Jon Schlinkert, contributors.
 * Licensed under the MIT license.
 */

'use strict';

var repeat = require('repeat-string');

module.exports = function padLeft(val, num, str) {
  return repeat(str || '0', num) + val;
};

},{"repeat-string":148}],148:[function(require,module,exports){
/*!
 * repeat-string <https://github.com/jonschlinkert/repeat-string>
 *
 * Copyright (c) 2014 Jon Schlinkert, contributors.
 * Licensed under the MIT License
 */

'use strict';

module.exports = function repeat(str, count) {
  if (typeof str !== 'string') {
    throw new TypeError('repeat-string expects a string.');
  }

  if (count < 1) {
    return '';
  }

  var result = '';
  while (count > 0) {
    if (count & 1) {
      result += str;
    }
    count >>= 1;
    str += str;
  }
  return result;
};

},{}],149:[function(require,module,exports){
'use strict';

// jscs:disable maximumLineLength
// This file contains definitions of rules how location URLs are translated
// to "render" methods of catberry's modules.
//
// Format:
// /some/:parameter[module1,module2,module3]
//
// More details here:
// https://github.com/catberry/catberry/blob/master/docs/index.md#url-route-definition

module.exports = [
    '/:page[Pages]',
    //id мастера
    {
        expression: /\/([\/\d]+)$/i,
        map: function (urlPath) {
            var matches = urlPath.path.match(/\/([\/\d]+)$/i);
            return {
                'master/MasterItem': {
                    item: matches[1]
                },
                Pages: {
                    page: "master-page"
                }
            }
        }
    },
    //статья мастера
    {
        expression: '/\/([\/\d]+)\/article\/([\/\d]+)$/i',
        map: function (urlPath) {
            return {
                Pages: {
                    page: "master-article"
                }
            }
        }
    },
    // путь: рубрика/подрубрика
    // путь: рубрика/подрубрика/тег
    // путь: рубрика/подрубрика/секция
    // путь: рубрика/подрубрика/тег/секция
    {
        expression: /^\/([^\/\d]+)\/([^\/\d]+)\/?((?!video|sale|sovety|company)[^\/\d]+)?\/?(video|sale|sovety|company)?$/i,
        map: function (urlPath) {
            var matches = urlPath.path.match(/^\/([^\/\d]+)\/([^\/\d]+)\/?((?!video|sale|sovety|company)[^\/\d]+)?\/?(video|sale|sovety|company)?$/i);
            return {
                'rubrika/Rubrika': {
                    rubrika: matches[1],
                    podrubrika: matches[2]
                },
                Tag: {
                    tag: matches[3],
                    section: matches[4]
                },
                Pages: {
                    page: "master-rubrika"
                }
            }
        }
    },
    // путь: /__/page/:id
    {
        expression: /^\/([^\/\d]+)\/page\/(\d+)/i,
        map: function (urlPath) {
            var matches = urlPath.path.match(/^\/([^\/\d]+)\/page\/(\d+)/i);
            return {
                Pages: {
                    page: matches[1]
                },
                Paginator: {
                    currentPage: matches[2]
                }
            };
        }
    },
    // путь: /sale
    // путь: /sovety
    // путь: /video
    // путь: /__/page/:id
    // путь: /__/category/:id
    // путь: /__/category/:id/page/:id
    {
        expression: /^\/(sale|sovety|video)(\/catalog\/(\d+))?(\/page\/(\d+))?$/i,
        map: function (urlPath) {
            var matches = urlPath.path.match(/^\/(sale|sovety|video)(\/catalog\/(\d+))?(\/page\/(\d+))?$/i);
            var nameCapitalizeFirstLetter = matches[1].charAt(0).toUpperCase() + matches[1].slice(1);
            var state = {};

            state.Pages = {
                page: matches[1]
            };
            state['rubrika/Rubrikator' + nameCapitalizeFirstLetter] = {
                catalog: matches[3]
            };
            state.Paginator = {
                currentPage: matches[5]
            };
            return state;
        }
    },
    // путь: /news/item/:id
    // путь: /vacancy/item/:id
    // путь: /konkurs/item/:id
    {
        expression: /^\/(news|vacancy|konkurs)\/item\/(\d+)$/i,
        map: function (urlPath) {
            var matches = urlPath.path.match(/^\/(news|vacancy|konkurs)\/item\/(\d+)$/i);
            var state = {};

            var string = matches[1];

            state.Pages = {
                page: string + "-item"
            };
            state['other/' + string.charAt(0).toUpperCase() + string.slice(1) + "Item"] = {
                item: matches[2]
            };
            return state;
        }
    }
];

},{}],150:[function(require,module,exports){
'use strict';

var digits = require('digits');

var Dates = require('./utils/dates');
var Utils = require('./utils/utils');

module.exports = function (Handlebars) {

    return {
        /**
         * Repeat  helper
         * @param  {Number} n       number of iterations
         * @param  {[type]} options [description]
         * @return {[type]}         [description]
         */
        repeat: function (n, options) {
            options = options || {};
            var _data = {},
                content = '',
                count = n - 1;

            if (options._data) {
                _data = Handlebars.createFrame(options._data);
            }

            for (var i = 0; i <= count; i++) {
                _data = {
                    index: digits.pad((i + 1), {auto: n})
                };
                content += options.fn(this, {data: _data});
            }
            return new Handlebars.SafeString(content);
        },

        /**
         * If helper with params
         * @param  {[type]} a        [description]
         * @param  {[type]} b        [description]
         * @param  {String} options  operation
         * @return {[type]}          [description]
         */
        is: function (leftOperand, operation, rightOperand, options) {
            var a = leftOperand || false,
                b = rightOperand || false;

            if (operation && typeof operation === 'string') {
                switch (operation) {

                    // Not strictly equal
                    case '==':
                        if (a == b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // Strictly equal
                    case '===':
                        if (a === b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // a > b checking
                    case '>':
                        if (a > b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // a >= b checking
                    case '>=':
                        if (a >= b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // a < b checking
                    case '<':
                        if (a < b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // a <= b checking
                    case '<=':
                        if (a <= b) {
                            return options.fn(this);
                        } else {
                            return options.inverse(this);
                        }
                        break;

                    // Action, if operation is unknown
                    default:
                        throw new Error(
                            'Operation is unknown!\n"is" helper supports only:\n' +
                            '"==",\n' +
                            '"===",\n' +
                            '">",\n' +
                            '">=",\n' +
                            '"<",\n' +
                            '"<=",\n'
                        );
                }
            } else {
                throw new Error('Operation have to be recived and have to be a string');
            }

        },

        /**
         * Str to lower case
         * @param  {String} str [description]
         * @return {[type]}     [description]
         */
        toLowerCase: function (str) {
            if (typeof str != 'string') {
                str.toString();
            }

            return str.toLowerCase();
        },

        /**
         * Str to upper case
         * @param  {String} str [description]
         * @return {[type]}     [description]
         */
        toUpperCase: function (str) {
            if (typeof str != 'string') {
                str.toString();
            }

            return str.toUpperCase();
        },

        /**
         * Capitalize first symbol of str
         * @param  {String} str [description]
         * @return {[type]}     [description]
         */
        capitalizeFirst: function (str) {
            if (typeof str != 'string') {
                str.toString();
            }

            return str.charAt(0).toUpperCase() + str.slice(1);
        },

        /**
         * Remove whitespaces from recived data to helper
         * @param  {[type]} options [description]
         * @return {[type]}         [description]
         */
        strip: function (options) {
            options = options || {};

            var _data = {},
                content = '';

            if (options._data) {
                _data = Handlebars.createFrame(options._data);
            }

            content = options.fn(this, {data: _data}).replace(/>(\s+)</g, '><');

            return new Handlebars.SafeString(content);
        },

        stripTags: function (str) {
            str = str.replace(/<!--[^]*-->/g, '');
            return str.replace(/<\/?[^>]+>/gi, '');
        },

        stripStyle: function (str) {
            return str.replace(/ style="[^"]*"/g, '')
        },

        /**
         * {{formatData}}
         * Port of formatDate-js library (http://bit.ly/18eo2xw)
         * @param  {[type]} date   [description]
         * @param  {[type]} format [description]
         * @return {[type]}        [description]
         */
        formatDate: function (date, format) {
            date = new Date(date);
            return Dates.format(date, format);
        },

        /**
         * {{now}}
         * @param  {[type]} format [description]
         * @return {[type]}        [description]
         */
        now: function (format) {
            var date = new Date();
            if (Utils.isUndefined(format)) {
                return date;
            } else {
                return Dates.format(date, format);
            }
        },

        /**
         * {{i18n}}
         * @author: Laurent Goderre <https://github.com/LaurentGoderrre>
         * @param  {String} context
         * @param  {Object} options
         * @return {String}
         * @example: <https://github.com/assemble/buttons> (See the "button-i18n" example)
         */
        i18n: function (context, options) {
            var language = void 0;

            if (typeof context !== 'string') {
                throw 'Key must be of type \'string\'';
            }

            language = (typeof options.hash.language === 'string' ? options.hash.language : this.language);

            if (typeof language === 'undefined') {
                throw 'The \'language\' parameter is not defined';
            }

            if (typeof this[language] === "undefined") {
                throw 'No strings found for language \'" + language + "\'';
            }

            if (typeof this[language][context] === "undefined") {
                throw 'No string for key \'" + context + "\' for language \'" + language + "\'';
            }

            return this[language][context];
        },
        icon: function (name, selector, sys) {
            var cl = 'icon icon_' + name;

            if (typeof selector == "string") {
                cl += " " + selector;
            }

            return new Handlebars.SafeString(
                '<svg role="img" title="icon_' + name + '" class="' + cl + '">' +
                '<use xlink:href="/icon-svg/svg-symbols.svg#icon_' + name + '"/>' +
                '</svg>'
            );
        },
        imgSrc: function (imgId, width, height, sys) {
            var imgSrc = 'http://api-fm.present-tlt.ru/files?key=' + imgId;
            var typeWidth = typeof width;
            var widthNumber = (typeof width) == "number";
            var heightNumber = (typeof height) == "number";

            if (widthNumber && heightNumber && (width == height)) {
                imgSrc = imgSrc + '&square=' + height;
            } else {
                if ((typeWidth != "undefined") && heightNumber) {
                    imgSrc = imgSrc + '&width=' + width;
                }
                if ((typeWidth != "undefined") && heightNumber) {
                    imgSrc = imgSrc + '&height=' + height;
                }
            }
            //console.log(imgSrc);
            return new Handlebars.SafeString(imgSrc);
        },
        getNumEnding: function (iNumber, aEndings) {
            var sEnding, i;
            if (typeof(iNumber) === "undefined") return false;

            aEndings = aEndings.split(', ');
            iNumber = iNumber % 100;
            if (iNumber >= 11 && iNumber <= 19) {
                sEnding = aEndings[2];
            }
            else {
                i = iNumber % 10;
                switch (i) {
                    case (1):
                        sEnding = aEndings[0];
                        break;
                    case (2):
                    case (3):
                    case (4):
                        sEnding = aEndings[1];
                        break;
                    default:
                        sEnding = aEndings[2];
                }
            }
            return new Handlebars.SafeString(iNumber + ' ' + sEnding);
        }
    };
};
},{"./utils/dates":151,"./utils/utils":152,"digits":145}],151:[function(require,module,exports){
/**
 * Handlebars Helpers Utils
 * http://github.com/assemble/handlebars-helpers
 * Copyright (c) 2013 Jon Schlinkert, Brian Woodward, contributors
 * Licensed under the MIT License (MIT).
 */
'use strict';

var Dates = module.exports = {};

Dates.padNumber = function (num, count, padCharacter) {

    if (typeof padCharacter === 'undefined') {
        padCharacter = '0';
    }

    var lenDiff = count - String(num).length;
    var padding = '';

    if (lenDiff > 0) {
        while (lenDiff--) {
            padding += padCharacter;
        }
    }
    return padding + num;
};

Dates.dayOfYear = function (date) {
    var oneJan = new Date(date.getFullYear(), 0, 1);

    return Math.ceil((date - oneJan) / 86400000);
};

Dates.weekOfYear = function (date) {
    var oneJan = new Date(date.getFullYear(), 0, 1);
    return Math.ceil((((date - oneJan) / 86400000) + oneJan.getDay() + 1) / 7);
};

Dates.isoWeekOfYear = function (date) {
    var target = new Date(date.valueOf());
    var dayNr = (date.getDay() + 6) % 7;
    target.setDate(target.getDate() - dayNr + 3);
    var jan4 = new Date(target.getFullYear(), 0, 4);
    var dayDiff = (target - jan4) / 86400000;

    return 1 + Math.ceil(dayDiff / 7);
};

Dates.tweleveHour = function (date) {
    if (date.getHours() > 12) {
        return date.getHours() - 12;
    }

    return date.getHours();
};

Dates.timeZoneOffset = function (date) {
    var hoursDiff = -date.getTimezoneOffset() / 60;
    var result = Dates.padNumber(Math.abs(hoursDiff), 4);

    return (hoursDiff > 0 ? '+' : '-') + result;
};

Dates.format = function (date, format) {
    var match = null;
    return format.replace(Dates.formats, function (m, p) {
        switch (p) {
            case 'a':
                return Dates.abbreviatedWeekdays[date.getDay()];
            case 'A':
                return Dates.fullWeekdays[date.getDay()];
            case 'b':
                return Dates.abbreviatedMonths[date.getMonth()];
            case 'B':
                return Dates.getFullMounth(date.getMonth(), "Ru");
            case 'c':
                return date.toLocaleString();
            case 'C':
                return Math.round(date.getFullYear() / 100);
            case 'd':
                return Dates.padNumber(date.getDate(), 2);
            case 'D':
                return Dates.format(date, '%m/%d/%y');
            case 'e':
                return Dates.padNumber(date.getDate(), 2, ' ');
            case 'F':
                return Dates.format(date, '%Y-%m-%d');
            case 'h':
                return Dates.format(date, '%b');
            case 'H':
                return Dates.padNumber(date.getHours(), 2);
            case 'I':
                return Dates.padNumber(Dates.tweleveHour(date), 2);
            case 'j':
                return Dates.padNumber(Dates.dayOfYear(date), 3);
            case 'k':
                return Dates.padNumber(date.getHours(), 2, ' ');
            case 'l':
                return Dates.padNumber(Dates.tweleveHour(date), 2, ' ');
            case 'L':
                return Dates.padNumber(date.getMilliseconds(), 3);
            case 'm':
                return Dates.padNumber(date.getMonth() + 1, 2);
            case 'M':
                return Dates.padNumber(date.getMinutes(), 2);
            case 'n':
                return '\n';
            case 'p':
                if (date.getHours() > 11) {
                    return 'PM';
                } else {
                    return 'AM';
                }
                break;
            case 'P':
                return Dates.format(date, '%p').toLowerCase();
            case 'r':
                return Dates.format(date, '%I:%M:%S %p');
            case 'R':
                return Dates.format(date, '%H:%M');
            case 's':
                return date.getTime() / 1000;
            case 'S':
                return Dates.padNumber(date.getSeconds(), 2);
            case 't':
                return '\t';
            case 'T':
                return Dates.format(date, '%H:%M:%S');
            case 'u':
                if (date.getDay() === 0) {
                    return 7;
                } else {
                    return date.getDay();
                }
                break;
            case 'U':
                return Dates.padNumber(Dates.weekOfYear(date), 2);
            case 'v':
                return Dates.format(date, '%e-%b-%Y');
            case 'V':
                return Dates.padNumber(Dates.isoWeekOfYear(date), 2);
            case 'W':
                return Dates.padNumber(Dates.weekOfYear(date), 2);
            case 'w':
                return Dates.padNumber(date.getDay(), 2);
            case 'x':
                return date.toLocaleDateString();
            case 'X':
                return date.toLocaleTimeString();
            case 'y':
                return String(date.getFullYear()).substring(2);
            case 'Y':
                return date.getFullYear();
            case 'z':
                return Dates.timeZoneOffset(date);
            case 'Z':
                return Dates.fullMonthsRuP[date.getMonth()];
            default:
                return match;
        }
    });
};

Dates.formats = /%(a|A|b|B|c|C|d|D|e|E|F|h|H|I|j|k|l|L|m|M|n|p|P|r|R|s|S|t|T|u|U|v|V|W|w|x|X|y|Y|z|Z)/g;

Dates.abbreviatedWeekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'];
Dates.fullWeekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
Dates.abbreviatedMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
Dates.fullMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

Dates.fullMonthsRuP = ['Января', 'Февраля', 'Марта', 'Апреля', 'Мая', 'Июня', 'Июля', 'Августа', 'Сентября', 'Октября', 'Ноября', 'Декабря'];
Dates.fullMonthsRu = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];

Dates.getFullMounth = function (num, lang) {
    if (lang == "Ru")
        return Dates.fullMonthsRu;
    return Dates.fullMonths;
}


},{}],152:[function(require,module,exports){
/**
 * Handlebars Helpers: Utils
 * http://github.com/assemble/handlebars-helpers
 * Copyright (c) 2013, 2014 Jon Schlinkert, Brian Woodward, contributors
 * Licensed under the MIT License (MIT).
 */
'use strict';

module.exports = {
    isUndefined: function (value) {
        return typeof value === 'undefined' || value.toString() === '[object Function]' || (value.hash != null);
    }
};

},{}],153:[function(require,module,exports){
'use strict';



module.exports = {
    /**
     * Registers all helpers.
     * @param {ServiceLocator} locator Catberry's service locator.
     */
    register: function (locator) {
        var config = locator.resolve('config');
        try {
            var handlebars = locator.resolve('handlebars');
            var helpers = require('./handlebars-helper')(handlebars);

            Object.keys(helpers)
                .forEach(function (name) {
                    handlebars.registerHelper(name, helpers[name]);
                });
        } catch (e) {
            // nothing to do.
        }
    }
};
},{"./handlebars-helper":150}],154:[function(require,module,exports){
/*
 * catberry-handlebars
 *
 * Copyright (c) 2015 Denis Rechkunov and project contributors.
 *
 * catberry-handlebars's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * This license applies to all parts of catberry-handlebars that are
 * not externally maintained libraries.
 */

'use strict';

module.exports = TemplateProvider;

/**
 * Creates new instance of Handlebars template provider.
 * @param {Handlebars} $handlebars Handlebars factory.
 * @constructor
 */
function TemplateProvider($handlebars) {
	this._handlebars = $handlebars;
	this._templates = Object.create(null);
}

/**
 * Current Handlebars factory.
 * @type {Handlebars}
 * @private
 */
TemplateProvider.prototype._handlebars = null;

/**
 * Current set of registered templates.
 * @type {Object}
 * @private
 */
TemplateProvider.prototype._templates = null;

/**
 * Registers compiled (precompiled) Handlebars template.
 * http://handlebarsjs.com/reference.html
 * @param {string} name Template name.
 * @param {string} compiled Compiled template source.
 */
TemplateProvider.prototype.registerCompiled = function (name, compiled) {
	// jshint evil:true
	var specs = new Function('return ' + compiled + ';');
	this._templates[name] = this._handlebars.template(specs());
};

/**
 * Renders template with specified data.
 * @param {string} name Name of template.
 * @param {Object} data Data context for template.
 * @returns {Promise<string>} Promise for rendered HTML.
 */
TemplateProvider.prototype.render = function (name, data) {
	if (!(name in this._templates)) {
		return Promise.reject(new Error('No such template'));
	}

	var promise;
	try {
		promise = Promise.resolve(this._templates[name](data));
	} catch (e) {
		promise = Promise.reject(e);
	}
	return promise;
};
},{}],155:[function(require,module,exports){
/*!

 handlebars v2.0.0

Copyright (C) 2011-2014 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

@license
*/
/* exported Handlebars */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.Handlebars = root.Handlebars || factory();
  }
}(this, function () {
// handlebars/safe-string.js
var __module3__ = (function() {
  "use strict";
  var __exports__;
  // Build out our basic SafeString type
  function SafeString(string) {
    this.string = string;
  }

  SafeString.prototype.toString = function() {
    return "" + this.string;
  };

  __exports__ = SafeString;
  return __exports__;
})();

// handlebars/utils.js
var __module2__ = (function(__dependency1__) {
  "use strict";
  var __exports__ = {};
  /*jshint -W004 */
  var SafeString = __dependency1__;

  var escape = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /[&<>"'`]/g;
  var possible = /[&<>"'`]/;

  function escapeChar(chr) {
    return escape[chr];
  }

  function extend(obj /* , ...source */) {
    for (var i = 1; i < arguments.length; i++) {
      for (var key in arguments[i]) {
        if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
          obj[key] = arguments[i][key];
        }
      }
    }

    return obj;
  }

  __exports__.extend = extend;var toString = Object.prototype.toString;
  __exports__.toString = toString;
  // Sourced from lodash
  // https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
  var isFunction = function(value) {
    return typeof value === 'function';
  };
  // fallback for older versions of Chrome and Safari
  /* istanbul ignore next */
  if (isFunction(/x/)) {
    isFunction = function(value) {
      return typeof value === 'function' && toString.call(value) === '[object Function]';
    };
  }
  var isFunction;
  __exports__.isFunction = isFunction;
  /* istanbul ignore next */
  var isArray = Array.isArray || function(value) {
    return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
  };
  __exports__.isArray = isArray;

  function escapeExpression(string) {
    // don't escape SafeStrings, since they're already safe
    if (string instanceof SafeString) {
      return string.toString();
    } else if (string == null) {
      return "";
    } else if (!string) {
      return string + '';
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = "" + string;

    if(!possible.test(string)) { return string; }
    return string.replace(badChars, escapeChar);
  }

  __exports__.escapeExpression = escapeExpression;function isEmpty(value) {
    if (!value && value !== 0) {
      return true;
    } else if (isArray(value) && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }

  __exports__.isEmpty = isEmpty;function appendContextPath(contextPath, id) {
    return (contextPath ? contextPath + '.' : '') + id;
  }

  __exports__.appendContextPath = appendContextPath;
  return __exports__;
})(__module3__);

// handlebars/exception.js
var __module4__ = (function() {
  "use strict";
  var __exports__;

  var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

  function Exception(message, node) {
    var line;
    if (node && node.firstLine) {
      line = node.firstLine;

      message += ' - ' + line + ':' + node.firstColumn;
    }

    var tmp = Error.prototype.constructor.call(this, message);

    // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
    for (var idx = 0; idx < errorProps.length; idx++) {
      this[errorProps[idx]] = tmp[errorProps[idx]];
    }

    if (line) {
      this.lineNumber = line;
      this.column = node.firstColumn;
    }
  }

  Exception.prototype = new Error();

  __exports__ = Exception;
  return __exports__;
})();

// handlebars/base.js
var __module1__ = (function(__dependency1__, __dependency2__) {
  "use strict";
  var __exports__ = {};
  var Utils = __dependency1__;
  var Exception = __dependency2__;

  var VERSION = "2.0.0";
  __exports__.VERSION = VERSION;var COMPILER_REVISION = 6;
  __exports__.COMPILER_REVISION = COMPILER_REVISION;
  var REVISION_CHANGES = {
    1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
    2: '== 1.0.0-rc.3',
    3: '== 1.0.0-rc.4',
    4: '== 1.x.x',
    5: '== 2.0.0-alpha.x',
    6: '>= 2.0.0-beta.1'
  };
  __exports__.REVISION_CHANGES = REVISION_CHANGES;
  var isArray = Utils.isArray,
      isFunction = Utils.isFunction,
      toString = Utils.toString,
      objectType = '[object Object]';

  function HandlebarsEnvironment(helpers, partials) {
    this.helpers = helpers || {};
    this.partials = partials || {};

    registerDefaultHelpers(this);
  }

  __exports__.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
    constructor: HandlebarsEnvironment,

    logger: logger,
    log: log,

    registerHelper: function(name, fn) {
      if (toString.call(name) === objectType) {
        if (fn) { throw new Exception('Arg not supported with multiple helpers'); }
        Utils.extend(this.helpers, name);
      } else {
        this.helpers[name] = fn;
      }
    },
    unregisterHelper: function(name) {
      delete this.helpers[name];
    },

    registerPartial: function(name, partial) {
      if (toString.call(name) === objectType) {
        Utils.extend(this.partials,  name);
      } else {
        this.partials[name] = partial;
      }
    },
    unregisterPartial: function(name) {
      delete this.partials[name];
    }
  };

  function registerDefaultHelpers(instance) {
    instance.registerHelper('helperMissing', function(/* [args, ]options */) {
      if(arguments.length === 1) {
        // A missing field in a {{foo}} constuct.
        return undefined;
      } else {
        // Someone is actually trying to call something, blow up.
        throw new Exception("Missing helper: '" + arguments[arguments.length-1].name + "'");
      }
    });

    instance.registerHelper('blockHelperMissing', function(context, options) {
      var inverse = options.inverse,
          fn = options.fn;

      if(context === true) {
        return fn(this);
      } else if(context === false || context == null) {
        return inverse(this);
      } else if (isArray(context)) {
        if(context.length > 0) {
          if (options.ids) {
            options.ids = [options.name];
          }

          return instance.helpers.each(context, options);
        } else {
          return inverse(this);
        }
      } else {
        if (options.data && options.ids) {
          var data = createFrame(options.data);
          data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
          options = {data: data};
        }

        return fn(context, options);
      }
    });

    instance.registerHelper('each', function(context, options) {
      if (!options) {
        throw new Exception('Must pass iterator to #each');
      }

      var fn = options.fn, inverse = options.inverse;
      var i = 0, ret = "", data;

      var contextPath;
      if (options.data && options.ids) {
        contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
      }

      if (isFunction(context)) { context = context.call(this); }

      if (options.data) {
        data = createFrame(options.data);
      }

      if(context && typeof context === 'object') {
        if (isArray(context)) {
          for(var j = context.length; i<j; i++) {
            if (data) {
              data.index = i;
              data.first = (i === 0);
              data.last  = (i === (context.length-1));

              if (contextPath) {
                data.contextPath = contextPath + i;
              }
            }
            ret = ret + fn(context[i], { data: data });
          }
        } else {
          for(var key in context) {
            if(context.hasOwnProperty(key)) {
              if(data) {
                data.key = key;
                data.index = i;
                data.first = (i === 0);

                if (contextPath) {
                  data.contextPath = contextPath + key;
                }
              }
              ret = ret + fn(context[key], {data: data});
              i++;
            }
          }
        }
      }

      if(i === 0){
        ret = inverse(this);
      }

      return ret;
    });

    instance.registerHelper('if', function(conditional, options) {
      if (isFunction(conditional)) { conditional = conditional.call(this); }

      // Default behavior is to render the positive path if the value is truthy and not empty.
      // The `includeZero` option may be set to treat the condtional as purely not empty based on the
      // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
      if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
        return options.inverse(this);
      } else {
        return options.fn(this);
      }
    });

    instance.registerHelper('unless', function(conditional, options) {
      return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
    });

    instance.registerHelper('with', function(context, options) {
      if (isFunction(context)) { context = context.call(this); }

      var fn = options.fn;

      if (!Utils.isEmpty(context)) {
        if (options.data && options.ids) {
          var data = createFrame(options.data);
          data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
          options = {data:data};
        }

        return fn(context, options);
      } else {
        return options.inverse(this);
      }
    });

    instance.registerHelper('log', function(message, options) {
      var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
      instance.log(level, message);
    });

    instance.registerHelper('lookup', function(obj, field) {
      return obj && obj[field];
    });
  }

  var logger = {
    methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

    // State enum
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3,
    level: 3,

    // can be overridden in the host environment
    log: function(level, message) {
      if (logger.level <= level) {
        var method = logger.methodMap[level];
        if (typeof console !== 'undefined' && console[method]) {
          console[method].call(console, message);
        }
      }
    }
  };
  __exports__.logger = logger;
  var log = logger.log;
  __exports__.log = log;
  var createFrame = function(object) {
    var frame = Utils.extend({}, object);
    frame._parent = object;
    return frame;
  };
  __exports__.createFrame = createFrame;
  return __exports__;
})(__module2__, __module4__);

// handlebars/runtime.js
var __module5__ = (function(__dependency1__, __dependency2__, __dependency3__) {
  "use strict";
  var __exports__ = {};
  var Utils = __dependency1__;
  var Exception = __dependency2__;
  var COMPILER_REVISION = __dependency3__.COMPILER_REVISION;
  var REVISION_CHANGES = __dependency3__.REVISION_CHANGES;
  var createFrame = __dependency3__.createFrame;

  function checkRevision(compilerInfo) {
    var compilerRevision = compilerInfo && compilerInfo[0] || 1,
        currentRevision = COMPILER_REVISION;

    if (compilerRevision !== currentRevision) {
      if (compilerRevision < currentRevision) {
        var runtimeVersions = REVISION_CHANGES[currentRevision],
            compilerVersions = REVISION_CHANGES[compilerRevision];
        throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
              "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
      } else {
        // Use the embedded version info since the runtime doesn't know about this revision yet
        throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
              "Please update your runtime to a newer version ("+compilerInfo[1]+").");
      }
    }
  }

  __exports__.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

  function template(templateSpec, env) {
    /* istanbul ignore next */
    if (!env) {
      throw new Exception("No environment passed to template");
    }
    if (!templateSpec || !templateSpec.main) {
      throw new Exception('Unknown template object: ' + typeof templateSpec);
    }

    // Note: Using env.VM references rather than local var references throughout this section to allow
    // for external users to override these as psuedo-supported APIs.
    env.VM.checkRevision(templateSpec.compiler);

    var invokePartialWrapper = function(partial, indent, name, context, hash, helpers, partials, data, depths) {
      if (hash) {
        context = Utils.extend({}, context, hash);
      }

      var result = env.VM.invokePartial.call(this, partial, name, context, helpers, partials, data, depths);

      if (result == null && env.compile) {
        var options = { helpers: helpers, partials: partials, data: data, depths: depths };
        partials[name] = env.compile(partial, { data: data !== undefined, compat: templateSpec.compat }, env);
        result = partials[name](context, options);
      }
      if (result != null) {
        if (indent) {
          var lines = result.split('\n');
          for (var i = 0, l = lines.length; i < l; i++) {
            if (!lines[i] && i + 1 === l) {
              break;
            }

            lines[i] = indent + lines[i];
          }
          result = lines.join('\n');
        }
        return result;
      } else {
        throw new Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
      }
    };

    // Just add water
    var container = {
      lookup: function(depths, name) {
        var len = depths.length;
        for (var i = 0; i < len; i++) {
          if (depths[i] && depths[i][name] != null) {
            return depths[i][name];
          }
        }
      },
      lambda: function(current, context) {
        return typeof current === 'function' ? current.call(context) : current;
      },

      escapeExpression: Utils.escapeExpression,
      invokePartial: invokePartialWrapper,

      fn: function(i) {
        return templateSpec[i];
      },

      programs: [],
      program: function(i, data, depths) {
        var programWrapper = this.programs[i],
            fn = this.fn(i);
        if (data || depths) {
          programWrapper = program(this, i, fn, data, depths);
        } else if (!programWrapper) {
          programWrapper = this.programs[i] = program(this, i, fn);
        }
        return programWrapper;
      },

      data: function(data, depth) {
        while (data && depth--) {
          data = data._parent;
        }
        return data;
      },
      merge: function(param, common) {
        var ret = param || common;

        if (param && common && (param !== common)) {
          ret = Utils.extend({}, common, param);
        }

        return ret;
      },

      noop: env.VM.noop,
      compilerInfo: templateSpec.compiler
    };

    var ret = function(context, options) {
      options = options || {};
      var data = options.data;

      ret._setup(options);
      if (!options.partial && templateSpec.useData) {
        data = initData(context, data);
      }
      var depths;
      if (templateSpec.useDepths) {
        depths = options.depths ? [context].concat(options.depths) : [context];
      }

      return templateSpec.main.call(container, context, container.helpers, container.partials, data, depths);
    };
    ret.isTop = true;

    ret._setup = function(options) {
      if (!options.partial) {
        container.helpers = container.merge(options.helpers, env.helpers);

        if (templateSpec.usePartial) {
          container.partials = container.merge(options.partials, env.partials);
        }
      } else {
        container.helpers = options.helpers;
        container.partials = options.partials;
      }
    };

    ret._child = function(i, data, depths) {
      if (templateSpec.useDepths && !depths) {
        throw new Exception('must pass parent depths');
      }

      return program(container, i, templateSpec[i], data, depths);
    };
    return ret;
  }

  __exports__.template = template;function program(container, i, fn, data, depths) {
    var prog = function(context, options) {
      options = options || {};

      return fn.call(container, context, container.helpers, container.partials, options.data || data, depths && [context].concat(depths));
    };
    prog.program = i;
    prog.depth = depths ? depths.length : 0;
    return prog;
  }

  __exports__.program = program;function invokePartial(partial, name, context, helpers, partials, data, depths) {
    var options = { partial: true, helpers: helpers, partials: partials, data: data, depths: depths };

    if(partial === undefined) {
      throw new Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    }
  }

  __exports__.invokePartial = invokePartial;function noop() { return ""; }

  __exports__.noop = noop;function initData(context, data) {
    if (!data || !('root' in data)) {
      data = data ? createFrame(data) : {};
      data.root = context;
    }
    return data;
  }
  return __exports__;
})(__module2__, __module4__, __module1__);

// handlebars.runtime.js
var __module0__ = (function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__) {
  "use strict";
  var __exports__;
  /*globals Handlebars: true */
  var base = __dependency1__;

  // Each of these augment the Handlebars object. No need to setup here.
  // (This is done to easily share code between commonjs and browse envs)
  var SafeString = __dependency2__;
  var Exception = __dependency3__;
  var Utils = __dependency4__;
  var runtime = __dependency5__;

  // For compatibility and usage outside of module systems, make the Handlebars object a namespace
  var create = function() {
    var hb = new base.HandlebarsEnvironment();

    Utils.extend(hb, base);
    hb.SafeString = SafeString;
    hb.Exception = Exception;
    hb.Utils = Utils;
    hb.escapeExpression = Utils.escapeExpression;

    hb.VM = runtime;
    hb.template = function(spec) {
      return runtime.template(spec, hb);
    };

    return hb;
  };

  var Handlebars = create();
  Handlebars.create = create;

  Handlebars['default'] = Handlebars;

  __exports__ = Handlebars;
  return __exports__;
})(__module1__, __module3__, __module4__, __module2__, __module5__);

  return __module0__;
}));

},{}],156:[function(require,module,exports){
/*
 * catberry-handlebars
 *
 * Copyright (c) 2014 Denis Rechkunov and project contributors.
 *
 * catberry-handlebars's license follows:
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * This license applies to all parts of catberry-handlebars that
 * are not externally maintained libraries.
 */

'use strict';

var Handlebars = require('./lib/vendors/handlebars'),
    TemplateProvider = require('./lib/TemplateProvider');

module.exports = {
    register: function (locator, config) {
        config = config || {};
        locator.registerInstance('handlebars', Handlebars);
        locator.register('templateProvider', TemplateProvider, config, true);
    },
    Handlebars: Handlebars,
    TemplateProvider: TemplateProvider
};

},{"./lib/TemplateProvider":154,"./lib/vendors/handlebars":155}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiX19Ccm93c2VyQnVuZGxlLmpzIiwiYnJvd3Nlci5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvX2NvbW1vbi9jb21tb24taDEvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL19jb21tb24vY29tbW9uLXBhZ2luYXRvci9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvYnJlYWRjcnVtcHMvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL2NhdGFsb2ctbGlzdC9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvZG9jdW1lbnQvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL2hlYWQvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL2xvYWRlci9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvbWFzdGVyL21hc3Rlci1ibG9jay9tYXN0ZXItYmxvY2stYWJvdXQvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItYmxvY2svbWFzdGVyLWJsb2NrLWFydGljbGUvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItYmxvY2svbWFzdGVyLWJsb2NrLWxpbmsvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItYmxvY2svbWFzdGVyLWJsb2NrLXBob3RvL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLWJsb2NrL21hc3Rlci1ibG9jay1yZXZpZXcvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItYmxvY2svbWFzdGVyLWJsb2NrLXNhbGUvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItYmxvY2svbWFzdGVyLWJsb2NrLXNlcnZpY2UvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItYmxvY2svbWFzdGVyLWJsb2NrLXZpZGVvL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLWJsb2NrL21hc3Rlci1ibG9jay13b3JrL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLWZpbHRlci9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvbWFzdGVyL21hc3Rlci1saXN0L2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLW1pbmljYXJkL21hc3Rlci1taW5pY2FyZC9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvbWFzdGVyL21hc3Rlci1taW5pY2FyZC9tYXN0ZXItcGhvbmUtYnRuL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLXBhZ2UvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItcmVjb21tZW5kZWQvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItcnVicmlrYS9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvb3RoZXIvb3RoZXItbmV3cy1pdGVtL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9vdGhlci9vdGhlci1uZXdzL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9vdGhlci9vdGhlci1yZWNvbW1lbmRhdGlvbi9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvb3RoZXIvb3RoZXItdmFjYW5jeS1pdGVtL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9vdGhlci9vdGhlci12YWNhbmN5L2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtY2F0YWxvZy9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLWNvbnRhY3QvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1mZWVkYmFjay9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLWxvZ2luL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtbWFpbi9kb3AtZnVuY3Rpb24vaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1tYWluL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtbWFpbi9tYWluLWZ1bmN0aW9uL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtbWFzdGVyLXBhZ2UvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1tYXN0ZXItcnVicmlrYS9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLW5ld3MtaXRlbS9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLW5ld3MvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1vZmVydGEvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1yZWNvbW1lbmRhdGlvbi9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLXJlZ2lzdHJhdGlvbi9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLXJlcXVlc3QvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1zYWxlL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2Utc292ZXR5L2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtdmFjYW5jeS1pdGVtL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtdmFjYW5jeS9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLXZpZGVvL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9wYWdlcy9wYWdlcy1jb250ZW50L2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9wYWdlcy9wYWdlcy1mb290ZXIvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3BhZ2VzL3BhZ2VzLWhlYWRlci9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZXMvcGFnZXMtbmF2aWdhdGlvbi9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcmVnaXN0cmF0aW9uL3JlZ2lzdHJhdGlvbi1hYm91dC9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcmVnaXN0cmF0aW9uL3JlZ2lzdHJhdGlvbi1mYXEvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24tZm9ybS9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcmVnaXN0cmF0aW9uL3JlZ2lzdHJhdGlvbi1oZWFkZXIvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24tbW9yZS1wYWdlL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLXByaWNlL2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9yZWdpc3RyYXRpb24vcmVnaXN0cmF0aW9uLXdoeS13ZS9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvcnVicmlrYXRvci9ydWJyaWthdG9yLWxpc3QvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3NhbGUvaW5kZXguanMiLCJjYXRiZXJyeV9jb21wb25lbnRzL3NlYXJjaC9pbmRleC5qcyIsImNhdGJlcnJ5X2NvbXBvbmVudHMvc2VydmljZS1yZXF1ZXN0L2luZGV4LmpzIiwiY2F0YmVycnlfY29tcG9uZW50cy9zb2NpYWwvaW5kZXguanMiLCJjYXRiZXJyeV9zdG9yZXMvQnJlYWRjcnVtcHMuanMiLCJjYXRiZXJyeV9zdG9yZXMvSGVhZC5qcyIsImNhdGJlcnJ5X3N0b3Jlcy9QYWdlcy5qcyIsImNhdGJlcnJ5X3N0b3Jlcy9QYWdpbmF0b3IuanMiLCJjYXRiZXJyeV9zdG9yZXMvVGFnLmpzIiwiY2F0YmVycnlfc3RvcmVzL21hc3Rlci9NYXN0ZXJJdGVtLmpzIiwiY2F0YmVycnlfc3RvcmVzL21hc3Rlci9NYXN0ZXJMaXN0LmpzIiwiY2F0YmVycnlfc3RvcmVzL21hc3Rlci9NYXN0ZXJTb3ZldHkuanMiLCJjYXRiZXJyeV9zdG9yZXMvbWFzdGVyL01hc3RlclZpZGVvLmpzIiwiY2F0YmVycnlfc3RvcmVzL21hc3Rlci9SZWNvbW1lbmRlZC5qcyIsImNhdGJlcnJ5X3N0b3Jlcy9vdGhlci9OZXdzLmpzIiwiY2F0YmVycnlfc3RvcmVzL290aGVyL05ld3NJdGVtLmpzIiwiY2F0YmVycnlfc3RvcmVzL290aGVyL1JlY29tbWVuZGF0aW9uLmpzIiwiY2F0YmVycnlfc3RvcmVzL290aGVyL1ZhY2FuY3kuanMiLCJjYXRiZXJyeV9zdG9yZXMvb3RoZXIvVmFjYW5jeUl0ZW0uanMiLCJjYXRiZXJyeV9zdG9yZXMvcnVicmlrYS9SdWJyaWthLmpzIiwiY2F0YmVycnlfc3RvcmVzL3J1YnJpa2EvUnVicmlrYXRvci5qcyIsImNhdGJlcnJ5X3N0b3Jlcy9ydWJyaWthL1J1YnJpa2F0b3JDb21wYW55LmpzIiwiY2F0YmVycnlfc3RvcmVzL3J1YnJpa2EvUnVicmlrYXRvclBhcmVudC5qcyIsImNhdGJlcnJ5X3N0b3Jlcy9ydWJyaWthL1J1YnJpa2F0b3JTYWxlLmpzIiwiY2F0YmVycnlfc3RvcmVzL3NhbGUvU2FsZUJ5UnVicmlrYS5qcyIsImNvbmZpZy9icm93c2VyLmpzb24iLCJjb25maWcvcGFnZXMuanNvbiIsImxpYi9TdG9yZVBhZ2luYXRvci5qcyIsImxpYi91dGlsL0RhdGVGb3JtYXQuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvYnJvd3Nlci9DYXRiZXJyeS5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9icm93c2VyL0Nvb2tpZVdyYXBwZXIuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvYnJvd3Nlci9Eb2N1bWVudFJlbmRlcmVyLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2Jyb3dzZXIvTG9nZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2Jyb3dzZXIvUmVxdWVzdFJvdXRlci5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9icm93c2VyL2hlbHBlcnMvaHJUaW1lSGVscGVyLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2Jyb3dzZXIvbG9hZGVycy9Db21wb25lbnRMb2FkZXIuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvYnJvd3Nlci9sb2FkZXJzL1N0b3JlTG9hZGVyLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2Jyb3dzZXIvcHJvdmlkZXJzL01vZHVsZUFwaVByb3ZpZGVyLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2xpYi9Db250ZXh0RmFjdG9yeS5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9saWIvU2VyaWFsV3JhcHBlci5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9saWIvU3RvcmVEaXNwYXRjaGVyLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2xpYi9iYXNlL0Jvb3RzdHJhcHBlckJhc2UuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbGliL2Jhc2UvQ2F0YmVycnlCYXNlLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2xpYi9iYXNlL0Nvb2tpZVdyYXBwZXJCYXNlLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2xpYi9iYXNlL0RvY3VtZW50UmVuZGVyZXJCYXNlLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2xpYi9iYXNlL0xvYWRlckJhc2UuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbGliL2Jhc2UvTW9kdWxlQXBpUHJvdmlkZXJCYXNlLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2xpYi9oZWxwZXJzL2Vycm9ySGVscGVyLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2xpYi9oZWxwZXJzL21vZHVsZUhlbHBlci5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9saWIvaGVscGVycy9wcm9wZXJ0eUhlbHBlci5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9saWIvaGVscGVycy9yb3V0ZUhlbHBlci5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9saWIvcHJvdmlkZXJzL1N0YXRlUHJvdmlkZXIuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcHJvY2Vzcy1ocnRpbWUvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2luaGVyaXRzL2luaGVyaXRzX2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvdXRpbC91dGlsLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L25vZGVfbW9kdWxlcy9jYXRiZXJyeS1sb2NhdG9yL2xpYi9Db25zdHJ1Y3RvclRva2VuaXplci5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9ub2RlX21vZHVsZXMvY2F0YmVycnktbG9jYXRvci9saWIvU2VydmljZUxvY2F0b3IuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbm9kZV9tb2R1bGVzL2NhdGJlcnJ5LXVoci9icm93c2VyL1VIUi5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9ub2RlX21vZHVsZXMvY2F0YmVycnktdWhyL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L25vZGVfbW9kdWxlcy9jYXRiZXJyeS11aHIvbGliL1VIUkJhc2UuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbm9kZV9tb2R1bGVzL2NhdGJlcnJ5LXVyaS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9ub2RlX21vZHVsZXMvY2F0YmVycnktdXJpL2xpYi9BdXRob3JpdHkuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbm9kZV9tb2R1bGVzL2NhdGJlcnJ5LXVyaS9saWIvUXVlcnkuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbm9kZV9tb2R1bGVzL2NhdGJlcnJ5LXVyaS9saWIvVVJJLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L25vZGVfbW9kdWxlcy9jYXRiZXJyeS11cmkvbGliL1VzZXJJbmZvLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L25vZGVfbW9kdWxlcy9jYXRiZXJyeS11cmkvbGliL3BlcmNlbnRFbmNvZGluZ0hlbHBlci5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9ub2RlX21vZHVsZXMvbW9ycGhkb20vbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L25vZGVfbW9kdWxlcy9wcmV0dHktaHJ0aW1lL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L25vZGVfbW9kdWxlcy9wcm9taXNlL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L25vZGVfbW9kdWxlcy9wcm9taXNlL2xpYi9jb3JlLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L25vZGVfbW9kdWxlcy9wcm9taXNlL2xpYi9kb25lLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L25vZGVfbW9kdWxlcy9wcm9taXNlL2xpYi9lczYtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9ub2RlX21vZHVsZXMvcHJvbWlzZS9saWIvZmluYWxseS5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9ub2RlX21vZHVsZXMvcHJvbWlzZS9saWIvaW5kZXguanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbm9kZV9tb2R1bGVzL3Byb21pc2UvbGliL25vZGUtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9jYXRiZXJyeS9ub2RlX21vZHVsZXMvcHJvbWlzZS9saWIvc3luY2hyb25vdXMuanMiLCJub2RlX21vZHVsZXMvY2F0YmVycnkvbm9kZV9tb2R1bGVzL3Byb21pc2Uvbm9kZV9tb2R1bGVzL2FzYXAvYnJvd3Nlci1hc2FwLmpzIiwibm9kZV9tb2R1bGVzL2NhdGJlcnJ5L25vZGVfbW9kdWxlcy9wcm9taXNlL25vZGVfbW9kdWxlcy9hc2FwL2Jyb3dzZXItcmF3LmpzIiwibm9kZV9tb2R1bGVzL2RpZ2l0cy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kaWdpdHMvbm9kZV9tb2R1bGVzL2xvbmdlc3QvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZGlnaXRzL25vZGVfbW9kdWxlcy9wYWQtbGVmdC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9kaWdpdHMvbm9kZV9tb2R1bGVzL3BhZC1sZWZ0L25vZGVfbW9kdWxlcy9yZXBlYXQtc3RyaW5nL2luZGV4LmpzIiwicm91dGVzLmpzIiwic3BlY2lhbF9tb2R1bGVzL2NhdGJlcnJ5LWhhbmRsZWJhcnMtaGVscGVycy9oYW5kbGViYXJzLWhlbHBlci9pbmRleC5qcyIsInNwZWNpYWxfbW9kdWxlcy9jYXRiZXJyeS1oYW5kbGViYXJzLWhlbHBlcnMvaGFuZGxlYmFycy1oZWxwZXIvdXRpbHMvZGF0ZXMuanMiLCJzcGVjaWFsX21vZHVsZXMvY2F0YmVycnktaGFuZGxlYmFycy1oZWxwZXJzL2hhbmRsZWJhcnMtaGVscGVyL3V0aWxzL3V0aWxzLmpzIiwic3BlY2lhbF9tb2R1bGVzL2NhdGJlcnJ5LWhhbmRsZWJhcnMtaGVscGVycy9pbmRleC5qcyIsInNwZWNpYWxfbW9kdWxlcy9jYXRiZXJyeS1oYW5kbGViYXJzL2Jyb3dzZXIvVGVtcGxhdGVQcm92aWRlci5qcyIsInNwZWNpYWxfbW9kdWxlcy9jYXRiZXJyeS1oYW5kbGViYXJzL2Jyb3dzZXIvdmVuZG9ycy9oYW5kbGViYXJzLmpzIiwic3BlY2lhbF9tb2R1bGVzL2NhdGJlcnJ5LWhhbmRsZWJhcnMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25FQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9EQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzd5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0VUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOVpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3BKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzFrQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNVJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDak1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNWJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbFZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25HQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDck5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDbEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUM1TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbi8qKlxuICogVGhpcyBtb2R1bGUgaXMgYSB0ZW1wbGF0ZSBhbmQgaXQgaXMgdXNlZCBvbmx5IHdpdGggc29tZSBzdHJpbmcgcmVwbGFjZXNcbiAqIGJ5IEJyb3dzZXJCdW5kbGVCdWlsZGVyIG1vZHVsZS4gSXQgZG9lcyBub3Qgd29yayBieSBpdHNlbGYuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RvcmVzID0gW1xuXG57bmFtZTogJ0JyZWFkY3J1bXBzJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfc3RvcmVzL0JyZWFkY3J1bXBzLmpzJyl9LFxue25hbWU6ICdIZWFkJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfc3RvcmVzL0hlYWQuanMnKX0sXG57bmFtZTogJ1BhZ2VzJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfc3RvcmVzL1BhZ2VzLmpzJyl9LFxue25hbWU6ICdQYWdpbmF0b3InLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9zdG9yZXMvUGFnaW5hdG9yLmpzJyl9LFxue25hbWU6ICdUYWcnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9zdG9yZXMvVGFnLmpzJyl9LFxue25hbWU6ICdtYXN0ZXIvTWFzdGVyTGlzdCcsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X3N0b3Jlcy9tYXN0ZXIvTWFzdGVyTGlzdC5qcycpfSxcbntuYW1lOiAnbWFzdGVyL01hc3RlclNvdmV0eScsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X3N0b3Jlcy9tYXN0ZXIvTWFzdGVyU292ZXR5LmpzJyl9LFxue25hbWU6ICdtYXN0ZXIvTWFzdGVyVmlkZW8nLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9zdG9yZXMvbWFzdGVyL01hc3RlclZpZGVvLmpzJyl9LFxue25hbWU6ICdtYXN0ZXIvUmVjb21tZW5kZWQnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9zdG9yZXMvbWFzdGVyL1JlY29tbWVuZGVkLmpzJyl9LFxue25hbWU6ICdvdGhlci9OZXdzJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfc3RvcmVzL290aGVyL05ld3MuanMnKX0sXG57bmFtZTogJ290aGVyL05ld3NJdGVtJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfc3RvcmVzL290aGVyL05ld3NJdGVtLmpzJyl9LFxue25hbWU6ICdvdGhlci9SZWNvbW1lbmRhdGlvbicsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X3N0b3Jlcy9vdGhlci9SZWNvbW1lbmRhdGlvbi5qcycpfSxcbntuYW1lOiAnb3RoZXIvVmFjYW5jeScsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X3N0b3Jlcy9vdGhlci9WYWNhbmN5LmpzJyl9LFxue25hbWU6ICdvdGhlci9WYWNhbmN5SXRlbScsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X3N0b3Jlcy9vdGhlci9WYWNhbmN5SXRlbS5qcycpfSxcbntuYW1lOiAncnVicmlrYS9SdWJyaWthJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfc3RvcmVzL3J1YnJpa2EvUnVicmlrYS5qcycpfSxcbntuYW1lOiAncnVicmlrYS9SdWJyaWthdG9yJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfc3RvcmVzL3J1YnJpa2EvUnVicmlrYXRvci5qcycpfSxcbntuYW1lOiAncnVicmlrYS9SdWJyaWthdG9yQ29tcGFueScsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X3N0b3Jlcy9ydWJyaWthL1J1YnJpa2F0b3JDb21wYW55LmpzJyl9LFxue25hbWU6ICdydWJyaWthL1J1YnJpa2F0b3JQYXJlbnQnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9zdG9yZXMvcnVicmlrYS9SdWJyaWthdG9yUGFyZW50LmpzJyl9LFxue25hbWU6ICdydWJyaWthL1J1YnJpa2F0b3JTYWxlJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfc3RvcmVzL3J1YnJpa2EvUnVicmlrYXRvclNhbGUuanMnKX0sXG57bmFtZTogJ3NhbGUvU2FsZUJ5UnVicmlrYScsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X3N0b3Jlcy9zYWxlL1NhbGVCeVJ1YnJpa2EuanMnKX0sXG57bmFtZTogJ21hc3Rlci9NYXN0ZXJJdGVtJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfc3RvcmVzL21hc3Rlci9NYXN0ZXJJdGVtLmpzJyl9XG5dO1xuXG52YXIgY29tcG9uZW50cyA9IFtcblxue25hbWU6ICdicmVhZGNydW1wcycsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvYnJlYWRjcnVtcHMvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwiYnJlYWRjcnVtcHNcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBidWZmZXIgPSBcIiAgICAgICAgPHNwYW4gY2xhc3M9XFxcXFwiYnJlYWRjcnVtYnNfX2ljb25cXFxcXCI+XFxcXG4gICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwiYXJyb3ctYnJlYWRjcnVtYnNcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcbiAgICAgICAgPC9zcGFuPlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnVybCA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLnByb2dyYW0oNywgZGF0YSksXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGlua3MgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oOSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyO1xcbn0sXCIyXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCJcIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGlua3MgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMywgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5wcm9ncmFtKDUsIGRhdGEpLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyO1xcbn0sXCIzXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImJyZWFkY3J1bWJzX19sZXZlbCBicmVhZGNydW1ic19fbGV2ZWxfbGluayBqcy1wYXJlbnQtcnViXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnRpdGxlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aXRsZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ0aXRsZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9hPlxcXFxuXCI7XFxufSxcIjVcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwiYnJlYWRjcnVtYnNfX2xldmVsIGJyZWFkY3J1bWJzX19sZXZlbF9saW5rXFxcXFwiIGhyZWY9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51cmwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudGl0bGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRpdGxlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInRpdGxlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L2E+XFxcXG5cIjtcXG59LFwiN1wiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXFxcImJyZWFkY3J1bWJzX19sZXZlbFxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvc3Bhbj5cXFxcblwiO1xcbn0sXCI5XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCIgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImJyZWFkY3J1bWJzX19saXN0LWNvbnRhaW5lciBqcy1icmVhZGNydW1icy1saXN0XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cXFxcXCJicmVhZGNydW1ic19fbGlzdFxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGlua3MgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxMCwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICAgICAgPC91bD5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuXCI7XFxufSxcIjEwXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVxcXFxcImJyZWFkY3J1bWJzX19saXN0LWl0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcXFwiYnJlYWRjcnVtYnNfX2ljb25cXFxcXCI+PC9zcGFuPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImJyZWFkY3J1bWJzX19sZXZlbCBicmVhZGNydW1ic19fbGV2ZWxfbGlua1xcXFxcIiBocmVmPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnRpdGxlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aXRsZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ0aXRsZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9hPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxcblwiO1xcbn0sXCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiPGRpdiBjbGFzcz1cXFxcXCJicmVhZGNydW1ic1xcXFxcIj5cXFxcbiAgICA8c3BhbiBjbGFzcz1cXFxcXCJicmVhZGNydW1ic19faGVhZGVyXFxcXFwiPtCS0Ysg0L3QsNGF0L7QtNC40YLQtdGB0Yw6IDwvc3Bhbj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCBkZXB0aDAsIHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDEsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiPC9kaXY+XCI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ2NhdGFsb2ctbGlzdCcsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvY2F0YWxvZy1saXN0L2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcImNhdGFsb2ctbGlzdFwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgYnVmZmVyID0gXCIgICAgICAgIDxsaSBjbGFzcz1cXFxcXCJjYXRhbG9nLWxpc3RfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJjYXRhbG9nLWxpc3RfX2l0ZW0tbGlua1xcXFxcIiBocmVmPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXFxcImNhdGFsb2ctbGlzdF9faWNvblxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWNvIDogZGVwdGgwKSwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcbiAgICAgICAgICAgICAgICA8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgXCI7XFxuICBzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnRpdGxlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aXRsZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ0aXRsZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIlxcXFxuICAgICAgICAgICAgPC9hPlxcXFxuICAgICAgICA8L2xpPlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGJ1ZmZlciA9IFwiPHVsIGNsYXNzPVxcXFxcImNhdGFsb2ctbGlzdF9cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVyc1tcXCdkYXRhLW1vZFxcJ10gfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwW1xcJ2RhdGEtbW9kXFwnXSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJkYXRhLW1vZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiIGNhdGFsb2ctbGlzdFxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2F0YWxvZ3MgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIjwvdWw+XFxcXG5cXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdkb2N1bWVudCcsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvZG9jdW1lbnQvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwiZG9jdW1lbnRcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiPCFET0NUWVBFIGh0bWw+XFxcXG48aHRtbCBsYW5nPVxcXFxcImVuXFxcXFwiPlxcXFxuPGhlYWQgY2F0LXN0b3JlPVxcXFxcIkhlYWRcXFxcXCI+PC9oZWFkPlxcXFxuPGJvZHk+XFxcXG5cXHQ8Y2F0LXBhZ2VzLWhlYWRlciBpZD1cXFxcXCJwYWdlcy1oZWFkZXJcXFxcXCIgY2F0LXN0b3JlPVxcXFxcIlBhZ2VzXFxcXFwiPjwvY2F0LXBhZ2VzLWhlYWRlcj5cXFxcblxcdDxjYXQtcGFnZXMtY29udGVudCBpZD1cXFxcXCJwYWdlcy1jb250ZW50XFxcXFwiIGNhdC1zdG9yZT1cXFxcXCJQYWdlc1xcXFxcIj48L2NhdC1wYWdlcy1jb250ZW50PlxcXFxuICAgIDxjYXQtcGFnZXMtZm9vdGVyIGlkPVxcXFxcInBhZ2VzLWZvb3RlclxcXFxcIiBjYXQtc3RvcmU9XFxcXFwiUGFnZXNcXFxcXCI+PC9jYXQtcGFnZXMtZm9vdGVyPlxcXFxuPC9ib2R5PlxcXFxuPC9odG1sPlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogbnVsbH0sXG57bmFtZTogJ2hlYWQnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL2hlYWQvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwiaGVhZFwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgbGFtYmRhPXRoaXMubGFtYmRhO1xcbiAgcmV0dXJuIFwiPG1ldGEgY2hhcnNldD1cXFxcXCJVVEYtOFxcXFxcIj5cXFxcbjx0aXRsZT5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvdGl0bGU+XFxcXG48bWV0YSBjb250ZW50PVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmRlc2NyaXB0aW9uIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kZXNjcmlwdGlvbiA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJkZXNjcmlwdGlvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIG5hbWU9XFxcXFwiZGVzY3JpcHRpb25cXFxcXCI+XFxcXG48bWV0YSBjb250ZW50PVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmtleXdvcmRzIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5rZXl3b3JkcyA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJrZXl3b3Jkc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIG5hbWU9XFxcXFwia2V5d29yZHNcXFxcXCI+XFxcXG48bWV0YSBjb250ZW50PVxcXFxcInRlbGVwaG9uZT1ub1xcXFxcIiBuYW1lPVxcXFxcImZvcm1hdC1kZXRlY3Rpb25cXFxcXCI+XFxcXG48bWV0YSBuYW1lPVxcXFxcInJvYm90c1xcXFxcIiBjb250ZW50PVxcXFxcIm5vb2RwLCBub3lkaXJcXFxcXCI+XFxcXG5cXFxcbjxtZXRhIG5hbWU9XFxcXFwiSGFuZGhlbGRGcmllbmRseVxcXFxcIiBjb250ZW50PVxcXFxcInRydWVcXFxcXCI+XFxcXG48bWV0YSBodHRwLWVxdWl2PVxcXFxcIlgtVUEtQ29tcGF0aWJsZVxcXFxcIiBjb250ZW50PVxcXFxcIklFPWVkZ2VcXFxcXCI+XFxcXG48bWV0YSBuYW1lPVxcXFxcInZpZXdwb3J0XFxcXFwiIGNvbnRlbnQ9XFxcXFwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTFcXFxcXCI+XFxcXG5cXFxcbjxtZXRhIHByb3BlcnR5PVxcXFxcIm9nOnRpdGxlXFxcXFwiIGNvbnRlbnQ9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zb2NpYWwgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnRpdGxlIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbjxtZXRhIHByb3BlcnR5PVxcXFxcIm9nOnVybFxcXFxcIiBjb250ZW50PVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc29jaWFsIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS51cmwgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiXFxcXFwiPlxcXFxuPG1ldGEgcHJvcGVydHk9XFxcXFwib2c6ZGVzY3JpcHRpb25cXFxcXCIgY29udGVudD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNvY2lhbCA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuZGVzY3JpcHRpb24gOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiXFxcXFwiPlxcXFxuPG1ldGEgcHJvcGVydHk9XFxcXFwib2c6aW1hZ2VcXFxcXCIgY29udGVudD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNvY2lhbCA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuaW1nIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbjxtZXRhIHByb3BlcnR5PVxcXFxcIm9nOmltYWdlOnR5cGVcXFxcXCIgY29udGVudD1cXFxcXCJpbWFnZS9qcGVnXFxcXFwiPlxcXFxuPG1ldGEgcHJvcGVydHk9XFxcXFwib2c6aW1hZ2U6d2lkdGhcXFxcXCIgY29udGVudD1cXFxcXCI1MDBcXFxcXCI+XFxcXG48bWV0YSBwcm9wZXJ0eT1cXFxcXCJvZzppbWFnZTpoZWlnaHRcXFxcXCIgY29udGVudD1cXFxcXCIzMDBcXFxcXCI+XFxcXG48bWV0YSBwcm9wZXJ0eT1cXFxcXCJ0d2l0dGVyOmRlc2NyaXB0aW9uXFxcXFwiIGNvbnRlbnQ9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zb2NpYWwgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmRlc2NyaXB0aW9uIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbjxsaW5rIHJlbD1cXFxcXCJpbWFnZV9zcmNcXFxcXCIgaHJlZj1cXFxcXCJcXFxcXCI+XFxcXG48bGluayByZWw9XFxcXFwiaWNvblxcXFxcIiB0eXBlPVxcXFxcImltYWdlL3BuZ1xcXFxcIiBocmVmPVxcXFxcIi9pbWcvaWNvbi5pY29cXFxcXCI+XFxcXG5cXFxcbjxsaW5rIGhyZWY9XFxcXFwiL2Nzcy9tYWluLmNzc1xcXFxcIiByZWw9XFxcXFwic3R5bGVzaGVldFxcXFxcIj5cXFxcbjxsaW5rIGhyZWY9XFxcXFwiL2Nzcy92ZW5kb3IubWluLmNzc1xcXFxcIiByZWw9XFxcXFwic3R5bGVzaGVldFxcXFxcIj5cXFxcbjxzY3JpcHQgc3JjPVxcXFxcIi92ZW5kb3IubWluLmpzXFxcXFwiPjwvc2NyaXB0PlxcXFxuPHNjcmlwdCBzcmM9XFxcXFwiL2J1bmRsZS5qc1xcXFxcIj48L3NjcmlwdD5cXFxcbjxzY3JpcHQ+c3ZnNGV2ZXJ5Ym9keSgpOzwvc2NyaXB0PlxcXFxuXFxcXG48IS0tW2lmIGx0IElFIDkgXT48IS0tPHNjcmlwdCBzcmM9XFxcXFwiL3NlcGFyYXRlLWpzL2h0bWw1c2hpdi0zLjcuMi5taW4uanNcXFxcXCIgdHlwZT1cXFxcXCJ0ZXh0L2phdmFzY3JpcHRcXFxcXCI+PC9zY3JpcHQ+PG1ldGEgY29udGVudD1cXFxcXCJub1xcXFxcIiBodHRwLWVxdWl2PVxcXFxcImltYWdldG9vbGJhclxcXFxcIj4tLT48IVtlbmRpZl0tLT5cXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiBudWxsfSxcbntuYW1lOiAnbG9hZGVyJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9sb2FkZXIvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwibG9hZGVyXCIsXCJ0ZW1wbGF0ZVwiOlwiLi90ZW1wbGF0ZS5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcXFwibG9hZGluZ1xcXFxcIj48L2Rpdj5cXFxcblxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogbnVsbH0sXG57bmFtZTogJ3NhbGUnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3NhbGUvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwic2FsZVwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIlwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucnVicmlrYXRvciA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDIsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgIDxjYXQtY29tbW9uLXBhZ2luYXRvciBpZD1cXFxcXCJjb21tb24tcGFnaW5hdG9yXFxcXFwiIGNhdC1zdG9yZT1cXFxcXCJQYWdpbmF0b3JcXFxcXCIgbW9kZWw9XFxcXFwic2FsZS9TYWxlQnlSdWJyaWthXFxcXFwiPjwvY2F0LWNvbW1vbi1wYWdpbmF0b3I+XFxcXG5cIjtcXG59LFwiMlwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFjdGl2ZSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgzLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXI7XFxufSxcIjNcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBoZWxwZXIsIGxhbWJkYT10aGlzLmxhbWJkYSwgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBidWZmZXIgPSBcIiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwic2FsZS1jYXRhbG9nX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInNhbGUtY2F0YWxvZ19fdGl0bGVcXFxcXCIgc3R5bGU9XFxcXFwiYmFja2dyb3VuZC1jb2xvcjogXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9ICgoc3RhY2sxID0gKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2hpbGRyZW4gOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxW1xcJzBcXCddIDogc3RhY2sxKSkgIT0gbnVsbCA/IHN0YWNrMS5yb290IDogc3RhY2sxKSkgIT0gbnVsbCA/IHN0YWNrMS5jb2xvciA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnNhbGVDb3VudCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2FsZUNvdW50IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInNhbGVDb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9zcGFuPlxcXFxuICAgICAgICAgICAgICAgIDwvcD5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInNhbGUtY2F0YWxvZ19fc2hhcmVzXFxcXFwiPlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zYWxlIDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oNCwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICBidWZmZXIgKz0gXCIgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInNhbGUtY2F0YWxvZ19fc3ViaGVhZFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXFxcInNhbGUtY2F0YWxvZ19fbGlzdFxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2hpbGRyZW4gOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICAgICAgICAgIDwvdWw+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG5cIjtcXG59LFwiNFwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBidWZmZXIgPSBcIiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwic2FsZS1jYXRhbG9nX19zYWxlLWl0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJzYWxlIHNhbGVfY2F0YWxvZ1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwic2FsZV9fbGlua1xcXFxcIiBocmVmPVxcXFxcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInNhbGVfX3RpdGxlXFxcXFwiPlxcXFxuXCI7XFxuICBzdGFjazEgPSAoKGhlbHBlcnMuaXMgfHwgKGRlcHRoMCAmJiBkZXB0aDAuaXMpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudHlwZSA6IGRlcHRoMCksIFwiPT1cIiwgMSwge1wibmFtZVwiOlwiaXNcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDUsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSkpO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHN0YWNrMSA9ICgoaGVscGVycy5pcyB8fCAoZGVwdGgwICYmIGRlcHRoMC5pcykgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50eXBlIDogZGVwdGgwKSwgXCI9PVwiLCAyLCB7XCJuYW1lXCI6XCJpc1wiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oNywgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgc3RhY2sxID0gKChoZWxwZXJzLmlzIHx8IChkZXB0aDAgJiYgZGVwdGgwLmlzKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnR5cGUgOiBkZXB0aDApLCBcIj09XCIsIDMsIHtcIm5hbWVcIjpcImlzXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSg5LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwic2FsZV9fcGljXFxcXFwiPjxpbWcgY2xhc3M9XFxcXFwic2FsZV9faW1nXFxcXFwiIHNyYz1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmltZ1NyYyB8fCAoZGVwdGgwICYmIGRlcHRoMC5pbWdTcmMpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1nSUQgOiBkZXB0aDApLCAyMDAsIDIwMCwge1wibmFtZVwiOlwiaW1nU3JjXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIlxcXFxcIiBhbHQ9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudGl0bGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRpdGxlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInRpdGxlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInNhbGVfX3RleHRcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudGl0bGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRpdGxlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInRpdGxlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuXCI7XFxufSxcIjVcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCf0L7QtNCw0YDQvtC6XFxcXG5cIjtcXG4gIH0sXCI3XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQodC60LjQtNC60LAgXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuZGlzY291bnQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRpc2NvdW50IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImRpc2NvdW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCIlXFxcXG5cIjtcXG59LFwiOVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLVwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmRpc2NvdW50IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kaXNjb3VudCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJkaXNjb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiINGA0YPQsS5cXFxcblwiO1xcbn0sXCIxMVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnJvb3QgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMTIsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMucHJvZ3JhbSgxOCwgZGF0YSksXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXI7XFxufSxcIjEyXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGxhbWJkYT10aGlzLmxhbWJkYSwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgYnVmZmVyID0gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFxcXCJcIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5yb290IDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5hY3RpdmUgOiBzdGFjazEpLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMTMsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgYnVmZmVyICs9IFwiIHNhbGUtY2F0YWxvZ19fcm9vdFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJzdHJlbGthXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVxcXFxcIi9zYWxlL2NhdGFsb2cvXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5yb290IDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5pZCA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5yb290IDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5uYW1lIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIjxzcGFuPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnNhbGVDb3VudCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2FsZUNvdW50IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInNhbGVDb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9zcGFuPjwvYT5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnJvb3QgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmFjdGl2ZSA6IHN0YWNrMSksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxNSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcXG5cIjtcXG59LFwiMTNcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJhY3RcIjtcXG4gIH0sXCIxNVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2hpbGQgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxNiwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cXFxcblwiO1xcbn0sXCIxNlwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFxcXCJzYWxlLWNhdGFsb2dfX2NoaWxkXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJzdHJlbGthXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFxcXCIvc2FsZS9jYXRhbG9nL1wiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnNhbGVDb3VudCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2FsZUNvdW50IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInNhbGVDb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9zcGFuPjwvYT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcXG5cIjtcXG59LFwiMThcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIlwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2hpbGQgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxOSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyO1xcbn0sXCIxOVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFxcXCJzYWxlLWNhdGFsb2dfX2NoaWxkXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJzdHJlbGthXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFxcXCIvc2FsZS9jYXRhbG9nL1wiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPHNwYW4+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuc2FsZUNvdW50IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zYWxlQ291bnQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwic2FsZUNvdW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3NwYW4+PC9hPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxcblwiO1xcbn0sXCIyMVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiXFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgZGVwdGgwLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyMiwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyO1xcbn0sXCIyMlwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgbGFtYmRhPXRoaXMubGFtYmRhLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGJ1ZmZlciA9IFwiICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJzYWxlLWNhdGFsb2dfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwic2FsZS1jYXRhbG9nX190aXRsZVxcXFxcIiBzdHlsZT1cXFxcXCJiYWNrZ3JvdW5kLWNvbG9yOiBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKChzdGFjazEgPSAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jaGlsZHJlbiA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazFbXFwnMFxcJ10gOiBzdGFjazEpKSAhPSBudWxsID8gc3RhY2sxLnJvb3QgOiBzdGFjazEpKSAhPSBudWxsID8gc3RhY2sxLmNvbG9yIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuc2FsZUNvdW50IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zYWxlQ291bnQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwic2FsZUNvdW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgPC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJzYWxlLWNhdGFsb2dfX3NoYXJlc1xcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2FsZSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDQsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgYnVmZmVyICs9IFwiICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJzYWxlLWNhdGFsb2dfX3N1YmhlYWRcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz1cXFxcXCJzYWxlLWNhdGFsb2dfX2xpc3RcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNoaWxkcmVuIDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMjMsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiICAgICAgICAgICAgICAgICAgICA8L3VsPlxcXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG5cIjtcXG59LFwiMjNcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIlwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5yb290IDogZGVwdGgwKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDI0LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLnByb2dyYW0oMTgsIGRhdGEpLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyO1xcbn0sXCIyNFwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCI7XFxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFxcXCJzYWxlLWNhdGFsb2dfX3Jvb3RcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwic3RyZWxrYVwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cXFxcXCIvc2FsZS9jYXRhbG9nL1wiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucm9vdCA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuaWQgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucm9vdCA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEubmFtZSA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCI8c3Bhbj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5zYWxlQ291bnQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNhbGVDb3VudCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJzYWxlQ291bnRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvc3Bhbj48L2E+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIjwhLS3QtNCw0L3QvdGL0LkgaGJzINGB0LTQtdC70LDQvSDRgtCw0Log0LTQu9GPINC/0YDQuNC80LXRgNCwINC10LPQviDQvNC+0LbQvdC+INGA0LDQt9Cx0LjRgtGMINC00LvRjyDRg9C00L7QsdGB0YLQstCwINC/0L4g0LHQu9C+0LrQsNC8IS0tPlxcXFxuPGRpdiBjbGFzcz1cXFxcXCJzYWxlLWNhdGFsb2dcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY3VycmVudFJ1YnJpa2EgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5wcm9ncmFtKDIxLCBkYXRhKSxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiPC9kaXY+PCEtLSBzYWxlLWNhdGFsb2cgLS0+XCI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ3NlYXJjaCcsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvc2VhcmNoL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInNlYXJjaFwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgc2VhcmNoX1wiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm1vZGlmaWNhdG9yIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tb2RpZmljYXRvciA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJtb2RpZmljYXRvclwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiIFwiO1xcbn0sXCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBidWZmZXIgPSBcIjxkaXYgY2xhc3M9XFxcXFwic2VhcmNoIFwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tb2RpZmljYXRvciA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIlxcXFxcIj5cXFxcbiAgICA8Zm9ybSBjbGFzcz1cXFxcXCJzZWFyY2hfX2Zvcm1cXFxcXCIgYWN0aW9uPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIG1ldGhvZD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5tZXRob2QgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm1ldGhvZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJtZXRob2RcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJzZWFyY2hfX3RpdGxlXFxcXFwiPlxcXFxuICAgICAgICAgICAgXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcInNlYXJjaFwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJzZWFyY2hfX2ZpZWxkXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXFxcInNlYXJjaF9fZmllbGQtaW5wdXQgaW5wdXQtdGV4dFxcXFxcIiB0eXBlPVxcXFxcInRleHRcXFxcXCIgbmFtZT1cXFxcXCJzZWFyY2hcXFxcXCI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInNlYXJjaF9fYnV0dG9uXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFxcXCJzZWFyY2hfX2J1dHRvbi1zdWJtaXRcXFxcXCIgdHlwZT1cXFxcXCJzdWJtaXRcXFxcXCI+0L3QsNC50LTQuCDRg9GB0LvRg9Cz0YM8L2J1dHRvbj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgPC9mb3JtPlxcXFxuPC9kaXY+XFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAnc2VydmljZS1yZXF1ZXN0JywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9zZXJ2aWNlLXJlcXVlc3QvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwic2VydmljZS1yZXF1ZXN0XCIsXCJ0ZW1wbGF0ZVwiOlwiLi90ZW1wbGF0ZS5oYnNcIixcImVycm9yVGVtcGxhdGVcIjpcIi4vZXJyb3IuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ3NvY2lhbCcsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvc29jaWFsL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInNvY2lhbFwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgICAgPGxpIGNsYXNzPVxcXFxcInNvY2lhbF9faXRlbVxcXFxcIj5cXFxcbiAgICAgICAgPGEgY2xhc3M9XFxcXFwic29jaWFsX19pdGVtLWxpbmsgbGlua1xcXFxcIiBocmVmPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIHRhcmdldD1cXFxcXCJfYmxhbmtcXFxcXCI+XFxcXG4gICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pY28gOiBkZXB0aDApLCBcImljb25fd2hpdGVcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcbiAgICAgICAgPC9hPlxcXFxuICAgIDwvbGk+XFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIjx1bCBjbGFzcz1cXFxcXCJzb2NpYWxcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgZGVwdGgwLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIjwvdWw+XFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAnY29tbW9uLWgxJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9fY29tbW9uL2NvbW1vbi1oMS9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJjb21tb24taDFcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIjxoMSBjbGFzcz1cXFxcXCJoMSBoMV9zdHlsZVxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvaDE+XFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAnY29tbW9uLXBhZ2luYXRvcicsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvX2NvbW1vbi9jb21tb24tcGFnaW5hdG9yL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcImNvbW1vbi1wYWdpbmF0b3JcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgbGFtYmRhPXRoaXMubGFtYmRhLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgYnVmZmVyID0gXCIgICAgPGRpdiBjbGFzcz1cXFxcXCJwYWdpbmF0b3JcXFxcXCI+XFxcXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXFxcInBhZ2luYXRvcl9fdGl0bGVcXFxcXCI+0J/QtdGA0LXQudGC0Lgg0Log0YHRgtGA0LDQvdC40YbQtTogPC9zcGFuPlxcXFxuICAgICAgICA8dWwgY2xhc3M9XFxcXFwicGFnaW5hdG9yX19saXN0XFxcXFwiPlxcXFxuICAgICAgICAgICAgPGxpIGNsYXNzPVxcXFxcInBhZ2luYXRvcl9fcGFnZSBwYWdpbmF0b3JfX3BhZ2VfcHJldmlvdXNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwicGFnaW5hdG9yX19udW1iZXJcXFxcXCIgaHJlZj1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnN0YXJ0IDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS51cmwgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiXFxcXFwiPiZsdDs8L2E+XFxcXG4gICAgICAgICAgICA8L2xpPlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5saXN0IDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMiwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICA8bGkgY2xhc3M9XFxcXFwicGFnaW5hdG9yX19wYWdlIHBhZ2luYXRvcl9fcGFnZV9uZXh0XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcInBhZ2luYXRvcl9fbnVtYmVyXFxcXFwiIGhyZWY9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5lbmQgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnVybCA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcXCI+Jmd0OzwvYT5cXFxcbiAgICAgICAgICAgIDwvbGk+XFxcXG4gICAgICAgIDwvdWw+XFxcXG4gICAgPC9kaXY+XFxcXG5cIjtcXG59LFwiMlwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwW1xcJ2lzLXNlbGVjdGVkXFwnXSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgzLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLnByb2dyYW0oNSwgZGF0YSksXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXI7XFxufSxcIjNcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFxcXCJwYWdpbmF0b3JfX3BhZ2UgcGFnaW5hdG9yX19wYWdlX3NlbGVjdGVkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInBhZ2luYXRvcl9fbnVtYmVyXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm51bWJlciB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubnVtYmVyIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm51bWJlclwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9zcGFuPjwvbGk+XFxcXG5cIjtcXG59LFwiNVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVxcXFxcInBhZ2luYXRvcl9fcGFnZVxcXFxcIj48YSBjbGFzcz1cXFxcXCJwYWdpbmF0b3JfX251bWJlclxcXFxcIiBocmVmPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm51bWJlciB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubnVtYmVyIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm51bWJlclwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9hPjwvbGk+XFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMFtcXCdpcy1wYWdpbmF0b3JcXCddIDogZGVwdGgwKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDEsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgcmV0dXJuIHN0YWNrMTsgfVxcbiAgZWxzZSB7IHJldHVybiBcXCdcXCc7IH1cXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdtYXN0ZXItZmlsdGVyJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLWZpbHRlci9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJtYXN0ZXItZmlsdGVyXCIsXCJ0ZW1wbGF0ZVwiOlwiLi90ZW1wbGF0ZS5oYnNcIixcImVycm9yVGVtcGxhdGVcIjpcIi4vZXJyb3IuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiMVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBidWZmZXIgPSBcIiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmaWx0ZXItc2VjdGlvblxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImZpbHRlci1zZWN0aW9uX190aXRsZSBmaWx0ZXItc2VjdGlvbl9fdGl0bGVfXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuc2VjdGlvbk5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNlY3Rpb25OYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInNlY3Rpb25OYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCIgXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm9wZW5TZWN0aW9uIDogZGVwdGgwKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDIsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgYnVmZmVyICs9IFwiIGpzLWZpbHRlci10b2dnbGUtYnRuXFxcXFwiIGhyZWY9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51cmwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmaWx0ZXItc2VjdGlvbl9faWNvblxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5vcGVuU2VjdGlvbiA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSg0LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLnByb2dyYW0oNiwgZGF0YSksXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnRpdGxlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aXRsZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ0aXRsZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZpbHRlci1zZWN0aW9uX19hcnJvd1xcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5vcGVuU2VjdGlvbiA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSg4LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLnByb2dyYW0oMTAsIGRhdGEpLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICBidWZmZXIgKz0gXCIgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L2E+XFxcXG5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCd3aXRoXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm9wZW5TZWN0aW9uIDogZGVwdGgwKSwge1wibmFtZVwiOlwid2l0aFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMTIsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCIyXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiYWN0aXZlXCI7XFxuICB9LFwiNFwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pY28gOiBkZXB0aDApLCBcImljb25fd2hpdGVcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcblwiO1xcbn0sXCI2XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmljbyA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiXFxcXG5cIjtcXG59LFwiOFwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwic3RyZWxrYVwiLCBcImRvd25cIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcblwiO1xcbn0sXCIxMFwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwic3RyZWxrYVwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIlxcXFxuXCI7XFxufSxcIjEyXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCIgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmaWx0ZXItc2VjdGlvbl9fc2VjdGlvbiBqcy1maWx0ZXItdG9nZ2xlLXNlY3Rpb25cXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc29ydEJ5IDogZGVwdGgwKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDEzLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRhZ3NHcm91cCA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxNSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG5cIjtcXG59LFwiMTNcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJzb3J0LWJ5XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInNvcnQtYnlfX3RpdGxlXFxcXFwiPtCe0YLRgdC+0YDRgtC40YDQvtCy0LDRgtGMOiA8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz1cXFxcXCJzb3J0LWJ5X19mb3JtXFxcXFwiIGFjdGlvbj1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNvcnRCeSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEudXJsIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIiBtZXRob2Q9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zb3J0QnkgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm1ldGhvZCA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZmlsdGVyLXJhZGlvXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXFxcImZpbHRlci1yYWRpb19faW5wdXRcXFxcXCIgdHlwZT1cXFxcXCJyYWRpb1xcXFxcIiBuYW1lPVxcXFxcInNvcnQtYnlcXFxcXCIgdmFsdWU9XFxcXFwibmFtZVxcXFxcIiBpZD1cXFxcXCJzb3J0LWJ5LW5hbWVcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcXFwiZmlsdGVyLXJhZGlvX19sYWJlbFxcXFxcIiBmb3I9XFxcXFwic29ydC1ieS1uYW1lXFxcXFwiPtC/0L4g0YTQsNC80LjQu9C40Lgg0L/QviDQsNC70YTQsNCy0LjRgtGDPC9sYWJlbD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZmlsdGVyLXJhZGlvXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXFxcImZpbHRlci1yYWRpb19faW5wdXRcXFxcXCIgdHlwZT1cXFxcXCJyYWRpb1xcXFxcIiBuYW1lPVxcXFxcInNvcnQtYnlcXFxcXCIgdmFsdWU9XFxcXFwicmVjb21tZW5kYXRpb25cXFxcXCIgaWQ9XFxcXFwic29ydC1ieS1yZWNvbW1lbmRhdGlvblxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cXFxcXCJmaWx0ZXItcmFkaW9fX2xhYmVsXFxcXFwiIGZvcj1cXFxcXCJzb3J0LWJ5LXJlY29tbWVuZGF0aW9uXFxcXFwiPtC/0L4g0LrQvtC70LjRh9C10YHRgtCy0YNcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDRgNC10LrQvtC80LXQvdC00LDRhtC40Lk8L2xhYmVsPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCIxNVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmaWx0ZXItYnlcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiZmlsdGVyLWJ5X190aXRsZVxcXFxcIj7QntGC0YTQuNC70YzRgtGA0L7QstCw0YLRjDo8L3A+XFxcXG5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGFnc0dyb3VwIDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMTYsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCIxNlwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRpdGxlIDogZGVwdGgwKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDE3LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRhZ3MgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxOSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyO1xcbn0sXCIxN1wiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImZpbHRlci1ieV9fdGl0bGVcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudGl0bGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRpdGxlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInRpdGxlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3A+XFxcXG5cIjtcXG59LFwiMTlcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIlwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pc0FjdGl2ZSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyMCwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5wcm9ncmFtKDIyLCBkYXRhKSxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlcjtcXG59LFwiMjBcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcXFwiZmlsdGVyLWJ5X190YWctYWN0aXZlXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZpbHRlci1ieV9fY2xvc2VcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJmaWx0ZXItYnlfX2Nsb3NlLWxpbmtcXFxcXCIgaHJlZj1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy51cmxCYWNrIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51cmxCYWNrIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybEJhY2tcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZpbHRlci1ieV9fY2xvc2UtaWNvblxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwiY2xvc2VcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcXFxuXCI7XFxufSxcIjIyXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImZpbHRlci1ieV9fdGFnXFxcXFwiIGhyZWY9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucGF0aCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGF0aCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJwYXRoXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcImZpbHRlclxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZmlsdGVyU2VjdGlvbiA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDEsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiPC9kaXY+XCI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ21hc3Rlci1saXN0JywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLWxpc3QvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwibWFzdGVyLWxpc3RcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1hc3Rlci1saXN0X19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGNhdC1tYXN0ZXItbWluaWNhcmQgaWQ9XFxcXFwibWFzdGVyLW1pbmljYXJkLVwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIG1hc3Rlci1pZD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiaWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIiBjYXQtc3RvcmU9XFxcXFwibWFzdGVyL01hc3Rlckxpc3RcXFxcXCI+PC9jYXQtbWFzdGVyLW1pbmljYXJkPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcIm1hc3Rlci1saXN0XFxcXFwiPlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAsIGRlcHRoMCwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgPGRpdiBjbGFzcz1cXFxcXCJ3YWl0LXNwaW5uZXJcXFxcXCIgaWQ9XFxcXFwid2FpdC1zcGlubmVyXFxcXFwiPjxkaXYgY2xhc3M9XFxcXFwid2FpdC1zcGlubmVyX19hbmltYXRlXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJzcGlubmVyXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9kaXY+PC9kaXY+XFxcXG48L2Rpdj48IS0tbWFzdGVyLWxpc3QtLT5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAnbWFzdGVyLXBhZ2UnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItcGFnZS9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJtYXN0ZXItcGFnZVwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGxhbWJkYT10aGlzLmxhbWJkYTtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwibWFzdGVyLWNhcmQtbXBfX2NvbXBhbnlcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj48aW1nIGNsYXNzPVxcXFxcIm1hc3Rlci1jYXJkLW1wX19sb2dvXFxcXFwiIHNyYz1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmltZ1NyYyB8fCAoZGVwdGgwICYmIGRlcHRoMC5pbWdTcmMpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb21wYW55IDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5pbWdJRCA6IHN0YWNrMSksIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5udWxsIDogZGVwdGgwKSwgNzAsIHtcIm5hbWVcIjpcImltZ1NyY1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcXCIgYWx0PVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29tcGFueSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEubmFtZSA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcXCI+PC9zcGFuPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb21wYW55IDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5uYW1lIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIjwvc3Bhbj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9wPlxcXFxuXCI7XFxufSxcIjNcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29udGFjdHMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnBob25lIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIjxicj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cXFxcXCJjb2xvcjogcmVkOyBmb250LXdlaWdodDogYm9sZFxcXFxcIj53b3JrUGhvbmUgLSBFUlJPUiE8L3NwYW4+XFxcXG5cIjtcXG59LFwiNVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICDQvdC1INGD0LrQsNC30LDQvdC+XFxcXG5cIjtcXG4gIH0sXCI3XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgbGFtYmRhPXRoaXMubGFtYmRhLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJjb250YWN0cy1tcF9fYW5jaFxcXFxcIiBocmVmPVxcXFxcIm1haWx0bzpcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbnRhY3RzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5lbWFpbCA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb250YWN0cyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuZW1haWwgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiPC9hPlxcXFxuXCI7XFxufSxcIjlcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29udGFjdHMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnNreXBlIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxuXCI7XFxufSxcIjExXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgbGFtYmRhPXRoaXMubGFtYmRhLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbnRhY3RzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5pY3EgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiXFxcXG5cIjtcXG59LFwiMTNcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29udGFjdHMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmFkZHIgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiPGJyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXFxcImNvbnRhY3RzLW1wX19vbm1hcFxcXFxcIj48YSBjbGFzcz1cXFxcXCJjb250YWN0cy1tcF9fYW5jaFxcXFxcIiBocmVmPVxcXFxcIiNcXFxcXCI+0L3QsCDQutCw0YDRgtC1PC9hPiDihpI8L3NwYW4+XFxcXG5cIjtcXG59LFwiMTVcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIlwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5hY2Nlc3MgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMTYsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlcjtcXG59LFwiMTZcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIiAgICAgICAgICAgICAgICA8bGk+XCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFjdGl2ZSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxNywgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5wcm9ncmFtKDE5LCBkYXRhKSxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiPC9saT5cXFxcblwiO1xcbn0sXCIxN1wiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGxhbWJkYT10aGlzLmxhbWJkYSwgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nO1xcbiAgcmV0dXJuIFwiPGEgaHJlZj1cXFxcXCIjbWFzdGVyLWJsb2NrLVwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKGRhdGEgJiYgZGF0YS5rZXkpLCBkZXB0aDApKVxcbiAgICArIFwiXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9hPlwiO1xcbn0sXCIxOVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIjxzcGFuPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9zcGFuPlwiO1xcbn0sXCIyMVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFjY2VzcyA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyMiwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyO1xcbn0sXCIyMlwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFjdGl2ZSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyMywgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyO1xcbn0sXCIyM1wiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgbGFtYmRhPXRoaXMubGFtYmRhO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtYXN0ZXItcGFnZV9fc2VjdGlvbi10aXRsZVxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1hc3Rlci1wYWdlX19zZWN0aW9uLWNvbnRcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8Y2F0LW1hc3Rlci1ibG9jay1cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKChkYXRhICYmIGRhdGEua2V5KSwgZGVwdGgwKSlcXG4gICAgKyBcIiBpZD1cXFxcXCJtYXN0ZXItYmxvY2stXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoZGF0YSAmJiBkYXRhLmtleSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcXCIgY2F0LXN0b3JlPVxcXFxcIm1hc3Rlci9NYXN0ZXJJdGVtXFxcXFwiIG1hc3Rlci1wYWdlPVxcXFxcInRydWVcXFxcXCI+PC9jYXQtbWFzdGVyLWJsb2NrLVwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKGRhdGEgJiYgZGF0YS5rZXkpLCBkZXB0aDApKVxcbiAgICArIFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGJ1ZmZlciA9IFwiPGRpdiBjbGFzcz1cXFxcXCJtYXN0ZXItcGFnZVxcXFxcIj48IS0tIG1wIC0gbWFzdGVyLXBhZ2UgLS0+XFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJtYXN0ZXItcGFnZV9fcm93XFxcXFwiPlxcXFxuXFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibWFzdGVyLXBhZ2VfX21hc3Rlci1jYXJkXFxcXFwiPlxcXFxuXFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1hc3Rlci1wYWdlX19hdmF0YXItY29udFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmltZ1NyYyB8fCAoZGVwdGgwICYmIGRlcHRoMC5pbWdTcmMpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1nSUQgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJpbWdTcmNcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiXFxcXFwiIGFsdD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJtYXN0ZXItcGFnZV9fbGlrZVxcXFxcIiBzdHlsZT1cXFxcXCJjb2xvcjogcmVkOyBmb250LXdlaWdodDogYm9sZFxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwibGlrZVwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIiAxMjk8L2k+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtYXN0ZXItY2FyZC1tcFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8aDEgY2xhc3M9XFxcXFwibWFzdGVyLWNhcmQtbXBfX25hbWVcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L2gxPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwibWFzdGVyLWNhcmQtbXBfX3NwZWNcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuc3BlYyB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc3BlYyA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJzcGVjXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3A+XFxcXG5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb21wYW55IDogZGVwdGgwKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDEsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgYnVmZmVyICs9IFwiXFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1hc3Rlci1jYXJkLW1wX19tYXN0ZXItbnVtYmVyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtYXN0ZXItbnVtYmVyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcXFwibWFzdGVyLW51bWJlcl9fdGl0bGVcXFxcXCI+0LvQuNGH0L3Ri9C5INC90L7QvNC10YAg0JzQsNGB0YLQtdGA0LA8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFxcXCJtYXN0ZXItbnVtYmVyX19udW1iZXJcXFxcXCI+4oSWXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdlIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5udW1iZXIgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiPC9zcGFuPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcXFwibWFzdGVyLW51bWJlcl9fcHJpbnRcXFxcXCI+PGEgY2xhc3M9XFxcXFwibWFzdGVyLW51bWJlcl9fcHJpbnRcXFxcXCIgaHJlZj1cXFxcXCIjXFxcXFwiPtGA0LDRgdC/0LXRh9Cw0YLQsNGC0Ywg0LLQuNC30LjRgtC60YM8L2E+PC9zcGFuPlxcXFxuICAgICAgICAgICAgICAgICAgICA8L3A+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtYXN0ZXItcGFnZV9fY29udGFjdC1jb250XFxcXFwiPlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJjb250YWN0cy1tcFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImNvbnRhY3RzLW1wX19jYXBcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxwPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGk+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcInBob25lXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPjxicj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPis3ICoqKiAqKiotKiotKio8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJjb250YWN0cy1tcF9fc2hvdy1jb250YWN0XFxcXFwiIGhyZWY9XFxcXFwiXFxcXFwiPtCf0L7QutCw0LfQsNGC0Ywg0LrQvtC90YLQsNC60YLRizwvYT5cXFxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuXFxcXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXFxcImNvbnRhY3RzLW1wX19saXN0XFxcXFwiPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxsaT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJwaG9uZVwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbnRhY3RzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5waG9uZSA6IHN0YWNrMSksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgzLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLnByb2dyYW0oNSwgZGF0YSksXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8bGk+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aT5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwiZW1haWxcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb250YWN0cyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuZW1haWwgOiBzdGFjazEpLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oNywgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5wcm9ncmFtKDUsIGRhdGEpLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICBidWZmZXIgKz0gXCIgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGxpPjxpPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJza3lwZVwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbnRhY3RzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5za3lwZSA6IHN0YWNrMSksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSg5LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLnByb2dyYW0oNSwgZGF0YSksXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8bGk+PGk+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcImljcVwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbnRhY3RzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5pY3EgOiBzdGFjazEpLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMTEsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMucHJvZ3JhbSg1LCBkYXRhKSxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgYnVmZmVyICs9IFwiICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxsaT48aT5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwicGxhY2VtYXJrXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29udGFjdHMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmFkZHIgOiBzdGFjazEpLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMTMsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMucHJvZ3JhbSg1LCBkYXRhKSxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgYnVmZmVyICs9IFwiICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXFxuICAgICAgICAgICAgICAgIDwvdWw+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJjb250YWN0cy1tcF9fYS1jYWxsYmFjayBqcy1zaG93LWNhbGxiYWNrLXBvcHVwXFxcXFwiIGhyZWY9XFxcXFwiI2NhbGxiYWNrLXJlcXVlc3QtcG9wdXBcXFxcXCI+0LfQsNC60LDQt9Cw0YLRjFxcXFxuICAgICAgICAgICAgICAgICAgICDQt9Cy0L7QvdC+0Lo8L2E+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgPC9kaXY+XFxcXG5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcImNhbGxiYWNrLXBvcHVwXFxcXFwiPlxcXFxuICAgICAgICA8Zm9ybSBjbGFzcz1cXFxcXCJjYWxsYmFjay1wb3B1cF9fZm9ybVxcXFxcIiBpZD1cXFxcXCJjYWxsYmFjay1yZXF1ZXN0LXBvcHVwLWZvcm1cXFxcXCIgbWV0aG9kPVxcXFxcIlxcXFxcIiBhY3Rpb249XFxcXFwiXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXFxcImNhbGxiYWNrLXBvcHVwX19pbnB1dC10ZXh0XFxcXFwiIHR5cGU9XFxcXFwidGV4dFxcXFxcIiBwbGFjZWhvbGRlcj1cXFxcXCLQktCw0YjQtSDQuNC80Y9cXFxcXCIgbmFtZT1cXFxcXCJjYWxsYmFja1JlcXVlc3RGb3JtW25hbWVdXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXFxcImNhbGxiYWNrLXBvcHVwX19pbnB1dC10ZXh0XFxcXFwiIHR5cGU9XFxcXFwidGV4dFxcXFxcIiBwbGFjZWhvbGRlcj1cXFxcXCLQktCw0Ygg0YLQtdC70LXRhNC+0L1cXFxcXCIgbmFtZT1cXFxcXCJjYWxsYmFja1JlcXVlc3RGb3JtW3Bob25lXVxcXFxcIj5cXFxcbiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cXFxcXCJjYWxsYmFjay1wb3B1cF9fdGV4dGFyZWFcXFxcXCIgcGxhY2Vob2xkZXI9XFxcXFwi0JLQsNGIINC60L7QvNC80LXQvdGC0LDRgNC40LlcXFxcXCIgbmFtZT1cXFxcXCJjYWxsYmFja1JlcXVlc3RGb3JtW3RleHRdXFxcXFwiPjwvdGV4dGFyZWE+XFxcXG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcXFwiY2FsbGJhY2stcG9wdXBfX2J0blxcXFxcIiB0eXBlPVxcXFxcInN1Ym1pdFxcXFxcIiB2YWx1ZT1cXFxcXCLQvtGC0L/RgNCw0LLQuNGC0Ywg0LfQsNGP0LLQutGDXFxcXFwiPlxcXFxuICAgICAgICAgICAgPHNwYW4gc3R5bGU9XFxcXFwiY29sb3I6IHJlZDsgZm9udC13ZWlnaHQ6IGJvbGRcXFxcXCI+0J7RgtC/0YDQsNCy0LrQsCDRhNC+0YDQvNGLINC90LUg0YDQsNCx0L7RgtCw0LXRgiAtIEVSUk9SITwvc3Bhbj5cXFxcbiAgICAgICAgPC9mb3JtPlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInN1Y2Nlc3NfcmVzcG9uc2VcXFxcXCI+XFxcXG4gICAgICAgICAgICDQktCw0YjQsCDQt9Cw0Y/QstC60LAg0L7RgtC/0YDQsNCy0LvQtdC90LAg0JzQsNGB0YLQtdGA0YNcXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgPC9kaXY+XFxcXG5cXFxcbiAgICA8dWwgY2xhc3M9XFxcXFwibWVudS1tcFxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaXNCbG9jayA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDE1LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiAgICA8L3VsPlxcXFxuICAgIDwhLS0gbWVudS1tcCAtLT5cXFxcblxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwibWFzdGVyLXBhZ2VfX2NvbnRlbnRcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmlzQmxvY2sgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgPC9kaXY+XFxcXG48L2Rpdj5cXFxcbjwhLS0gbWFzdGVyLXBhZ2UgLS0+XCI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ21hc3Rlci1yZWNvbW1lbmRlZCcsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvbWFzdGVyL21hc3Rlci1yZWNvbW1lbmRlZC9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJtYXN0ZXItcmVjb21tZW5kZWRcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCIgICAgPGRpdiBjbGFzcz1cXFxcXCJtYXN0ZXJfcmVjb21tZW5kZWRcXFxcXCI+XFxcXG4gICAgICAgIDxoMiBjbGFzcz1cXFxcXCJtYXN0ZXJfcmVjb21tZW5kZWRfX3RpdGxlXFxcXFwiPlxcXFxuICAgICAgICAgICAg0K3RgtC40YU8YnI+XFxcXG4gICAgICAgICAgICDQnNCw0YHRgtC10YDQvtCyPGJyPlxcXFxuICAgICAgICAgICAg0YDQtdC60L7QvNC10L3QtNGD0Y7RglxcXFxuICAgICAgICA8L2gyPlxcXFxuXFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibWFzdGVyX3JlY29tbWVuZGVkX19zbGlkZXJcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwW1xcJ3JlY29tbWVuZGVkLW1hc3RlclxcJ10gOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIiAgICAgICAgPC9kaXY+XFxcXG4gICAgPC9kaXY+XFxcXG5cIjtcXG59LFwiMlwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJtYXN0ZXJfcmVjb21tZW5kZWRfX21hc3RlclxcXFxcIiBocmVmPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzW1xcJ21hc3Rlci11cmxcXCddIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMFtcXCdtYXN0ZXItdXJsXFwnXSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJtYXN0ZXItdXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XFxcXFwibWFzdGVyX3JlY29tbWVuZGVkX19tYXN0ZXItcGhvdG9cXFxcXCIgc3JjPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnNyYyB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc3JjIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInNyY1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIGFsdD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5hbHQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFsdCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJhbHRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtYXN0ZXJfcmVjb21tZW5kZWRfX21hc3Rlci1uYW1lXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnNbXFwnbWFzdGVyLW5hbWVcXCddIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMFtcXCdtYXN0ZXItbmFtZVxcJ10gOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibWFzdGVyLW5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxuICAgICAgICAgICAgICAgICAgICA8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwibWFzdGVyX3JlY29tbWVuZGVkX19tYXN0ZXItcmVjb21tZW5kYXRpb25zXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnNbXFwncmVjb21tZW5kYXRpb24tbnVtYmVyXFwnXSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDBbXFwncmVjb21tZW5kYXRpb24tbnVtYmVyXFwnXSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJyZWNvbW1lbmRhdGlvbi1udW1iZXJcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxuICAgICAgICAgICAgICAgICAgICA8L3A+XFxcXG4gICAgICAgICAgICAgICAgPC9hPlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMTtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDBbXFwnaXMtcmVjb21tZW5kZWQtbWFzdGVyc1xcJ10gOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyByZXR1cm4gc3RhY2sxOyB9XFxuICBlbHNlIHsgcmV0dXJuIFxcJ1xcJzsgfVxcbiAgfSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ21hc3Rlci1ydWJyaWthJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLXJ1YnJpa2EvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwibWFzdGVyLXJ1YnJpa2FcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgbGFtYmRhPXRoaXMubGFtYmRhLCBidWZmZXIgPSBcIiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJzZW8tdGV4dFxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwic2VvLXRleHRfX3RleHQgZm9ybWF0XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIFwiO1xcbiAgc3RhY2sxID0gbGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmN1cnJlbnRTZW8gOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnRleHQgOiBzdGFjazEpLCBkZXB0aDApO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgbGFtYmRhPXRoaXMubGFtYmRhLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGJ1ZmZlciA9IFwiPGRpdiBjbGFzcz1cXFxcXCJpbm5lci10b3BcXFxcXCI+XFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJpbm5lci10b3BfX3RpdGxlXFxcXFwiPlxcXFxuICAgICAgICA8Y2F0LWNvbW1vbi1oMSBpZD1cXFxcXCJjb21tb24taDFcXFxcXCIgbmFtZT1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmN1cnJlbnRTZW8gOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnBhZ2VUaXRsZSA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcXCI+PC9jYXQtY29tbW9uLWgxPlxcXFxuICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJpbm5lci10b3BfX3NlYXJjaFxcXFxcIj5cXFxcbiAgICAgICAgPGNhdC1zZWFyY2ggaWQ9XFxcXFwic2VhcmNoXFxcXFwiIG1vZGlmaWNhdG9yPVxcXFxcImlubmVyXFxcXFwiPjwvY2F0LXNlYXJjaD5cXFxcbiAgICA8L2Rpdj5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcImlubmVyLXRvcF9fY2FsbGJhY2tcXFxcXCI+XFxcXG4gICAgICAgIDxhIGNsYXNzPVxcXFxcInJlcXVlc3RcXFxcXCIgaHJlZj1cXFxcXCIvcmVxdWVzdFxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicmVxdWVzdF9faWNvblxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwic3Rhci1pbi1zdW5cIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2Rpdj5cXFxcbiAgICAgICAgICAgINCe0YLQv9GA0LDQstC40YLRjCDQt9Cw0LTQsNC90LjQtSDQvNCw0YHRgtC10YDQsNC8XFxcXG4gICAgICAgIDwvYT5cXFxcbiAgICA8L2Rpdj5cXFxcbjwvZGl2PlxcXFxuPGRpdiBjbGFzcz1cXFxcXCJpbm5lci1jb250ZW50XFxcXFwiPlxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwiaW5uZXItY29udGVudF9fbGVmdC1zaWRlXFxcXFwiPlxcXFxuICAgICAgICA8Y2F0LW1hc3Rlci1maWx0ZXIgaWQ9XFxcXFwibWFzdGVyLWZpbHRlclxcXFxcIiBjYXQtc3RvcmU9XFxcXFwiVGFnXFxcXFwiPjwvY2F0LW1hc3Rlci1maWx0ZXI+XFxcXG4gICAgICAgIHsgez4gYmFubmVyL2Jhbm5lcl9zaWRlL2Jhbm5lcl9zaWRlIGJhbm5lcl9zaWRlfSB9XFxcXG4gICAgPC9kaXY+XFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJpbm5lci1jb250ZW50X19yaWdodC1zaWRlXFxcXFwiPlxcXFxuICAgICAgICA8Y2F0LW1hc3Rlci1yZWNvbW1lbmRlZCBpZD1cXFxcXCJtYXN0ZXItcmVjb21tZW5kZWRcXFxcXCIgY2F0LXN0b3JlPVxcXFxcIm1hc3Rlci9SZWNvbW1lbmRlZFxcXFxcIj48L2NhdC1tYXN0ZXItcmVjb21tZW5kZWQ+XFxcXG4gICAgICAgIDxjYXQtbWFzdGVyLWxpc3QgaWQ9XFxcXFwibWFzdGVyLWxpc3RcXFxcXCIgY2F0LXN0b3JlPVxcXFxcIm1hc3Rlci9NYXN0ZXJMaXN0XFxcXFwiPjwvY2F0LW1hc3Rlci1saXN0PlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XFxcXG48ZGl2IGNsYXNzPVxcXFxcInJvd1xcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmN1cnJlbnRTZW8gOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnRleHQgOiBzdGFjazEpLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L2Rpdj5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAnb3RoZXItbmV3cycsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvb3RoZXIvb3RoZXItbmV3cy9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJvdGhlci1uZXdzXCIsXCJ0ZW1wbGF0ZVwiOlwiLi90ZW1wbGF0ZS5oYnNcIixcImVycm9yVGVtcGxhdGVcIjpcIi4vZXJyb3IuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiMVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBidWZmZXIgPSBcIiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJuZXdzXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJuZXdzX19pbm5lclxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm5ld3NfX2ltZy13clxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cXFxcXCJuZXdzX19pbWdcXFxcXCIgc3JjPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnNyYyB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc3JjIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInNyY1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIGFsdD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm5ld3NfX2NvbnRlbnRcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm5ld3NfX3RpdGxlXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnRpdGxlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aXRsZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ0aXRsZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm5ld3NfX2ludHJvXFxcXFwiPlwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXJzLnN0cmlwVGFncyB8fCAoZGVwdGgwICYmIGRlcHRoMC5zdHJpcFRhZ3MpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucHJldmlldyA6IGRlcHRoMCksIHtcIm5hbWVcIjpcInN0cmlwVGFnc1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiPC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm5ld3NfX2RhdGVcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5mb3JtYXREYXRlIHx8IChkZXB0aDAgJiYgZGVwdGgwLmZvcm1hdERhdGUpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGF0ZSA6IGRlcHRoMCksIFwiJWQgJVogJVlcIiwge1wibmFtZVwiOlwiZm9ybWF0RGF0ZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwibmV3c19fbW9yZVxcXFxcIiBocmVmPVxcXFxcIi9uZXdzL2l0ZW0vXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaWQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmlkIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImlkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICDQv9C+0LTRgNC+0LHQvdC10LVcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm5ld3NfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcInN0cmVsa2FcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG4gICAgICAgICAgICAgICAgICAgIDwvYT5cXFxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm5ld3NfX2F1dG9yXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8cD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgINCd0L7QstC+0YHRgtGMINC00L7QsdCw0LLQuNC7OiA8YnI+IEVSUk9SXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5hdXRvciB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYXV0b3IgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiYXV0b3JcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxuICAgICAgICAgICAgICAgICAgICA8L3A+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIjxkaXYgY2xhc3M9XFxcXFwibmV3cy1saXN0XFxcXFwiPlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kYXRhIDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L2Rpdj5cXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdvdGhlci1uZXdzLWl0ZW0nLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL290aGVyL290aGVyLW5ld3MtaXRlbS9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJvdGhlci1uZXdzLWl0ZW1cIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBidWZmZXIgPSBcIlxcXFxuPGNhdC1jb21tb24taDEgaWQ9XFxcXFwiY29tbW9uLWgxXFxcXFwiIG5hbWU9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudGl0bGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRpdGxlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInRpdGxlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+PC9jYXQtY29tbW9uLWgxPlxcXFxuXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaWQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmlkIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImlkXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcblwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmltZyB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1nIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImltZ1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXG5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5kYXRlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kYXRlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImRhdGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxuXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucHJldmlldyB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucHJldmlldyA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJwcmV2aWV3XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcblwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50ZXh0IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50ZXh0IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInRleHRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCJcXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdvdGhlci1yZWNvbW1lbmRhdGlvbicsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvb3RoZXIvb3RoZXItcmVjb21tZW5kYXRpb24vaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwib3RoZXItcmVjb21tZW5kYXRpb25cIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGJ1ZmZlciA9IFwiICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJlY29tbWVuZGF0aW9uXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJyZWNvbW1lbmRhdGlvbl9faW5uZXJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJyZWNvbW1lbmRhdGlvbl9faW1nLXdyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVxcXFxcInJlY29tbWVuZGF0aW9uX19pbWdcXFxcXCIgc3JjPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnBob3RvIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5waG90byA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJwaG90b1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIGFsdD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJlY29tbWVuZGF0aW9uX19jb250ZW50XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJyZWNvbW1lbmRhdGlvbl9fdGl0bGVcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudGl0bGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRpdGxlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInRpdGxlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJyZWNvbW1lbmRhdGlvbl9faW50cm9cXFxcXCI+XCI7XFxuICBzdGFjazEgPSAoKGhlbHBlcnMuc3RyaXBTdHlsZSB8fCAoZGVwdGgwICYmIGRlcHRoMC5zdHJpcFN0eWxlKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRleHQgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJzdHJpcFN0eWxlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJyZWNvbW1lbmRhdGlvbl9fZGF0ZVxcXFxcIj5FUlJPUlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmRhdGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRhdGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiZGF0ZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9wPlxcXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcInJlY29tbWVuZGF0aW9uLWxpc3RcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRhdGEgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIjwvZGl2PlwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJFUlJPUlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ290aGVyLXZhY2FuY3knLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL290aGVyL290aGVyLXZhY2FuY3kvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwib3RoZXItdmFjYW5jeVwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCIgICAgPHA+PHN0cm9uZz7QodC10LnRh9Cw0YEg0L7RgtC60YDRi9GC0Ysg0LLQsNC60LDQvdGB0LjQuDo8L3N0cm9uZz48L3A+XFxcXG5cIjtcXG4gIH0sXCIzXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgIDxwPjxhIGhyZWY9XFxcXFwiL3ZhY2FuY3kvaXRlbS9cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiaWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5wb3N0IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wb3N0IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInBvc3RcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvYT48L3A+XFxcXG5cIjtcXG59LFwiNVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIiAgICA8cD48c3Ryb25nPtCh0LXQudGH0LDRgSDQvtGC0LrRgNGL0YLRi9GFINCy0LDQutCw0L3RgdC40Lkg0L3QtdGCLjwvc3Ryb25nPjwvcD5cXFxcblwiO1xcbiAgfSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCJcIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudmFjYW5jeSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnZhY2FuY3kgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgzLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLnByb2dyYW0oNSwgZGF0YSksXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ290aGVyLXZhY2FuY3ktaXRlbScsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvb3RoZXIvb3RoZXItdmFjYW5jeS1pdGVtL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcIm90aGVyLXZhY2FuY3ktaXRlbVwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGJ1ZmZlciA9IFwiPGRpdiBjbGFzcz1cXFxcXCJ2YWNhbmN5LW9uZS1wYWdlXFxcXFwiPlxcXFxuICAgIDxoMSBjbGFzcz1cXFxcXCJoMSBoMV9zdHlsZVxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5wb3N0IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wb3N0IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInBvc3RcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvaDE+XFxcXG4gICAgPGltZyBjbGFzcz1cXFxcXCJ2YWNhbmN5LW9uZS1wYWdlX19pbWdcXFxcXCIgc3JjPVxcXFxcIi9pbWcvb3RoZXIvdmFjYW5jeS5wbmdcXFxcXCIgYWx0PVxcXFxcItCd0LDRiNC4INCy0LDQutCw0L3RgdC40LhcXFxcXCI+XFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJ2YWNhbmN5LW9uZS1wYWdlX190ZXh0IGZvcm1hdFxcXFxcIj5cXFxcbiAgICAgICAgXCI7XFxuICBzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnRleHQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnRleHQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGV4dFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIlxcXFxuICAgIDwvZGl2PlxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwidmFjYW5jeS1vbmUtcGFnZV9fY29udGFjdCBmb3JtYXRcXFxcXCI+XFxcXG5cXFxcbiAgICAgICAgPCEtLSBFUlJPUiAtLT5cXFxcbiAgICAgICAgXCI7XFxuICBzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmNvbnRhY3QgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbnRhY3QgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiY29udGFjdFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIlxcXFxuICAgICAgICA8cCBzdHlsZT1cXFxcXCJjb2xvcjogcmVkOyBmb250LXdlaWdodDogYm9sZFxcXFxcIj4tLS0tLS0gRVJST1IhICjQvdC10YIg0L/QvtC70Y8gY29udGFjdCkgLS0tLS0tPC9wPlxcXFxuICAgICAgICA8IS0tIEVSUk9SIC0tPlxcXFxuXFxcXG4gICAgPC9kaXY+XFxcXG48L2Rpdj5cXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlLWNhdGFsb2cnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1jYXRhbG9nL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInBhZ2UtY2F0YWxvZ1wiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJtYXN0ZXItcnVicmlrYXRvci1wYWdlIG1hc3Rlci1ydWJyaWthdG9yLXBhZ2VfY29sbGFwc2VkXFxcXFwiPlxcXFxuXFxcXG4gICAgPGNhdC1jb21tb24taDEgaWQ9XFxcXFwiY29tbW9uLWgxXFxcXFwiIG5hbWU9XFxcXFwi0JrQsNGC0LDQu9C+0LMg0YPRgdC70YPQs1xcXFxcIj48L2NhdC1jb21tb24taDE+XFxcXG5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcInJvd1xcXFxcIj5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtYXN0ZXItcnVicmlrYXRvci1wYWdlX19ydWJyaWtzLWNvbHVtbnNcXFxcXCI+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJvd1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8Y2F0LXJ1YnJpa2F0b3ItbGlzdCBpZD1cXFxcXCJydWJyaWthdG9yLWxpc3RcXFxcXCIgY2F0LXN0b3JlPVxcXFxcInJ1YnJpa2EvUnVicmlrYXRvclxcXFxcIj48L2NhdC1ydWJyaWthdG9yLWxpc3Q+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibWFzdGVyLXJ1YnJpa2F0b3ItcGFnZV9fZG9wXFxcXFwiPlxcXFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwibWFzdGVyLXJ1YnJpa2F0b3ItcGFnZV9fZG9wLXRpdGxlXFxcXFwiPtCU0YDRg9Cz0LjQtSDQstC+0LfQvNC+0LbQvdC+0YHRgtC4XFxcXG4gICAgICAgICAgICAgICAg0LIg0L/QvtC00LHQvtGA0LUg0LzQsNGB0YLQtdGA0LA8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibWFzdGVyLXJ1YnJpa2F0b3ItcGFnZV9fZG9wLWNhdGFsb2dzXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxjYXQtY2F0YWxvZy1saXN0IGlkPVxcXFxcImNhdGFsb2ctbGlzdFxcXFxcIiBkYXRhLW1vZD1cXFxcXCJwYWdlX3J1YnJpa2F0b3JcXFxcXCI+PC9jYXQtY2F0YWxvZy1saXN0PlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlLWNvbnRhY3QnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1jb250YWN0L2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInBhZ2UtY29udGFjdFwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJjb250YWN0LXBhZ2VcXFxcXCI+XFxcXG4gICAgPGgxIGNsYXNzPVxcXFxcImgxIGgxX3N0eWxlXFxcXFwiPtCa0L7QvdGC0LDQutGC0Ys8L2gxPlxcXFxuXFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJjb250YWN0LWJsb2NrXFxcXFwiPlxcXFxuICAgICAgICA8cCBjbGFzcz1cXFxcXCJjb250YWN0LWJsb2NrX19waG9uZVxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJjb250YWN0LWJsb2NrX19uYW1lXFxcXFwiPtCi0LXQu9C10YTQvtC9Ojwvc3Bhbj4gXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucGhvbmUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBob25lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInBob25lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3A+XFxcXG4gICAgICAgIDxwIGNsYXNzPVxcXFxcImNvbnRhY3QtYmxvY2tfX2VtYWlsXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcImNvbnRhY3QtYmxvY2tfX25hbWVcXFxcXCI+RS1tYWlsOjwvc3Bhbj4gPGEgaHJlZj1cXFxcXCJtYWlsdG86XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuZW1haWwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmVtYWlsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImVtYWlsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuZW1haWwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmVtYWlsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImVtYWlsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L2E+PC9wPlxcXFxuICAgICAgICA8cCBjbGFzcz1cXFxcXCJjb250YWN0LWJsb2NrX19hZHJlc3NcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwiY29udGFjdC1ibG9ja19fbmFtZVxcXFxcIj7QkNC00YDQtdGBOjwvc3Bhbj4gXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuYWRyZXNzIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5hZHJlc3MgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiYWRyZXNzXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3A+XFxcXG4gICAgPC9kaXY+XFxcXG5cXFxcbjwvZGl2PlwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlLWZlZWRiYWNrJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtZmVlZGJhY2svaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicGFnZS1mZWVkYmFja1wiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJmZWVkYmFjay1wYWdlXFxcXFwiPlxcXFxuICAgIDxoMSBjbGFzcz1cXFxcXCJoMSBoMV9zdHlsZVxcXFxcIj7QntCx0YDQsNGC0L3QsNGPINGB0LLRj9C30Yw8L2gxPlxcXFxuXFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJmZWVkYmFjay1ibG9ja1xcXFxcIj5cXFxcbiAgICAgICAgPGZvcm0gY2xhc3M9XFxcXFwiZmVlZGJhY2stYmxvY2tfX2Zvcm1cXFxcXCIgaWQ9XFxcXFwiZmVlZGJhY2stZm9ybVxcXFxcIiBhY3Rpb249XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51cmwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCIgbWV0aG9kPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm1ldGhvZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubWV0aG9kIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm1ldGhvZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGxhYmVsPlxcXFxuICAgICAgICAgICAgICAgIDxzcGFuPtCS0LDRiNC1INC40LzRjzwvc3Bhbj5cXFxcbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFxcXCJ0ZXh0XFxcXFwiIG5hbWU9XFxcXFwiZmVlZGJhY2tbbmFtZV1cXFxcXCIgYXV0b2ZvY3VzPlxcXFxuICAgICAgICAgICAgPC9sYWJlbD5cXFxcblxcXFxuICAgICAgICAgICAgPGxhYmVsPlxcXFxuICAgICAgICAgICAgICAgIDxzcGFuPtCS0LDRiCBlLW1haWw8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcXFwidGV4dFxcXFxcIiBuYW1lPVxcXFxcImZlZWRiYWNrW2VtYWlsXVxcXFxcIj5cXFxcbiAgICAgICAgICAgIDwvbGFiZWw+XFxcXG5cXFxcbiAgICAgICAgICAgIDxsYWJlbD5cXFxcbiAgICAgICAgICAgICAgICA8c3Bhbj7QktCw0YjQtSDRgdC+0L7QsdGJ0LXQvdC40LU8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9XFxcXFwiZmVlZGJhY2tbdGV4dF1cXFxcXCI+PC90ZXh0YXJlYT5cXFxcbiAgICAgICAgICAgIDwvbGFiZWw+XFxcXG5cXFxcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFxcXCJidG4tYWNjZW50XFxcXFwiIHR5cGU9XFxcXFwic3VibWl0XFxcXFwiIHZhbHVlPVxcXFxcItCe0YLQv9GA0LDQstC40YLRjFxcXFxcIj5cXFxcbiAgICAgICAgPC9mb3JtPlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncGFnZS1sb2dpbicsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLWxvZ2luL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInBhZ2UtbG9naW5cIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBsYW1iZGE9dGhpcy5sYW1iZGE7XFxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXFxcInBhZ2UtbG9naW5cXFxcXCI+XFxcXG4gICAgPGgxIGNsYXNzPVxcXFxcImgxIGgxX3N0eWxlXFxcXFwiPtCS0YXQvtC0IC8g0YDQtdCz0LjRgdGC0YDQsNGG0LjRjzwvaDE+XFxcXG5cXFxcbiAgICA8Zm9ybSBjbGFzcz1cXFxcXCJsb2dpbi1mb3JtXFxcXFwiIG1ldGhvZD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5tZXRob2QgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm1ldGhvZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJtZXRob2RcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIiBhY3Rpb249XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51cmwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cXFxcXCJsb2dpbi1mb3JtX19pbnB1dC10ZXh0XFxcXFwiIHR5cGU9XFxcXFwidGV4dFxcXFxcIiBwbGFjZWhvbGRlcj1cXFxcXCLQrdC7LiDQv9C+0YfRgtCwINC40LvQuCDRgtC10LvQtdGE0L7QvVxcXFxcIiBuYW1lPVxcXFxcImxvZ2luRm9ybVtsb2dpbl1cXFxcXCI+XFxcXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cXFxcXCJsb2dpbi1mb3JtX19pbnB1dC10ZXh0XFxcXFwiIHR5cGU9XFxcXFwicGFzc3dvcmRcXFxcXCIgcGxhY2Vob2xkZXI9XFxcXFwi0J/QsNGA0L7Qu9GMXFxcXFwiIG5hbWU9XFxcXFwibG9naW5Gb3JtW3Bhc3N3b3JkXVxcXFxcIj5cXFxcbiAgICAgICAgPGxhYmVsIGNsYXNzPVxcXFxcImxvZ2luLWZvcm1fX2xhYmVsLWNoZWNrYm94XFxcXFwiPjxpbnB1dCB0eXBlPVxcXFxcImNoZWNrYm94XFxcXFwiIGlkPVxcXFxcInJlbWVtYmVyLW1lXFxcXFwiPjxzcGFuPtCX0LDQv9C+0LzQvdC40YLRjCDQvNC10L3Rjzwvc3Bhbj48L2xhYmVsPlxcXFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcXFwibG9naW4tZm9ybV9fYnRuXFxcXFwiIHR5cGU9XFxcXFwic3VibWl0XFxcXFwiIHZhbHVlPVxcXFxcItCS0L7QudGC0LhcXFxcXCI+XFxcXG5cXFxcbiAgICAgICAgPHAgY2xhc3M9XFxcXFwibG9naW4tZm9ybV9faHJlZi1jb250XFxcXFwiPlxcXFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwibG9naW4tZm9ybV9fcmVjb3ZlcnlcXFxcXCIgaHJlZj1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVyc1tcXCdyZWNvdmVyeS11cmxcXCddIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMFtcXCdyZWNvdmVyeS11cmxcXCddIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInJlY292ZXJ5LXVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPtCX0LDQsdGL0LvQuCDQv9Cw0YDQvtC70Yw/PC9hPlxcXFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwibG9naW4tZm9ybV9fcmVnaXN0cmF0aW9uXFxcXFwiIGhyZWY9XFxcXFwiI1xcXFxcIiBpZD1cXFxcXCJyZWctbGlua1xcXFxcIj7QoNC10LPQuNGB0YLRgNCw0YbQuNGPPC9hPlxcXFxuICAgICAgICAgICAgPGJyPlxcXFxuICAgICAgICA8L3A+XFxcXG4gICAgPC9mb3JtPlxcXFxuXFxcXG4gICAgPGZvcm0gY2xhc3M9XFxcXFwicmVnaXN0cmF0aW9uLWZvcm1cXFxcXCIgbWV0aG9kPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm1ldGhvZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubWV0aG9kIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm1ldGhvZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIGFjdGlvbj1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy51cmwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnVybCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ1cmxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgPGlucHV0IGNsYXNzPVxcXFxcInJlZ2lzdHJhdGlvbi1mb3JtX19pbnB1dC10ZXh0XFxcXFwiIHR5cGU9XFxcXFwiZW1haWxcXFxcXCIgcGxhY2Vob2xkZXI9XFxcXFwi0K3Quy4g0L/QvtGH0YLQsFxcXFxcIiBuYW1lPVxcXFxcInJlZ0Zvcm1bbG9naW5dXFxcXFwiPlxcXFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcXFwicmVnaXN0cmF0aW9uLWZvcm1fX2lucHV0LXRleHRcXFxcXCIgdHlwZT1cXFxcXCJ0ZXh0XFxcXFwiIHBsYWNlaG9sZGVyPVxcXFxcItCY0LzRjyDQpNCw0LzQuNC70LjRj1xcXFxcIiBuYW1lPVxcXFxcInJlZ0Zvcm1bbmFtZV1cXFxcXCI+XFxcXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cXFxcXCJyZWdpc3RyYXRpb24tZm9ybV9faW5wdXQtdGV4dFxcXFxcIiB0eXBlPVxcXFxcInBhc3N3b3JkXFxcXFwiIHBsYWNlaG9sZGVyPVxcXFxcItCf0LDRgNC+0LvRjFxcXFxcIiBuYW1lPVxcXFxcInJlZ0Zvcm1bcGFzc3dvcmRdXFxcXFwiPlxcXFxuXFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicmVnaXN0cmF0aW9uLWZvcm1fX2NhcGNoYSByZWdpc3RyYXRpb24tZm9ybV9fY2FwY2hhX3JlZ2lzdHJhdGlvblxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicmVnaXN0cmF0aW9uLWZvcm1fX2NvZGUtaW1nXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVxcXFxcImltZy9hc3NldHMvcmVjb3ZlcnktcGFzc3dvcmQvY2FwdGNoYS5wbmdcXFxcXCIgYWx0PVxcXFxcImNhcGNoYVxcXFxcIj5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwicmVnaXN0cmF0aW9uLWZvcm1fX3JlbG9hZC1saW5rXFxcXFwiIGhyZWY9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jYXBjaGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxW1xcJ3JlbG9hZC11cmxcXCddIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIj7Qn9C+0LvRg9GH0LjRgtGMINC90L7QstGL0Lkg0LrQvtC0PC9hPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICA8aW5wdXQgY2xhc3M9XFxcXFwicmVnaXN0cmF0aW9uLWZvcm1fX2lucHV0LXRleHRcXFxcXCIgdHlwZT1cXFxcXCJ0ZXh0XFxcXFwiIHBsYWNlaG9sZGVyPVxcXFxcItCa0L7QtCDRgSDQutCw0YDRgtC40L3QutC4XFxcXFwiIG5hbWU9XFxcXFwicmVnRm9ybVtjb2RlXVxcXFxcIj5cXFxcbiAgICAgICAgPGlucHV0IGNsYXNzPVxcXFxcInJlZ2lzdHJhdGlvbi1mb3JtX19idG4gcmVnaXN0cmF0aW9uLWZvcm1fX2J0bl9sb25nLXRleHRcXFxcXCIgdHlwZT1cXFxcXCJzdWJtaXRcXFxcXCIgdmFsdWU9XFxcXFwi0JfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNGC0YzRgdGPXFxcXFwiPlxcXFxuICAgICAgICA8cCBjbGFzcz1cXFxcXCJyZWdpc3RyYXRpb24tZm9ybV9fZW50cnlcXFxcXCI+PGEgaHJlZj1cXFxcXCIjXFxcXFwiIGlkPVxcXFxcImVudHJ5LWxpbmtcXFxcXCI+0JLQvtC50YLQuDwvYT48L3A+XFxcXG4gICAgPC9mb3JtPlxcXFxuXFxcXG4gICAgPGZvcm0gY2xhc3M9XFxcXFwicmVjb3ZlcnktcGFzcy1mb3JtXFxcXFwiIG1ldGhvZD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5tZXRob2QgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm1ldGhvZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJtZXRob2RcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIiBhY3Rpb249XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51cmwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cXFxcXCJyZWNvdmVyeS1wYXNzLWZvcm1fX2lucHV0LXRleHRcXFxcXCIgdHlwZT1cXFxcXCJ0ZXh0XFxcXFwiIHBsYWNlaG9sZGVyPVxcXFxcItCt0LsuINC/0L7Rh9GC0LAg0LjQu9C4INGC0LXQu9C10YTQvtC9XFxcXFwiIG5hbWU9XFxcXFwicmVjb3ZlcnktcGFzc3dvcmRbbG9naW5dXFxcXFwiIGF1dG9mb2N1cz5cXFxcblxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJlY292ZXJ5LXBhc3MtZm9ybV9fY2FwY2hhIHJlY292ZXJ5LXBhc3MtZm9ybV9fY2FwY2hhX3JlZ2lzdHJhdGlvblxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicmVjb3ZlcnktcGFzcy1mb3JtX19jb2RlLWltZ1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cXFxcXCJpbWcvYXNzZXRzL3JlY292ZXJ5LXBhc3N3b3JkL2NhcHRjaGEucG5nXFxcXFwiIGFsdD1cXFxcXCJjYXBjaGFcXFxcXCI+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcInJlY292ZXJ5LXBhc3MtZm9ybV9fcmVsb2FkLWxpbmtcXFxcXCIgaHJlZj1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNhcGNoYSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazFbXFwncmVsb2FkLXVybFxcJ10gOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiXFxcXFwiPtCf0L7Qu9GD0YfQuNGC0Ywg0L3QvtCy0YvQuSDQutC+0LQ8L2E+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cXFxcXCJyZWNvdmVyeS1wYXNzLWZvcm1fX2lucHV0LXRleHRcXFxcXCIgdHlwZT1cXFxcXCJ0ZXh0XFxcXFwiIHBsYWNlaG9sZGVyPVxcXFxcItCa0L7QtCDRgSDQutCw0YDRgtC40L3QutC4XFxcXFwiIG5hbWU9XFxcXFwicmVjb3ZlcnktcGFzc3dvcmRbY29kZV1cXFxcXCI+XFxcXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cXFxcXCJyZWNvdmVyeS1wYXNzLWZvcm1fX2J0blxcXFxcIiB0eXBlPVxcXFxcInN1Ym1pdFxcXFxcIiB2YWx1ZT1cXFxcXCLQktC+0YHRgdGC0LDQvdC+0LLQuNGC0YxcXFxcXCI+XFxcXG4gICAgPC9mb3JtPlxcXFxuXFxcXG48L2Rpdj5cXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlLW1haW4nLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1tYWluL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInBhZ2UtbWFpblwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJtYWluLXBhZ2VcXFxcXCI+XFxcXG4gICAgPGNhdC1tYWluLWZ1bmN0aW9uIGlkPVxcXFxcIm1haW4tZnVuY3Rpb25cXFxcXCI+PC9jYXQtbWFpbi1mdW5jdGlvbj5cXFxcbiAgICA8Y2F0LWRvcC1mdW5jdGlvbiBpZD1cXFxcXCJkb3AtZnVuY3Rpb25cXFxcXCI+PC9jYXQtZG9wLWZ1bmN0aW9uPlxcXFxuPC9kaXY+XFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlLW1hc3Rlci1wYWdlJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtbWFzdGVyLXBhZ2UvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicGFnZS1tYXN0ZXItcGFnZVwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiPGgxIGNsYXNzPVxcXFxcImgxIGgxX3N0eWxlXFxcXFwiPtCh0YLRgNCw0L3QuNGG0LAg0JzQsNGB0YLQtdGA0LA8L2gxPlxcXFxuPGNhdC1tYXN0ZXItcGFnZSBpZD1cXFxcXCJtYXN0ZXItcGFnZVxcXFxcIiBjYXQtc3RvcmU9XFxcXFwibWFzdGVyL01hc3Rlckl0ZW1cXFxcXCI+PC9jYXQtbWFzdGVyLXBhZ2U+XFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlLW1hc3Rlci1ydWJyaWthJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtbWFzdGVyLXJ1YnJpa2EvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicGFnZS1tYXN0ZXItcnVicmlrYVwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJjb250YWluZXJcXFxcXCI+XFxcXG4gICAgPGNhdC1tYXN0ZXItcnVicmlrYSBpZD1cXFxcXCJtYXN0ZXItcnVicmlrYVxcXFxcIiBjYXQtc3RvcmU9XFxcXFwiVGFnXFxcXFwiPjwvY2F0LW1hc3Rlci1ydWJyaWthPlxcXFxuPC9kaXY+XCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncGFnZS1uZXdzJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtbmV3cy9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJwYWdlLW5ld3NcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcXFwicGFnZV9vdGhfbmV3c1xcXFxcIj5cXFxcbiAgICA8Y2F0LWNvbW1vbi1oMSBpZD1cXFxcXCJjb21tb24taDFcXFxcXCIgbmFtZT1cXFxcXCLQndC+0LLQvtGB0YLQuFxcXFxcIj48L2NhdC1jb21tb24taDE+XFxcXG5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcInBhZ2Vfb3RoX25ld3NfX2xpc3RcXFxcXCI+XFxcXG4gICAgICAgIDxjYXQtb3RoZXItbmV3cyBpZD1cXFxcXCJvdGhlci1uZXdzXFxcXFwiIGNhdC1zdG9yZT1cXFxcXCJvdGhlci9OZXdzXFxcXFwiPjwvY2F0LW90aGVyLW5ld3M+XFxcXG4gICAgICAgIDxjYXQtY29tbW9uLXBhZ2luYXRvciBpZD1cXFxcXCJjb21tb24tcGFnaW5hdG9yXFxcXFwiIGNhdC1zdG9yZT1cXFxcXCJQYWdpbmF0b3JcXFxcXCIgbW9kZWw9XFxcXFwib3RoZXIvTmV3c1xcXFxcIj48L2NhdC1jb21tb24tcGFnaW5hdG9yPlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncGFnZS1uZXdzLWl0ZW0nLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1uZXdzLWl0ZW0vaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicGFnZS1uZXdzLWl0ZW1cIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcXFwicGFnZV9vdGhfbmV3c1xcXFxcIj5cXFxcbiAgICA8Y2F0LW90aGVyLW5ld3MtaXRlbSBpZD1cXFxcXCJvdGhlci1uZXdzXFxcXFwiIGNhdC1zdG9yZT1cXFxcXCJvdGhlci9OZXdzSXRlbVxcXFxcIj48L2NhdC1vdGhlci1uZXdzLWl0ZW0+XFxcXG48L2Rpdj5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlLW9mZXJ0YScsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLW9mZXJ0YS9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJwYWdlLW9mZXJ0YVwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJvZmVydGEtcGFnZVxcXFxcIj5cXFxcblxcXFxuICAgIDxoMSBjbGFzcz1cXFxcXCJoMSBoMV9zdHlsZVxcXFxcIj7QntCk0JXQoNCi0JAg0L7RgiAwMS4wMy4yMDE1IDwvaDE+XFxcXG5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJ0YVxcXFxcIj5cXFxcbiAgICAgICAgPHA+PHN0cm9uZz7QvdCwINC/0L7Qu9GM0LfQvtCy0LDQvdC40LUg0KPRgdC70YPQs9Cw0LzQuCDQodCw0LnRgtCwIHd3dy5mYWNlbWFzdGVyLnJ1PC9zdHJvbmc+PC9wPlxcXFxuXFxcXG4gICAgICAgIDxwPtCX0JDQniDCq9Ck0LXQudGB0JzQsNGB0YLQtdGALtGA0YPCuywg0LjQvNC10L3Rg9C10LzQvtC1INCyINC00LDQu9GM0L3QtdC50YjQtdC8IMKr0JrQvtC80L/QsNC90LjRj8K7LCDQv9GA0LXQtNC+0YHRgtCw0LLQu9GP0LXRgiDQu9GO0LHQvtC80YMg0LvQuNGG0YMg0YPRgdC70YPQs9C4INC/0L4g0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y5cXFxcbiAgICAgICAgICAgINGB0LDQudGC0LAg0JrQvtC80L/QsNC90LjQuCDQsiDQu9C40YfQvdGL0YUg0YbQtdC70Y/RhSDQv9C+0YHRgNC10LTRgdGC0LLQvtC8INC/0YDQtdC00L7RgdGC0LDQstC70LXQvdC40Y8g0YHQtdGA0LLQuNGB0L7QsiDRgdCw0LnRgtCwINC90LAg0L/RgNC40LLQtdC00LXQvdC90YvRhSDQvdC40LbQtSDRg9GB0LvQvtCy0LjRj9GFLjwvcD5cXFxcblxcXFxuICAgICAgICA8cD7QkdC10LfRg9GB0LvQvtCy0L3Ri9C8INC/0YDQuNC90Y/RgtC40LXQvCAo0LDQutGG0LXQv9GC0L7QvCkg0YPRgdC70L7QstC40Lkg0L3QsNGB0YLQvtGP0YnQtdC5INC+0YTQtdGA0YLRiyDRgdGH0LjRgtCw0LXRgtGB0Y8g0L/QvtC70YzQt9C+0LLQsNC90LjQtSDQodCw0LnRgtC+0LwgPHN0cm9uZz5odHRwOi8vd3d3LmZhY2VtYXN0ZXIucnU8L3N0cm9uZz4sXFxcXG4gICAgICAgICAgICDQstC60LvRjtGH0LDRjyDQv9GA0L7RgdC80L7RgtGAINGB0YLRgNCw0L3QuNGGINCh0LDQudGC0LAsINC90LUg0LfQsNCy0LjRgdC40LzQviDQvtGCINC/0YDQvtGF0L7QttC00LXQvdC40Y8g0L/RgNC+0YbQtdC00YPRgNGLINCg0LXQs9C40YHRgtGA0LDRhtC40LguPC9wPlxcXFxuXFxcXG4gICAgICAgIDxwPtCd0LDRgdGC0L7Rj9GJ0LDRjyDQntGE0LXRgNGC0LAg0LzQvtC20LXRgiDQsdGL0YLRjCDQuNC30LzQtdC90LXQvdCwINC/0L4g0YPRgdC80L7RgtGA0LXQvdC40Y4g0JrQvtC80L/QsNC90LjQuCDQsiDQu9GO0LHQvtC1INCy0YDQtdC80Y8g0LHQtdC3INC60LDQutC+0LPQvi3Qu9C40LHQviDRgdC/0LXRhtC40LDQu9GM0L3QvtCz0L5cXFxcbiAgICAgICAgICAgINGD0LLQtdC00L7QvNC70LXQvdC40Y8g0L7QsSDRjdGC0L7QvCDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8uINCd0L7QstCw0Y8g0YDQtdC00LDQutGG0LjRjyDQntGE0LXRgNGC0YssINC40LfQvNC10L3QtdC90LjRjyDQuCDQtNC+0L/QvtC70L3QtdC90LjRjyDQuiDQvdC10Lkg0LLRgdGC0YPQv9Cw0Y7RgiDQsiDRgdC40LvRgyDRgVxcXFxuICAgICAgICAgICAg0LzQvtC80LXQvdGC0LAg0LjRhSDRgNCw0LfQvNC10YnQtdC90LjRjyDQvdCwINCh0LDQudGC0LUuINCg0LXQs9GD0LvRj9GA0L3QvtC1INC+0LfQvdCw0LrQvtC80LvQtdC90LjQtSDRgSDQtNC10LnRgdGC0LLRg9GO0YnQtdC5INGA0LXQtNCw0LrRhtC40LXQuSDQntGE0LXRgNGC0Ysg0Y/QstC70Y/QtdGC0YHRjyDQvtCx0Y/Qt9Cw0L3QvdC+0YHRgtGM0Y5cXFxcbiAgICAgICAgICAgINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy4g0J/QvtC70YzQt9C+0LLQsNC90LjQtSDQodCw0LnRgtC+0Lwg0L/QvtGB0LvQtSDQstGB0YLRg9C/0LvQtdC90LjRjyDQsiDRgdC40LvRgyDQvdC+0LLQvtC5INGA0LXQtNCw0LrRhtC40Lgg0J7RhNC10YDRgtGLLCDQtNC+0L/QvtC70L3QtdC90LjQuSDQuCDQuNC30LzQtdC90LXQvdC40Lkg0Log0L3QtdC5XFxcXG4gICAgICAgICAgICDQvtC30L3QsNGH0LDQtdGCINGB0L7Qs9C70LDRgdC40LUg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINGB0L4g0LLRgdC10LzQuCDRgtCw0LrQuNC80Lgg0LjQt9C80LXQvdC10L3QuNGP0LzQuCDQuNC70Lgg0LTQvtC/0L7Qu9C90LXQvdC40Y/QvNC4LCDQvdC+0LLQvtC5INGA0LXQtNCw0LrRhtC40LXQuSDQntGE0LXRgNGC0YsuPC9wPlxcXFxuXFxcXG4gICAgICAgIDxicj5cXFxcblxcXFxuICAgICAgICA8cD48c3Ryb25nPjEuINCi0JXQoNCc0JjQndCrINC4INCe0JHQntCX0J3QkNCn0JXQndCY0K88L3N0cm9uZz48L3A+XFxcXG5cXFxcbiAgICAgICAgPHA+PHN0cm9uZz7QmtC+0LzQv9Cw0L3QuNGPPC9zdHJvbmc+IOKAkyDQl9CQ0J4gwqvQpNC10LnRgdCc0LDRgdGC0LXRgC7RgNGDwrs6INCe0JPQoNCdIDExMzYzMjAwMjA4MjUg0JjQndCdIDYzMjEzMjM0MDYsINCu0YDQuNC00LjRh9C10YHQutC40Lkg0LDQtNGA0LXRgTpcXFxcbiAgICAgICAgICAgIDQ0NTA1Niwg0LMu0KLQvtC70YzRj9GC0YLQuCwg0YPQuy7QkNCy0YLQvtGB0YLRgNC+0LjRgtC10LvQtdC5LCA0MdCQLCDQutC+0YDQvy4xPGJyPlxcXFxuICAgICAgICAgICAgPGJyPlxcXFxuICAgICAgICAgICAgPHN0cm9uZz7Qn9C+0LvRjNC30L7QstCw0YLQtdC70Ywv0JrQu9C40LXQvdGCPC9zdHJvbmc+IOKAkyDQtNC10LXRgdC/0L7RgdC+0LHQvdC+0LUsINCyINCy0L7Qt9GA0LDRgdGC0LUg0L7RgiAxOCDQu9C10YIsINGE0LjQt9C40YfQtdGB0LrQvtC1INC70LjRhtC+L9C/0YDQsNCy0L7RgdC/0L7RgdC+0LHQvdC+0LVcXFxcbiAgICAgICAgICAgINGO0YDQuNC00LjRh9C10YHQutC+0LUg0LvQuNGG0L4sINC/0YDQvtGI0LXQtNGI0LjQtSDQoNC10LPQuNGB0YLRgNCw0YbQuNGOINC90LAg0YHQsNC50YLQtSDQmtC+0LzQv9Cw0L3QuNC4LCDQuNC80LXRjtGJ0LjQtSDQstGB0LUg0L/RgNCw0LLQvtCy0YvQtSDQv9C+0LvQvdC+0LzQvtGH0LjRjyDQsiDRgdC+0L7RgtCy0LXRgtGB0YLQstC40Lgg0YFcXFxcbiAgICAgICAgICAgINC00LXQudGB0YLQstGD0Y7RidC40Lwg0LfQsNC60L7QvdC+0LTQsNGC0LXQu9GM0YHRgtCy0L7QvCDQoNCkINC90LAg0LfQsNC60LvRjtGH0LXQvdC40LUg0J7RhNC10YDRgtGLINC4INC40L3Ri9GFINGB0L7Qv9GD0YLRgdGC0LLRg9GO0YnQuNGFINC00L7QutGD0LzQtdC90YLQvtCyINC00LvRjyDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRj1xcXFxuICAgICAgICAgICAg0LLQvtC30LzQvtC20L3QvtGB0YLQtdC5INCh0LDQudGC0LAg0JrQvtC80L/QsNC90LjQuC48YnI+XFxcXG4gICAgICAgICAgICA8YnI+XFxcXG4gICAgICAgICAgICA8c3Ryb25nPtCh0LDQudGCPC9zdHJvbmc+IOKAkyDQmNC90YLQtdGA0L3QtdGCLdGB0LDQudGCLCDRgNCw0LfQvNC10YnQtdC90L3Ri9C5INCyINGB0LXRgtC4INCY0L3RgtC10YDQvdC10YIg0L/QviDQsNC00YDQtdGB0YM6IHd3dy5mYWNlbWFzdGVyLnJ1LCDQstC60LvRjtGH0LDRjtGJ0LjQuVxcXFxuICAgICAgICAgICAg0LIg0YHQtdCx0Y8g0LrQvtC80L/Qu9C10LrRgSDRjdC70LXQvNC10L3RgtC+0LI6INC/0YDQvtCz0YDQsNC80LzRiyDQtNC70Y8g0K3QktCcLCDQsdCw0LfRiyDQtNCw0L3QvdGL0YUsINC40L3RgtC10YDRhNC10LnRgSAo0LTQuNC30LDQudC9KSwg0LrQsNC6INCyINGB0L7QstC+0LrRg9C/0L3QvtGB0YLQuCwg0YLQsNC6INC4XFxcXG4gICAgICAgICAgICDQvtGC0LTQtdC70YzQvdGL0LUg0Y3Qu9C10LzQtdC90YLRiyDQtNC40LfQsNC50L3QsCwg0Lgg0LTRgC48YnI+XFxcXG4gICAgICAgICAgICA8YnI+XFxcXG4gICAgICAgICAgICA8c3Ryb25nPtCT0L7RgdGC0Yw8L3N0cm9uZz4g4oCTINC70Y7QsdC+0LUg0LvQuNGG0L4sINC90LUg0L/RgNC+0YjQtdC00YjQtdC1INCg0LXQs9C40YHRgtGA0LDRhtC40Y4sINC40LzQtdGO0YnQtdC1INCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0L/RgNC+0YHQvNCw0YLRgNC40LLQsNGC0Ywg0YHRgtGA0LDQvdC40YbRi1xcXFxuICAgICAgICAgICAg0KHQsNC50YLQsCDQuCDQmNC90YTQvtGA0LzQsNGG0LjRjiwg0YDQsNC30LzQtdGJ0LXQvdC90YPRjiDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y/QvNC4INC00LvRjyDQvtCx0YnQtdCz0L4g0LTQvtGB0YLRg9C/0LAuPGJyPlxcXFxuICAgICAgICAgICAgPGJyPlxcXFxuICAgICAgICAgICAgPHN0cm9uZz7QoNC10LPQuNGB0YLRgNCw0YbQuNGPPC9zdHJvbmc+IOKAkyDQutC+0LzQv9C70LXQutGBINC00LXQudGB0YLQstC40Lkg0L/QviDQv9GA0LjQvdGP0YLQuNGOINC+0YTQtdGA0YLRiywg0YDQsNC30LzQtdGJ0LXQvdC90L7QuSDQvdCwINCh0LDQudGC0LUsINGB0L7Qt9C00LDQvdC40Y4g0JvQuNGH0L3QvtCz0L5cXFxcbiAgICAgICAgICAgINC60LDQsdC40L3QtdGC0LAsINC/0YPRgtC10Lwg0LLQstC+0LTQsCDRg9GH0LXRgtC90YvRhSDQtNCw0L3QvdGL0YUg0Lgg0LjQvdGL0YUg0L3QtdC+0LHRhdC+0LTQuNC80YvRhSDRgdCy0LXQtNC10L3QuNC5LCDQuCDQv9C+0LvRg9GH0LXQvdC40Y4g0L/RgNCw0LLQsCDQvdCwINC/0L7Qu9GM0LfQvtCy0LDQvdC40LUg0KPRgdC70YPQs9Cw0LzQuFxcXFxuICAgICAgICAgICAg0JjQvdGC0LXRgNC90LXRgi3RgdCw0LnRgtCwLjxicj5cXFxcbiAgICAgICAgICAgIDxicj5cXFxcbiAgICAgICAgICAgIDxzdHJvbmc+0KPRh9C10YLQvdGL0LUg0LTQsNC90L3Ri9C1IDwvc3Ryb25nPuKAlCDRg9C90LjQutCw0LvRjNC90YvQuSDQu9C+0LPQuNC9ICjQvdC+0LzQtdGAINGC0LXQu9C10YTQvtC90LApINC4INC/0LDRgNC+0LvRjCwg0YHQvtC30LTQsNCy0LDQtdC80YvQtSDQsiDQv9GA0L7RhtC10YHRgdC1XFxcXG4gICAgICAgICAgICDQoNC10LPQuNGB0YLRgNCw0YbQuNC4INC90LAg0KHQsNC50YLQtSwg0LjRgdC/0L7Qu9GM0LfRg9C10LzRi9C1INC00LvRjyDQtNC+0YHRgtGD0L/QsCDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAg0LIg0JvQuNGH0L3Ri9C5INC60LDQsdC40L3QtdGCINC/0YPRgtC10Lwg0JDQstGC0L7RgNC40LfQsNGG0LjQuC48YnI+XFxcXG4gICAgICAgICAgICA8YnI+XFxcXG4gICAgICAgICAgICA8c3Ryb25nPtCQ0LLRgtC+0YDQuNC30LDRhtC40Y88L3N0cm9uZz4g4oCUINC40LTQtdC90YLQuNGE0LjQutCw0YbQuNGPINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy/QmtC70LjQtdC90YLQsCDQv9C+0YHRgNC10LTRgdGC0LLQvtC8INCy0LLQtdC00LXQvdC40Y8g0LIg0YHQvtC+0YLQstC10YLRgdGC0LLRg9GO0YnQuNC1XFxcXG4gICAgICAgICAgICDQv9C+0LvRjyDQvdCwINCh0LDQudGC0LUg0KPRh9C10YLQvdGL0YUg0LTQsNC90L3Ri9GFLjxicj5cXFxcbiAgICAgICAgICAgIDxicj5cXFxcbiAgICAgICAgICAgIDxzdHJvbmc+0JvQuNGH0L3Ri9C5INC60LDQsdC40L3QtdGCIDwvc3Ryb25nPuKAlCDQv9C10YDRgdC+0L3QsNC70YzQvdCw0Y8g0YHRgtGA0LDQvdC40YbQsCDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAsINGE0L7RgNC80LjRgNGD0LXQvNCw0Y8g0L/QvtGB0LvQtSDQoNC10LPQuNGB0YLRgNCw0YbQuNC4LFxcXFxuICAgICAgICAgICAg0LTQvtGB0YLRg9C/INC6INC60L7RgtC+0YDQvtC5INC/0YDQtdC00L7RgdGC0LDQstC70Y/QtdGC0YHRjyDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y4v0JrQu9C40LXQvdGC0YMg0LIg0YDQtdC30YPQu9GM0YLQsNGC0LUg0JDQstGC0L7RgNC40LfQsNGG0LjQuC48YnI+XFxcXG4gICAgICAgICAgICA8YnI+XFxcXG4gICAgICAgICAgICA8c3Ryb25nPtCe0YTQtdGA0YLQsDwvc3Ryb25nPiDigJMg0L3QsNGB0YLQvtGP0YnQtdC1INC/0YDQtdC00LvQvtC20LXQvdC40LUg0JrQvtC80L/QsNC90LjQuCwg0LDQtNGA0LXRgdC+0LLQsNC90L3QvtC1INC90LXQvtC/0YDQtdC00LXQu9C10L3QvdC+0LzRgyDQutGA0YPQs9GDINC70LjRhiwg0YHQvtC00LXRgNC20LDRidC10LVcXFxcbiAgICAgICAgICAgINC/0YDQsNCy0LjQu9CwINC4INGD0YHQu9C+0LLQuNGPINC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0KPRgdC70YPQs9Cw0LzQuCDQodCw0LnRgtCwLCDQsCDRgtCw0LrQttC1INC/0YDQsNCy0LAg0Lgg0L7QsdGP0LfQsNC90L3QvtGB0YLQuCDQn9C+0LvRjNC30L7QstCw0YLQtdC70LXQuS/QmtC70LjQtdC90YLQvtCyXFxcXG4gICAgICAgICAgICDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdGL0LUg0LTQu9GPINC40YHQv9C+0LvQvdC10L3QuNGPINC/0YDQuCDRgNCw0LfQvNC10YnQtdC90LjQuCDQmNC90YTQvtGA0LzQsNGG0LjQuCDQvdCwINCh0LDQudGC0LUg0LTQu9GPINC+0LHRidC10LPQviDQtNC+0YHRgtGD0L/QsC48YnI+XFxcXG4gICAgICAgICAgICA8YnI+XFxcXG4gICAgICAgICAgICA8c3Ryb25nPtCj0YHQu9GD0LPQuDwvc3Ryb25nPiAtINCy0L7Qt9C80L7QttC90L7RgdGC0LggKNC/0YDQsNCy0LApLCDQv9GA0LXQtNC+0YHRgtCw0LLQu9GP0LXQvNGL0LUg0JrQvtC80L/QsNC90LjQtdC5INC4INC/0L7Qt9Cy0L7Qu9GP0Y7RidC40LVcXFxcbiAgICAgICAgICAgINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRji/QmtC70LjQtdC90YLRgy/Qk9C+0YHRgtGOINGA0LDQt9C80LXRidCw0YLRjCwg0L7RgdGD0YnQtdGB0YLQstC70Y/RgtGMINC/0L7QuNGB0Log0Lgg0L/RgNC+0YHQvNC+0YLRgCDQmNC90YTQvtGA0LzQsNGG0LjQuCwg0LAg0YLQsNC60LbQtSDQu9GO0LHRi9C1INC40L3Ri9C1XFxcXG4gICAgICAgICAgICDQstC+0LfQvNC+0LbQvdC+0YHRgtC4INC4INGE0YPQvdC60YbQuNC4LCDQtNC+0YHRgtGD0L/QvdGL0LUg0L3QsCDQodCw0LnRgtC1LiA8c3Ryb25nPtCR0LXRgdC/0LvQsNGC0L3Ri9C1INGD0YHQu9GD0LPQuDwvc3Ryb25nPiDigJMg0LHQsNC30L7QstGL0Lkg0L3QsNCx0L7RgCDRg9GB0LvRg9CzLFxcXFxuICAgICAgICAgICAg0L/RgNC10LTQvtGB0YLQsNCy0LvRj9C10LzRi9C5INCx0LXQtyDQstC30LjQvNCw0L3QuNGPINC/0LvQsNGC0YsuIDxzdHJvbmc+0J/Qu9Cw0YLQvdGL0LUg0YPRgdC70YPQs9C4PC9zdHJvbmc+IOKAkyDQvdCw0LHQvtGAINC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdGL0YUg0YPRgdC70YPQsywg0LfQsFxcXFxuICAgICAgICAgICAg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LUg0LrQvtGC0L7RgNGL0YUg0LLQt9C40LzQsNC10YLRgdGPINC/0LvQsNGC0LAg0YHQvtCz0LvQsNGB0L3QviDRgtCw0YDQuNGE0LDQvCDQmtC+0LzQv9Cw0L3QuNC4LjwvcD5cXFxcblxcXFxuICAgICAgICA8cD48c3Ryb25nPtCY0L3RhNC+0YDQvNCw0YbQuNGPIOKAkyA8L3N0cm9uZz7Rg9GB0LvRg9Cz0Lgg0Lgg0L/RgNC10LTQu9C+0LbQtdC90LjRjyDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAsINGB0LLQtdC00LXQvdC40Y8g0L4g0LrQvtGC0L7RgNGL0YUg0L7QvSDRgNCw0LfQvNC10YnQsNC10YIg0L3QsFxcXFxuICAgICAgICAgICAg0KHQsNC50YLQtSwg0LDQtNGA0LXRgdC+0LLQsNC90L3Ri9C1INC4INC00L7RgdGC0YPQv9C90YvQtSDQvdC10L7Qv9GA0LXQtNC10LvQtdC90L3QvtC80YMg0LrRgNGD0LPRgyDQu9C40YYgKNCT0L7RgdGC0Y/QvCDQuC/QuNC70Lgg0LTRgNGD0LPQuNC8INCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRj9C8KS48YnI+XFxcXG4gICAgICAgICAgICA8YnI+XFxcXG4gICAgICAgICAgICA8c3Ryb25nPtCU0L7Qs9C+0LLQvtGAPC9zdHJvbmc+IOKAkyDRgdC+0LPQu9Cw0YjQtdC90LjQtSwg0YTQvtGA0LzQuNGA0YPQtdC80L7QtSDQv9GA0Lgg0KDQtdCz0LjRgdGC0YDQsNGG0LjQuCDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAg0Lgg0LLRgdGC0YPQv9Cw0Y7RidC10LUg0LIg0YHQuNC70YNcXFxcbiAgICAgICAgICAgINCyINC80L7QvNC10L3RgiDQvtC/0LvQsNGC0Ysg0L/QtdGA0LLQvtCz0L4g0YHRh9C10YLQsCDQt9CwINCj0YHQu9GD0LPQuC48L3A+XFxcXG5cXFxcbiAgICAgICAgPGJyPlxcXFxuXFxcXG4gICAgICAgIDxwPjxzdHJvbmc+Mi4g0J7QkdCp0JjQlSDQn9Ce0JvQntCW0JXQndCY0K88L3N0cm9uZz48L3A+XFxcXG5cXFxcbiAgICAgICAgPHA+Mi4xINCa0L7QvNC/0LDQvdC40Y8g0L/RgNC10LTQvtGB0YLQsNCy0LvRj9C10YIg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GOL9Ca0LvQuNC10L3RgtGDL9CT0L7RgdGC0Y4g0L3QsCDRg9GB0LvQvtCy0LjRj9GFINC90LDRgdGC0L7Rj9GJ0LXQuSDQntGE0LXRgNGC0YssINCU0L7Qs9C+0LLQvtGA0LAg0Lgg0JTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvRhVxcXFxuICAgICAgICAgICAg0YHQvtCz0LvQsNGI0LXQvdC40LksINC/0YDQuNC70L7QttC10L3QuNC5INC/0YDQsNCy0L4g0L3QsCDQv9C+0LvRjNC30L7QstCw0L3QuNC1INCj0YHQu9GD0LPQsNC80Lgg0KHQsNC50YLQsCDRgSDQstC+0LfQvNC+0LbQvdC+0YHRgtGM0Y4g0YDQsNC30LzQtdGJ0LDRgtGMLCDQvtGB0YPRidC10YHRgtCy0LvRj9GC0Ywg0L/QvtC40YHQuiDQuFxcXFxuICAgICAgICAgICAg0L/RgNC+0YHQvNC+0YLRgCDQmNC90YTQvtGA0LzQsNGG0LjQuCDQtNGA0YPQs9C40YUg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9C10LlcXFxcXFzQmtC70LjQtdC90YLQvtCyLjxicj5cXFxcbiAgICAgICAgICAgIDIuMiDQktGB0LUg0YHQtNC10LvQutC4OiDCq9Cf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjC/QmtC70LjQtdC90YIg4oCTINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjC/QmtC70LjQtdC90YLCuyDQu9C40LHQviDCq9Cf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjC/QmtC70LjQtdC90YIg4oCTINCT0L7RgdGC0YzCuyDQt9Cw0LrQu9GO0YfQsNGO0YLRgdGPXFxcXG4gICAgICAgICAgICDQvdCw0L/RgNGP0LzRg9GOLiDQn9GA0Lgg0Y3RgtC+0LwsINCa0L7QvNC/0LDQvdC40Y8g0L3QtSDRj9Cy0LvRj9C10YLRgdGPINGD0YfQsNGB0YLQvdC40LrQvtC8INGC0LDQutC40YUg0YHQtNC10LvQvtC6LCDQsCDQv9GA0LXQtNC+0YHRgtCw0LLQu9GP0LXRgiDQu9C40YjRjCDQutC+0LzQvNGD0L3QuNC60LDRhtC40L7QvdC90YPRjlxcXFxuICAgICAgICAgICAg0L/Qu9Cw0YLRhNC+0YDQvNGDINC00LvRjyDQmNC90YTQvtGA0LzQsNGG0LjQuCDQn9C+0LvRjNC30L7QstCw0YLQtdC70LXQuS/QmtC70LjQtdC90YLQvtCyLjxicj5cXFxcbiAgICAgICAgICAgIDIuMyDQo9GB0LvRg9Cz0Lgg0L3QtSDQv9GA0LXQtNC+0YHRgtCw0LLQu9GP0Y7RgtGB0Y8g0Lgg0L3QtSDQtNC+0LvQttC90Ysg0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGM0YHRjyDQu9C40YbQsNC80Lgg0LzQu9Cw0LTRiNC1IDE4INC70LXRgiwg0LvQuNGG0LDQvNC4INC/0YDQuNC30L3QsNC90L3Ri9C80LhcXFxcbiAgICAgICAgICAgINC90LXQtNC10LXRgdC/0L7RgdC+0LHQvdGL0LzQuCwg0LAg0YLQsNC60LbQtSDQvtCz0YDQsNC90LjRh9C10L3QvdC+INC00LXQtdGB0L/QvtGB0L7QsdC90YvQvNC4INC70LjRhtCw0LzQuC4g0JvQuNGG0LAsINC90LUg0LTQvtGB0YLQuNCz0YjQuNC1IDE4INC70LXRgiwg0LjQu9C4INC70LjRhtCwLCDQv9GA0LjQt9C90LDQvdC90YvQtVxcXFxuICAgICAgICAgICAg0L3QtdC00LXQtdGB0L/QvtGB0L7QsdC90YvQvNC4INC40LvQuCDQvtCz0YDQsNC90LjRh9C10L3QviDQtNC10LXRgdC/0L7RgdC+0LHQvdGL0LzQuCwg0LzQvtCz0YPRgiDQv9C+0LvRjNC30L7QstCw0YLRjNGB0Y8g0KPRgdC70YPQs9Cw0LzQuCDRgtC+0LvRjNC60L4g0YEg0YHQvtCz0LvQsNGB0LjRjyDRgdCy0L7QuNGFINC30LDQutC+0L3QvdGL0YVcXFxcbiAgICAgICAgICAgINC/0YDQtdC00YHRgtCw0LLQuNGC0LXQu9C10LkuPC9wPlxcXFxuXFxcXG4gICAgICAgIDxicj5cXFxcblxcXFxuICAgICAgICA8cD48c3Ryb25nPjMuINCf0KDQkNCS0JjQm9CQINCf0J7Qm9Cs0JfQntCS0JDQndCY0K8g0KHQkNCZ0KLQntCcPC9zdHJvbmc+PC9wPlxcXFxuXFxcXG4gICAgICAgIDxwPjMuMS4g0JPQvtGB0YLRjCDQstC/0YDQsNCy0LUg0L/RgNC+0YHQvNCw0YLRgNC40LLQsNGC0Ywg0JjQvdGE0L7RgNC80LDRhtC40Y4g0J/QvtC70YzQt9C+0LLQsNGC0LXQu9C10Lkv0JrQu9C40LXQvdGC0L7Qsiwg0L3QsNGF0L7QtNGP0YnRg9GO0YHRjyDQsiDQvtGC0LrRgNGL0YLQvtC8INC00L7RgdGC0YPQv9C1LCDQuFxcXFxuICAgICAgICAgICAg0LLQvtGB0L/QvtC70YzQt9C+0LLQsNGC0YzRgdGPINGD0YHQu9GD0LPQsNC80LgsINGB0L7QtNC10YDQttCw0YnQuNC80LjRgdGPINCyINCY0L3RhNC+0YDQvNCw0YbQuNC4LCDQsdC10Lcg0KDQtdCz0LjRgdGC0YDQsNGG0LjQuCDQvdCwINCh0LDQudGC0LUuPGJyPlxcXFxuICAgICAgICAgICAgMy4yLiDQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywv0JrQu9C40LXQvdGCINC/0L7Qu9GD0YfQsNC10YIg0L/RgNCw0LLQviDQstC+0YHQv9C+0LvRjNC30L7QstCw0YLRjNGB0Y8g0KPRgdC70YPQs9Cw0LzQuCDQodCw0LnRgtCwINC/0L4g0YDQsNC30LzQtdGJ0LXQvdC40Y4g0JjQvdGE0L7RgNC80LDRhtC40Lgg0LTQu9GPINC00L7RgdGC0YPQv9CwXFxcXG4gICAgICAgICAgICDQuiDQvdC10Lkg0L3QtdC+0L/RgNC10LTQtdC70LXQvdC90L7Qs9C+INC60YDRg9Cz0LAg0LvQuNGGLCDQv9C+0YHQu9C1INC/0YDQvtGF0L7QttC00LXQvdC40Y8g0L/RgNC+0YbQtdC00YPRgNGLINCg0LXQs9C40YHRgtGA0LDRhtC40Lgg4oCTINC00LvRjyDQkdC10YHQv9C70LDRgtC90YvRhSDQo9GB0LvRg9CzLCDQsCDRgtCw0LrQttC1LFxcXFxuICAgICAgICAgICAg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90L4sINC/0L7RgdC70LUg0L7RhNC+0YDQvNC70LXQvdC40Y8g0JTQvtCz0L7QstC+0YDQsCwg0LvQuNGB0YLQsCDQt9Cw0LrQsNC30LAg0Lgg0L7Qv9C70LDRgtGLINGB0YfQtdGC0LAgLSDQtNC70Y8g0J/Qu9Cw0YLQvdGL0YUg0KPRgdC70YPQsy48YnI+XFxcXG4gICAgICAgICAgICAzLjMuINCf0YDQuCDQoNC10LPQuNGB0YLRgNCw0YbQuNC4LCDQsCDRgtCw0LrQttC1INC+0YTQvtGA0LzQu9C10L3QuNC4INC00L7Qs9C+0LLQvtGA0LAg0Lgg0LvQuNGB0YLQsCDQt9Cw0LrQsNC30LAg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GML9Ca0LvQuNC10L3RgiDQt9Cw0L/QvtC70L3Rj9C10YIg0LLRgdC1XFxcXG4gICAgICAgICAgICDQvdC10L7QsdGF0L7QtNC40LzRi9C1INC/0L7Qu9GPINGB0L/QtdGG0LjQsNC70YzQvdGL0YUg0YTQvtGA0LwuINCd0LUg0LfQsNC/0L7Qu9C90LXQvdC40LUg0YXQvtGC0Y8g0LHRiyDQvtC00L3QvtCz0L4g0L7QsdGP0LfQsNGC0LXQu9GM0L3QvtCz0L4g0L/QvtC70Y8gKNCyINGCLtGHLiDQstCy0L7QtCDQvdC10LrQvtGA0YDQtdC60YLQvdGL0YVcXFxcbiAgICAgICAgICAgINC00LDQvdC90YvRhSkg0LLQu9C10YfQtdGCINC90LXQtNC10LnRgdGC0LLQuNGC0LXQu9GM0L3QvtGB0YLRjCDRgNC10LPQuNGB0YLRgNCw0YbQuNC4INC70LjQsdC+INC70LjRgdGC0LAg0LfQsNC60LDQt9CwLjxicj5cXFxcbiAgICAgICAgICAgIDMuNC4g0J/QvtGB0LvQtSDQv9GA0L7RhdC+0LbQtNC10L3QuNGPINCg0LXQs9C40YHRgtGA0LDRhtC40Lgg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GML9Ca0LvQuNC10L3RgiDQv9C+0LvRg9GH0LDQtdGCINC90LAg0YPQutCw0LfQsNC90L3Ri9C5INC40Lwg0L3QvtC80LXRgCDQvNC+0LHQuNC70YzQvdC+0LPQviDRgtC10LvQtdGE0L7QvdCwXFxcXG4gICAgICAgICAgICDQn9CQ0KDQntCb0KwsINC60L7RgtC+0YDRi9C5INCyINC00LDQu9GM0L3QtdC50YjQtdC8INC40YHQv9C+0LvRjNC30YPQtdGC0YHRjyDQn9C+0LvRjNC30L7QstCw0YLQtdC70LXQvC/QmtC70LjQtdC90YLQvtC8INC00LvRjyDQkNCy0YLQvtGA0LjQt9Cw0YbQuNC4INC4INCy0YXQvtC00LAg0LIg0JvQuNGH0L3Ri9C5XFxcXG4gICAgICAgICAgICDQutCw0LHQuNC90LXRgi48YnI+XFxcXG4gICAgICAgICAgICAzLjUuINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjC/QmtC70LjQtdC90YIg0L3QtdGB0LXRgiDQv9C+0LvQvdGD0Y4g0L7RgtCy0LXRgtGB0YLQstC10L3QvdC+0YHRgtGMINC30LAg0LLRgdC1INC00LXQudGB0YLQstC40Y8g0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCDQtdCz0L4g0JvQvtCz0LjQvdCwICjQvdC+0LzQtdGAXFxcXG4gICAgICAgICAgICDQvNC+0LHQuNC70YzQvdC+0LPQviDRgtC10LvQtdGE0L7QvdCwKSDQuCDQn9Cw0YDQvtC70Y8uINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjC/QmtC70LjQtdC90YIg0LjQvNC10LXRgiDQv9GA0LDQstC+INC/0L7Qu9GM0LfQvtCy0LDRgtGM0YHRjyDQo9GB0LvRg9Cz0LDQvNC4INCh0LDQudGC0LAg0YLQvtC70YzQutC+INC/0YDQuCDQv9C+0LzQvtGJ0LhcXFxcbiAgICAgICAgICAgINGB0L7QsdGB0YLQstC10L3QvdC+0LPQviDQvdC+0LzQtdGA0LAg0LzQvtCx0LjQu9GM0L3QvtCz0L4g0YLQtdC70LXRhNC+0L3QsCDQuCDQv9Cw0YDQvtC70Y8uPGJyPlxcXFxuICAgICAgICAgICAgMy42LiDQn9GA0Lgg0L/QvtC70YzQt9C+0LLQsNC90LjQuCDQodCw0LnRgtC+0LwgPHN0cm9uZz7Ql9CQ0J/QoNCV0KnQldCd0J46PC9zdHJvbmc+PGJyPlxcXFxuICAgICAgICAgICAgLSDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0LDQstGC0L7QvNCw0YLQuNGH0LXRgdC60LjQtSDQv9GA0L7Qs9GA0LDQvNC80Ysg0LTQu9GPINC/0L7Qu9GD0YfQtdC90LjRjyDQtNC+0YHRgtGD0L/QsCDQvdCwINCh0LDQudGCOzxicj5cXFxcbiAgICAgICAgICAgIC0g0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMINC60L7QvNC/0YzRjtGC0LXRgNC90YvQtSDQv9GA0L7Qs9GA0LDQvNC80YssINC/0L7Qt9Cy0L7Qu9GP0Y7RidC40LUg0YDQsNC30LzQtdGJ0LDRgtGMINC90LAg0KHQsNC50YLQtSDQmNC90YTQvtGA0LzQsNGG0LjRjiwg0LzQuNC90YPRjyDQvtCx0YvRh9C90YvQuSDQv9C+0YDRj9C00L7QulxcXFxuICAgICAgICAgICAg0YDQsNC30LzQtdGJ0LXQvdC40Y8gKNC6INC/0YDQuNC80LXRgNGDINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC1INC/0YDQvtCz0YDQsNC80Lwg0L/QviDQsNCy0YLQvtC30LDQs9GA0YPQt9C60LUg0JjQvdGE0L7RgNC80LDRhtC40LgpOzxicj5cXFxcbiAgICAgICAgICAgIC0g0L/RgNC10LTQv9GA0LjQvdC40LzQsNGC0Ywg0LrQsNC60LjQtS3Qu9C40LHQviDQtNC10LnRgdGC0LLQuNGPLCDQutC+0YLQvtGA0YvQtSDQvNC+0LPRg9GCINC/0YDQuNCy0LXRgdGC0Lgg0Log0L3QtdC/0YDQvtC/0L7RgNGG0LjQvtC90LDQu9GM0L3QviDQsdC+0LvRjNGI0L7QuSDQvdCw0LPRgNGD0LfQutC1INC90LBcXFxcbiAgICAgICAgICAgINC40L3RhNGA0LDRgdGC0YDRg9C60YLRg9GA0YMg0KHQsNC50YLQsDs8YnI+XFxcXG4gICAgICAgICAgICAtINC60L7Qv9C40YDQvtCy0LDRgtGMLCDQstC+0YHQv9GA0L7QuNC30LLQvtC00LjRgtGMLCDQuNC30LzQtdC90Y/RgtGMLCDRgNCw0YHQv9GA0L7RgdGC0YDQsNC90Y/RgtGMINC4INC/0YDQtdC00YHRgtCw0LLQu9GP0YLRjCDQvtCx0YnQtdGB0YLQstC10L3QvdC+0YHRgtC4INC70Y7QsdGD0Y4g0LjQvdGE0L7RgNC80LDRhtC40Y4sXFxcXG4gICAgICAgICAgICDRgdC+0LTQtdGA0LbQsNGJ0YPRjtGB0Y8g0L3QsCDQodCw0LnRgtC1ICjQutGA0L7QvNC1INCh0LLQtdC00LXQvdC40LksINC/0YDQtdC00L7RgdGC0LDQstC70LXQvdC90YvRhSDRgdCw0LzQuNC8INCf0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC8L9Ca0LvQuNC10L3RgtC+0LwpINCx0LXQtyDQv9GA0LXQtNCy0LDRgNC40YLQtdC70YzQvdC+0LPQvlxcXFxuICAgICAgICAgICAg0L/QuNGB0YzQvNC10L3QvdC+0LPQviDRgNCw0LfRgNC10YjQtdC90LjRjyDQmtC+0LzQv9Cw0L3QuNC4Ozxicj5cXFxcbiAgICAgICAgICAgIC0g0L/RgNC10L/Rj9GC0YHRgtCy0L7QstCw0YLRjCDRgNCw0LHQvtGC0LUg0KHQsNC50YLQsCwg0LAg0YLQsNC60LbQtSDQv9GA0LXQv9GP0YLRgdGC0LLQvtCy0LDRgtGMINC00LXQudGB0YLQstC40Y4g0LDQstGC0L7QvNCw0YLQuNGH0LXRgdC60LjRhSDRgdC40YHRgtC10Lwg0LjQu9C4INC/0YDQvtGG0LXRgdGB0L7Qsiwg0YEg0YbQtdC70YzRjlxcXFxuICAgICAgICAgICAg0LLQvtGB0L/RgNC10L/Rj9GC0YHRgtCy0L7QstCw0YLRjCDQuNC70Lgg0L7Qs9GA0LDQvdC40YfQuNGC0Ywg0LTQvtGB0YLRg9C/INC90LAg0KHQsNC50YI7PGJyPlxcXFxuICAgICAgICAgICAgLSDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0YHQstC10LTQtdC90LjRjywg0L/RgNC10LTQvtGB0YLQsNCy0LvQtdC90L3Ri9C1INC00YDRg9Cz0LjQvCDQn9C+0LvRjNC30L7QstCw0YLQtdC70LXQvC/QmtC70LjQtdC90YLQvtC8LCDQsdC10Lcg0L/QuNGB0YzQvNC10L3QvdC+0LPQviDRgNCw0LfRgNC10YjQtdC90LjRj1xcXFxuICAgICAgICAgICAg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GPL9Ca0LvQuNC10L3RgtCwLCDRgNCw0LfQvNC10YHRgtC40LLRiNC10LPQviDRgtCw0LrQuNC1INGB0LLQtdC00LXQvdC40Y8sINC40LvQuCDQsdC10Lcg0L/QvtC00YLQstC10YDQttC00LXQvdC40Y8g0LrQsNC60LjQvC3Qu9C40LHQviDQtNGA0YPQs9C40Lwg0YHQv9C+0YHQvtCx0L7QvCDQv9GA0LDQstCwXFxcXG4gICAgICAgICAgICDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0YLQsNC60LjQtSDRgdCy0LXQtNC10L3QuNGPLiDQktGB0LUg0YHQstC10LTQtdC90LjRjywg0L/QvtC70YPRh9C10L3QvdGL0LUg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9C10Lwv0JrQu9C40LXQvdGC0L7QvCDQviDQtNGA0YPQs9C40YUg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GP0YUg0LIg0YHQstGP0LfQuFxcXFxuICAgICAgICAgICAg0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCDQodCw0LnRgtCwLCDQvNC+0LPRg9GCINCx0YvRgtGMINC40YHQv9C+0LvRjNC30L7QstCw0L3RiyDRgtC+0LvRjNC60L4g0LTQu9GPINGB0L7QstC10YDRiNC10L3QuNGPINC4INC40YHQv9C+0LvQvdC10L3QuNGPINGB0LTQtdC70L7QuiDQsiDQvtGC0L3QvtGI0LXQvdC40Lgg0YPRgdC70YPQsyxcXFxcbiAgICAgICAgICAgINGB0L7QtNC10YDQttCw0YnQuNGF0YHRjyDQsiDQmNC90YTQvtGA0LzQsNGG0LjQuCDQn9C+0LvRjNC30L7QstCw0YLQtdC70LXQuS/QmtC70LjQtdC90YLQvtCyLiDQotCw0LrQuNC8INC+0LHRgNCw0LfQvtC8LCDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y4v0JrQu9C40LXQvdGC0YMg0L3QtSDRgNCw0LfRgNC10YjQsNC10YLRgdGPXFxcXG4gICAgICAgICAgICDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0Y3Qu9C10LrRgtGA0L7QvdC90YvQuSDQsNC00YDQtdGBLCDRgNC+0LLQvdC+LCDQutCw0Log0Lgg0L3QvtC80LXRgCDRgtC10LvQtdGE0L7QvdCwINC00YDRg9Cz0L7Qs9C+INCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy/QmtC70LjQtdC90YLQsCDQtNC70Y8g0YbQtdC70LXQuSDQv9GA0Y/QvNC+0LlcXFxcbiAgICAgICAgICAgINGA0LXQutC70LDQvNC90L7QuSDRgNCw0YHRgdGL0LvQutC4INC40LvQuCDQtNGA0YPQs9C+0Lkg0YDQsNGB0YHRi9C70LrQuCDQvdC10LbQtdC70LDRgtC10LvRjNC90YvRhSDRjdC70LXQutGC0YDQvtC90L3Ri9GFINGB0L7QvtCx0YnQtdC90LjQuSwg0LAg0YLQsNC60LbQtSDQtNC70Y8g0LjQvdGL0YUg0L/RgNC+0YLQuNCy0L7Qv9GA0LDQstC90YvRhVxcXFxuICAgICAgICAgICAg0LTQtdC50YHRgtCy0LjQuSDQuNC70Lgg0LTQtdC50YHRgtCy0LjQuSwg0YHQvtCy0LXRgNGI0LDQtdC80YvRhSDQsdC10Lcg0LLQtdC00L7QvNCwINC4L9C40LvQuCDRgdC+0LPQu9Cw0YHQuNGPINC00YDRg9Cz0L7QuSDRgdGC0L7RgNC+0L3Rizs8YnI+XFxcXG4gICAgICAgICAgICAtINC90LDRgNGD0YjQsNGC0Ywg0LjQvdGE0L7RgNC80LDRhtC40L7QvdC90YPRjiDQsdC10LfQvtC/0LDRgdC90L7RgdGC0Ywg0KHQsNC50YLQsDs8YnI+XFxcXG4gICAgICAgICAgICAtINCy0L3QtdC00YDRj9GC0Ywg0LjRgdC/0L7Qu9C90Y/QtdC80YvQuSDQutC+0LQg0L3QsCDRgdGC0L7RgNC+0L3QtSDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAsINC70Y7QsdGL0LUg0LLQvdC10LTRgNGP0LXQvNGL0LUg0L7QsdGK0LXQutGC0YssINC40YHQv9C+0LvRjNC30L7QstCw0YLRjCBmcmFtZSDQuFxcXFxuICAgICAgICAgICAgaWZyYW1lLCDQutCw0YHQutCw0LTQvdGL0LUg0YLQsNCx0LvQuNGG0Ysg0YHRgtC40LvQtdC5LCBodG1sLdC60L7QtDs8YnI+XFxcXG4gICAgICAgICAgICAtINC/0YDQtdC00YHRgtCw0LLQu9GP0YLRjNGB0Y8g0YfRg9C20LjQvCDQuNC80LXQvdC10Lwg0LjQu9C4INC+0YIg0YfRg9C20L7Qs9C+INC40LzQtdC90Lgg4oCUINC30LDRgNC10LPQuNGB0YLRgNC40YDQvtCy0LDQvdC90L7Qs9C+INC90LAg0KHQsNC50YLQtSDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAsXFxcXG4gICAgICAgICAgICDRgdC+0YLRgNGD0LTQvdC40LrQsCDQmtC+0LzQv9Cw0L3QuNC4LiDQktCy0L7QtNC40YLRjCDQsiDQt9Cw0LHQu9GD0LbQtNC10L3QuNC1INC00YDRg9Cz0LjRhSDQn9C+0LvRjNC30L7QstCw0YLQtdC70LXQuVxcXFxcXNCa0LvQuNC10L3RgtC+0LIg0Lgg0LDQtNC80LjQvdC40YHRgtGA0LDRhtC40Y4g0KHQsNC50YLQsCDQvtGC0L3QvtGB0LjRgtC10LvRjNC90L5cXFxcbiAgICAgICAgICAgINGB0LLQvtC10Lkg0LjQtNC10L3RgtC40YTQuNC60LDRhtC40Lgg0LvRjtCx0YvQvCDQuNC90YvQvCDRgdC/0L7RgdC+0LHQvtC8PGJyPlxcXFxuICAgICAgICAgICAgLSDRgNCw0LfQvNC10YnQsNGC0Ywg0LTRg9Cx0LvQuNGA0YPRjtGJ0YPRjiDQmNC90YTQvtGA0LzQsNGG0LjRjiDQvtC00L3QvtCz0L4g0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GPL9Ca0LvQuNC10L3RgtCwINGBINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC10Lwg0YDQsNC30L3Ri9GFIEUtbWFpbCDQuCDQvdC+0LzQtdGA0L7QslxcXFxuICAgICAgICAgICAg0LzQvtCx0LjQu9GM0L3Ri9GFINGC0LXQu9C10YTQvtC90L7Qsjs8YnI+XFxcXG4gICAgICAgICAgICAtINC40YHQv9C+0LvRjNC30L7QstCw0YLRjCDQo9GB0LvRg9Cz0Lgg0KHQsNC50YLQsCDQtNC70Y8g0L3QtdC30LDQutC+0L3QvdC+0Lkg0LTQtdGP0YLQtdC70YzQvdC+0YHRgtC4INC70LjQsdC+INC00LXRj9GC0LXQu9GM0L3QvtGB0YLQuCwg0LrQvtGC0L7RgNCw0Y8g0LzQvtC20LXRgiDQv9GA0LjQstC10YHRgtC4INC6XFxcXG4gICAgICAgICAgICDQvdCw0YDRg9GI0LXQvdC40Y4g0JrQvtC80L/QsNC90LjQtdC5INC4L9C40LvQuCDQn9C+0LvRjNC30L7QstCw0YLQtdC70LXQvC/QmtC70LjQtdC90YLQvtC8INC00LXQudGB0YLQstGD0Y7RidC10LPQviDQt9Cw0LrQvtC90L7QtNCw0YLQtdC70YzRgdGC0LLQsCDQoNCkLjwvcD5cXFxcblxcXFxuICAgICAgICA8YnI+XFxcXG5cXFxcbiAgICAgICAgPHA+PHN0cm9uZz40LiDQn9Cg0JDQktCQINCYINCe0JHQr9CX0JDQndCd0J7QodCi0Jgg0J/QntCb0KzQl9Ce0JLQkNCi0JXQm9CvL9Ca0JvQmNCV0J3QotCQPC9zdHJvbmc+PC9wPlxcXFxuXFxcXG4gICAgICAgIDxwPjQuMS4mbmJzcDsmbmJzcDsmbmJzcDsg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GML9Ca0LvQuNC10L3RgiDQvtCx0Y/Qt9GD0LXRgtGB0Y86PGJyPlxcXFxuICAgICAgICAgICAgNC4xLjEuINCh0L7QsdC70Y7QtNCw0YLRjCDRgtGA0LXQsdC+0LLQsNC90LjRjywg0L7Qv9GA0LXQtNC10LvQtdC90L3Ri9C1INCyINC90LDRgdGC0L7Rj9GJ0LXQuSDQntGE0LXRgNGC0LUsINCU0L7Qs9C+0LLQvtGA0LUsINC70LjRgdGC0LUg0LfQsNC60LDQt9CwINC4INC40L3Ri9GFINC00L7QutGD0LzQtdC90YLQsNGFLFxcXFxuICAgICAgICAgICAg0L7Qv9GA0LXQtNC10LvRj9GO0YnQuNGFINC/0L7Qu9GM0LfQvtCy0LDQvdC40LUg0KHQsNC50YLQvtC8Ljxicj5cXFxcbiAgICAgICAgICAgIDQuMS4yLiDQn9GA0Lgg0KDQtdCz0LjRgdGC0YDQsNGG0LjQuCDQvdCwINCh0LDQudGC0LUg0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMINGC0L7Qu9GM0LrQviDRgNC10LDQu9GM0L3Ri9C1INC00LDQvdC90YvQtSDQviDRgdC10LHQtSDQuCDRgNCw0LfQvNC10YnQsNC10LzQvtC5INCY0L3RhNC+0YDQvNCw0YbQuNC4Ljxicj5cXFxcbiAgICAgICAgICAgIDQuMS4zLiDQodC70LXQtNC40YLRjCDQt9CwINGB0L7RhdGA0LDQvdC90L7RgdGC0YzRjiDRgdCy0L7QtdCz0L4g0J/QsNGA0L7Qu9GPINC4INC90LUg0YDQsNGB0LrRgNGL0LLQsNGC0Ywg0LXQs9C+INC/0L7RgdGC0L7RgNC+0L3QvdC40Lwg0LvQuNGG0LDQvC48YnI+XFxcXG4gICAgICAgICAgICA0LjEuNC4g0J3QtSDQv9C10YDQtdC00LDQstCw0YLRjCDQuNC70Lgg0L/RgNC+0LTQsNCy0LDRgtGMINGB0LLQvtC4INCj0YfQtdGC0L3Ri9C1INC00LDQvdC90YvQtSDQtNC70Y8g0JDQstGC0L7RgNC40LfQsNGG0LjQuCDQvdCwINCh0LDQudGC0LUg0YLRgNC10YLRjNC40Lwg0LvQuNGG0LDQvC48YnI+XFxcXG4gICAgICAgICAgICA0LjEuNS4g0J/RgNC4INGA0LDQt9C80LXRidC10L3QuNC4INCY0L3RhNC+0YDQvNCw0YbQuNC4INGB0L7QsdC70Y7QtNCw0YLRjCDRgtGA0LXQsdC+0LLQsNC90LjRjyDQtNC10LnRgdGC0LLRg9GO0YnQtdCz0L4g0LfQsNC60L7QvdC+0LTQsNGC0LXQu9GM0YHRgtCy0LAg0KDQpCwg0LIg0YIu0YcuINCk0JcgwqvQnlxcXFxuICAgICAgICAgICAg0YDQtdC60LvQsNC80LXCuyDQvtGCIDEzLjAzLjIwMDbQsy4g4oSWIDM4LdCk0JcuPGJyPlxcXFxuICAgICAgICAgICAgNC4xLjYuINCf0YDQtdC00L7RgdGC0LDQstC40YLRjCwg0L/QviDRgtGA0LXQsdC+0LLQsNC90LjRjiDQmtC+0LzQv9Cw0L3QuNC4LCDQtNC+0LrRg9C80LXQvdGC0LDQu9GM0L3QviDQv9C+0LTRgtCy0LXRgNC20LTRkdC90L3Ri9C1INGB0LLQtdC00LXQvdC40Y8g0L4g0YHQvtC+0YLQstC10YLRgdGC0LLQuNC4INCY0L3RhNC+0YDQvNCw0YbQuNC4XFxcXG4gICAgICAgICAgICDRgtGA0LXQsdC+0LLQsNC90LjRj9C8INC00LXQudGB0YLQstGD0Y7RidC10LPQviDQt9Cw0LrQvtC90L7QtNCw0YLQtdC70YzRgdGC0LLQsCDQoNCkLCDQsiDRgtC+0Lwg0YfQuNGB0LvQtSDQvdCw0LTQu9C10LbQsNGJ0LjQvCDQvtCx0YDQsNC30L7QvCDQt9Cw0LLQtdGA0LXQvdC90YvQtSDQutC+0L/QuNC4INC00LjQv9C70L7QvNC+0LIsXFxcXG4gICAgICAgICAgICDQu9C40YbQtdC90LfQuNC5LCDRgdC10YDRgtC40YTQuNC60LDRgtC+0LIsINGB0LLQuNC00LXRgtC10LvRjNGB0YLQsiDQviDRgNC10LPQuNGB0YLRgNCw0YbQuNC4LCDQsiDRgdC70YPRh9Cw0LUg0LXRgdC70Lgg0YPRgdC70YPQs9C4INC/0L7QtNC70LXQttCw0YIg0LvQuNGG0LXQvdC30LjRgNC+0LLQsNC90LjRjixcXFxcbiAgICAgICAgICAgINC+0LHRj9C30LDRgtC10LvRjNC90L7QuSDRgdC10YDRgtC40YTQuNC60LDRhtC40LgsINCz0L7RgdGD0LTQsNGA0YHRgtCy0LXQvdC90L7QuSDRgNC10LPQuNGB0YLRgNCw0YbQuNC4Ljxicj5cXFxcbiAgICAgICAgICAgIDQuMS43LiDQndC1INGA0LDQt9C80LXRidCw0YLRjCDQmNC90YTQvtGA0LzQsNGG0LjRjiwg0LLRhdC+0LTRj9GJ0YPRjiDQsiDCq9Ch0L/QuNGB0L7QuiDQt9Cw0L/RgNC10YnQtdC90L3QvtC5INC6INGA0LDQt9C80LXRidC10L3QuNGOINCY0L3RhNC+0YDQvNCw0YbQuNC4wrsuPGJyPlxcXFxuICAgICAgICAgICAgNC4xLjguINCd0LUg0YPQvdC40YfRgtC+0LbQsNGC0Ywg0Lgv0LjQu9C4INC90LUg0LjQt9C80LXQvdGP0YLRjCDQu9GO0LHRi9C1INC80LDRgtC10YDQuNCw0LvRiyDQvdCwINCh0LDQudGC0LUsINCw0LLRgtC+0YDQvtC8INC60L7RgtC+0YDRi9GFINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjC/QmtC70LjQtdC90YIg0L3QtVxcXFxuICAgICAgICAgICAg0Y/QstC70Y/QtdGC0YHRjy48YnI+XFxcXG4gICAgICAgICAgICA0LjEuOS4g0JfQsNC/0L7Qu9C90LjRgtGMINCy0YHQtSDQvdC10L7QsdGF0L7QtNC40LzRi9C1INGE0L7RgNC80Ysg0Lgg0L/RgNC10LTQvtGB0YLQsNCy0LjRgtGMINGC0L7Qu9GM0LrQviDRgdCy0L7QtSDQpNC+0YLQviAo0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GPKS/Qm9C+0LPQvtGC0LjQvyAo0JrQu9C40LXQvdGC0LApLlxcXFxuICAgICAgICAgICAg0JjQvdGE0L7RgNC80LDRhtC40Y8sINGB0L7QtNC10YDQttCw0YnQsNGPINC70LjRhtC10L3Qt9C40YDRg9C10LzRi9C1INCy0LjQtNGLINC00LXRj9GC0LXQu9GM0L3QvtGB0YLQuCwg0LTQvtC70LbQvdCwINGB0L7QtNC10YDQttCw0YLRjCDQvdC+0LzQtdGAINC70LjRhtC10L3Qt9C40LguIDQuMS4xMC4g0KDQsNC30LzQtdGJ0LDRgtGMXFxcXG4gICAgICAgICAgICDQmNC90YTQvtGA0LzQsNGG0LjRjiwg0YHQvtC+0YLQstC10YLRgdGC0LLRg9GO0YnRg9GOINC/0L4g0YHQvtC00LXRgNC20LDQvdC40Y4g0LLRi9Cx0YDQsNC90L3QvtC5INCg0YPQsdGA0LjQutC1L9C/0L7QtNGA0YPQsdGA0LjQutC1Ljxicj5cXFxcbiAgICAgICAgICAgIDQuMS4xMS4g0J7Qv9C70LDRh9C40LLQsNGC0Ywg0J/Qu9Cw0YLQvdGL0LUg0KPRgdC70YPQs9C4INCa0L7QvNC/0LDQvdC40Lgg0LIg0L/QvtGA0Y/QtNC60LUg0Lgg0YHRgNC+0LrQuCwg0L7Qv9GA0LXQtNC10LvQtdC90L3Ri9C1INCe0YTQtdGA0YLQvtC5LCDQlNC+0LPQvtCy0L7RgNC+0Lwg0Lgg0LvQuNGB0YLQvtC8XFxcXG4gICAgICAgICAgICDQt9Cw0LrQsNC30LAuPGJyPlxcXFxuICAgICAgICAgICAgNC4yLiAg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GML9Ca0LvQuNC10L3RgiDQuNC80LXQtdGCINC/0YDQsNCy0L46PGJyPlxcXFxuICAgICAgICAgICAgNC4yLjEg0J/QvtC70YPRh9Cw0YLRjCDQv9GA0LDQstC+INCy0L7RgdC/0L7Qu9GM0LfQvtCy0LDRgtGM0YHRjyDQn9C70LDRgtC90YvQvNC4INCj0YHQu9GD0LPQsNC80Lgg0KHQsNC50YLQsCDQv9C+0YHQu9C1INC/0L7Qu9C90L7QuSDQvtC/0LvQsNGC0Ysg0YHRh9C10YLQsCwg0LLRi9GB0YLQsNCy0LvQtdC90L3QvtCz0L4g0L/RgNC4XFxcXG4gICAgICAgICAgICDQvtGE0L7RgNC80LvQtdC90LjQuCDQu9C40YHRgtCwINC30LDQutCw0LfQsCDQvdCwINC00LDQvdC90YvQtSDQo9GB0LvRg9Cz0LguPGJyPlxcXFxuICAgICAgICAgICAgNC4yLjIuINCS0L7RgdC/0L7Qu9GM0LfQvtCy0LDRgtGM0YHRjyDRg9GB0LvRg9Cz0LDQvNC4INC80LXQvdC10LTQttC10YDQvtCyINCa0L7QvNC/0LDQvdC40Lgg0LTQu9GPINC+0LrQsNC30LDQvdC40Y8g0L/QvtC80L7RidC4INC/0YDQuCDQoNC10LPQuNGB0YLRgNCw0YbQuNC4LCDQutCw0Log0L/QviDRgtC10LvQtdGE0L7QvdGDOiArN1xcXFxuICAgICAgICAgICAgKDg0ODIpIDc0LTQ0LTE5LCDRgtCw0Log0Lgg0L3QtdC/0L7RgdGA0LXQtNGB0YLQstC10L3QvdC+INC/0YDQuCDQstGB0YLRgNC10YfQtS48YnI+XFxcXG4gICAgICAgICAgICA0LjIuMy4g0KDQsNC30LzQtdGJ0LDRgtGMINCY0L3RhNC+0YDQvNCw0YbQuNGOINC+0LEg0YPRgdC70YPQs9Cw0YUsINC60L7RgtC+0YDRi9C1INCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjC/QmtC70LjQtdC90YIg0LzQvtC20LXRgiDQvtC60LDQt9GL0LLQsNGC0YwsINC40LzQtdGPINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LjQtVxcXFxuICAgICAgICAgICAg0L3QsNCy0YvQutC4LCDQvtCx0YDQsNC30L7QstCw0L3QuNC1INC4INGA0LDQt9GA0LXRiNC10L3QuNGPLiA0LjIuNC4g0KDQsNC30YDQtdGI0LjRgtGMINC+0L/Qu9Cw0YLRgyDRgdGH0LXRgtCwINC30LAg0J/Qu9Cw0YLQvdGL0LUg0KPRgdC70YPQs9C4INGC0YDQtdGC0YzQtdC80YMg0LvQuNGG0YNcXFxcbiAgICAgICAgICAgICjQn9C70LDRgtC10LvRjNGJ0LjQutGDKSDRgSDRg9GH0LXRgtC+0Lwg0YLRgNC10LHQvtCy0LDQvdC40Lkg0LTQtdC50YHRgtCy0YPRjtGJ0LXQs9C+INC30LDQutC+0L3QvtC00LDRgtC10LvRjNGB0YLQstCwINC4INC+0YTQvtGA0LzQu9C10L3QvdC+0LPQviDQtNC+0LPQvtCy0L7RgNCwLiA0LjMuINCa0L7QvNC/0LDQvdC40Y9cXFxcbiAgICAgICAgICAgINC+0LHRj9C30YPQtdGC0YHRjzo8YnI+XFxcXG4gICAgICAgICAgICA0LjMuMS4g0J/RgNC10LTQvtGB0YLQsNCy0LjRgtGMINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRji/QmtC70LjQtdC90YLRgyDQv9GA0LDQstC+INC/0L7Qu9GM0LfQvtCy0LDRgtGM0YHRjyDQo9GB0LvRg9Cz0LDQvNC4INCh0LDQudGC0LAg0LIg0L/QvtGA0Y/QtNC60LUg0Lgg0YHRgNC+0LrQuCwg0L7Qv9GA0LXQtNC10LvQtdC90L3Ri9C80LhcXFxcbiAgICAgICAgICAgINCyINCe0YTQtdGA0YLQtSwg0JTQvtCz0L7QstC+0YDQtSDQuCDQu9C40YHRgtC1INC30LDQutCw0LfQsC48YnI+XFxcXG4gICAgICAgICAgICA0LjMuMi4g0J/RgNC10LTQvtGB0YLQsNCy0LjRgtGMINCy0L7Qt9C80L7QttC90L7RgdGC0Ywg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GP0Lwv0JrQu9C40LXQvdGC0LDQvCDRg9C/0YDQsNCy0LvRj9GC0Ywg0LTQvtGB0YLRg9C/0L7QvCDQuiDRgdCy0L7QuNC8INC/0LXRgNGB0L7QvdCw0LvRjNC90YvQvCDQtNCw0L3QvdGL0Lwg0LhcXFxcbiAgICAgICAgICAgINGA0LDQt9C80LXRidC10L3QvdC+0Lkg0JjQvdGE0L7RgNC80LDRhtC40LguPGJyPlxcXFxuICAgICAgICAgICAgNC40LiZuYnNwOyZuYnNwOyZuYnNwOyAg0JrQvtC80L/QsNC90LjRjyDQuNC80LXQtdGCINC/0YDQsNCy0L46PGJyPlxcXFxuICAgICAgICAgICAgNC40LjEuINCj0LTQsNC70LjRgtGMINCY0L3RhNC+0YDQvNCw0YbQuNGOLCDQt9Cw0LHQu9C+0LrQuNGA0L7QstCw0YLRjCDQtNC+0YHRgtGD0L8v0YPQtNCw0LvQuNGC0Ywg0KPRh9C10YLQvdGL0LUg0LTQsNC90L3Ri9C1INCf0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC5L9Ca0LvQuNC10L3RgtC+0LIsINC90LDRgNGD0YjQuNCy0YjQuNGFXFxcXG4gICAgICAgICAgICDQv9C+0LvQvtC20LXQvdC40Y8g0L3QsNGB0YLQvtGP0YnQtdC5INCe0YTQtdGA0YLRiywg0JTQvtCz0L7QstC+0YDQsCDQuCDQu9C40YHRgtCwINC30LDQutCw0LfQsCwg0LHQtdC3INC40LfQstC10YnQtdC90LjRjyDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAuPC9wPlxcXFxuXFxcXG4gICAgICAgIDxicj5cXFxcblxcXFxuICAgICAgICA8cD48c3Ryb25nPjUuINCY0J3QpNCe0KDQnNCQ0KbQmNCvLCDQl9CQ0J/QoNCV0KnQldCd0J3QkNCvINCaINCg0JDQl9Cc0JXQqdCV0J3QmNCuPC9zdHJvbmc+PC9wPlxcXFxuXFxcXG4gICAgICAgIDxwPjUuMS4g0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GOL9Ca0LvQuNC10L3RgtGDINC30LDQv9GA0LXRidC10L3QviDRgNCw0LfQvNC10YnQsNGC0YwsINCwINCyINGB0LvRg9GH0LDQtSDRgNCw0LfQvNC10YnQtdC90LjRjywg0L/QvtC00LvQtdC20LjRgiDRg9C00LDQu9C10L3QuNGOINCY0L3RhNC+0YDQvNCw0YbQuNGPLFxcXFxuICAgICAgICAgICAg0YHQvtC00LXRgNC20LDRidCw0Y86PC9wPlxcXFxuXFxcXG4gICAgICAgIDx1bD5cXFxcbiAgICAgICAgICAgIDxsaT5cXFxcbiAgICAgICAgICAgICAgICA8cD7Qu9C+0LbQvdGL0LUsINC90LXRgtC+0YfQvdGL0LUg0LjQu9C4INCy0LLQvtC00Y/RidC40LUg0LIg0LfQsNCx0LvRg9C20LTQtdC90LjQtSDRgdCy0LXQtNC10L3QuNGPOzwvcD5cXFxcbiAgICAgICAgICAgIDwvbGk+XFxcXG4gICAgICAgICAgICA8bGk+XFxcXG4gICAgICAgICAgICAgICAgPHA+0YHQstC10LTQtdC90LjRjywg0YHQv9C+0YHQvtCx0YHRgtCy0YPRjtGJ0LjQtSDQvNC+0YjQtdC90L3QuNGH0LXRgdGC0LLRgywg0L7QsdC80LDQvdGDINC40LvQuCDQt9C70L7Rg9C/0L7RgtGA0LXQsdC70LXQvdC40Y4g0LTQvtCy0LXRgNC40LXQvDs8L3A+XFxcXG4gICAgICAgICAgICA8L2xpPlxcXFxuICAgICAgICAgICAgPGxpPlxcXFxuICAgICAgICAgICAgICAgIDxwPtC+0YHQutC+0YDQsdC70LXQvdC40Y8g0YfRjNC10Lkt0LvQuNCx0L4g0YfQtdGB0YLQuCwg0LTQvtGB0YLQvtC40L3RgdGC0LLQsCDQuNC70Lgg0LTQtdC70L7QstC+0Lkg0YDQtdC/0YPRgtCw0YbQuNC4LCDQvdCw0YDRg9GI0LXQvdC40Y8g0YfQsNGB0YLQvdC+0Lkg0LbQuNC30L3QuDs8L3A+XFxcXG4gICAgICAgICAgICA8L2xpPlxcXFxuICAgICAgICAgICAgPGxpPlxcXFxuICAgICAgICAgICAgICAgIDxwPtC60LvQtdCy0LXRgtGDINC40LvQuCDRg9Cz0YDQvtC30Ysg0LrQvtC80YMg0LHRiyDRgtC+INC90Lgg0LHRi9C70L47PC9wPlxcXFxuICAgICAgICAgICAgPC9saT5cXFxcbiAgICAgICAgICAgIDxsaT5cXFxcbiAgICAgICAgICAgICAgICA8cD7QvdCw0YDRg9GI0LXQvdC40Y8g0LjQvdGC0LXQu9C70LXQutGC0YPQsNC70YzQvdGL0YUg0L/RgNCw0LIg0YLRgNC10YLRjNC40YUg0LvQuNGGLCDQv9GA0LDQsiDQvdCwINC40LfQvtCx0YDQsNC20LXQvdC40LUg0LPRgNCw0LbQtNCw0L3QuNC90LAsINC4INC40L3Ri9C1INC/0YDQsNCy0LAg0YLRgNC10YLRjNC40YVcXFxcbiAgICAgICAgICAgICAgICAgICAg0LvQuNGGOzwvcD5cXFxcbiAgICAgICAgICAgIDwvbGk+XFxcXG4gICAgICAgICAgICA8bGk+XFxcXG4gICAgICAgICAgICAgICAgPHA+0L/RgNC40LfRi9Cy0Ysg0Log0YHQvtCy0LXRgNGI0LXQvdC40Y4g0L/RgNC10YHRgtGD0L/Qu9C10L3QuNGPINC4INGA0LDQt9C20LjQs9Cw0L3QuNGOINC80LXQttC90LDRhtC40L7QvdCw0LvRjNC90L7QuSDRgNC+0LfQvdC4OzwvcD5cXFxcbiAgICAgICAgICAgIDwvbGk+XFxcXG4gICAgICAgICAgICA8bGk+XFxcXG4gICAgICAgICAgICAgICAgPHA+0YHQstC10LTQtdC90LjRjywg0YHQv9C+0YHQvtCx0YHRgtCy0YPRjtGJ0LjQtSwg0L/QvtC00LTQtdGA0LbQuNCy0LDRjtGJ0LjQtSDQuNC70Lgg0L/RgNC40LfRi9Cy0LDRjtGJ0LjQtSDQuiDRgtC10YDRgNC+0YDQuNGB0YLQuNGH0LXRgdC60L7QuSDQuCDRjdC60YHRgtGA0LXQvNC40YHRgtGB0LrQvtC5XFxcXG4gICAgICAgICAgICAgICAgICAgINC00LXRj9GC0LXQu9GM0L3QvtGB0YLQuDs8L3A+XFxcXG4gICAgICAgICAgICA8L2xpPlxcXFxuICAgICAgICAgICAgPGxpPlxcXFxuICAgICAgICAgICAgICAgIDxwPtGB0LLQtdC00LXQvdC40Y8g0L3QtdC/0YDQuNGB0YLQvtC50L3Ri9C1LCDQu9C40LHQviDQvdC+0YHRj9GJ0LjQtSDRhdCw0YDQsNC60YLQtdGAINC/0L7RgNC90L7Qs9GA0LDRhNC40Lg7PC9wPlxcXFxuICAgICAgICAgICAgPC9saT5cXFxcbiAgICAgICAgICAgIDxsaT5cXFxcbiAgICAgICAgICAgICAgICA8cD7QutC+0LzQv9GM0Y7RgtC10YDQvdGL0LUg0LLQuNGA0YPRgdGLLCDQsCDRgtCw0LrQttC1INC40L3Ri9C1INC60L7QvNC/0YzRjtGC0LXRgNC90YvQtSDQv9GA0L7Qs9GA0LDQvNC80YssINC90LDQv9GA0LDQstC70LXQvdC90YvQtSwg0LIg0YfQsNGB0YLQvdC+0YHRgtC4LCDQvdCwINC90LDQvdC10YHQtdC90LjQtVxcXFxuICAgICAgICAgICAgICAgICAgICDQstGA0LXQtNCwLCDQvdC10YPQv9C+0LvQvdC+0LzQvtGH0LXQvdC90L7QtSDQstGC0L7RgNC20LXQvdC40LUsINGC0LDQudC90YvQuSDQv9C10YDQtdGF0LLQsNGCINC70LjQsdC+INC/0YDQuNGB0LLQvtC10L3QuNC1INC00LDQvdC90YvRhSDQu9GO0LHQvtC5INGB0LjRgdGC0LXQvNGLINC70LjQsdC+INGB0LDQvNC+0LlcXFxcbiAgICAgICAgICAgICAgICAgICAg0YHQuNGB0YLQtdC80YssINC70LjQsdC+INC10LUg0YfQsNGB0YLQuCwg0LvQuNCx0L4g0LvQuNGH0L3QvtC5INC40L3RhNC+0YDQvNCw0YbQuNC4INC40LvQuCDQuNC90YvRhSDQtNCw0L3QvdGL0YUgKNCy0LrQu9GO0YfQsNGPINC00LDQvdC90YvQtSDQmtC+0LzQv9Cw0L3QuNC4KTs8L3A+XFxcXG4gICAgICAgICAgICA8L2xpPlxcXFxuICAgICAgICAgICAgPGxpPlxcXFxuICAgICAgICAgICAgICAgIDxwPtCh0LLQtdC00LXQvdC40Y8sINC/0YDQuNGH0LjQvdGP0Y7RidC40LUg0LLRgNC10LQg0JrQvtC80L/QsNC90LjQuCwg0YHRgtCw0LIg0L/RgNC40YfQuNC90L7QuSDQv9C+0LvQvdC+0Lkg0LvQuNCx0L4g0YfQsNGB0YLQuNGH0L3QvtC5INC/0L7RgtC10YDQuCDQmtC+0LzQv9Cw0L3QuNC10Lkg0YPRgdC70YPQs1xcXFxuICAgICAgICAgICAgICAgICAgICDQv9GA0L7QstCw0LnQtNC10YDQvtCyINGB0LXRgtC4INC40L3RgtC10YDQvdC10YIsINC70LjQsdC+INGD0YHQu9GD0LMg0LvRjtCx0YvRhSDQuNC90YvRhSDQu9C40YY7PC9wPlxcXFxuICAgICAgICAgICAgPC9saT5cXFxcbiAgICAgICAgICAgIDxsaT5cXFxcbiAgICAgICAgICAgICAgICA8cD7RgdCy0LXQtNC10L3QuNGPLCDQuNC90YvQvCDQvtCx0YDQsNC30L7QvCDQvdCw0YDRg9GI0LDRjtGJ0LjQtSDQtNC10LnRgdGC0LLRg9GO0YnQtdC1INC30LDQutC+0L3QvtC00LDRgtC10LvRjNGB0YLQstC+INCg0KQuPC9wPlxcXFxuICAgICAgICAgICAgPC9saT5cXFxcbiAgICAgICAgPC91bD5cXFxcblxcXFxuICAgICAgICA8cD41LjIuINCj0LTQsNC70LXQvdC40LUg0JjQvdGE0L7RgNC80LDRhtC40Lgg0L/RgNC+0LjQt9Cy0L7QtNC40YLRgdGPINCa0L7QvNC/0LDQvdC40LXQuSDQsiDQu9GO0LHQvtC1INCy0YDQtdC80Y8g0LHQtdC3INC40LfQstC10YnQtdC90LjRjyDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAuPC9wPlxcXFxuXFxcXG4gICAgICAgIDxicj5cXFxcblxcXFxuICAgICAgICA8cD48c3Ryb25nPjYuINCe0J/Qm9CQ0KLQkCDQn9Cb0JDQotCd0KvQpSDQo9Ch0JvQo9CTPC9zdHJvbmc+PC9wPlxcXFxuXFxcXG4gICAgICAgIDxwPjYuMS4g0J/QvtGB0LvQtSDQvtGE0L7RgNC80LvQtdC90LjRjyDQu9C40YHRgtCwINC30LDQutCw0LfQsCDQvdCwINC/0L7Qu9GM0LfQvtCy0LDQvdC40LUg0J/Qu9Cw0YLQvdGL0LzQuCDQo9GB0LvRg9Cz0LDQvNC4INCh0LDQudGC0LAg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GML9Ca0LvQuNC10L3RgiDQu9C40LHQviDQn9C70LDRgtC10LvRjNGJ0LjQulxcXFxuICAgICAgICAgICAgKNC/0YDQuCDQvdCw0LvQuNGH0LjQuCksINC/0L7Qu9GD0YfQsNC10YIg0YHRh9C10YIg0Lgg0LLRi9Cx0LjRgNCw0LXRgiDRgdC/0L7RgdC+0LEg0LXQs9C+INC+0L/Qu9Cw0YLRiyDQuNC3INC/0YDQtdC00LvQvtC20LXQvdC90L7Qs9C+INC90LAg0KHQsNC50YLQtSDRgdC/0LjRgdC60LAuINCh0YfQtdGCINC90LXQvtCx0YXQvtC00LjQvNC+XFxcXG4gICAgICAgICAgICDQvtC/0LvQsNGC0LjRgtGMINCyINGD0LrQsNC30LDQvdC90YvQuSDQsiDQvdC10Lwg0YHRgNC+0LouIDYuMi4g0KHRgNC+0Log0L/QvtC70YzQt9C+0LLQsNC90LjRjyDQn9C70LDRgtC90YvQvNC4INCj0YHQu9GD0LPQsNC80Lgg0L3QsNGH0LjQvdCw0LXRgtGB0Y8g0YEg0LTQsNGC0Ysg0L7Qv9C70LDRgtGLINGB0YfQtdGC0LAuXFxcXG4gICAgICAgICAgICDQldGB0LvQuCDQv9GA0Lgg0KDQtdCz0LjRgdGC0YDQsNGG0LjQuCDQvdC1INCx0YvQu9C4INC30LDQv9C+0LvQvdC10L3RiyDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdGL0LUg0L/QvtC70Y8g0LjQu9C4INC/0L7Qu9GPINCx0YvQu9C4INC30LDQv9C+0LvQvdC10L3RiyDQvdC10LrQvtGA0YDQtdC60YLQvdC+LCDQvdC1INCx0YvQu9CwXFxcXG4gICAgICAgICAgICDQt9Cw0LPRgNGD0LbQtdC90LAg0YTQvtGC0L7Qs9GA0LDRhNC40Y8g0LjQu9C4INC40L3Ri9C8INC+0LHRgNCw0LfQvtC8INC90LDRgNGD0YjQtdC90Ysg0L/RgNCw0LLQuNC70LAg0KDQtdCz0LjRgdGC0YDQsNGG0LjQuCwg0JjQvdGE0L7RgNC80LDRhtC40Y8g0L3QtSDQvtGC0YDQsNC20LDQtdGC0YHRjyDQvdCwINCh0LDQudGC0LUg0LTQvlxcXFxuICAgICAgICAgICAg0LzQvtC80LXQvdGC0LAg0LLQvdC10YHQtdC90LjRjyDRgdC+0L7RgtCy0LXRgtGB0YLQstGD0Y7RidC40YUg0LjRgdC/0YDQsNCy0LvQtdC90LjQuSwg0L/RgNC4INGN0YLQvtC8INGB0YDQvtC6INC90LDRh9Cw0LvQsCDQv9C+0LvRjNC30L7QstCw0L3QuNGPINCf0LvQsNGC0L3Ri9C80Lgg0KPRgdC70YPQs9Cw0LzQuCDQvdC1XFxcXG4gICAgICAgICAgICDQv9GA0L7QtNC70Y/QtdGC0YHRjyDQvdCwINGB0YDQvtC6LCDQsiDRgtC10YfQtdC90LjQtSDQutC+0YLQvtGA0L7Qs9C+INCY0L3RhNC+0YDQvNCw0YbQuNGPINC90LUg0L7RgtC+0LHRgNCw0LbQsNC70LDRgdGMINC90LAg0KHQsNC50YLQtSDQv9C+INCy0LjQvdC1INCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy/QmtC70LjQtdC90YLQsC5cXFxcbiAgICAgICAgICAgIDYuMy4g0JrQsNC20LTRi9C5INGB0L/QvtGB0L7QsSDQvtC/0LvQsNGC0Ysg0YHQvtC/0YDQvtCy0L7QttC00LDQtdGC0YHRjyDQv9C+0LTRgNC+0LHQvdC+0Lkg0LjQvdGB0YLRgNGD0LrRhtC40LXQuSwg0YDQsNC30LzQtdGJ0LXQvdC90L7QuSDQvdCwINCh0LDQudGC0LUuINCf0YDQuCDRjdGC0L7QvCDQmtC+0LzQv9Cw0L3QuNGPINC90LVcXFxcbiAgICAgICAgICAgINC90LXRgdC10YIg0L7RgtCy0LXRgtGB0YLQstC10L3QvdC+0YHRgtGMINC30LAg0LTQtdC50YHRgtCy0LjRjyDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAv0J/Qu9Cw0YLQtdC70YzRiNC40LrQsCDQv9GA0Lgg0L7Qv9C70LDRgtC1INGB0YfQtdGC0LAsINCyINGB0LvQtdC00YHRgtCy0LjQtSDQutC+0YLQvtGA0YvRhVxcXFxuICAgICAgICAgICAg0LTQtdC90LXQttC90YvQtSDRgdGA0LXQtNGB0YLQstCwINC90LUg0L/QvtGB0YLRg9C/0LjQu9C4INC90LAg0YHRh9C10YIg0JrQvtC80L/QsNC90LjQuCwg0Lgg0Y3RgtC4INGB0YPQvNC80Ysg0JrQvtC80L/QsNC90LjRjyDQvdC1INC60L7QvNC/0LXQvdGB0LjRgNGD0LXRgiDQuCDQvdC1INCy0L7Qt9Cy0YDQsNGJ0LDQtdGCLjxicj5cXFxcbiAgICAgICAgICAgIDYuNC4g0J7Qv9C70LDRgtCwINCj0YHQu9GD0LMg0YHQsNC50YLQsCDQv9GA0L7QuNC30LLQvtC00LjRgtGB0Y8g0LIg0L/QvtGA0Y/QtNC60LUgMTAwJSDQv9GA0LXQtNC+0L/Qu9Cw0YLRiy4g0KPRgdC70YPQs9C4INGB0YfQuNGC0LDRjtGC0YHRjyDQvtC/0LvQsNGH0LXQvdC90YvQvNC4INCyINC80L7QvNC10L3RglxcXFxuICAgICAgICAgICAg0LjQt9Cy0LXRidC10L3QuNGPINCa0L7QvNC/0LDQvdC40Lgg0L7QsSDQvtC/0LvQsNGC0LUg0YHRh9C10YLQsC4g0JLQsNC70Y7RgtC+0Lkg0YDQsNGB0YfQtdGC0L7QsiDRj9Cy0LvRj9C10YLRgdGPINCg0L7RgdGB0LjQudGB0LrQuNC5INGA0YPQsdC70YwuPGJyPlxcXFxuICAgICAgICAgICAgNi41LiDQkiDRgdC70YPRh9Cw0LUg0L7RgtC60LDQt9CwINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy/QmtC70LjQtdC90YLQsCDQvtGCINC+0L/Qu9Cw0YfQtdC90L3Ri9GFINCj0YHQu9GD0LMg0KHQsNC50YLQsCDQtNC+INC+0LrQvtC90YfQsNC90LjRjyDRgdGA0L7QutCwINC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0LTQtdC90LXQttC90YvQtVxcXFxuICAgICAgICAgICAg0YHRgNC10LTRgdGC0LLQsCDQvdC1INCy0L7Qt9Cy0YDQsNGJ0LDRjtGC0YHRjy48L3A+XFxcXG5cXFxcbiAgICAgICAgPGJyPlxcXFxuXFxcXG4gICAgICAgIDxwPjxzdHJvbmc+Ny4g0J7Qk9Cg0JDQndCY0KfQldCd0JjQryDQntCi0JLQldCi0KHQotCS0JXQndCd0J7QodCi0Jg8L3N0cm9uZz48L3A+XFxcXG5cXFxcbiAgICAgICAgPHA+Ny4xLiDQkiDRgdC+0L7RgtCy0LXRgtGB0YLQstC40Lgg0YEg0YLRgNC10LHQvtCy0LDQvdC40Y/QvNC4INCk0LXQtNC10YDQsNC70YzQvdC+0LPQviDQt9Cw0LrQvtC90LAg0L7RgiAyNy4wNy4yMDA2INCzLiDihJYgMTUyLdCk0JcgwqvQniDQv9C10YDRgdC+0L3QsNC70YzQvdGL0YUg0LTQsNC90L3Ri9GFwrs6INCyXFxcXG4gICAgICAgICAgICDQv9GA0L7RhtC10YHRgdC1INC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0KPRgdC70YPQs9Cw0LzQuCDQodCw0LnRgtCwICjQsiDRgtC+0Lwg0YfQuNGB0LvQtSDQv9GA0Lgg0KDQtdCz0LjRgdGC0YDQsNGG0LjQuCwg0LLQt9Cw0LjQvNC+0LTQtdC50YHRgtCy0LjQuCDRgSDQtNGA0YPQs9C40LzQuFxcXFxuICAgICAgICAgICAg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GP0LzQuC/QmtC70LjQtdC90YLQsNC80Lgg0YfQtdGA0LXQtyDQuNC90YLQtdGA0YTQtdC50YEg0KHQsNC50YLQsCwg0YDQsNC30LzQtdGJ0LXQvdC40Lgg0JjQvdGE0L7RgNC80LDRhtC40LgsINC/0YDQvtGB0LzQvtGC0YDQtSDRgdGC0YDQsNC90LjRhiDQodCw0LnRgtCwINC4INGCLtC/LiksXFxcXG4gICAgICAgICAgICDQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0YHQsNC80L7RgdGC0L7Rj9GC0LXQu9GM0L3QviDQtNC+0LHRgNC+0LLQvtC70YzQvdC+INC/0YDQuNC90LjQvNCw0LXRgiDRgNC10YjQtdC90LjQtSDQviDQv9GA0LXQtNC+0YHRgtCw0LLQu9C10L3QuNC4INCa0L7QvNC/0LDQvdC40Lgg0L/QtdGA0YHQvtC90LDQu9GM0L3Ri9GFINC4INC40L3Ri9GFXFxcXG4gICAgICAgICAgICDQtNCw0L3QvdGL0YUg0L4g0J/QvtC70YzQt9C+0LLQsNGC0LXQu9C1ICjRhNCw0LzQuNC70LjRjywg0LjQvNGPLCDQvtGC0YfQtdGB0YLQstC+LCDQsNC00YDQtdGBINGN0LvQtdC60YLRgNC+0L3QvdC+0Lkg0L/QvtGH0YLRiywg0L3QvtC80LXRgCDQvNC+0LHQuNC70YzQvdC+0LPQviDRgtC10LvQtdGE0L7QvdCwLCDQsCDRgtCw0LrQttC1XFxcXG4gICAgICAgICAgICDQu9GO0LHQsNGPINC40L3QsNGPINC40L3RhNC+0YDQvNCw0YbQuNGPLCDQv9GA0LXQtNC+0YHRgtCw0LLQu9C10L3QvdCw0Y8g0J/QvtC70YzQt9C+0LLQsNGC0LXQu9C10LwsINC40L3RhNC+0YDQvNCw0YbQuNGPINC+INC00LXQudGB0YLQstC40Y/RhSDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L3QsCDQodCw0LnRgtC1INC4INC/0YAuKVxcXFxuICAgICAgICAgICAg0LTQu9GPINGG0LXQu9C10Lkg0LjRgdC/0L7Qu9C90LXQvdC40Y8g0J7RhNC10YDRgtGLLCDQsCDRgtCw0LrQttC1INC90LDRgdGC0L7Rj9GJ0LjQvCDQt9Cw0Y/QstC70Y/QtdGCINC+INGB0LLQvtC10Lwg0YHQvtCz0LvQsNGB0LjQuCDQvdCwINC+0LHRgNCw0LHQvtGC0LrRgyDQuCDRhdGA0LDQvdC10L3QuNC1INCa0L7QvNC/0LDQvdC40LXQuVxcXFxuICAgICAgICAgICAg0L/QtdGA0YHQvtC90LDQu9GM0L3Ri9GFINC4INC40L3Ri9GFINC00LDQvdC90YvRhSDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8sINC40YUg0L/QtdGA0LXQtNCw0YfRgyDQtNC70Y8g0L7QsdGA0LDQsdC+0YLQutC4INC00YDRg9Cz0LjQvCDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y/QvCDQuC/QuNC70Lgg0YLRgNC10YLRjNC40Lwg0LvQuNGG0LDQvCxcXFxcbiAgICAgICAgICAgINC00LXQudGB0YLQstGD0Y7RidC40Lwg0L/QviDQv9C+0YDRg9GH0LXQvdC40Y4g0JrQvtC80L/QsNC90LjQuCwg0LIg0YLQvtC8INGH0LjRgdC70LUg0LTQu9GPINGG0LXQu9C10Lk6INC/0L7Qu9GD0YfQtdC90LjRjyDRgdGC0LDRgtC40YHRgtC40YfQtdGB0LrQuNGFINC4INCw0L3QsNC70LjRgtC40YfQtdGB0LrQuNGFINC00LDQvdC90YvRhVxcXFxuICAgICAgICAgICAg0LTQu9GPINGD0LvRg9GH0YjQtdC90LjRjyDRhNGD0L3QutGG0LjQvtC90LjRgNC+0LLQsNC90LjRjyDQodCw0LnRgtCwINC4L9C40LvQuCDQo9GB0LvRg9CzLCDRgNCw0YHRiNC40YDQtdC90LjRjyDRgdC/0LXQutGC0YDQsCDQvtC60LDQt9GL0LLQsNC10LzRi9GFINCj0YHQu9GD0LMsINC/0L7Qu9GD0YfQtdC90LjRj1xcXFxuICAgICAgICAgICAg0LjQvdGE0L7RgNC80LDRhtC40L7QvdC90YvRhSDQuC/QuNC70Lgg0YDQtdC60LvQsNC80L3Ri9GFINGB0L7QvtCx0YnQtdC90LjQuSDQmtC+0LzQv9Cw0L3QuNC4INC40LvQuCDRgtGA0LXRgtGM0LjRhSDQu9C40YYsINC/0YDQtdC00YPQv9GA0LXQttC00LXQvdC40Y8g0LjQu9C4INC/0YDQtdGB0LXRh9C10L3QuNGPINC90LXQt9Cw0LrQvtC90L3Ri9GFXFxcXG4gICAgICAgICAgICDQuC/QuNC70Lgg0L3QtdGB0LDQvdC60YbQuNC+0L3QuNGA0L7QstCw0L3QvdGL0YUg0LTQtdC50YHRgtCy0LjQuSDQn9C+0LvRjNC30L7QstCw0YLQtdC70LXQuSDQuNC70Lgg0YLRgNC10YLRjNC40YUg0LvQuNGGLCDQvtCx0LXRgdC/0LXRh9C10L3QuNGPINGB0L7QsdC70Y7QtNC10L3QuNGPINGC0YDQtdCx0L7QstCw0L3QuNC5XFxcXG4gICAgICAgICAgICDQtNC10LnRgdGC0LLRg9GO0YnQtdCz0L4g0LfQsNC60L7QvdC+0LTQsNGC0LXQu9GM0YHRgtCy0LAg0KDQvtGB0YHQuNC50YHQutC+0Lkg0KTQtdC00LXRgNCw0YbQuNC4LiDQmtC+0LzQv9Cw0L3QuNGPINC/0YDQuNC90LjQvNCw0LXRgiDQstGB0LUg0L3QtdC+0LHRhdC+0LTQuNC80YvQtSDQvNC10YDRiyDQtNC70Y8g0LfQsNGJ0LjRgtGLXFxcXG4gICAgICAgICAgICDQv9C10YDRgdC+0L3QsNC70YzQvdGL0YUg0LTQsNC90L3Ri9GFINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvtGCINC90LXRgdCw0L3QutGG0LjQvtC90LjRgNC+0LLQsNC90L3QvtCz0L4g0LTQvtGB0YLRg9C/0LAg0YLRgNC10YLRjNC40YUg0LvQuNGGPGJyPlxcXFxuICAgICAgICAgICAgNy4yLiDQmtC+0LzQv9Cw0L3QuNGPINC90LUg0L7RgtCy0LXRh9Cw0LXRgiDQt9CwINCy0L7Qt9C80L7QttC90L7QtSDQvdC10YbQtdC70LXQstC+0LUg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LUg0LjQvdGE0L7RgNC80LDRhtC40Lgg0YEg0KHQsNC50YLQsCDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y/QvNC4L9Ca0LvQuNC10L3RgtCw0LzQuFxcXFxuICAgICAgICAgICAg0LjQu9C4INC40L3Ri9C80Lgg0LvQuNGG0LDQvNC4INC4L9C40LvQuCDQvtGA0LPQsNC90LjQt9Cw0YbQuNGP0LzQuCwg0LrQvtGC0L7RgNC+0LUg0L/RgNC+0LjQt9C+0YjQu9C+INCx0LXQtyDRg9Cy0LXQtNC+0LzQu9C10L3QuNGPINCa0L7QvNC/0LDQvdC40Lgg0YEg0L3QsNGA0YPRiNC10L3QuNC10Lwg0LjQu9C4INCx0LXQt1xcXFxuICAgICAgICAgICAg0LjQvdGE0L7RgNC80LDRhtC40L7QvdC90L7QuSDQsdC10LfQvtC/0LDRgdC90L7RgdGC0Lgg0KHQsNC50YLQsC48YnI+XFxcXG4gICAgICAgICAgICA3LjMuINCa0L7QvNC/0LDQvdC40Y8g0L/RgNC40LvQsNCz0LDQtdGCINCy0YHQtSDQstC+0LfQvNC+0LbQvdGL0LUg0YPRgdC40LvQuNGPINC00LvRjyDRgtC+0LPQviwg0YfRgtC+0LHRiyDQuNC30LHQtdC20LDRgtGMINC90LXRgdCw0L3QutGG0LjQvtC90LjRgNC+0LLQsNC90L3QvtCz0L4g0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y9cXFxcbiAgICAgICAgICAgINGC0YDQtdGC0YzQuNC80Lgg0LvQuNGG0LDQvNC4INC/0LXRgNGB0L7QvdCw0LvRjNC90YvRhSDQtNCw0L3QvdGL0YUg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9C10Lkv0JrQu9C40LXQvdGC0L7Qsi4g0J3QviDQmtC+0LzQv9Cw0L3QuNGPINGC0LDQutC20LUg0L3QtSDQvdC10YHQtdGCINC+0YLQstC10YLRgdGC0LLQtdC90L3QvtGB0YLQuCDQt9CwXFxcXG4gICAgICAgICAgICDQstC+0LfQvNC+0LbQvdC+0LUg0L3QtdGG0LXQu9C10LLQvtC1INC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC1INC/0LXRgNGB0L7QvdCw0LvRjNC90YvRhSDQtNCw0L3QvdGL0YUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C10Lkv0JrQu9C40LXQvdGC0L7Qsiwg0L/RgNC+0LjQt9C+0YjQtdC00YjQtdC1INCyINGB0LvRg9GH0LDQtTo8YnI+XFxcXG4gICAgICAgICAgICAtINGC0LXRhdC90LjRh9C10YHQutC40YUg0L3QtdC/0L7Qu9Cw0LTQvtC6INCyINC/0YDQvtCz0YDQsNC80LzQvdC+0Lwg0L7QsdC10YHQv9C10YfQtdC90LjQuCwg0YHQtdGA0LLQtdGA0LDRhSDQuNC70Lgg0LrQvtC80L/RjNGO0YLQtdGA0L3Ri9GFINGB0LXRgtGP0YUsINC90LDRhdC+0LTRj9GJ0LjRhdGB0Y8g0LLQvdC1INC60L7QvdGC0YDQvtC70Y9cXFxcbiAgICAgICAgICAgINCa0L7QvNC/0LDQvdC40Lg7PGJyPlxcXFxuICAgICAgICAgICAgLSDQv9C10YDQtdCx0L7QtdCyINCyINGA0LDQsdC+0YLQtSDQodCw0LnRgtCwLCDRgdCy0Y/Qt9Cw0L3QvdGL0YUg0YEg0L3QsNC80LXRgNC10L3QvdGL0Lwg0LjQu9C4INC90LXQvdCw0LzQtdGA0LXQvdC90YvQvCDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtdC8INCh0LDQudGC0LAg0L3QtSDQv9C+INC90LDQt9C90LDRh9C10L3QuNGOXFxcXG4gICAgICAgICAgICDRgtGA0LXRgtGM0LjQvNC4INC70LjRhtCw0LzQuDs8YnI+XFxcXG4gICAgICAgICAgICAtINC/0LXRgNC10LTQsNGH0Lgg0L/QsNGA0L7Qu9C10Lkg0LjQu9C4INC40L3RhNC+0YDQvNCw0YbQuNC4INGBINCh0LDQudGC0LAg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GP0LzQuC/QmtC70LjQtdC90YLQsNC80Lgg0LTRgNGD0LPQuNC8INC70LjRhtCw0LwsINC90LUg0Y/QstC70Y/RjtGJ0LjQvNC40YHRj1xcXFxuICAgICAgICAgICAg0LfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNC90L3Ri9C80Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GP0LzQuCDQodCw0LnRgtCwINC40LvQuCDQtNGA0YPQs9C40Lwg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GP0LwsINC90LUg0LjQvNC10Y7RidC40Lwg0LTQvtGB0YLRg9C/0LAg0Log0LTQsNC90L3QvtC5INC40L3RhNC+0YDQvNCw0YbQuNC4INCyXFxcXG4gICAgICAgICAgICDRgdC40LvRgyDRg9GB0LvQvtCy0LjQuSDRgNC10LPQuNGB0YLRgNCw0YbQuNC4INC4INC30LDQutC70Y7Rh9C10L3QvdGL0YUg0LTQvtCz0L7QstC+0YDQvtCyINGBINCa0L7QvNC/0LDQvdC40LXQuS48YnI+XFxcXG4gICAgICAgICAgICA3LjQuINCa0LDQttC00YvQuSDQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywv0JrQu9C40LXQvdGCINC+0YLQstC10YfQsNC10YIg0LfQsCDQmNC90YTQvtGA0LzQsNGG0LjRjiwg0YDQsNC30LzQtdGJ0LDQtdC80YPRjiDQvtGCINC10LPQviDQuNC80LXQvdC4LCDQuCDQt9CwINC/0L7RgdC70LXQtNGB0YLQstC40Y8g0Y3RgtC+0LPQvlxcXFxuICAgICAgICAgICAg0YDQsNC30LzQtdGJ0LXQvdC40Y8uPGJyPlxcXFxuICAgICAgICAgICAgNy41LiDQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywv0JrQu9C40LXQvdGCINGB0LDQvNC+0YHRgtC+0Y/RgtC10LvRjNC90L4sINC/0L4g0YHQstC+0LXQvNGDINGD0YHQvNC+0YLRgNC10L3QuNGOINC4INCy0L3QtSDQutC+0L3RgtGA0L7Qu9GPINGB0L4g0YHRgtC+0YDQvtC90Ysg0JrQvtC80L/QsNC90LjQuCDRgNCw0LfQvNC10YnQsNC10YJcXFxcbiAgICAgICAgICAgINCY0L3RhNC+0YDQvNCw0YbQuNGOINC90LAg0KHQsNC50YLQtSwg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GML9Ca0LvQuNC10L3RgiDQvdC10YHQtdGCINC+0YLQstC10YLRgdGC0LLQtdC90L3QvtGB0YLRjCDQutCw0Log0YDQtdC60LvQsNC80L7QtNCw0YLQtdC70Ywg0Lgg0YDQtdC60LvQsNC80L7RgNCw0YHQv9GA0L7RgdGC0YDQsNC90LjRgtC10LvRjCDQslxcXFxuICAgICAgICAgICAg0L7RgtC90L7RiNC10L3QuNC4INCy0YHQtdC5INGA0LDQt9C80LXRidC10L3QvdC+0Lkg0LjQvCDQmNC90YTQvtGA0LzQsNGG0LjQuCDQsiDRgdC+0L7RgtCy0LXRgtGB0YLQstC40Lgg0YEg0KTQlyBcXFxcXCLQniDRgNC10LrQu9Cw0LzQtVxcXFxcIiDQuCDQmtC+0JDQnyDQoNCkLjxicj5cXFxcbiAgICAgICAgICAgIDcuNi4g0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GML9Ca0LvQuNC10L3RgiDRgdCw0LzQvtGB0YLQvtGP0YLQtdC70YzQvdC+INC90LXRgdC10YIg0L7RgtCy0LXRgtGB0YLQstC10L3QvdC+0YHRgtGMINC30LAg0LTQvtGB0YLQvtCy0LXRgNC90L7RgdGC0Ywg0YDQsNC30LzQtdGJ0LDQtdC80L7QuSDQmNC90YTQvtGA0LzQsNGG0LjQuCDQuFxcXFxuICAgICAgICAgICAg0LrQsNGH0LXRgdGC0LLQviDQv9GA0LXQtNC+0YHRgtCw0LLQu9GP0LXQvNGL0YUg0LjQvCDRg9GB0LvRg9CzLCDQutC+0YLQvtGA0YvQtSDRgdC+0LTQtdGA0LbQsNGC0YHRjyDQsiDQmNC90YTQvtGA0LzQsNGG0LjQuCwg0LAg0YLQsNC60LbQtSDQvtGB0LLQvtCx0L7QttC00LDQtdGCINCa0L7QvNC/0LDQvdC40Y4g0L7RgiDQstGB0LXRhVxcXFxuICAgICAgICAgICAg0YLRgNC10LHQvtCy0LDQvdC40LksINC+0LHRj9C30LDRgtC10LvRjNGB0YLQsiwg0LrQvtC80L/QtdC90YHQsNGG0LjQuSDQv9C+INCy0L7Qt9C80LXRidC10L3QuNGOINGD0YnQtdGA0LHQsCwg0YPQsdGL0YLQutC+0LIsINC30LDRgtGA0LDRgiDQuCDQuNC30LTQtdGA0LbQtdC6LCDQstC60LvRjtGH0LDRjyDRgdGD0LTQtdCx0L3Ri9C1INC4XFxcXG4gICAgICAgICAgICDQuNC90YvQtSDRgNCw0YHRhdC+0LTRiywg0LLQvtC30L3QuNC60YjQuNC1INCyINGA0LXQt9GD0LvRjNGC0LDRgtC1INC40LvQuCDQsiDRgdCy0Y/Qt9C4INGBINGC0YDQtdCx0L7QstCw0L3QuNGP0LzQuCDRgtGA0LXRgtGM0LjRhSDQu9C40YYuPC9wPlxcXFxuXFxcXG4gICAgICAgIDxicj5cXFxcblxcXFxuICAgICAgICA8cD48c3Ryb25nPjguINCX0JDQmtCb0K7Qp9CY0KLQldCb0KzQndCr0JUg0J/QntCb0J7QltCV0J3QmNCvPC9zdHJvbmc+PC9wPlxcXFxuXFxcXG4gICAgICAgIDxwPjguMSDQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywv0JrQu9C40LXQvdGCINC/0YDQtdC00L7RgdGC0LDQstC70Y/QtdGCINCa0L7QvNC/0LDQvdC40Lgg0L/RgNCw0LLQviDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0YHQstC10LTQtdC90LjRjywg0YHQvtC00LXRgNC20LDRidC40LXRgdGPINCyINCY0L3RhNC+0YDQvNCw0YbQuNC4XFxcXG4gICAgICAgICAgICDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAsINC00LvRjyDRhtC10LvQtdC5INC+0LrQsNC30LDQvdC40Y8g0KPRgdC70YPQsywg0L/Rg9GC0LXQvCDQv9C10YDQtdC00LDRh9C4INCa0L7QvNC/0LDQvdC40Lgg0L3QtSDRjdC60YHQutC70Y7Qt9C40LLQvdC+0LPQviwg0LTQtdC50YHRgtCy0YPRjtGJ0LXQs9C+XFxcXG4gICAgICAgICAgICDQv9C+0LLRgdC10LzQtdGB0YLQvdC+LCDQsdC10YHRgdGA0L7Rh9C90L7Qs9C+INC/0YDQsNCy0LAg0L7RgtC90L7RgdC40YLQtdC70YzQvdC+INCw0LLRgtC+0YDRgdC60LjRhSDQv9GA0LDQsiwg0YLQvtGA0LPQvtCy0YvRhSDQvNCw0YDQvtC6LCDQu9C+0LPQvtGC0LjQv9C+0LIsINC/0YPQsdC70LjQutCw0YbQuNC5INC4INCx0LDQt1xcXFxuICAgICAgICAgICAg0LTQsNC90L3Ri9GFLCDQutC+0YLQvtGA0L7QtSDQuNC80LXQtdGCINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjC/QmtC70LjQtdC90YIg0Lgg0L/RgNC10LTQvtGB0YLQsNCy0LvQtdC90L3Ri9GFINC40Lwg0L3QsCDQstGB0LXRhSDQuNC30LLQtdGB0YLQvdGL0YUg0LjQu9C4INC90LUg0LjQt9Cy0LXRgdGC0L3Ri9GFXFxcXG4gICAgICAgICAgICDQuNC90YTQvtGA0LzQsNGG0LjQvtC90L3Ri9GFINC90L7RgdC40YLQtdC70Y/RhS48YnI+XFxcXG4gICAgICAgICAgICA4LjIuINCd0LDRgdGC0L7Rj9GJ0LDRjyDQntGE0LXRgNGC0LAg0L3QsNGH0LjQvdCw0LXRgiDQtNC10LnRgdGC0LLQvtCy0LDRgtGMINC4LCDRgdGH0LjRgtCw0LXRgtGB0Y8sINCx0LXQt9GD0YHQu9C+0LLQvdC+INC/0YDQuNC90Y/RgtC+0LlcXFxcbiAgICAgICAgICAgINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC8XFxcXFxc0JrQu9C40LXQvdGC0L7QvFxcXFxcXNCT0L7RgdGC0LXQvFxcXFxcXNC/0LvQsNGC0LXQu9GM0YnQuNC60L7QvCDRgSDQvNC+0LzQtdC90YLQsCDQvdCw0YfQsNC70LAg0L/QvtC70YzQt9C+0LLQsNC90LjRjyDQo9GB0LvRg9Cz0LDQvCDQodCw0LnRgtCwLCDQvdC10LfQsNCy0LjRgdC40LzQviDQvtGCINGE0LDQutGC0LBcXFxcbiAgICAgICAgICAgINCg0LXQs9C40YHRgtGA0LDRhtC40LgsINC4INC00LXQudGB0YLQstGD0LXRgiDQsdC10YHRgdGA0L7Rh9C90L4uPGJyPlxcXFxuICAgICAgICAgICAgOC4zLiDQn9C+0LvRjNC30L7QstCw0YLQtdC70Ywv0JrQu9C40LXQvdGCINCy0L/RgNCw0LLQtSDQvtGC0LrQsNC30LDRgtGM0YHRjyDQvtGCINC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0KPRgdC70YPQs9Cw0LzQuCDQodCw0LnRgtCwLCDQv9C+0YHQu9C1INGH0LXQs9C+INGA0LDQt9C80LXRidC10L3QuNC1INCY0L3RhNC+0YDQvNCw0YbQuNC4XFxcXG4gICAgICAgICAgICDQvdCwINCh0LDQudGC0LUg0L7RgiDQtNCw0L3QvdC+0LPQviDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAg0L3QtdCy0L7Qt9C80L7QttC90L4uPGJyPlxcXFxuICAgICAgICAgICAgOC40LiDQmtC+0LzQv9Cw0L3QuNGPINC+0YHRgtCw0LLQu9GP0LXRgiDQt9CwINGB0L7QsdC+0Lkg0L/RgNCw0LLQviDQv9C+INGB0L7QsdGB0YLQstC10L3QvdC+0LzRgyDRg9GB0LzQvtGC0YDQtdC90LjRjiDQv9GA0LXQutGA0LDRgtC40YLRjCDQtNC+0YHRgtGD0L8g0Log0KPRgdC70YPQs9Cw0LxcXFxcbiAgICAgICAgICAgINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy/QmtC70LjQtdC90YLQsCwg0L3QsNGA0YPRiNCw0Y7RidC10LPQviDQntGE0LXRgNGC0YMsINCU0L7Qs9C+0LLQvtGAINC70LjQsdC+INC70LjRgdGCINC30LDQutCw0LfQsC4g0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GML9Ca0LvQuNC10L3Rgiwg0LTQvtGB0YLRg9C/INC60L7RgtC+0YDQvtCz0L4g0LpcXFxcbiAgICAgICAgICAgINCj0YHQu9GD0LPQsNC8INCx0YvQuyDQv9GA0LXQutGA0LDRidC10L0sINC40LvQuCDQmNC90YTQvtGA0LzQsNGG0LjRjyDQutC+0YLQvtGA0L7Qs9C+INC/0LXRgNC10YHRgtCw0LvQsCDQsdGL0YLRjCDQtNC10LnRgdGC0LLQuNGC0LXQu9GM0L3QvtC5LCDQvdC1INC40LzQtdC10YIg0L/RgNCw0LLQsFxcXFxuICAgICAgICAgICAg0YDQtdCz0LjRgdGC0YDQuNGA0L7QstCw0YLRjNGB0Y8g0L/QvtCy0YLQvtGA0L3QviDQsdC10Lcg0YHQvtC+0YLQstC10YLRgdGC0LLRg9GO0YnQtdCz0L4g0YHQvtCz0LvQsNGB0LjRjyDQmtC+0LzQv9Cw0L3QuNC4LCDQsCDRgtCw0LrQttC1INGC0LDQutC+0Lkg0J/QvtC70YzQt9C+0LLQsNGC0LXQu9GML9Ca0LvQuNC10L3RgiDQvdC1INC40LzQtdC10YJcXFxcbiAgICAgICAgICAgINC/0YDQsNCy0LAg0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMINC00LvRjyDQtNC+0YHRgtGD0L/QsCDQvdCwINCh0LDQudGCINCj0YfQtdGC0L3Ri9C1INC00LDQvdC90YvQtSDQtNGA0YPQs9C+0LPQviDQn9C+0LvRjNC30L7QstCw0YLQtdC70Y8v0JrQu9C40LXQvdGC0LAuPGJyPlxcXFxuICAgICAgICAgICAgOC41LiDQodC/0L7RgNGLLCDQstC+0LfQvdC40LrQsNGO0YnQuNC1INCyINGF0L7QtNC1INC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8g0KHQsNC50YLQvtC8LCDRgNCw0LfRgNC10YjQsNGO0YLRgdGPINGBINGB0L7QsdC70Y7QtNC10L3QuNC10Lwg0L7QsdGP0LfQsNGC0LXQu9GM0L3QvtCz0L4g0L/RgNC10YLQtdC90LfQuNC+0L3QvdC+0LPQvlxcXFxuICAgICAgICAgICAg0L/QvtGA0Y/QtNC60LAuINCh0YDQvtC6INC+0YLQstC10YLQsCDQvdCwINC/0YDQtdGC0LXQvdC30LjRjiAxNSDQtNC90LXQuSDRgdC+INC00L3RjyDQv9C+0LvRg9GH0LXQvdC40Y8g0L/RgNC10YLQtdC90LfQuNC4LiDQkiDRgdC70YPRh9Cw0LUg0L3QtdGD0LTQvtCy0LvQtdGC0LLQvtGA0LXQvdC40Y8g0L/RgNC10YLQtdC90LfQuNC4XFxcXG4gICAgICAgICAgICDQv9C+0LvQvdC+0YHRgtGM0Y4g0LjQu9C4INCyINC60LDQutC+0Lkt0LvQuNCx0L4g0YfQsNGB0YLQuCwg0LAg0YLQsNC60LbQtSDQsiDRgdC70YPRh9Cw0LUg0L3QtdC/0L7Qu9GD0YfQtdC90LjRjyDQvtGC0LLQtdGC0LAg0L3QsCDQv9GA0LXRgtC10L3Qt9C40Y4g0LIg0YPRgdGC0LDQvdC+0LLQu9C10L3QvdGL0Lkg0YHRgNC+0LosXFxcXG4gICAgICAgICAgICDQt9Cw0LjQvdGC0LXRgNC10YHQvtCy0LDQvdC90LDRjyDRgdGC0L7RgNC+0L3QsCDQstC/0YDQsNCy0LUg0L7QsdGA0LDRgtC40YLRjNGB0Y8g0LfQsCDRgNCw0LfRgNC10YjQtdC90LjQtdC8INGB0L/QvtGA0LAg0LIg0YHRg9C0INGBINGC0LXRgNGA0LjRgtC+0YDQuNCw0LvRjNC90L7QuSDQv9C+0LTRgdGD0LTQvdC+0YHRgtGM0Y5cXFxcbiAgICAgICAgICAgINCa0L7QvNC/0LDQvdC40LguPGJyPlxcXFxuICAgICAgICAgICAgOC42LiDQkiDRgdC70YPRh9Cw0LUg0L/RgNC40LfQvdCw0L3QuNGPINGB0YPQtNC+0Lwg0L7RgtC00LXQu9GM0L3Ri9GFINC/0L7Qu9C+0LbQtdC90LjQuSDQvdCw0YHRgtC+0Y/RidC10Lkg0J7RhNC10YDRgtGLINC90LXQtNC10LnRgdGC0LLQuNGC0LXQu9GM0L3Ri9C80LgsINC+0YHRgtCw0LvRjNC90YvQtSDRg9GB0LvQvtCy0LjRj1xcXFxuICAgICAgICAgICAg0J7RhNC10YDRgtGLINC/0YDQvtC00L7Qu9C20LDRjtGCINC00LXQudGB0YLQstC+0LLQsNGC0YwuXFxcXG4gICAgICAgIDwvcD5cXFxcbiAgICAgICAgPGJyPlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlLXJlY29tbWVuZGF0aW9uJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtcmVjb21tZW5kYXRpb24vaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicGFnZS1yZWNvbW1lbmRhdGlvblwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJwYWdlX29odF9yZWNvbW1lbmRhdGlvblxcXFxcIj5cXFxcbiAgICA8Y2F0LWNvbW1vbi1oMSBpZD1cXFxcXCJjb21tb24taDFcXFxcXCIgbmFtZT1cXFxcXCLQnNCw0YHRgtC10YDQsCDQviDRgdCw0LnRgtC1XFxcXFwiPjwvY2F0LWNvbW1vbi1oMT5cXFxcblxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwicGFnZV9vaHRfcmVjb21tZW5kYXRpb25fX2xpc3RcXFxcXCI+XFxcXG5cXFxcbiAgICAgICAgPGNhdC1vdGhlci1yZWNvbW1lbmRhdGlvbiBpZD1cXFxcXCJvdGhlci1yZWNvbW1lbmRhdGlvblxcXFxcIiBjYXQtc3RvcmU9XFxcXFwib3RoZXIvUmVjb21tZW5kYXRpb25cXFxcXCI+PC9jYXQtb3RoZXItcmVjb21tZW5kYXRpb24+XFxcXG4gICAgICAgIDxjYXQtY29tbW9uLXBhZ2luYXRvciBpZD1cXFxcXCJjb21tb24tcGFnaW5hdG9yXFxcXFwiIGNhdC1zdG9yZT1cXFxcXCJQYWdpbmF0b3JcXFxcXCIgbW9kZWw9XFxcXFwib3RoZXIvUmVjb21tZW5kYXRpb25cXFxcXCI+PC9jYXQtY29tbW9uLXBhZ2luYXRvcj5cXFxcblxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncGFnZS1yZWdpc3RyYXRpb24nLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1yZWdpc3RyYXRpb24vaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicGFnZS1yZWdpc3RyYXRpb25cIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIjxjYXQtcmVnaXN0cmF0aW9uLWhlYWRlciBpZD1cXFxcXCJyZWdpc3RyYXRpb24taGVhZGVyXFxcXFwiPjwvY2F0LXJlZ2lzdHJhdGlvbi1oZWFkZXI+XFxcXG48ZGl2IGlkPVxcXFxcImZvcm0xXFxcXFwiPlxcXFxuICAgIDxjYXQtcmVnaXN0cmF0aW9uLWZvcm0gaWQ9XFxcXFwicmVnaXN0cmF0aW9uLWZvcm0tMVxcXFxcIj48L2NhdC1yZWdpc3RyYXRpb24tZm9ybT5cXFxcbjwvZGl2PlxcXFxuPGNhdC1yZWdpc3RyYXRpb24tYWJvdXQgaWQ9XFxcXFwicmVnaXN0cmF0aW9uLWFib3V0XFxcXFwiPjwvY2F0LXJlZ2lzdHJhdGlvbi1hYm91dD5cXFxcbjxjYXQtcmVnaXN0cmF0aW9uLXdoeS13ZSBpZD1cXFxcXCJyZWdpc3RyYXRpb24td2h5LXdlXFxcXFwiPjwvY2F0LXJlZ2lzdHJhdGlvbi13aHktd2U+XFxcXG48Y2F0LXJlZ2lzdHJhdGlvbi1wcmljZSBpZD1cXFxcXCJyZWdpc3RyYXRpb24tcHJpY2VcXFxcXCI+PC9jYXQtcmVnaXN0cmF0aW9uLXByaWNlPlxcXFxuPGRpdiBpZD1cXFxcXCJmb3JtMlxcXFxcIj5cXFxcbiAgICA8Y2F0LXJlZ2lzdHJhdGlvbi1mb3JtIGlkPVxcXFxcInJlZ2lzdHJhdGlvbi1mb3JtLTJcXFxcXCI+PC9jYXQtcmVnaXN0cmF0aW9uLWZvcm0+XFxcXG48L2Rpdj5cXFxcbjxjYXQtcmVnaXN0cmF0aW9uLW1vcmUtcGFnZSBpZD1cXFxcXCJyZWdpc3RyYXRpb24tbW9yZS1wYWdlXFxcXFwiPjwvY2F0LXJlZ2lzdHJhdGlvbi1tb3JlLXBhZ2U+XFxcXG48Y2F0LXJlZ2lzdHJhdGlvbi1mYXEgaWQ9XFxcXFwicmVnaXN0cmF0aW9uLWZhcVxcXFxcIj48L2NhdC1yZWdpc3RyYXRpb24tZmFxPlxcXFxuPGRpdiBpZD1cXFxcXCJmb3JtM1xcXFxcIj5cXFxcbiAgICA8Y2F0LXJlZ2lzdHJhdGlvbi1mb3JtIGlkPVxcXFxcInJlZ2lzdHJhdGlvbi1mb3JtLTNcXFxcXCI+PC9jYXQtcmVnaXN0cmF0aW9uLWZvcm0+XFxcXG48L2Rpdj5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlLXJlcXVlc3QnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1yZXF1ZXN0L2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInBhZ2UtcmVxdWVzdFwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJjYWxsYmFja19yZXF1ZXN0XFxcXFwiPlxcXFxuPGgxIGNsYXNzPVxcXFxcImgxIGgxX3N0eWxlXFxcXFwiPtCX0LDRj9Cy0LrQsCDQvNCw0YHRgtC10YDRgzwvaDE+XFxcXG5cXFxcbiAgICA8Zm9ybSBjbGFzcz1cXFxcXCJjYWxsYmFja19yZXF1ZXN0X19mb3JtXFxcXFwiIG1ldGhvZD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5tZXRob2QgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm1ldGhvZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJtZXRob2RcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIiBhY3Rpb249XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51cmwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCIgaWQ9XFxcXFwiY2FsbGJhY2stcmVxdWVzdC1mb3JtXFxcXFwiPlxcXFxuICAgICAgICA8cCBjbGFzcz1cXFxcXCJjYWxsYmFja19yZXF1ZXN0X19pbnRyb1xcXFxcIj7QntC/0LjRiNC40YLQtSDQstCw0YjRgyDQt9Cw0LTQsNGH0YM8L3A+XFxcXG5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJjYWxsYmFja19yZXF1ZXN0X19pbnB1dFxcXFxcIj5cXFxcbiAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzcz1cXFxcXCJ0ZXh0YXJlYVxcXFxcIiBwbGFjZWhvbGRlcj1cXFxcXCLQryDRhdC+0YfRgyAo0L7RgtGA0LXQvNC+0L3RgtC40YDQvtCy0LDRgtGMLCDQvtGA0LPQsNC90LjQt9C+0LLQsNGC0YwsINGD0YHRgtCw0L3QvtCy0LjRgtGMLCDQtNC+0YHRgtCw0LLQuNGC0YwpXFxcXFwiIG5hbWU9XFxcXFwiY2FsbGJhY2tSZXF1ZXN0Rm9ybVt0ZXh0XVxcXFxcIj48L3RleHRhcmVhPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPHAgY2xhc3M9XFxcXFwiY2FsbGJhY2tfcmVxdWVzdF9faW50cm9cXFxcXCI+XFxcXG4gICAgICAgICAgICDQntGB0YLQsNCy0YzRgtC1INCy0LDRiNC4INC60L7QvdGC0LDQutGC0YtcXFxcbiAgICAgICAgPC9wPlxcXFxuXFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiY2FsbGJhY2tfcmVxdWVzdF9faW5wdXRcXFxcXCI+XFxcXG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcXFwiaW5wdXQtdGV4dFxcXFxcIiB0eXBlPVxcXFxcInRleHRcXFxcXCIgcGxhY2Vob2xkZXI9XFxcXFwi0JLQsNGI0LUg0LjQvNGPXFxcXFwiIG5hbWU9XFxcXFwiY2FsbGJhY2tSZXF1ZXN0Rm9ybVtuYW1lXVxcXFxcIj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiY2FsbGJhY2tfcmVxdWVzdF9faW5wdXRcXFxcXCI+XFxcXG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcXFwiaW5wdXQtdGV4dFxcXFxcIiB0eXBlPVxcXFxcInRleHRcXFxcXCIgcGxhY2Vob2xkZXI9XFxcXFwi0JLQsNGIINGC0LXQu9C10YTQvtC9XFxcXFwiIG5hbWU9XFxcXFwiY2FsbGJhY2tSZXF1ZXN0Rm9ybVtwaG9uZV1cXFxcXCI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImNhbGxiYWNrX3JlcXVlc3RfX2lucHV0XFxcXFwiPlxcXFxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXFxcImlucHV0LXRleHRcXFxcXCIgdHlwZT1cXFxcXCJ0ZXh0XFxcXFwiIHBsYWNlaG9sZGVyPVxcXFxcItCS0LDRiCBlbWFpbFxcXFxcIiBuYW1lPVxcXFxcImNhbGxiYWNrUmVxdWVzdEZvcm1bZW1haWxdXFxcXFwiPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJjYWxsYmFja19yZXF1ZXN0X19zdWJtaXRcXFxcXCI+XFxcXG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcXFwiYnRuLWFjY2VudFxcXFxcIiB0eXBlPVxcXFxcInN1Ym1pdFxcXFxcIiB2YWx1ZT1cXFxcXCLQvtGC0L/RgNCw0LLQuNGC0Ywg0LfQsNGP0LLQutGDXFxcXFwiPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICA8L2Zvcm0+XFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJzdWNjZXNzX3Jlc3BvbnNlXFxcXFwiPtCS0LDRiNCwINC30LDRj9Cy0LrQsCDQvtGC0L/RgNCw0LLQu9C10L3QsDwvZGl2PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncGFnZS1zYWxlJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2Utc2FsZS9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJwYWdlLXNhbGVcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIjxoMSBjbGFzcz1cXFxcXCJoMSBoMV9zdHlsZVxcXFxcIj7QmtCw0YLQsNC70L7QsyDRgdC60LjQtNC+0Log0Lgg0L/QvtC00LDRgNC60L7QsjwvaDE+XFxcXG48Y2F0LXNhbGUgaWQ9XFxcXFwic2FsZVxcXFxcIiBjYXQtc3RvcmU9XFxcXFwic2FsZS9TYWxlQnlSdWJyaWthXFxcXFwiPjwvY2F0LXNhbGU+XCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncGFnZS1zb3ZldHknLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3BhZ2UvcGFnZS1zb3ZldHkvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicGFnZS1zb3ZldHlcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxu0KHQvtCy0LXRgtGLINC60LDRgtCw0LvQvtCzXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncGFnZS12YWNhbmN5JywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtdmFjYW5jeS9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJwYWdlLXZhY2FuY3lcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcXFwidmFjYW5jeS1wYWdlXFxcXFwiPlxcXFxuICAgIDxoMSBjbGFzcz1cXFxcXCJoMSBoMV9zdHlsZVxcXFxcIj7QndCw0YjQuCDQstCw0LrQsNC90YHQuNC4PC9oMT5cXFxcbiAgICA8aW1nIGNsYXNzPVxcXFxcInZhY2FuY3ktcGFnZV9faW1nXFxcXFwiIHNyYz1cXFxcXCIvaW1nL290aGVyL3ZhY2FuY3kucG5nXFxcXFwiIGFsdD1cXFxcXCLQndCw0YjQuCDQstCw0LrQsNC90YHQuNC4XFxcXFwiPlxcXFxuXFxcXG4gICAgPHAgY2xhc3M9XFxcXFwidmFjYW5jeS1wYWdlX190ZXh0XFxcXFwiPlxcXFxuICAgICAgICDQnNGLIC0g0LzQvtC70L7QtNC+0Lkg0LrQvtC70LvQtdC60YLQuNCyINC10LTQuNC90L7QvNGL0YjQu9C10L3QvdC40LrQvtCyLCDQtdGB0LvQuCDRgyDQktCw0YEg0LXRgdGC0Ywg0LbQtdC70LDQvdC40LUg0YDQsNCx0L7RgtCw0YLRjCDQsiDQvdCw0YjQtdC5INC60L7QvNC/0LDQvdC40LgsINGC0L4g0L/RgNC40YHQvtC10LTQuNC90Y/QudGC0LXRgdGMINC6XFxcXG4gICAgICAgINC90LDQvCwg0YPRh9Cw0YHRgtCy0YPQudGC0LUg0LIg0YHQvtC30LTQsNC90LjQuCDQvdC+0LLQvtCz0L4g0LjQvdGC0LXRgNC10YHQvdC+0LPQviDQv9GA0L7QtNGD0LrRgtCwLiDQktC80LXRgdGC0LUg0YEg0L3QsNC80Lgg0LLRiyDRgdC80L7QttC10YLQtSDQstC+0L/Qu9C+0YLQuNGC0Ywg0YHQstC+0Lgg0YHQsNC80YvQtSDRgdC80LXQu9GL0LVcXFxcbiAgICAgICAg0LjQtNC10LgsINGA0LDRgdC60YDRi9GC0Ywg0YHQstC+0Lkg0YLQstC+0YDRh9C10YHQutC40Lkg0L/QvtGC0LXQvdGG0LjQsNC7INC4INGA0LXQsNC70LjQt9C+0LLQsNGC0YzRgdGPINCyINC60LDRgNGM0LXRgNC90L7QvCDQv9C70LDQvdC1LiDQnNGLINC40YnQtdC8INGG0LXQu9C10YPRgdGC0YDQtdC80LvQtdC90L3Ri9GFINC4INGD0LLQtdGA0LXQvdC90YvRhVxcXFxuICAgICAgICDRgdC/0LXRhtC40LDQu9C40YHRgtC+0LIsINC60L7RgtC+0YDRi9C1INCy0LXRgNGP0YIg0LIg0YHQstC+0Lgg0YHQuNC70Ysg0Lgg0YPRgdC/0LXRhS5cXFxcbiAgICA8L3A+XFxcXG5cXFxcbiAgICA8Y2F0LW90aGVyLXZhY2FuY3kgaWQ9XFxcXFwib3RoZXItdmFjYW5jeVxcXFxcIiBjYXQtc3RvcmU9XFxcXFwib3RoZXIvVmFjYW5jeVxcXFxcIj48L2NhdC1vdGhlci12YWNhbmN5PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlLXZhY2FuY3ktaXRlbScsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLXZhY2FuY3ktaXRlbS9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJwYWdlLXZhY2FuY3ktaXRlbVwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiPGNhdC1vdGhlci12YWNhbmN5LWl0ZW0gaWQ9XFxcXFwib3RoZXItdmFjYW5jeS1pdGVtXFxcXFwiIGNhdC1zdG9yZT1cXFxcXCJvdGhlci9WYWNhbmN5SXRlbVxcXFxcIj48L2NhdC1vdGhlci12YWNhbmN5LWl0ZW0+XCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncGFnZS12aWRlbycsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLXZpZGVvL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInBhZ2UtdmlkZW9cIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxu0JLQuNC00LXQviDQutCw0YLQsNC70L7Qs1xcXFxuXFxcXG48Y2F0LWNvbW1vbi1wYWdpbmF0b3IgaWQ9XFxcXFwiY29tbW9uLXBhZ2luYXRvclxcXFxcIiBjYXQtc3RvcmU9XFxcXFwiUGFnaW5hdG9yXFxcXFwiIG1vZGVsPVxcXFxcIm1hc3Rlci9NYXN0ZXJWaWRlb1xcXFxcIj48L2NhdC1jb21tb24tcGFnaW5hdG9yPlwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ3BhZ2VzLWNvbnRlbnQnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3BhZ2VzL3BhZ2VzLWNvbnRlbnQvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicGFnZXMtY29udGVudFwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiMVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIiAgICAgICAgICAgIDxjYXQtYnJlYWRjcnVtcHMgaWQ9XFxcXFwiYnJlYWRjcnVtcHNcXFxcXCIgY2F0LXN0b3JlPVxcXFxcIkJyZWFkY3J1bXBzXFxcXFwiPjwvY2F0LWJyZWFkY3J1bXBzPlxcXFxuXCI7XFxuICB9LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcInBhZ2UgY29udGFpbmVyXFxcXFwiPlxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwicGFnZV9fcm93XFxcXFwiPlxcXFxuICAgICAgICA8Y2F0LWxvYWRlciBpZD1cXFxcXCJwYWdlcy1jb250ZW50LWxvYWRlclxcXFxcIj48L2NhdC1sb2FkZXI+XFxcXG5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy51bmxlc3MuY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmlzQWN0aXZlIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5tYWluIDogc3RhY2sxKSwge1wibmFtZVwiOlwidW5sZXNzXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImNvbnRlbnRcXFxcXCI+XFxcXG4gICAgICAgICAgICA8Y2F0LXBhZ2UtXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuY3VycmVudCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY3VycmVudCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJjdXJyZW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCIgaWQ9XFxcXFwicGFnZS1jdXJyZW50LVwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmN1cnJlbnQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmN1cnJlbnQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiY3VycmVudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPjwvY2F0LXBhZ2UtXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuY3VycmVudCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY3VycmVudCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJjdXJyZW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogbnVsbH0sXG57bmFtZTogJ3BhZ2VzLWZvb3RlcicsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZXMvcGFnZXMtZm9vdGVyL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInBhZ2VzLWZvb3RlclwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgYnVmZmVyID0gXCIgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImZvb3Rlcl9fbGlua3MtYVxcXFxcIiBocmVmPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L2E+Jm5ic3A7XFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgYnVmZmVyID0gXCI8Zm9vdGVyIGNsYXNzPVxcXFxcImZvb3RlclxcXFxcIj5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcImNvbnRhaW5lclxcXFxcIj5cXFxcblxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInRvLXRvcFxcXFxcIiBpZD1cXFxcXCJ0by10b3BcXFxcXCI+XFxcXG4gICAgICAgICAgICA8YSBocmVmPVxcXFxcIlxcXFxcIj48c3Bhbj7ihpE8L3NwYW4+INCy0LLQtdGA0YU8L2E+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuXFxcXG5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJyb3dcXFxcXCI+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZvb3Rlcl9fY29vcmRpbmF0b3JcXFxcXCI+0JrQvtC+0YDQtNC40L3QsNGC0L7RgCDRgdCw0LnRgtCwOiBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5waG9uZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGhvbmUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwicGhvbmVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvZGl2PlxcXFxuXFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZvb3Rlcl9fY29weXJpZ2h0XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImZvb3Rlcl9fY29weXJpZ2h0LXdob1xcXFxcIj7CqSBGYWNlTWFzdGVyIOKAlCDQpNC10LnRgdC80LDRgdGC0LXRgDwvcD5cXFxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJmb290ZXJfX2NvcHlyaWdodC10ZXh0XFxcXFwiPtCf0YDQuCDQv9C+0LvQvdC+0Lwg0LjQu9C4INGH0LDRgdGC0LjRh9C90L7QvCDQstC+0YHQv9GA0L7QuNC30LLQtdC00LXQvdC40Lgg0LjQvdGE0L7RgNC80LDRhtC40LhcXFxcbiAgICAgICAgICAgICAgICAgICAg0LDQutGC0LjQstC90LDRjyDRgdGB0YvQu9C60LAg0L3QsCDQpNC10LnRgdC80LDRgdGC0LXRgCDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdCwLjwvcD5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZm9vdGVyX19saW5rc1xcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGlua3MgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIiAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZm9vdGVyX19jb3VudGVyc1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8IS0teyB7ID4gZm9vdGVyL2NvdW50ZXJzL2NvdW50ZXJzIGNvdW50ZXJzfSB9LS0+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgPC9kaXY+XFxcXG48L2Zvb3Rlcj5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncGFnZXMtaGVhZGVyJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9wYWdlcy9wYWdlcy1oZWFkZXIvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicGFnZXMtaGVhZGVyXCIsXCJ0ZW1wbGF0ZVwiOlwiLi90ZW1wbGF0ZS5oYnNcIixcImVycm9yVGVtcGxhdGVcIjpcIi4vZXJyb3IuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiMVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJsb2dpblxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImxvZ2luX19idG4gYnRuXFxcXFwiIGhyZWY9XFxcXFwiL2xvZ2luXFxcXFwiPtCS0YXQvtC0INC00LvRjyDQnNCw0YHRgtC10YDQvtCyPC9hPlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbiAgfSxcIjNcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJsb2dpblxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImxvZ2luX19idG4gYnRuXFxcXFwiIGhyZWY9XFxcXFwiPCEtLUVSUk9SLS0+XFxcXFwiPjwhLS1FUlJPUiAtIHVzZXJuYW1lLS0+PC9hPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1lbnUtdXNlclxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcXFwibWVudS11c2VyX191bFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUVSUk9SIE1FTlVVU0VSLS0+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYXV0aERhdGEgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm1lbnVVc2VyIDogc3RhY2sxKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oNCwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCI0XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGJ1ZmZlciA9IFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVxcXFxcIm1lbnUtdXNlcl9faXRlbVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJtZW51LXVzZXJfX2l0ZW0tbGlua1xcXFxcIiBocmVmPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L2E+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGJ1ZmZlciA9IFwiPGhlYWRlciBjbGFzcz1cXFxcXCJoZWFkZXJcXFxcXCI+XFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJjb250YWluZXJcXFxcXCI+XFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicm93XFxcXFwiPlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJoZWFkZXJfX2xlZnQtY29sXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibG9nb1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJsb2dvX19pbWdcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJsb2dvX19saW5rXFxcXFwiIGhyZWY9XFxcXFwiL21haW5cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBhbHQ9XFxcXFwiRmFjZW1hc3Rlci5ydSBMb2dvXFxcXFwiIHNyYz1cXFxcXCIvaW1nL2xvZ28uc3ZnXFxcXFwiIHdpZHRoPVxcXFxcIjEwMCVcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XFxcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInZpc2l0b3JcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJ2aXNpdG9yX19jb3VudFxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy52aXNpdENvdW50IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC52aXNpdENvdW50IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInZpc2l0Q291bnRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwidmlzaXRvcl9fbWVyYVxcXFxcIj7QsiDQvdC10LTQtdC70Y48L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImhlYWRlcl9fdGl0bGVcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwidGl0bGVcXFxcXCIgaHJlZj1cXFxcXCIvbWFpblxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwidGl0bGVfX3RleHQgaDFcXFxcXCI+0J/QntCY0KHQmiDQnNCQ0KHQotCV0KDQntCSINCSINCh0KTQldCg0JUg0KPQodCb0KPQkzwvcD5cXFxcbiAgICAgICAgICAgICAgICA8L2E+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiaGVhZGVyX19sb2dpblxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pc0d1ZXN0IDogZGVwdGgwKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDEsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMucHJvZ3JhbSgzLCBkYXRhKSxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImhlYWRlcl9fbWVudVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8Y2F0LXBhZ2VzLW5hdmlnYXRpb24gaWQ9XFxcXFwicGFnZXMtbmF2aWdhdGlvblxcXFxcIj48L2NhdC1wYWdlcy1uYXZpZ2F0aW9uPlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImhlYWRlcl9fc29jaWFsXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxjYXQtc29jaWFsIGlkPVxcXFxcInNvY2lhbFxcXFxcIj48L2NhdC1zb2NpYWw+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgPC9kaXY+XFxcXG48L2hlYWRlcj5cXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdwYWdlcy1uYXZpZ2F0aW9uJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9wYWdlcy9wYWdlcy1uYXZpZ2F0aW9uL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInBhZ2VzLW5hdmlnYXRpb25cIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgICAgICAgICAgICA8bGkgY2xhc3M9XFxcXFwibWFpbi1tZW51X19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcIm1haW4tbWVudV9faXRlbS1saW5rIGxpbmtcXFxcXCIgaHJlZj1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5saW5rIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5saW5rIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImxpbmtcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvYT5cXFxcbiAgICAgICAgICAgIDwvbGk+XFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIjxuYXYgY2xhc3M9XFxcXFwibWVudVxcXFxcIj5cXFxcbiAgICA8dWwgY2xhc3M9XFxcXFwibWFpbi1tZW51XFxcXFwiPlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tZW51IDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgPC91bD5cXFxcbjwvbmF2PlxcXFxuXCI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6IG51bGx9LFxue25hbWU6ICdyZWdpc3RyYXRpb24tYWJvdXQnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24tYWJvdXQvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicmVnaXN0cmF0aW9uLWFib3V0XCIsXCJ0ZW1wbGF0ZVwiOlwiLi90ZW1wbGF0ZS5oYnNcIixcImVycm9yVGVtcGxhdGVcIjpcIi4vZXJyb3IuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJhYm91dC13clxcXFxcIj5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcImNvbnRhaW5lclxcXFxcIj5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJyb3dcXFxcXCI+XFxcXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cXFxcXCJhYm91dFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcXFwiYWJvdXRfX2xpc3Qgcm93XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtX190ZXh0XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXFxcImFib3V0LWxpc3QtaXRlbV9fdGV4dC12ZXItYWxcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCX0JDQoNCV0JPQmNCh0KLQoNCY0KDQo9CZ0KHQrzxicj7QndCQINCh0JDQmdCi0JVcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtX19pY29uLXdyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJhZGQtcGFnZVwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtX19hcnJvd1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwiYXJyb3dcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXFxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtX190ZXh0XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXFxcImFib3V0LWxpc3QtaXRlbV9fdGV4dC12ZXItYWxcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCe0J/Qo9CR0JvQmNCa0KPQmdCh0K9cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtX19pY29uLXdyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJwaWN0dXJlXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtX19hcnJvd1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwiYXJyb3dcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXFxuICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtX190ZXh0XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXFxcImFib3V0LWxpc3QtaXRlbV9fdGV4dC12ZXItYWxcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCf0J7Qm9Cj0KfQkNCZPGJyPtCa0JvQmNCV0J3QotCe0JJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiYWJvdXQtbGlzdC1pdGVtX19pY29uLXdyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJwZW9wbGVcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxcXFxuICAgICAgICAgICAgICAgIDwvdWw+XFxcXG4gICAgICAgICAgICA8L3NlY3Rpb24+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XCI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ3JlZ2lzdHJhdGlvbi1mYXEnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24tZmFxL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInJlZ2lzdHJhdGlvbi1mYXFcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuPGRpdiBjbGFzcz1cXFxcXCJjb250YWluZXIgY29ybmVyIGNvcm5lcl9iZ1xcXFxcIj5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcInJvd1xcXFxcIj5cXFxcbiAgICAgICAgPHNlY3Rpb24gY2xhc3M9XFxcXFwiZmFxXFxcXFwiPlxcXFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwicGFnZS10aXRsZSBwYWdlLXRpdGxlX2xhbmRpbmdcXFxcXCI+0KfQsNGB0YLRi9C1INCy0L7Qv9GA0L7RgdGLOjwvcD5cXFxcblxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmYXFfX2Jsb2NrXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZmFxX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJmYXFfX2l0ZW0tdGl0bGVcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwiZmFxX19pdGVtLXRpdGxlLWlubmVyXFxcXFwiPtCa0LDQuiDQvtC/0LvQsNGC0LjRgtGMINGB0LXRgNCy0LjRgT88L3NwYW4+PC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImZhcV9faXRlbS10ZXh0XFxcXFwiPtCd0LAg0LTQsNC90L3Ri9C5INC80L7QvNC10L3Rgiwg0YfRgtC+0LHRiyDRgdC+0LLQtdGA0YjQuNGC0Ywg0L7Qv9C70LDRgtGDLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAg0LLQsNC8INC90YPQttC90L4g0L/RgNC40LXRhdCw0YLRjCDQsiDQvdCw0Ygg0L7RhNC40YEg0L/QviDQsNC00YDQtdGB0YMg0JDQstGC0L7RgdGC0YDQvtC40YLQtdC70LXQuSA0MdCQINC6LjEg0YEgOTowMCDQtNC+IDE3OjAwICjQv9C9LdC/0YIpLlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAg0JzQtdC90LXQtNC20LXRgCDQv9GA0LXQtNC+0YHRgtCw0LLQuNGCINCy0LDQvCDQstGB0Y4g0L3QtdC+0LHRhdC+0LTQuNC80YPRjiDQuNC90YTQvtGA0LzQsNGG0LjRjiDQv9C+INCy0YvQsdC+0YDRg1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAg0YLQsNGA0LjRhNC90L7Qs9C+INC/0LvQsNC90LAg0Lgg0L/RgNC+0LLQtdC00LXQvdC40Y4g0L7Qv9C70LDRgtGLLiDQotCw0LrQttC1INC80Ysg0YDQsNCx0L7RgtCw0LXQvCDQvdCw0LQg0YHQuNGB0YLQtdC80L7QuVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAg0Y3Qu9C10LrRgtGA0L7QvdC90YvRhSDQv9C70LDRgtC10LbQtdC5LlxcXFxuICAgICAgICAgICAgICAgICAgICA8L3A+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmYXFfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImZhcV9faXRlbS10aXRsZVxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJmYXFfX2l0ZW0tdGl0bGUtaW5uZXJcXFxcXCI+0KfRgtC+INCx0YPQtNC10YIsINC60L7Qs9C00LAg0LfQsNC60L7QvdGH0LjRgtGB0Y8g0LzQtdGB0Y/Rhj88L3NwYW4+PC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImZhcV9faXRlbS10ZXh0XFxcXFwiPtCS0Ysg0L/QvtC70YPRh9C40YLQtSDRg9Cy0LXQtNC+0LzQu9C10L3QuNC1INC90LAg0LLQsNGIIGUtbWFpbCwg0LfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNC90L3Ri9C5INCyINGB0LjRgdGC0LXQvNC1LCDRgSDQv9GA0LXQtNC70L7QttC10L3QuNC10Lwg0L/RgNC+0LTQu9C40YLRjCDQtNC10LnRgdGC0LLRg9GO0YnQuNC5INGC0LDRgNC40YTQvdGL0Lkg0L/Qu9Cw0L0g0LjQu9C4INC/0LXRgNC10LnRgtC4INC90LAg0L3QvtCy0YvQuS4g0JXRgdC70Lgg0LIg0YLQtdGH0LXQvdC40LUgMzAg0LTQvdC10Lkg0LLRiyDQvdC4INGA0LDQt9GDINC90LUg0YHQvtCy0LXRgNGI0LjQu9C4INCy0YXQvtC0INCyINC60LDQsdC40L3QtdGCINGB0LDQudGC0LAgRmFjZU1hc3Rlciwg0YLQviDQstCw0Ygg0LrQsNCx0LjQvdC10YIg0LHRg9C00LXRgiDRg9C00LDQu9GR0L0uPC9wPlxcXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZhcV9fYmxvY2tcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmYXFfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImZhcV9faXRlbS10aXRsZVxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJmYXFfX2l0ZW0tdGl0bGUtaW5uZXJcXFxcXCI+0JzQvtCz0YMg0LvQuCDRjyDQuNC30LzQtdC90LjRgtGMINGC0LDRgNC40YTQvdGL0Lkg0L/Qu9Cw0L0/PC9zcGFuPjwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJmYXFfX2l0ZW0tdGV4dFxcXFxcIj7QldGB0LvQuCDQstGLINC/0L7Qu9GM0LfRg9C10YLQtdGB0Ywg0LHQtdGB0L/Qu9Cw0YLQvdC+0Lkg0LzQuNC90Lgt0YHRgtGA0LDQvdC40YbQtdC5LCDRgtC+INC/0L7Qu9GD0YfQuNGC0Ywg0LLRgdC1INCy0L7Qt9C80L7QttC90L7RgdGC0Lgg0Y3RhNGE0LXQutGC0LjQstC90L7Qs9C+INC/0YDQvtC00LLQuNC20LXQvdC40Y8g0L3QsCDRgdCw0LnRgtC1IEZhY2VNYXN0ZXIg0LLRiyDQvNC+0LbQtdGC0LUg0LIg0LvRjtCx0L7QtSDQstGA0LXQvNGPLCDQstGL0LHRgNCw0LIg0YLQsNGA0LjRhNC90YvQuSDQv9C70LDQvSDQuCDQvtC/0LvQsNGC0LjQsiDQtdCz0L4uINCV0YHQu9C4INCy0Ysg0YPQttC1INGB0L7QstC10YDRiNC40LvQuCDQvtC/0LvQsNGC0YMg0Lgg0YXQvtGC0LjRgtC1INC/0L7QvNC10L3Rj9GC0Ywg0L7QtNC40L0g0YLQsNGA0LjRhNC90YvQuSDQv9C70LDQvSDQvdCwINC00YDRg9Cz0L7QuSwg0YLQviDQstCw0Lwg0L3Rg9C20L3QviDQv9C+0LTQvtC20LTQsNGC0YwsINC/0L7QutCwINC30LDQutC+0L3Rh9C40YLRgdGPINC/0LXRgNCy0YvQuS48L3A+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmYXFfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImZhcV9faXRlbS10aXRsZVxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJmYXFfX2l0ZW0tdGl0bGUtaW5uZXJcXFxcXCI+0KMg0LzQtdC90Y8g0LXRgdGC0Ywg0LLQvtC/0YDQvtGBITwvc3Bhbj48L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiZmFxX19pdGVtLXRleHRcXFxcXCI+0JHRg9C00LXQvCDRgNCw0LTRiyDQv9GA0LXQtNGB0YLQsNCy0LjRgtGMINCy0LDQvFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YPRjiDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDRgNCw0LHQvtGC0LUg0L/Qu9Cw0YLRhNC+0YDQvNGLINC4INC+INGG0LXQvdCw0YUg0L/QviDRgtC10LvQtdGE0L7QvdGDICg4NDgyKSA3NC00NC0xOS48L3A+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPC9zZWN0aW9uPlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdyZWdpc3RyYXRpb24tZm9ybScsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvcmVnaXN0cmF0aW9uL3JlZ2lzdHJhdGlvbi1mb3JtL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInJlZ2lzdHJhdGlvbi1mb3JtXCIsXCJ0ZW1wbGF0ZVwiOlwiLi90ZW1wbGF0ZS5oYnNcIixcImVycm9yVGVtcGxhdGVcIjpcIi4vZXJyb3IuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXFxcInNlY3Rpb24tcmVnXFxcXFwiPlxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwiY29udGFpbmVyXFxcXFwiPlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJvd1xcXFxcIj5cXFxcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPVxcXFxcImZvcm0gZm9ybV9yZWctbWFzdGVyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZm9ybV9fY29udFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGgyIGNsYXNzPVxcXFxcImZvcm1fX3RpdGxlXFxcXFwiPtCd0LDRh9Cw0YLRjCDRgNC10LPQuNGB0YLRgNCw0YbQuNGOPC9oMj5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz1cXFxcXCJmb3JtX19mb3JtXFxcXFwiIGFjdGlvbj1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy51cmwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnVybCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ1cmxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIiBtZXRob2Q9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubWV0aG9kIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tZXRob2QgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibWV0aG9kXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCIgZGF0YS11cmwtbGs9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudXJsTEsgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnVybExLIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybExLXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZvcm1fX3Jvd1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFxcXCJ0ZXh0XFxcXFwiIHBsYWNlaG9sZGVyPVxcXFxcItCa0LDQuiDQktCw0YEg0LfQvtCy0YPRgj9cXFxcXCIgbmFtZT1cXFxcXCJyZWdtYXN0ZXJbbmFtZV1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZm9ybV9fcm93IHJvd1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZvcm1fX3Jvd19oYWxmXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFxcXCJ0ZXh0XFxcXFwiIHBsYWNlaG9sZGVyPVxcXFxcItCj0LrQsNC20LjRgtC1INCS0LDRiCDRgtC10LvQtdGE0L7QvVxcXFxcIiBuYW1lPVxcXFxcInJlZ21hc3RlcltwaG9uZV1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmb3JtX19yb3dfaGFsZlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XFxcXFwicGFzc3dvcmRcXFxcXCIgcGxhY2Vob2xkZXI9XFxcXFwi0J/RgNC40LTRg9C80LDQudGC0LUg0L/QsNGA0L7Qu9GMXFxcXFwiIG5hbWU9XFxcXFwicmVnbWFzdGVyW3Bhc3N3b3JkXVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmb3JtX19yb3dcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVxcXFxcImZvcm1fX2J0biBidG5cXFxcXCIgdHlwZT1cXFxcXCJzdWJtaXRcXFxcXCIgdmFsdWU9XFxcXFwi0JfQkNCg0JDQk9CY0KHQotCg0JjQoNCe0JLQkNCi0KzQodCvXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZvcm1fX3Jvd1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XFxcXFwiY2hlY2tib3hcXFxcXCIgY2hlY2tlZCB2YWx1ZT1cXFxcXCJ0cnVlXFxcXFwiPtGPINGB0L7Qs9C70LDRgdC10L0g0YEgPGEgaHJlZj1cXFxcXCIvb2ZlcnRhXFxcXFwiPtGD0YHQu9C+0LLQuNGP0LzQuDwvYT4gPC9sYWJlbD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L3NlY3Rpb24+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncmVnaXN0cmF0aW9uLWhlYWRlcicsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvcmVnaXN0cmF0aW9uL3JlZ2lzdHJhdGlvbi1oZWFkZXIvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicmVnaXN0cmF0aW9uLWhlYWRlclwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJjb250YWluZXJcXFxcXCI+XFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJyb3dcXFxcXCI+XFxcXG4gICAgICAgIDxzZWN0aW9uIGNsYXNzPVxcXFxcImxhbmRpbmctaGVhZGVyXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGgxIGNsYXNzPVxcXFxcInBhZ2UtdGl0bGUgcGFnZS10aXRsZV9sYW5kaW5nXFxcXFwiPkZhY2VNYXN0ZXIg4oCUINGB0LDQudGCINC/0L7QuNGB0LrQsCDRgdC/0LXRhtC40LDQu9C40YHRgtC+0LJcXFxcbiAgICAgICAgICAgICAgICDQsiDRgdGE0LXRgNC1INGD0YHQu9GD0LMg0LIg0KLQvtC70YzRj9GC0YLQuDwvaDE+XFxcXG4gICAgICAgIDwvc2VjdGlvbj5cXFxcbiAgICA8L2Rpdj5cXFxcbjwvZGl2PlwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ3JlZ2lzdHJhdGlvbi1tb3JlLXBhZ2UnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24tbW9yZS1wYWdlL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInJlZ2lzdHJhdGlvbi1tb3JlLXBhZ2VcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlLXdyXFxcXFwiPlxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwiY29udGFpbmVyXFxcXFwiPlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJvd1xcXFxcIj5cXFxcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPVxcXFxcIm1vcmUtcGFnZVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJwYWdlLXRpdGxlIHBhZ2UtdGl0bGVfbGFuZGluZ1xcXFxcIj7Qn9C+0LTRgNC+0LHQvdC10LUg0L4g0YHRgtGA0LDQvdC40YbQsNGFOjwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fcGljXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3BpYy1pbWdcXFxcXCIgYWx0PVxcXFxcItGB0YLRgNCw0L3QuNGG0LAg0Lgg0LzQuNC90Lgt0YHRgtGA0LDQvdC40YbQsFxcXFxcIiBzcmM9XFxcXFwiL2ltZy9yZWdpc3RyYXRpb24vMS5wbmdcXFxcXCIgd2lkdGg9XFxcXFwiMTAwJVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX190ZXh0XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3RleHQtdGl0bGVcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3RleHQtdGl0bGUtY291bnRcXFxcXCI+PC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3RleHQtdGl0bGUtaGVhZGVyIG1vcmUtcGFnZV9fdGV4dC10aXRsZS1oZWFkZXJfbm8tdmFsaWduXFxcXFwiPtCa0LDRgtCw0LvQvtCzINC80LDRgdGC0LXRgNC+0LI8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fdGV4dC10aXRsZS1zdWItaGVhZGVyXFxcXFwiPtCc0LjQvdC4LdGB0YLRgNCw0L3QuNGG0LAgKyDQu9C40YfQvdCw0Y8g0YHRgtGA0LDQvdC40YbQsDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fcGFyYWdyYXBoXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fcGFyYWdyYXBoLXRpdGxlXFxcXFwiPtCb0LjRh9C90LDRjyDRgdGC0YDQsNC90LjRhtCwPC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwibW9yZS1wYWdlX19wYXJhZ3JhcGgtdGV4dFxcXFxcIj7Qm9C40YfQvdCw0Y8g0YHRgtGA0LDQvdC40YbQsCDigJMg0Y3RgtC+INCy0LDRiNC1INGB0L7QsdGB0YLQstC10L3QvdC+0LUg0LjQvdGE0L7RgNC80LDRhtC40L7QvdC90L7QtSDQv9GA0L7RgdGC0YDQsNC90YHRgtCy0L4g0LTQu9GPINC/0YDQvtC00LLQuNC20LXQvdC40Y8g0LIg0KHQtdGC0LguINCe0L3QsCDQvNC+0LbQtdGCINGB0YLQsNGC0Ywg0LDQvdCw0LvQvtCz0L7QvCDQv9C10YDRgdC+0L3QsNC70YzQvdC+0LPQviDRgdCw0LnRgtCwLCDQu9C40LHQviwg0LXRgdC70Lgg0YMg0LLQsNGBINGD0LbQtSDQtdGB0YLRjCDRgdCy0L7QuSDRgdCw0LnRgiwg0LzRiyDQv9C+0LzQvtC20LXQvCDRgNCw0YHRiNC40YDQuNGC0Ywg0LDRgNGB0LXQvdCw0Lsg0LTQu9GPINC/0YDQuNCy0LvQtdGH0LXQvdC40Y8g0L3QsCDQvdC10LPQviDQutC70LjQtdC90YLQvtCyLiDQm9C40YfQvdCw0Y8g0YHRgtGA0LDQvdC40YbQsCDQtNCw0ZHRgiDQtNC+0YHRgtGD0L8g0Log0LzQvdC+0LbQtdGB0YLQstGDINGB0LXRgNCy0LjRgdC+0LIsINGH0YLQvtCx0Ysg0L/QvtC80L7Rh9GMINGB0L/QtdGG0LjQsNC70LjRgdGC0YMg0Lgg0LrQu9C40LXQvdGC0YMg0L3QsNC50YLQuCDQtNGA0YPQsyDQtNGA0YPQs9CwOiDQvdCw0L/QuNGB0LDQvdC40LUg0YHRgtCw0YLQtdC5LCDRhNC+0YLQvtCw0LvRjNCx0L7QvNGLLCDQvtGC0LfRi9Cy0YssINC/0YDQvtC00LLQuNC20LXQvdC40LUg0LIg0YHQvtGG0LjQsNC70YzQvdGL0YUg0YHQtdGC0Y/RhSwg0LLQuNC00LXQvtC60LDRgtCw0LvQvtCzLCDRgNGD0LHRgNC40LrQsCDCq9Ch0L7QstC10YLRiyDQnNCw0YHRgtC10YDQvtCywrssINC60LDRgtCw0LvQvtCzINGE0LjRgNC8INC4INC80L3QvtCz0L7QtSDQtNGA0YPQs9C+0LUuPC9wPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fcGFyYWdyYXBoXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fcGFyYWdyYXBoLXRpdGxlXFxcXFwiPtCc0LjQvdC4LdGB0YLRgNCw0L3QuNGG0LA8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3BhcmFncmFwaC10ZXh0XFxcXFwiPtCc0LjQvdC4LdGB0YLRgNCw0L3QuNGG0LAg4oCUINGN0YLQviDQstCw0YjQsCDQstC40LfQuNGC0LrQsCDRgSDQutC+0L3RgtCw0LrRgtC90L7QuSDQuNC90YTQvtGA0LzQsNGG0LjQtdC5LiDQl9Cw0YDQtdCz0LjRgdGC0YDQuNGA0L7QstCw0LLRiNC40YHRjCDQvdCwINC90LDRiNC10Lwg0YHQsNC50YLQtSDQsdC10YHQv9C70LDRgtC90L4sINCy0Ysg0L/QvtC70YPRh9Cw0LXRgtC1INGC0L7Qu9GM0LrQviDQvNC10YHRgtC+INCyINC+0LHRidC10Lwg0LrQsNGC0LDQu9C+0LPQtSDQnNCw0YHRgtC10YDQvtCyLCDQs9C00LUg0LLQsNGI0YMg0LLQuNC30LjRgtC60YMg0YHQvNC+0LPRg9GCINGD0LLQuNC00LXRgtGMINC/0L7RgdC10YLQuNGC0LXQu9C4LiDQndC+INCy0Ysg0LLRgdC10LPQtNCwINC80L7QttC10YLQtSDRgdC00LXQu9Cw0YLRjCDQuNC3INC90LXRkSDQu9C40YfQvdGD0Y4g0YHRgtGA0LDQvdC40YbRgyDQuCDRgtC10Lwg0YHQsNC80YvQvCDRg9Cy0LXQu9C40YfQuNGC0Ywg0L/RgNC40YLQvtC6INC60LvQuNC10L3RgtC+0LIuINCU0LvRjyDRjdGC0L7Qs9C+INCy0LDQvCDQvdGD0LbQvdC+INCy0YvQsdGA0LDRgtGMINC4INC+0L/Qu9Cw0YLQuNGC0Ywg0L7QtNC40L0g0LjQtyDRgtCw0YDQuNGE0L3Ri9GFINC/0LvQsNC90L7Qsi48L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX19waWNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fcGljLWltZyBtb3JlLXBhZ2VfX3BpYy1pbWdfb2Zmc2V0LTFcXFxcXCIgYWx0PVxcXFxcItGB0YLRgNCw0L3QuNGG0LAg0Lgg0LzQuNC90Lgt0YHRgtGA0LDQvdC40YbQsFxcXFxcIiBzcmM9XFxcXFwiL2ltZy9yZWdpc3RyYXRpb24vMi5wbmdcXFxcXCIgd2lkdGg9XFxcXFwiMTAwJVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX190ZXh0XFxcXFwiPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fdGV4dC10aXRsZVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fdGV4dC10aXRsZS1jb3VudFxcXFxcIj48L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fdGV4dC10aXRsZS1oZWFkZXJcXFxcXCI+0JrQsNGC0LDQu9C+0LMg0YHQutC40LTQvtC6INC4INC/0L7QtNCw0YDQutC+0LI8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3BhcmFncmFwaFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3BhcmFncmFwaC10ZXh0XFxcXFwiPtCj0YHRgtGA0LDQuNCy0LDQudGC0LUg0LDQutGG0LjQuCDQuCDRgdC60LjQtNC60LgsINC/0L7Qu9GD0YfQsNGPINC10YnRkSDQsdC+0LvRjNGI0LUg0LrQu9C40LXQvdGC0L7QsiEg0JzQvdC+0LPQuNC1INC/0L7RgdC10YLQuNGC0LXQu9C4INGA0LXQs9GD0LvRj9GA0L3QviDQvtGC0YHQu9C10LbQuNCy0LDRjtGCINCy0YvQs9C+0LTQvdGL0LUg0L/RgNC10LTQu9C+0LbQtdC90LjRjyDQsiDQvdCw0YjQtdC8INC60LDRgtCw0LvQvtCz0LUgwqvQodC60LjQtNC60Lgg0Lgg0L/QvtC00LDRgNC60LjCuy4g0J/QvtGN0YLQvtC80YMg0LXRgdC70Lgg0LLRiyDRgNCw0LfQvNC10YnQsNC10YLQtSDQsiDQvdGR0Lwg0LjQvdGE0L7RgNC80LDRhtC40Y4g0L4g0YHQutC40LTQutC1LCDRgtC+INGI0LDQvdGB0YssINGH0YLQviDQutC70LjQtdC90YIg0LfQsNC40L3RgtC10YDQtdGB0YPQtdGC0YHRjyDQstCw0YjQuNC8INC/0YDQtdC00LvQvtC20LXQvdC40LXQvCwg0LLQvtC30YDQsNGB0YLQsNGO0YIg0LLQtNCy0L7QtSEg0JrRgNC+0LzQtSDRgtC+0LPQviwg0YHQsNC80YvQtSDQsNC60YLRg9Cw0LvRjNC90YvQtSDQuCDQuNC90YLQtdGA0LXRgdC90YvQtSDQsNC60YbQuNC4INC80Ysg0YDQtdCz0YPQu9GP0YDQvdC+INC+0YHQstC10YnQsNC10Lwg0LIg0YHQvtGG0LjQsNC70YzQvdGL0YUg0YHQtdGC0Y/RhS48L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX2xpbmVcXFxcXCI+PC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX19waWNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fcGljLWltZyBtb3JlLXBhZ2VfX3BpYy1pbWdfb2Zmc2V0LTFcXFxcXCIgYWx0PVxcXFxcItGB0YLRgNCw0L3QuNGG0LAg0Lgg0LzQuNC90Lgt0YHRgtGA0LDQvdC40YbQsFxcXFxcIiBzcmM9XFxcXFwiL2ltZy9yZWdpc3RyYXRpb24vMy5wbmdcXFxcXCIgd2lkdGg9XFxcXFwiMTAwJVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX190ZXh0XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3RleHQtdGl0bGVcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3RleHQtdGl0bGUtY291bnRcXFxcXCI+PC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3RleHQtdGl0bGUtaGVhZGVyXFxcXFwiPtCa0LDRgtCw0LvQvtCzINCy0LjQtNC10L48L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3BhcmFncmFwaFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3BhcmFncmFwaC10ZXh0XFxcXFwiPtCSINCy0LjQtNC10L7QutCw0YLQsNC70L7Qs9C1INGD0LbQtSDRgdC+0LHRgNCw0L3QsCDRhtC10LvQsNGPINC60L7Qu9C70LXQutGG0LjRjyDRgdCw0LzRi9GFINC/0L7Qu9C10LfQvdGL0YUg0YDQvtC70LjQutC+0LIsINC90LDQudC00LXQvdC90YvRhSDQnNCw0YHRgtC10YDQsNC80Lgg0L3QsCDQv9GA0L7RgdGC0L7RgNCw0YUg0JjQvdGC0LXRgNC90LXRgtCwLiDQnNC90L7Qs9C40LUg0YHQv9C10YbQuNCw0LvQuNGB0YLRiyDQvdC1INGC0L7Qu9GM0LrQviDQvtGC0LHQuNGA0LDRjtGCINC70YPRh9GI0LXQtSwg0LjRgdGF0L7QtNGPINC40Lcg0YHQstC+0LjRhSDQt9C90LDQvdC40Lkg0Lgg0L7Qv9GL0YLQsCwg0L3QviDQuCDRgdC+0LfQtNCw0Y7RgiDQtdCz0L4hINCS0Ysg0LzQvtC20LXRgtC1INC30LDRgdC90Y/RgtGMINC90LAg0LLQuNC00LXQviDRgdC10LHRjywg0YHQstC+0Y4g0YDQsNCx0L7RgtGDLCDQtNC+0LLQvtC70YzQvdGL0YUg0LrQu9C40LXQvdGC0L7Qsiwg0L/QvtC60LDQt9Cw0YLRjCwg0LrQsNC6INGH0YLQvi3RgtC+INGA0LDQsdC+0YLQsNC10YIsINC40LvQuCDQtNCw0YLRjCDQtNC10LvRjNC90YvQuSDRgdC+0LLQtdGCINC40Lcg0YHQvtCx0YHRgtCy0LXQvdC90L7QuSDQv9GA0LDQutGC0LjQutC4LiDQktC40LTQtdC+0YDQvtC70LjQutC4INGB0L/QvtGB0L7QsdC90Ysg0L/QvtC60LDQt9Cw0YLRjCDQv9C+0YHQtdGC0LjRgtC10LvRjiDRgtC+LCDRh9GC0L4g0L/QvtGA0L7QuSDRgdC70L7QttC90L4g0L/QtdGA0LXQtNCw0YLRjCDQvtC00L3QuNC80Lgg0YTQvtGC0L7Qs9GA0LDRhNC40Y/QvNC4LCDQv9C+0LzQvtCz0LDRjtGCINGB0YTQvtGA0LzQuNGA0L7QstCw0YLRjCDQuNC90YLQtdGA0LXRgSDQuiDQutCw0LrQvtC5LdC70LjQsdC+INGD0YHQu9GD0LPQtSDQuNC70Lgg0YLQvtCy0LDRgNGDLjwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fbGluZVxcXFxcIj48L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9faXRlbVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3BpY1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XFxcXFwibW9yZS1wYWdlX19waWMtaW1nIG1vcmUtcGFnZV9fcGljLWltZ19vZmZzZXQtMVxcXFxcIiBhbHQ9XFxcXFwi0YHRgtGA0LDQvdC40YbQsCDQuCDQvNC40L3QuC3RgdGC0YDQsNC90LjRhtCwXFxcXFwiIHNyYz1cXFxcXCIvaW1nL3JlZ2lzdHJhdGlvbi80LnBuZ1xcXFxcIiB3aWR0aD1cXFxcXCIxMDAlXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3RleHRcXFxcXCI+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX190ZXh0LXRpdGxlXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX190ZXh0LXRpdGxlLWNvdW50XFxcXFwiPjwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX190ZXh0LXRpdGxlLWhlYWRlclxcXFxcIj7QmtCw0YLQsNC70L7QsyDRgdC+0LLQtdGC0L7QsiDQvNCw0YHRgtC10YDQvtCyPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX19wYXJhZ3JhcGhcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwibW9yZS1wYWdlX19wYXJhZ3JhcGgtdGV4dFxcXFxcIj7QoNGD0LHRgNC40LrQsCDCq9Ch0LXQutGA0LXRgtGLINCc0LDRgdGC0LXRgNC+0LLCuyDigJMg0Y3RgtC+INGB0LHQvtGA0L3QuNC6INGB0YLQsNGC0LXQuSDQvtGCINC90LDRiNC40YUg0YHQv9C10YbQuNCw0LvQuNGB0YLQvtCyINC00LvRjyDQv9C+0LzQvtGJ0Lgg0L/QvtGB0LXRgtC40YLQtdC70Y/QvCDQsiDRgdCw0LzRi9GFINGA0LDQt9C70LjRh9C90YvRhSDQttC40LfQvdC10L3QvdGL0YUg0YHQuNGC0YPQsNGG0LjRj9GFLiDQp9GC0L7QsdGLINC/0L7Qv9Cw0YHRgtGMINCyINC60LDRgtCw0LvQvtCzIMKr0KHQtdC60YDQtdGC0L7QssK7LCDQstCw0Lwg0L3Rg9C20L3QviDQvdCw0L/QuNGB0LDRgtGMINC90LAg0LvQuNGH0L3QvtC5INGB0YLRgNCw0L3QuNGG0LUg0YHRgtCw0YLRjNGOLiDQmNC90YLQtdGA0LXRgdC90YvQuSDQuCDQv9C+0LvQtdC30L3Ri9C5INC80LDRgtC10YDQuNCw0Lsg0LTQtdC80L7QvdGB0YLRgNC40YDRg9C10YIg0LrQu9C40LXQvdGC0YMg0LLQsNGIINCx0L7Qs9Cw0YLRi9C5INC+0L/Ri9GCINC4INCy0YvRgdC+0LrQuNC5INGD0YDQvtCy0LXQvdGMINC/0YDQvtGE0LXRgdGB0LjQvtC90LDQu9C40LfQvNCwLiDQmtC+0LPQtNCwINGB0YLQsNGC0YzRjyDQsdGD0LTQtdGCINC+0L/Rg9Cx0LvQuNC60L7QstCw0L3QsCDQvdCwINCy0LDRiNC10Lkg0YHRgtGA0LDQvdC40YbQtSwg0LzQvtC00LXRgNCw0YLQvtGA0Ysg0L/RgNC+0LLQtdGA0Y/Rgiwg0L/QvtC00YXQvtC00LjRgiDQu9C4INC+0L3QsCDQtNC70Y8g0LrQsNGC0LDQu9C+0LPQsCDRgdC+0LLQtdGC0L7Qsi4g0JPQu9Cw0LLQvdGL0LzQuCDQutGA0LjRgtC10YDQuNGP0LzQuCDRj9Cy0LvRj9GO0YLRgdGPINC/0YDQsNC60YLQuNGH0L3QvtGB0YLRjCDQuCDQv9C+0L3Rj9GC0L3QvtGB0YLRjCDQtNC70Y8g0L/QvtGB0LXRgtC40YLQtdC70Y8sINC+0YLRgdGD0YLRgdGC0LLQuNC1INC/0YDRj9C80L7QuSDRgNC10LrQu9Cw0LzRiy48L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX2xpbmVcXFxcXCI+PC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX19waWNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fcGljLWltZyBtb3JlLXBhZ2VfX3BpYy1pbWdfb2Zmc2V0LTFcXFxcXCIgYWx0PVxcXFxcItGB0YLRgNCw0L3QuNGG0LAg0Lgg0LzQuNC90Lgt0YHRgtGA0LDQvdC40YbQsFxcXFxcIiBzcmM9XFxcXFwiL2ltZy9yZWdpc3RyYXRpb24vNS5wbmdcXFxcXCIgd2lkdGg9XFxcXFwiMTAwJVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwibW9yZS1wYWdlX190ZXh0XFxcXFwiPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fdGV4dC10aXRsZVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fdGV4dC10aXRsZS1jb3VudFxcXFxcIj48L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm1vcmUtcGFnZV9fdGV4dC10aXRsZS1oZWFkZXJcXFxcXCI+0JrQsNGC0LDQu9C+0LMg0YTQuNGA0Lw8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3BhcmFncmFwaFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtb3JlLXBhZ2VfX3BhcmFncmFwaC10ZXh0XFxcXFwiPtCf0L7QvNC40LzQviDQv9C10YDQtdGH0L3RjyDQvtGC0LTQtdC70YzQvdGL0YUg0YHQv9C10YbQuNCw0LvQuNGB0YLQvtCyINGDINC90LDRgSDRgtCw0LrQttC1INC10YHRgtGMINC60LDRgtCw0LvQvtCzINC60L7QvNC/0LDQvdC40LkuINCd0LAg0YHQtdCz0L7QtNC90Y/RiNC90LjQuSDQtNC10L3RjCDQsiDQvdGR0Lwg0L3QsNGF0L7QtNC40YLRgdGPINCx0L7Qu9C10LUgMTAwINC+0YDQs9Cw0L3QuNC30LDRhtC40LksINCz0LTQtSDRgNCw0LHQvtGC0LDRjtGCINC90LDRiNC4INCc0LDRgdGC0LXRgNCwLiDQktGB0LUg0LrQvtC80L/QsNC90LjQuCDRgNCw0YHQv9C+0LvQsNCz0LDRjtGC0YHRjyDQsiDRgdC+0L7RgtCy0LXRgtGB0YLQstC40Lgg0YEg0L/RgNC40LLRi9GH0L3Ri9C8INGA0YPQsdGA0LjQutCw0YLQvtGA0L7QvCDQsiDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC4INC+0YIg0YLQvtCz0L4sINCyINC60LDQutC+0Lkg0YHRhNC10YDQtSDQv9C+0YHQtdGC0LjRgtC10LvRjCDQuNGJ0LXRgiDRgdC/0LXRhtC40LDQu9C40YHRgtCwLiDQlNCw0L3QvdGL0Lkg0LrQsNGC0LDQu9C+0LMg0L/QvtC80L7Qs9Cw0LXRgiDQvtGA0LPQsNC90LjQt9C+0LLQsNGC0Ywg0Y3RhNGE0LXQutGC0LjQstC90L7QtSDQv9GA0L7QtNCy0LjQttC10L3QuNC1INC90LUg0YLQvtC70YzQutC+INC00LvRjyDQvtGC0LTQtdC70YzQvdC+0LPQviDRgdC+0YLRgNGD0LTQvdC40LrQsCwg0L3QviDQuCDQtNC70Y8g0YbQtdC70L7QuSDQutC+0LzQv9Cw0L3QuNC4LiDQmtCw0LbQtNCw0Y8g0L7RgNCz0LDQvdC40LfQsNGG0LjRjyDQvNC+0LbQtdGCINC40LzQtdGC0Ywg0L7QtNC90L7Qs9C+INGB0LLQvtC10LPQviDQv9GA0LXQtNGB0YLQsNCy0LjRgtC10LvRjyDQvdCwIEZhY2VNYXN0ZXIg0LjQu9C4INCx0L7Qu9GM0YjQtS4g0KLQsNC60LbQtSDQsiDQutCw0YLQsNC70L7Qs9C1INGE0LjRgNC8INC10YHRgtGMINGB0LLQvtC5INGA0LXQudGC0LjQvdCzINGA0LXQutC+0LzQtdC90LTQsNGG0LjQuS4g0J7QvSDRgdC60LvQsNC00YvQstCw0LXRgtGB0Y8g0LjQtyDRgdGD0LzQvNGLIMKr0LvQsNC50LrQvtCywrssINC60L7RgtC+0YDRi9C1INC/0L7Qu9GD0YfQuNC70Lgg0LLRgdC1INCc0LDRgdGC0LXRgNCwINC40Lcg0L7QtNC90L7QuSDQutC+0LzQv9Cw0L3QuNC4LiDQotCw0LrQuNC8INC+0LHRgNCw0LfQvtC8LCDRh9C10Lwg0L/QvtC/0YPQu9GP0YDQvdC10LUg0YHQvtGC0YDRg9C00L3QuNC60Lgg0YHRgNC10LTQuCDQutC70LjQtdC90YLQvtCyLCDRgtC10Lwg0LLRi9GI0LUg0YDQtdC50YLQuNC90LMg0L7RgNCz0LDQvdC40LfQsNGG0LjQuC48L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L3NlY3Rpb24+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdyZWdpc3RyYXRpb24tcHJpY2UnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24tcHJpY2UvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwicmVnaXN0cmF0aW9uLXByaWNlXCIsXCJ0ZW1wbGF0ZVwiOlwiLi90ZW1wbGF0ZS5oYnNcIixcImVycm9yVGVtcGxhdGVcIjpcIi4vZXJyb3IuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFxcXCJwcmljZS13ciBjb3JuZXIgY29ybmVyX2JnXFxcXFwiPlxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwiY29udGFpbmVyXFxcXFwiPlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJvd1xcXFxcIj5cXFxcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPVxcXFxcInByaWNlXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInBhZ2UtdGl0bGUgcGFnZS10aXRsZV9sYW5kaW5nXFxcXFwiPtCh0LrQvtC70YzQutC+INGB0YLQvtC40YIg0L/RgNC10LTQu9C+0LbQtdC90LjQtT88L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJzdWItdGl0bGUgc3ViLXRpdGxlX2xhbmRpbmdcXFxcXCI+0JLRi9Cx0LXRgNC40YLQtSDQvdGD0LbQvdGD0Y4g0LfQsNC60LvQsNC00LrRgzo8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8IS0tPGRpdiBpZD1cXFxcXCJob3Jpem9udGFsVGFiXFxcXFwiPi0tPlxcXFxuICAgICAgICAgICAgICAgICAgICA8IS0tPHVsIGJsb2NrPVxcXFxcInByaWNlLXRhYnMtbGlzdFxcXFxcIiBtaXg9XFxcXFwiYmxvY2s6cmVzcC10YWJzLWxpc3QgaG9yXzFcXFxcXCI+LS0+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tPGxpIGVsZW09XFxcXFwiaXRlbVxcXFxcIj7Qo9GB0LvQvtCy0LjRjyDQtNC70Y8g0YTQuNC30LjRh9C10YHQutC40YUg0LvQuNGGPC9saT4tLT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS08bGkgZWxlbT1cXFxcXCJpdGVtXFxcXFwiPtCj0YHQu9C+0LLQuNGPINC00LvRjyDRjtGA0LjQtNC40YfQtdGB0LrQuNGFINC70LjRhjwvbGk+LS0+XFxcXG4gICAgICAgICAgICAgICAgICAgIDwhLS08L3VsPi0tPlxcXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInByaWNlLXRhYnNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInRhYi1jb250ZW50IHRhYi1jb250ZW50X2FjdGl2ZVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInRhYi1jb250ZW50X19uYW1lXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwic3RyZWxrYVwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQo9GB0LvQvtCy0LjRjyDQtNC70Y8g0YTQuNC30LjRh9C10YHQutC40YUg0LvQuNGGXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9ja1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9ja19faXRlbVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fcGFydC0xXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX19tZWRhbHNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLW1lZGFsc1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1tZWRhbHNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcIm1lZGFsX2NvbG9yXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fdGl0bGVcXFxcXCI+0KHRgtCw0YDRgjwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fc3ViLXRpdGxlXFxcXFwiPtCR0LXRgdC/0LvQsNGC0L3QvjwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX19wYXJ0LTJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1cyBvZmVycy1ibG9jay1wbHVzX3NpbmdsZVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1c19faXRlbSBvZmVycy1ibG9jay1wbHVzX19pdGVtX3NpbmdsZVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJtaW5pLXBhZ2VfY29sb3JcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX190ZXh0XFxcXFwiPtCc0LjQvdC4PGJyPtGB0YLRgNCw0L3QuNGG0LA8L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fcGFydC0zXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX19idG5cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJidG4gYnRuX3JlZy1wbHVzIGpzLXNjcm9sbHRvXFxcXFwiIGhyZWY9XFxcXFwiI2Zvcm0yXFxcXFwiPtCS0YvQsdGA0LDRgtGMPC9hPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9ja19faXRlbVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fcGFydC0xXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX19tZWRhbHNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLW1lZGFsc1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1tZWRhbHNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcIm1lZGFsX2NvbG9yXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLW1lZGFsc19faWNvblxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwibWVkYWxfY29sb3JcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX190aXRsZVxcXFxcIj7QodC/0LXRhtC40LDQu9C40YHRgjwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fc3ViLXRpdGxlXFxcXFwiPjgg0YDRg9CxLiDQsiDQtNC10L3RjDwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3BhcnQtMlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcIm1pbmktcGFnZV9jb2xvclwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXNfX3RleHRcXFxcXCI+0JzQuNC90Lg8YnI+0YHRgtGA0LDQvdC40YbQsDwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcInBhZ2VfY29sb3JcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX190ZXh0XFxcXFwiPtCb0LjRh9C90LDRjyDRgdGC0YDQsNC90LjRhtCwPC9wPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3BhcnQtM1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fYnRuXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwiYnRuIGJ0bl9yZWctcGx1cyBqcy1zY3JvbGx0b1xcXFxcIiBocmVmPVxcXFxcIiNmb3JtMlxcXFxcIj7QktGL0LHRgNCw0YLRjDwvYT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2tfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3BhcnQtMVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fbWVkYWxzXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1tZWRhbHNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stbWVkYWxzX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJtZWRhbF9jb2xvclwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1tZWRhbHNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcIm1lZGFsX2NvbG9yXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLW1lZGFsc19faWNvblxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwibWVkYWxfY29sb3JcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX190aXRsZVxcXFxcIj7Qn9GA0L7RhNC10YHRgdC40L7QvdCw0Ls8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3N1Yi10aXRsZVxcXFxcIj4xNiDRgNGD0LEuINCyINC00LXQvdGMPC9wPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3BhcnQtMlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzIG9mZXJzLWJsb2NrLXBsdXNfcHJvZlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1c19faXRlbVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJtaW5pLXBhZ2VfY29sb3JcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX190ZXh0XFxcXFwiPtCc0LjQvdC4PGJyPtGB0YLRgNCw0L3QuNGG0LA8L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1c19faXRlbVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJwYWdlX2NvbG9yXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1c19fdGV4dFxcXFxcIj7Qm9C40YfQvdCw0Y8g0YHRgtGA0LDQvdC40YbQsDwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzLWRvcFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1cy1kb3BfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1cy1kb3BfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcInZpZGVvXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJnaWZ0XCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJwaWN0dXJlXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJkaWFsb2dcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX2Rlc2NyLXRleHRcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQodC60LjQtNC60LggKyDRhNC+0YLQviArINCy0LjQtNC10L4gKyDQvtGC0LfRi9Cy0YtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fcGFydC0zXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX19idG5cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJidG4gYnRuX3JlZy1wbHVzIGpzLXNjcm9sbHRvXFxcXFwiIGhyZWY9XFxcXFwiI2Zvcm0yXFxcXFwiPtCS0YvQsdGA0LDRgtGMPC9hPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9faGVhZFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19lbXB0eSBwcmljZS10YWJsZS1maXJzdC1jb2x1bW5cXFxcXCI+Jm5ic3A7PC90aD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19oZWFkLXRleHQgcHJpY2UtdGFibGUtc2Vjb25kLWNvbHVtblxcXFxcIj7QndC+0LLQuNGH0L7QujwvdGg+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9faGVhZC10ZXh0IHByaWNlLXRhYmxlLXRoaXJkLWNvbHVtblxcXFxcIj7QodC/0LXRhtC40LDQu9C40YHRgjwvdGg+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9faGVhZC10ZXh0IHByaWNlLXRhYmxlLWZvcnRoLWNvbHVtblxcXFxcIj7Qn9GA0L7RhNC10YHRgdC40L7QvdCw0Ls8L3RoPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX2JvZHlcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdHJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjkwINC00L3QtdC5PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+0JHQtdGB0L/Qu9Cw0YLQvdC+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmV5XFxcXFwiPi08L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+MSA1MDAg0YDRg9CxLjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdHJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjE4MCDQtNC90LXQuTwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JleVxcXFxcIj4tPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjEgNDUwINGA0YPQsS48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj4yIDcwMCDRgNGD0LEuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190clxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+MzYw0LTQvdC10Lk8L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj4yIDYwMCDRgNGD0LEuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+NCA4MDAg0YDRg9CxLjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdHJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPtCc0LjQvdC4LdGB0YLRgNCw0L3QuNGG0LA8L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZWVuXFxcXFwiPis8L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmVlblxcXFxcIj4rPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JlZW5cXFxcXCI+Kzwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj7Qm9C40YfQvdCw0Y8g0YHRgtGA0LDQvdC40YbQsDwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JleVxcXFxcIj4tPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JlZW5cXFxcXCI+Kzwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZWVuXFxcXFwiPis8L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190clxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+0JDRgdGB0L7RgNGC0LjQvNC10L3RgiDRg9GB0LvRg9CzPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+NdGI0YIuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+ONGI0YIuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+ONGI0YIuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190clxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+0KHQutC40LTQutC4INC4INC/0L7QtNCw0YDQutC4ICsg0YDQsNC30LzQtdGJ0LXQvdC40LUg0LIg0LrQsNGC0LDQu9C+0LPQtSBcXFxcXCLQodC60LjQtNC60Lgg0Lgg0L/QvtC00LDRgNC60LhcXFxcXCI8L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj4y0YjRgi48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj7QpNC+0YLQvtCw0LvRjNCx0L7QvDwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JleVxcXFxcIj4tPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JleVxcXFxcIj4tPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjPRiNGCLjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdHJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPtCS0LjQtNC10L7RgNC+0LvQuNC6ICsg0YDQsNC30LzQtdGJ0LXQvdC40LUg0LIg0LrQsNGC0LDQu9C+0LPQtSDQktC40LTQtdC+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmV5XFxcXFwiPi08L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmV5XFxcXFwiPi08L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+MtGI0YIuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190clxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+0KHRgtCw0YLRjNGPICsg0YDQsNC30LzQtdGJ0LXQvdC40LUg0LIg0LrQsNGC0LDQu9C+0LPQtSDQodC+0LLQtdGC0L7QsiDQnNCw0YHRgtC10YDQvtCyPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmV5XFxcXFwiPi08L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmV5XFxcXFwiPi08L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+MtGI0YIuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190clxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+0JvQsNC50LrQuCwg0L7RgtC30YvQstGLLCDRgNC10LrQvtC80LXQvdC00LDRhtC40Lg8L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj7QstC60LsuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190clxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+Jm5ic3A7PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PGEgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX2J0biBqcy1zY3JvbGx0b1xcXFxcIiBocmVmPVxcXFxcIiNmb3JtMlxcXFxcIj7QnNC90LUg0L/QvtC00YXQvtC00LjRgiE8L2E+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PGEgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX2J0biBqcy1zY3JvbGx0b1xcXFxcIiBocmVmPVxcXFxcIiNmb3JtMlxcXFxcIj7QnNC90LUg0L/QvtC00YXQvtC00LjRgiE8L2E+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PGEgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX2J0biBqcy1zY3JvbGx0b1xcXFxcIiBocmVmPVxcXFxcIiNmb3JtMlxcXFxcIj7QnNC90LUg0L/QvtC00YXQvtC00LjRgiE8L2E+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInRhYi1jb250ZW50XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwidGFiLWNvbnRlbnRfX25hbWVcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJzdHJlbGthXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCj0YHQu9C+0LLQuNGPINC00LvRjyDRjtGA0LjQtNC40YfQtdGB0LrQuNGFINC70LjRhlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2tcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2tfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmIGRlc2NyaXB0aW9uLXRhcmlmX2xvbmdcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fcGFydC0xXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX19tZWRhbHNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLW1lZGFsc1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1tZWRhbHNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcIm1lZGFsX2NvbG9yXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fdGl0bGVcXFxcXCI+0KHRgtCw0YDRgjxicj7QkdC40LfQvdC10YE8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3N1Yi10aXRsZVxcXFxcIj4xNiDRgNGD0LEuINCyINC00LXQvdGMPC9wPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3BhcnQtMlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzIG9mZXJzLWJsb2NrLXBsdXNfc2luZ2xlXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX19pdGVtIG9mZXJzLWJsb2NrLXBsdXNfX2l0ZW1fc2luZ2xlXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcIm1pbmktcGFnZV9jb2xvclwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXNfX3RleHRcXFxcXCI+0JzQuNC90Lg8YnI+0YHRgtGA0LDQvdC40YbQsDwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX19wYXJ0LTNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX2J0blxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImJ0biBidG5fcmVnLXBsdXMganMtc2Nyb2xsdG9cXFxcXCIgaHJlZj1cXFxcXCIjZm9ybTJcXFxcXCI+0JLRi9Cx0YDQsNGC0Yw8L2E+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZiBkZXNjcmlwdGlvbi10YXJpZl9sb25nXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3BhcnQtMVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fbWVkYWxzXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1tZWRhbHNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stbWVkYWxzX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJtZWRhbF9jb2xvclwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1tZWRhbHNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcIm1lZGFsX2NvbG9yXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fdGl0bGVcXFxcXCI+0KHQv9C10YbQuNCw0LvQuNGB0YIg0JHQuNC30L3QtdGBPC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX19zdWItdGl0bGVcXFxcXCI+MjUg0YDRg9CxLiDQsiDQtNC10L3RjDwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3BhcnQtMlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcIm1pbmktcGFnZV9jb2xvclwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXNfX3RleHRcXFxcXCI+0JzQuNC90Lg8YnI+0YHRgtGA0LDQvdC40YbQsDwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcInBhZ2VfY29sb3JcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX190ZXh0XFxcXFwiPtCb0LjRh9C90LDRjyDRgdGC0YDQsNC90LjRhtCwPC9wPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3BhcnQtM1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fYnRuXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwiYnRuIGJ0bl9yZWctcGx1cyBqcy1zY3JvbGx0b1xcXFxcIiBocmVmPVxcXFxcIiNmb3JtMlxcXFxcIj7QktGL0LHRgNCw0YLRjDwvYT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2tfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmIGRlc2NyaXB0aW9uLXRhcmlmX2xvbmdcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fcGFydC0xXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX19tZWRhbHNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLW1lZGFsc1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1tZWRhbHNfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcIm1lZGFsX2NvbG9yXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLW1lZGFsc19faWNvblxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwibWVkYWxfY29sb3JcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stbWVkYWxzX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJtZWRhbF9jb2xvclwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3RpdGxlXFxcXFwiPtCf0YDQvtGE0LXRgdGB0LjQvtC90LDQuyDQkdC40LfQvdC10YE8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3N1Yi10aXRsZVxcXFxcIj4zMyDRgNGD0LEuINCyINC00LXQvdGMPC9wPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX3BhcnQtMlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzIG9mZXJzLWJsb2NrLXBsdXNfcHJvZlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1c19faXRlbVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJtaW5pLXBhZ2VfY29sb3JcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX190ZXh0XFxcXFwiPtCc0LjQvdC4PGJyPtGB0YLRgNCw0L3QuNGG0LA8L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1c19faXRlbVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJwYWdlX2NvbG9yXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1c19fdGV4dFxcXFxcIj7Qm9C40YfQvdCw0Y8g0YHRgtGA0LDQvdC40YbQsDwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvZmVycy1ibG9jay1wbHVzLWRvcFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1cy1kb3BfX2l0ZW1cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XFxcXFwib2ZlcnMtYmxvY2stcGx1cy1kb3BfX2ljb25cXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcInZpZGVvXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJnaWZ0XCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJwaWN0dXJlXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pdGVtXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVxcXFxcIm9mZXJzLWJsb2NrLXBsdXMtZG9wX19pY29uXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJkaWFsb2dcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiZGVzY3JpcHRpb24tdGFyaWZfX2Rlc2NyLXRleHRcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQodC60LjQtNC60LggKyDRhNC+0YLQviArINCy0LjQtNC10L4gKyDQvtGC0LfRi9Cy0YtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJkZXNjcmlwdGlvbi10YXJpZl9fcGFydC0zXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImRlc2NyaXB0aW9uLXRhcmlmX19idG5cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJidG4gYnRuX3JlZy1wbHVzIGpzLXNjcm9sbHRvXFxcXFwiIGhyZWY9XFxcXFwiI2Zvcm0yXFxcXFwiPtCS0YvQsdGA0LDRgtGMPC9hPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9faGVhZFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19lbXB0eSBwcmljZS10YWJsZS1maXJzdC1jb2x1bW5cXFxcXCI+Jm5ic3A7PC90aD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19oZWFkLXRleHQgcHJpY2UtdGFibGUtc2Vjb25kLWNvbHVtblxcXFxcIj7QodGC0LDRgNGCPGJyPtCR0LjQt9C90LXRgTwvdGg+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9faGVhZC10ZXh0IHByaWNlLXRhYmxlLXRoaXJkLWNvbHVtblxcXFxcIj7QodC/0LXRhtC40LDQu9C40YHRgiDQkdC40LfQvdC10YE8L3RoPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX2hlYWQtdGV4dCBwcmljZS10YWJsZS1mb3J0aC1jb2x1bW5cXFxcXCI+0J/RgNC+0YTQtdGB0YHQuNC+0L3QsNC7INCR0LjQt9C90LXRgTwvdGg+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keSBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fYm9keVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190clxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+OTAg0LTQvdC10Lk8L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj4xIDUwMCDRgNGD0LEuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+MiAyNTAg0YDRg9CxLjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjMgMDAwINGA0YPQsS48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj4xODAg0LTQvdC10Lk8L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj40IDA1MCDRgNGD0LEuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+NSA0MDAg0YDRg9CxLjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdHJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjM2MNC00L3QtdC5PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmV5XFxcXFwiPi08L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+NyAyMDAg0YDRg9CxLjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjkgNjAwINGA0YPQsS48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj7QnNC40L3QuC3RgdGC0YDQsNC90LjRhtCwPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmVlblxcXFxcIj4rPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JlZW5cXFxcXCI+Kzwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZWVuXFxcXFwiPis8L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190clxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+0JvQuNGH0L3QsNGPINGB0YLRgNCw0L3QuNGG0LA8L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZWVuXFxcXFwiPis8L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmVlblxcXFxcIj4rPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdHJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPtCQ0YHRgdC+0YDRgtC40LzQtdC90YIg0YPRgdC70YPQszwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjXRiNGCLjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjjRiNGCLjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjjRiNGCLjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdHJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPtCb0L7Qs9C+0YLQuNC/INC60L7QvNC/0LDQvdC40LggKyDRgNCw0LfQvNC10YnQtdC90LjQtSDQsiDQutCw0YLQsNC70L7Qs9C1INC60L7QvNC/0LDQvdC40Lk8L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZWVuXFxcXFwiPis8L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmVlblxcXFxcIj4rPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JlZW5cXFxcXCI+Kzwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj7QodC60LjQtNC60Lgg0Lgg0L/QvtC00LDRgNC60LggKyDRgNCw0LfQvNC10YnQtdC90LjQtSDQsiDQutCw0YLQsNC70L7Qs9C1IFxcXFxcItCh0LrQuNC00LrQuCDQuCDQv9C+0LTQsNGA0LrQuFxcXFxcIjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JleVxcXFxcIj4tPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JleVxcXFxcIj4tPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjLRiNGCLjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdHJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPtCk0L7RgtC+0LDQu9GM0LHQvtC8PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmV5XFxcXFwiPi08L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+PHNwYW4gY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3JvdW5kIHByaWNlLXRhYmxlX19yb3VuZF9ncmV5XFxcXFwiPi08L3NwYW4+PC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+M9GI0YIuPC90ZD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190clxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fdGRcXFxcXCI+0JLQuNC00LXQvtGA0L7Qu9C40LogKyDRgNCw0LfQvNC10YnQtdC90LjQtSDQsiDQutCw0YLQsNC70L7Qs9C1INCS0LjQtNC10L48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj4y0YjRgi48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj7QodGC0LDRgtGM0Y8gKyDRgNCw0LfQvNC10YnQtdC90LjQtSDQsiDQutCw0YLQsNC70L7Qs9C1INCh0L7QstC10YLQvtCyINCc0LDRgdGC0LXRgNC+0LI8L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48c3BhbiBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fcm91bmQgcHJpY2UtdGFibGVfX3JvdW5kX2dyZXlcXFxcXCI+LTwvc3Bhbj48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj4y0YjRgi48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj7Qm9Cw0LnQutC4LCDQvtGC0LfRi9Cy0YssINGA0LXQutC+0LzQtdC90LTQsNGG0LjQuDwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JleVxcXFxcIj4tPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPjxzcGFuIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX19yb3VuZCBwcmljZS10YWJsZV9fcm91bmRfZ3JleVxcXFxcIj4tPC9zcGFuPjwvdGQ+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RkXFxcXFwiPtCy0LrQuy48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XFxcXFwicHJpY2UtdGFibGVfX3RyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj4mbmJzcDs8L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48YSBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fYnRuIGpzLXNjcm9sbHRvXFxcXFwiIGhyZWY9XFxcXFwiI2Zvcm0yXFxcXFwiPtCc0L3QtSDQv9C+0LTRhdC+0LTQuNGCITwvYT48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48YSBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fYnRuIGpzLXNjcm9sbHRvXFxcXFwiIGhyZWY9XFxcXFwiI2Zvcm0yXFxcXFwiPtCc0L3QtSDQv9C+0LTRhdC+0LTQuNGCITwvYT48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInByaWNlLXRhYmxlX190ZFxcXFxcIj48YSBjbGFzcz1cXFxcXCJwcmljZS10YWJsZV9fYnRuIGpzLXNjcm9sbHRvXFxcXFwiIGhyZWY9XFxcXFwiI2Zvcm0yXFxcXFwiPtCc0L3QtSDQv9C+0LTRhdC+0LTQuNGCITwvYT48L3RkPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPCEtLTwvZGl2Pi0tPlxcXFxuICAgICAgICAgICAgPC9zZWN0aW9uPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICA8L2Rpdj5cXFxcbjwvZGl2PlxcXFxuXCI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ3JlZ2lzdHJhdGlvbi13aHktd2UnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24td2h5LXdlL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcInJlZ2lzdHJhdGlvbi13aHktd2VcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGxhbWJkYT10aGlzLmxhbWJkYSwgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGJ1ZmZlciA9IFwiPGRpdiBjbGFzcz1cXFxcXCJ3aHktd2Utd3JcXFxcXCI+XFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJjb250YWluZXJcXFxcXCI+XFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicm93XFxcXFwiPlxcXFxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9XFxcXFwid2h5LXdlXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInBhZ2UtdGl0bGUgcGFnZS10aXRsZV9sYW5kaW5nXFxcXFwiPtCf0L7Rh9C10LzRgyDQstGL0LHQuNGA0LDRjtGCINC90LDRgT88L3A+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJ3aHktd2VfX2xpc3RcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicm93XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvdXItcGx1c1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm91ci1wbHVzX19yb3VuZFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwib3VyLXBsdXNfX3RpdGxlXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm1hc3RlciA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCI8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwib3VyLXBsdXNfX3RleHRcXFxcXCI+XCI7XFxuICBzdGFjazEgPSBsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm1hc3Rlck5hbWUgOiBzdGFjazEpLCBkZXB0aDApO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIjwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvdXItcGx1c1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm91ci1wbHVzX19yb3VuZFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwib3VyLXBsdXNfX3RpdGxlXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnZpc2l0cyA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCI8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwib3VyLXBsdXNfX3RleHRcXFxcXCI+0L/QvtGB0LXRidC10L3QuNC5PGJyPtCyINC90LXQtNC10LvRjjwvcD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJvdXItcGx1c1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm91ci1wbHVzX19yb3VuZFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwib3VyLXBsdXNfX3RpdGxlXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm9yZGVycyA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCI8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwib3VyLXBsdXNfX3RleHRcXFxcXCI+0L/QvtGB0YLRg9C/0LjQstGI0LjRhTxicj7Qt9Cw0Y/QstC+0Lo8L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L3NlY3Rpb24+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAncnVicmlrYXRvci1saXN0JywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9ydWJyaWthdG9yL3J1YnJpa2F0b3ItbGlzdC9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJydWJyaWthdG9yLWxpc3RcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxkZXB0aHMpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGxhbWJkYT10aGlzLmxhbWJkYSwgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGJ1ZmZlciA9IFwiXCI7XFxuICBzdGFjazEgPSAoKGhlbHBlcnMuaXMgfHwgKGRlcHRoMCAmJiBkZXB0aDAuaXMpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGF0YSAmJiBkYXRhLmluZGV4KSwgXCI9PVwiLCA3LCB7XCJuYW1lXCI6XCJpc1wiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMiwgZGF0YSwgZGVwdGhzKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICBidWZmZXIgKz0gXCJcXFxcblwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXJzLmlzIHx8IChkZXB0aDAgJiYgZGVwdGgwLmlzKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKGRhdGEgJiYgZGF0YS5pbmRleCksIFwiPT1cIiwgMTUsIHtcIm5hbWVcIjpcImlzXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyLCBkYXRhLCBkZXB0aHMpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSkpO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJ1YnJpa2EtbGlzdFxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicnVicmlrYS1saXN0X190aXRsZSBqcy1ydWJyaWthLWxpc3RcXFxcXCIgc3R5bGU9XFxcXFwiYm9yZGVyLXJpZ2h0LWNvbG9yOiBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmVsIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5jb2xvciA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwicnVicmlrYS1saXN0X19uYW1lXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZWwgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm5hbWUgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiPC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwicnVicmlrYS1saXN0X19jb3VudFxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5jb3VudCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY291bnQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiY291bnRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvcD5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJydWJyaWthLWxpc3RfX2xpc3RcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPHVsPlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wb2RydWJyaWtzIDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oNCwgZGF0YSwgZGVwdGhzKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIiAgICAgICAgICAgICAgICA8L3VsPlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuXCI7XFxufSxcIjJcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCIgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJ1YnJpa3MtY29sdW1uXFxcXFwiPlxcXFxuXCI7XFxuICB9LFwiNFwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEsZGVwdGhzKSB7XFxuICB2YXIgc3RhY2sxLCBoZWxwZXIsIGxhbWJkYT10aGlzLmxhbWJkYSwgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVxcXFxcInJ1YnJpa2EtbGlzdF9fbGlzdC1saVxcXFxcIj48YSBjbGFzcz1cXFxcXCJydWJyaWthLWxpc3RfX2xpc3QtYVxcXFxcIiBocmVmPVxcXFxcIi9cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoc1sxXSAhPSBudWxsID8gZGVwdGhzWzFdLmVsIDogZGVwdGhzWzFdKSkgIT0gbnVsbCA/IHN0YWNrMS51bmlxdWUgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiL1wiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVuaXF1ZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudW5pcXVlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVuaXF1ZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcXFwicnVicmlrYS1saXN0X19saXN0LWNvdW50XFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm1hc3RlckNvdW50IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5tYXN0ZXJDb3VudCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJtYXN0ZXJDb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9zcGFuPjwvYT48L2xpPlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSxkZXB0aHMpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiPGRpdiBjbGFzcz1cXFxcXCJydWJyaWtzLWNvbHVtblxcXFxcIj5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcInJ1YnJpa2EtbGlzdCBydWJyaWthLWxpc3RfdG9vbC1jb2xsYXBzZWQganMtcnVicmlrYS1jb2xsYXBzZWRcXFxcXCI+XFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicnVicmlrYS1saXN0X190aXRsZVxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInJ1YnJpa2EtbGlzdF9fbmFtZVxcXFxcIj7QoNCw0LfQstC10YDQvdGD0YLRjCDQstGB0LUg0YDRg9Cx0YDQuNC60Lg8L3A+XFxcXG4gICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJydWJyaWthLWxpc3RfX2ljb25cXFxcXCI+PC9pPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICA8L2Rpdj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucnVicmlrYXRvciA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDEsIGRhdGEsIGRlcHRocyksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L2Rpdj5cXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZSxcInVzZURlcHRoc1wiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAnbWFzdGVyLWJsb2NrLWFib3V0JywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLWJsb2NrL21hc3Rlci1ibG9jay1hYm91dC9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJtYXN0ZXItYmxvY2stYWJvdXRcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgYnVmZmVyID0gXCIgICAgICAgIDxwIGNsYXNzPVxcXFxcImFib3V0LW1kX190ZXh0LWNhcHRpb25cXFxcXCI+0J7QsdGA0LDQt9C+0LLQsNC90LjQtTo8L3A+XFxcXG4gICAgICAgIDxwIGNsYXNzPVxcXFxcImFib3V0LW1kX190ZXh0XFxcXFwiPlwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5hYm91dEVkdWMgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFib3V0RWR1YyA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJhYm91dEVkdWNcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L3A+XFxcXG5cIjtcXG59LFwiM1wiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGJ1ZmZlciA9IFwiICAgICAgICA8cCBjbGFzcz1cXFxcXCJhYm91dC1tZF9fdGV4dC1jYXB0aW9uXFxcXFwiPtCe0L/Ri9GCINGA0LDQsdC+0YLRizo8L3A+XFxcXG4gICAgICAgIDxwIGNsYXNzPVxcXFxcImFib3V0LW1kX190ZXh0XFxcXFwiPlwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5hYm91dEV4cCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYWJvdXRFeHAgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiYWJvdXRFeHBcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L3A+XFxcXG5cIjtcXG59LFwiNVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGJ1ZmZlciA9IFwiICAgICAgICA8cCBjbGFzcz1cXFxcXCJhYm91dC1tZF9fdGV4dC1jYXB0aW9uXFxcXFwiPtCU0L7Qv9C+0LvQvdC40YLQtdC70YzQvdCw0Y8g0LjQvdGE0L7RgNC80LDRhtC40Y86PC9wPlxcXFxuICAgICAgICA8cCBjbGFzcz1cXFxcXCJhYm91dC1tZF9fdGV4dFxcXFxcIj5cIjtcXG4gIHN0YWNrMSA9ICgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuYWJvdXRBZGRJbmZvIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5hYm91dEFkZEluZm8gOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiYWJvdXRBZGRJbmZvXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiPC9wPlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcImFib3V0LW1kXFxcXFwiPlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFib3V0RWR1YyA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFib3V0RXhwIDogZGVwdGgwKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDMsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgYnVmZmVyICs9IFwiXFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYWJvdXRBZGRJbmZvIDogZGVwdGgwKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDUsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiPC9kaXY+PCEtLSBhYm91dC1tZCAtLT5cXFxcblxcXFxuXFxcXG5cXFxcblxcXFxuXCI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ21hc3Rlci1ibG9jay1hcnRpY2xlJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLWJsb2NrL21hc3Rlci1ibG9jay1hcnRpY2xlL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcIm1hc3Rlci1ibG9jay1hcnRpY2xlXCIsXCJ0ZW1wbGF0ZVwiOlwiLi90ZW1wbGF0ZS5oYnNcIixcImVycm9yVGVtcGxhdGVcIjpcIi4vZXJyb3IuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiMVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJhcnRpY2xlLWNvbnQtbWRfX2l0ZW0tY29udFxcXFxcIj5cXFxcblxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJhcnRpY2xlXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImFydGljbGVfX2xpbmsganMtb3Blbi1hcnRpY2xlXFxcXFwiIGhyZWY9XFxcXFwiI1wiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImFydGljbGVfX3BpY1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9XFxcXFwiYXJ0aWNsZV9faW1nXFxcXFwiIHNyYz1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmltZ1NyYyB8fCAoZGVwdGgwICYmIGRlcHRoMC5pbWdTcmMpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1nSUQgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJpbWdTcmNcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiXFxcXFwiIGFsdD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiYXJ0aWNsZV9fdGV4dFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnRpdGxlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aXRsZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ0aXRsZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9wPlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiYXJ0aWNsZV9fYXV0aG9yXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmF1dGhvciB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuYXV0aG9yIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImF1dGhvclwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9wPlxcXFxuICAgICAgICAgICAgICAgIDwvYT5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgIDwvZGl2PlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcImFydGljbGUtY29udC1tZFxcXFxcIj5cXFxcblxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5hcnRpY2xlcyA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDEsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiXFxcXG48L2Rpdj5cXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdtYXN0ZXItYmxvY2stbGluaycsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvbWFzdGVyL21hc3Rlci1ibG9jay9tYXN0ZXItYmxvY2stbGluay9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJtYXN0ZXItYmxvY2stbGlua1wiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZztcXG4gIHJldHVybiBcIiAgICAgICAgPGEgaHJlZj1cXFxcXCJodHRwczovL1wiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGlua3MgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnZrIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwidmtcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8c3Bhbj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxpbmtzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS52ayA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCI8L3NwYW4+PC9hPlxcXFxuXCI7XFxufSxcIjNcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZztcXG4gIHJldHVybiBcIiAgICAgICAgPGEgaHJlZj1cXFxcXCJodHRwczovL1wiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGlua3MgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm9rIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwib2tcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8c3Bhbj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxpbmtzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5vayA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCI8L3NwYW4+PC9hPlxcXFxuXCI7XFxufSxcIjVcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZztcXG4gIHJldHVybiBcIiAgICAgICAgPGEgaHJlZj1cXFxcXCJodHRwOi8vXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5saW5rcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuc2l0ZSA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcImVhcnRoXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPHNwYW4+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5saW5rcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuc2l0ZSA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCI8L3NwYW4+PC9hPlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcImxpbmstbXBcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5saW5rcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEudmsgOiBzdGFjazEpLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubGlua3MgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm9rIDogc3RhY2sxKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDMsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxpbmtzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5zaXRlIDogc3RhY2sxKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDUsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiPC9kaXY+PCEtLSBsaW5rLW1wIC0tPlwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdtYXN0ZXItYmxvY2stcGhvdG8nLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItYmxvY2svbWFzdGVyLWJsb2NrLXBob3RvL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcIm1hc3Rlci1ibG9jay1waG90b1wiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJwaG90by1tZF9fYWxidW0tY292ZXIganMtc2VsZWN0LWFsYnVtXFxcXFwiIGlkPVxcXFxcImFsYnVtLVwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGEgaHJlZj1cXFxcXCIvbWFzdGVyLWRhdGEtZWRpdC9qc29uMy5qc29uXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaW1nU3JjIHx8IChkZXB0aDAgJiYgZGVwdGgwLmltZ1NyYykgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGhvdG9zIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMVtcXCcwXFwnXSA6IHN0YWNrMSkpICE9IG51bGwgPyBzdGFjazEuaW1nSUQgOiBzdGFjazEpLCAyMDAsIDIwMCwge1wibmFtZVwiOlwiaW1nU3JjXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIlxcXFxcIiBhbHQ9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+PGJyPlxcXFxuICAgICAgICAgICAgICAgIDxzcGFuPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9zcGFuPlxcXFxuICAgICAgICAgICAgPC9hPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCIzXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGJ1ZmZlciA9IFwiICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJwaG90by1tZF9fYWxidW0tY29udFxcXFxcIiBpZD1cXFxcXCJjb250LWFsYnVtLVwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInBob3RvLW1kX19hbGJ1bS10aXRsZVxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicGhvdG8tbWRfX3dyYXBwZXJcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBob3RvcyA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDQsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCI0XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwicGhvdG8tbWRfX2ltZy1wcmV2XFxcXFwiIGhyZWY9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pbWdTcmMgfHwgKGRlcHRoMCAmJiBkZXB0aDAuaW1nU3JjKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmltZ0lEIDogZGVwdGgwKSwge1wibmFtZVwiOlwiaW1nU3JjXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmltZ1NyYyB8fCAoZGVwdGgwICYmIGRlcHRoMC5pbWdTcmMpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1nSUQgOiBkZXB0aDApLCAyMDAsIDIwMCwge1wibmFtZVwiOlwiaW1nU3JjXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIlxcXFxcIiBhbHQ9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuZGVzY3JpcHRpb24gfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRlc2NyaXB0aW9uIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImRlc2NyaXB0aW9uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+PGJyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxcXFxuXCI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcInBob3RvLW1kXFxcXFwiPlxcXFxuXFxcXG4gICAgPCEtLSBFUlJPUiAtLT5cXFxcbiAgICA8cCBzdHlsZT1cXFxcXCJjb2xvcjogcmVkOyBmb250LXdlaWdodDogYm9sZFxcXFxcIj4tLS0tLS0gRVJST1IhIC0tLS0tLTwvcD5cXFxcbiAgICAhISHRhNC+0YLQvi4gQVBJIC0g0L3QtdC00L7RgdGC0LDRgtC+0YfQvdC+INC00LDQvdC90YvRhVxcXFxuICAgIDxicj48YnI+PGJyPlxcXFxuICAgIDwhLS0gRVJST1IgLS0+XFxcXG5cXFxcbiAgICA8ZGl2PlxcXFxuXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzLmVhY2guY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5hbGJ1bXMgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiAgICA8L2Rpdj5cXFxcblxcXFxuICAgIDxkaXY+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFsYnVtcyA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDMsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiICAgIDwvZGl2PlxcXFxuPC9kaXY+PCEtLSBwaG90by1tZCAtLT5cXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdtYXN0ZXItYmxvY2stcmV2aWV3JywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLWJsb2NrL21hc3Rlci1ibG9jay1yZXZpZXcvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwibWFzdGVyLWJsb2NrLXJldmlld1wiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBidWZmZXIgPSBcIiAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInJlY29tbWVuZGF0aW9uc19fdG90YWxcXFxcXCI+0JzQsNGB0YLQtdGA0LAg0YDQtdC60L7QvNC10L3QtNGD0Y7RgiA8c3BhbiBjbGFzcz1cXFxcXCJyZWNvbW1lbmRhdGlvbnNfX3RvdGFsLWNvdW50XFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudmtMaWtlcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuY291bnRMaWtlcyA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCIg0YfQtdC70L7QstC10Lo8L3NwYW4+PC9wPlxcXFxuXFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJlY29tbWVuZGF0aW9uc19fbGlzdFxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC52a0xpa2VzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5kYXRhIDogc3RhY2sxKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMiwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCIyXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJyZWNvbW1lbmRhdGlvbnNfX2l0ZW1cXFxcXCIgdGFyZ2V0PVxcXFxcIl9ibGFua1xcXFxcIiBocmVmPVxcXFxcImh0dHA6Ly92ay5jb20vaWRcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy51aWQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnVpZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ1aWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnBob3RvXzEwMCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGhvdG9fMTAwIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInBob3RvXzEwMFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIGFsdD1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5maXJzdF9uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5maXJzdF9uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImZpcnN0X25hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIiBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5sYXN0X25hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmxhc3RfbmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJsYXN0X25hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxcXFxuXCI7XFxufSxcIjRcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIiAgICAgICAgPHAgY2xhc3M9XFxcXFwicmV2aWV3cy1jb250LW1kX190aXRsZVxcXFxcIj7QnNC+0Lgg0L7RgtC30YvQstGLPC9wPlxcXFxuXFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwicmV2aWV3cy1jb250LW1kX19jb21tZW50c1xcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29tbWVudHMgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSg1LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIiAgICAgICAgPC9kaXY+XFxcXG5cIjtcXG59LFwiNVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJldmlld3MtY29udC1tZF9faXRlbS1jb250XFxcXFwiPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInJldmlld3MtY29udC1tZF9fbmFtZVxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5hdXRob3JOYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5hdXRob3JOYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImF1dGhvck5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjxzcGFuIGNsYXNzPVxcXFxcInJldmlld3MtY29udC1tZF9fZGF0ZVxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmZvcm1hdERhdGUgfHwgKGRlcHRoMCAmJiBkZXB0aDAuZm9ybWF0RGF0ZSkgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5kYXRlIDogZGVwdGgwKSwgXCIlUiB8ICVkICVaICVZXCIsIHtcIm5hbWVcIjpcImZvcm1hdERhdGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9zcGFuPjwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJyZXZpZXdzLWNvbnQtbWRfX3RleHRcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudGV4dCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGV4dCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ0ZXh0XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBidWZmZXIgPSBcIjxkaXYgY2xhc3M9XFxcXFwicmV2aWV3cy1jb250LW1kXFxcXFwiPlxcXFxuXFxcXG4gICAgPGRpdiBjbGFzcz1cXFxcXCJyZWNvbW1lbmRhdGlvbnNcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9ICgoaGVscGVycy5pcyB8fCAoZGVwdGgwICYmIGRlcHRoMC5pcykgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnZrTGlrZXMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmNvdW50TGlrZXMgOiBzdGFjazEpLCBcIj5cIiwgMCwge1wibmFtZVwiOlwiaXNcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDEsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSkpO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInJlY29tbWVuZGF0aW9uc19fYnV0dG9ucy1ibG9ja1xcXFxcIj5cXFxcbiAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInJlY29tbWVuZGF0aW9uc19fYnV0dG9ucy1ibG9jay10aXRsZVxcXFxcIj7Qn9C+0YDQtdC60L7QvNC10L3QtNGD0LnRgtC1INC80LDRgdGC0LXRgNCwOjwvcD5cXFxcblxcXFxuICAgICAgICAgICAgPGRpdj48L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgPC9kaXY+XFxcXG5cXFxcbiAgICA8cCBjbGFzcz1cXFxcXCJyZXZpZXdzLWNvbnQtbWRfX3RpdGxlXFxcXFwiPtCe0YHRgtCw0LLQuNGC0Ywg0L7RgtC30YvQsjwvcD5cXFxcblxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwicmV2aWV3cy1jb250LW1kX19yb3dcXFxcXCI+XFxcXG4gICAgICAgIDxmb3JtIGNsYXNzPVxcXFxcImFkZC1jb21tZW50XFxcXFwiIG1ldGhvZD1cXFxcXCJQT1NUXFxcXFwiIGFjdGlvbj1cXFxcXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XFxcXFwiYWRkLWNvbW1lbnRfX3RleHQtaW5wdXRcXFxcXCIgdHlwZT1cXFxcXCJ0ZXh0XFxcXFwiIHBsYWNlaG9sZGVyPVxcXFxcItCS0LDRiNC1INC40LzRj1xcXFxcIiBuYW1lPVxcXFxcImNvbW1lbnRfZm9ybVtuYW1lXVxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFxcXCJhZGQtY29tbWVudF9fdGV4dC1pbnB1dFxcXFxcIiB0eXBlPVxcXFxcInRleHRcXFxcXCIgcGxhY2Vob2xkZXI9XFxcXFwi0JLQsNGIINC90L7QvNC10YAg0YLQtdC70LXRhNC+0L3QsFxcXFxcIiBuYW1lPVxcXFxcImNvbW1lbnRfZm9ybVtwaG9uZV1cXFxcXCI+XFxcXG4gICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XFxcXFwiYWRkLWNvbW1lbnRfX3RleHRhcmVhXFxcXFwiIHBsYWNlaG9sZGVyPVxcXFxcItCi0LXQutGB0YIg0L7RgtC30YvQstCwXFxcXFwiIG5hbWU9XFxcXFwiY29tbWVudF9mb3JtW2NvbW1lbnRfdGV4dF1cXFxcXCI+PC90ZXh0YXJlYT5cXFxcbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cXFxcXCJhZGQtY29tbWVudF9fYnRuXFxcXFwiIHR5cGU9XFxcXFwic3VibWl0XFxcXFwiIHZhbHVlPVxcXFxcItC+0YLQv9GA0LDQstC40YLRjFxcXFxcIj5cXFxcblxcXFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiYWRkLWNvbW1lbnRfX3N1Y2Nlc3NcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAg0JLQsNGIINC+0YLQt9GL0LIg0YPRgdC/0LXRiNC90L4g0L7RgtC/0YDQsNCy0LvQtdC9LCDRgdC/0LDRgdC40LHQviFcXFxcbiAgICAgICAgICAgIDwvcD5cXFxcbiAgICAgICAgPC9mb3JtPlxcXFxuXFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwic29jaWFsLWxpbmtzXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJzb2NpYWwtbGlua3NfX3dyYXBwZXJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwic29jaWFsLWxpbmtzX190aXRsZVxcXFxcIj7QoNCw0LfQvNC10YHRgtC40YLRjCDRgdGB0YvQu9C60YMg0L3QsCZuYnNwO9GB0YLRgNCwJnNoeTvQvdC40YbRgyDQnNCw0YHRgtC10YDQsCDQsiZuYnNwO9GB0L7Rhi4mbmJzcDvRgdC10YLQuDo8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInNvY2lhbC1saW5rc19fbWFzdGVyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInNvY2lhbC1saW5rc19fcGhvdG8tY29udFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaW1nU3JjIHx8IChkZXB0aDAgJiYgZGVwdGgwLmltZ1NyYykgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pbWdJRCA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImltZ1NyY1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcXCIgYWx0PVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJzb2NpYWwtbGlua3NfX25hbWVcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3A+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwic29jaWFsLWxpbmtzX19ub3RlXFxcXFwiPtCf0L7RgNC10LrQvtC80LXQvdC00YPQudGC0LUg0Y3RgtC+0LPQviDRgdC/0LXRhtC40LDQu9C40YHRgtCwINGB0LLQvtC40Lwg0LTRgNGD0LfRj9C8INCyJm5ic3A70YHQvtGG0LjQsNC70YzQvdC+0Lkg0YHQtdGC0Lg8L3A+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInNvY2lhbC1saW5rc19fYnV0dG9uc1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9XFxcXFwiY29sb3I6cmVkXFxcXFwiPtCh0YHRi9C70LrQuCEgVkssIE9LLCBGQiwgVFc8L3A+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG5cXFxcbiAgICA8L2Rpdj5cXFxcblxcXFxuXFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29tbWVudHMgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oNCwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCJcXFxcbjwvZGl2PjwhLS1tZGUtcmV2aWV3cy0tPlxcXFxuXCI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ21hc3Rlci1ibG9jay1zYWxlJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLWJsb2NrL21hc3Rlci1ibG9jay1zYWxlL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcIm1hc3Rlci1ibG9jay1zYWxlXCIsXCJ0ZW1wbGF0ZVwiOlwiLi90ZW1wbGF0ZS5oYnNcIixcImVycm9yVGVtcGxhdGVcIjpcIi4vZXJyb3IuaGJzXCIsXCJsb2dpY1wiOlwiaW5kZXguanNcIn0sIHRlbXBsYXRlU291cmNlOiAne1wiMVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBidWZmZXIgPSBcIiAgICA8ZGl2IGNsYXNzPVxcXFxcInNhbGUtY29udC1tZF9faXRlbS1jb250XFxcXFwiPlxcXFxuXFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwic2FsZVxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcInNhbGVfX2xpbmsganMtb3Blbi1zYWxlXFxcXFwiIGhyZWY9XFxcXFwiI1wiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInNhbGVfX3RpdGxlXFxcXFwiPlxcXFxuXCI7XFxuICBzdGFjazEgPSAoKGhlbHBlcnMuaXMgfHwgKGRlcHRoMCAmJiBkZXB0aDAuaXMpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudHlwZSA6IGRlcHRoMCksIFwiPT1cIiwgMSwge1wibmFtZVwiOlwiaXNcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDIsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSkpO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHN0YWNrMSA9ICgoaGVscGVycy5pcyB8fCAoZGVwdGgwICYmIGRlcHRoMC5pcykgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50eXBlIDogZGVwdGgwKSwgXCI9PVwiLCAyLCB7XCJuYW1lXCI6XCJpc1wiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oNCwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgc3RhY2sxID0gKChoZWxwZXJzLmlzIHx8IChkZXB0aDAgJiYgZGVwdGgwLmlzKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnR5cGUgOiBkZXB0aDApLCBcIj09XCIsIDMsIHtcIm5hbWVcIjpcImlzXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSg2LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICAgICAgPC9wPlxcXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwic2FsZV9fcGljXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVxcXFxcInNhbGVfX2ltZ1xcXFxcIiBzcmM9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pbWdTcmMgfHwgKGRlcHRoMCAmJiBkZXB0aDAuaW1nU3JjKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmltZ0lEIDogZGVwdGgwKSwge1wibmFtZVwiOlwiaW1nU3JjXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIlxcXFxcIiBhbHQ9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudGV4dCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGV4dCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ0ZXh0XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJzYWxlX190ZXh0XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8cD5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50ZXh0IHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50ZXh0IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInRleHRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvcD5cXFxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgIDwvYT5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG5cXFxcbiAgICA8L2Rpdj5cXFxcblwiO1xcbn0sXCIyXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAg0J/QvtC00LDRgNC+0LpcXFxcblwiO1xcbiAgfSxcIjRcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgICAgICAgICAgICAgICAgICAgICAgICDQodC60LjQtNC60LAgXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuZGlzY291bnQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRpc2NvdW50IDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImRpc2NvdW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCIlXFxcXG5cIjtcXG59LFwiNlwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGZ1bmN0aW9uVHlwZT1cImZ1bmN0aW9uXCIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgIC1cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5kaXNjb3VudCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGlzY291bnQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiZGlzY291bnRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIiDRgNGD0LEuXFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIjxkaXYgY2xhc3M9XFxcXFwic2FsZS1jb250LW1kXFxcXFwiPlxcXFxuXFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNhbGVzIDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCJcXFxcbjwvZGl2PlwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdtYXN0ZXItYmxvY2stc2VydmljZScsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvbWFzdGVyL21hc3Rlci1ibG9jay9tYXN0ZXItYmxvY2stc2VydmljZS9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJtYXN0ZXItYmxvY2stc2VydmljZVwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgbGFtYmRhPXRoaXMubGFtYmRhLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbjtcXG4gIHJldHVybiBcIiAgICAgICAgICAgIDxsaT5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKGRlcHRoMCwgZGVwdGgwKSlcXG4gICAgKyBcIjwvbGk+XFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIjxkaXYgY2xhc3M9XFxcXFwic2VydmljZS1tZFxcXFxcIj5cXFxcbiAgICA8dWwgY2xhc3M9XFxcXFwic2VydmljZS1tZF9fbGlzdFxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zZXJ2aWNlcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEucGFydDEgOiBzdGFjazEpLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiAgICA8L3VsPlxcXFxuXFxcXG4gICAgPHVsIGNsYXNzPVxcXFxcInNlcnZpY2UtbWRfX2xpc3RcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2VydmljZXMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnBhcnQyIDogc3RhY2sxKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgPC91bD5cXFxcblxcXFxuICAgIDxiciBjbGFzcz1cXFxcXCJzZXJ2aWNlLW1kX19jbGVhclxcXFxcIj5cXFxcbjwvZGl2PjwhLS1tZGUtc2VydmljZS0tPlxcXFxuXFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAnbWFzdGVyLWJsb2NrLXZpZGVvJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLWJsb2NrL21hc3Rlci1ibG9jay12aWRlby9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJtYXN0ZXItYmxvY2stdmlkZW9cIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGxhbWJkYT10aGlzLmxhbWJkYTtcXG4gIHJldHVybiBcIiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJ2aWRlby1tZF9fdmlkZW8tY29udFxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcInZpZGVvLW1kX192aWRlby1jb3ZlclxcXFxcIiBocmVmPVxcXFxcImh0dHA6Ly9cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy51cmwgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnVybCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ1cmxcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFxcXCJ2aWRlby1tZF9fdGl0bGUtcHJldlxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvc3Bhbj48YnI+XFxcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcXFwidmlkZW8tbWRfX2ltZy1jb250XFxcXFwiPjxpbWcgc3JjPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucHJldiA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuc3JjIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIiBhbHQ9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wcmV2IDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5hbHQgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiXFxcXFwiPjwvc3Bhbj5cXFxcbiAgICAgICAgICAgIDwvYT5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIjxkaXYgY2xhc3M9XFxcXFwidmlkZW8tbWRcXFxcXCI+XFxcXG5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudmlkZW9zIDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCJcXFxcbjwvZGl2PjwhLS0gdmlkZW8tbWQgLS0+XFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAnbWFzdGVyLWJsb2NrLXdvcmsnLCBjb25zdHJ1Y3RvcjogcmVxdWlyZSgnLi9jYXRiZXJyeV9jb21wb25lbnRzL21hc3Rlci9tYXN0ZXItYmxvY2svbWFzdGVyLWJsb2NrLXdvcmsvaW5kZXguanMnKSwgcHJvcGVydGllczoge1wibmFtZVwiOlwibWFzdGVyLWJsb2NrLXdvcmtcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgIDx0ZD5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5vcGVuIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5vcGVuIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm9wZW5cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjxicj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5jbG9zZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY2xvc2UgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiY2xvc2VcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvdGQ+XFxcXG5cIjtcXG59LFwiM1wiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBidWZmZXIgPSBcIlwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXJzLmlzIHx8IChkZXB0aDAgJiYgZGVwdGgwLmlzKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnR5cGUgOiBkZXB0aDApLCBcIj09XCIsIDEsIHtcIm5hbWVcIjpcImlzXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSg0LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyO1xcbn0sXCI0XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLm5hbWUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm5hbWUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwibmFtZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9saT5cXFxcblwiO1xcbn0sXCI2XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGJ1ZmZlciA9IFwiXCI7XFxuICBzdGFjazEgPSAoKGhlbHBlcnMuaXMgfHwgKGRlcHRoMCAmJiBkZXB0aDAuaXMpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudHlwZSA6IGRlcHRoMCksIFwiPT1cIiwgMiwge1wibmFtZVwiOlwiaXNcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDQsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSkpO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXI7XFxufSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgbGFtYmRhPXRoaXMubGFtYmRhLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBcXFxcXCI+XFxcXG5cXFxcbiAgICA8dGFibGUgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fdGltZXRhYmxlXFxcXFwiPlxcXFxuICAgICAgICA8dGhlYWQ+XFxcXG4gICAgICAgIDx0cj5cXFxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJ0aW1lLWFuZC13b3JrLW1wX19kYXlcXFxcXCI+0J/QvTwvdGQ+XFxcXG4gICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fZGF5XFxcXFwiPtCS0YI8L3RkPlxcXFxuICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2RheVxcXFxcIj7QodGAPC90ZD5cXFxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJ0aW1lLWFuZC13b3JrLW1wX19kYXkgdGltZS1hbmQtd29yay1tcF9fZGF5X3RvZGF5XFxcXFwiPtCn0YI8L3RkPlxcXFxuICAgICAgICAgICAgPHRkIGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2RheVxcXFxcIj7Qn9GCPC90ZD5cXFxcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cXFxcXCJ0aW1lLWFuZC13b3JrLW1wX19kYXlcXFxcXCI+0KHQsTwvdGQ+XFxcXG4gICAgICAgICAgICA8dGQgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fZGF5XFxcXFwiPtCS0YE8L3RkPlxcXFxuICAgICAgICA8L3RyPlxcXFxuICAgICAgICA8L3RoZWFkPlxcXFxuICAgICAgICA8dGJvZHk+XFxcXG4gICAgICAgIDx0cj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2NoZWR1bGUgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiAgICAgICAgPC90cj5cXFxcbiAgICAgICAgPC90Ym9keT5cXFxcbiAgICA8L3RhYmxlPlxcXFxuXFxcXG4gICAgPHAgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fbGlzdC1jYXB0aW9uXFxcXFwiPtCS0YvQtdC30LQg0L3QsCDQtNC+0Lw8L3A+XFxcXG4gICAgPHVsIGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2xpc3RcXFxcXCI+XFxcXG4gICAgICAgIDxsaT7QkdC10YHQv9C70LDRgtC90L4g0L/QviDQs9C+0YDQvtC00YM8L2xpPlxcXFxuICAgICAgICA8bGk+0JLRi9C10LfQtCDQt9CwINCz0L7RgNC+0LQg0L/Qu9Cw0YLQvdC+PC9saT5cXFxcbiAgICA8L3VsPlxcXFxuXFxcXG5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2xpc3QtYmlnLWNvbnRcXFxcXCI+XFxcXG4gICAgICAgIDxwIGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2xpc3QtY2FwdGlvblxcXFxcIj7QoNCw0LnQvtC90Ysg0L7QsdGB0LvRg9C20LjQstCw0L3QuNGPPC9wPlxcXFxuXFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fbGlzdC1jb250XFxcXFwiPlxcXFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fbGlzdC1jYXB0aW9uIHRpbWUtYW5kLXdvcmstbXBfX2xpc3QtY2FwdGlvbl9taW5pXFxcXFwiPtCT0L7RgNC+0LQ8L3A+XFxcXG4gICAgICAgICAgICA8dWwgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fbGlzdFxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuZGlzdHJpY3QgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgzLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiAgICAgICAgICAgIDwvdWw+XFxcXG4gICAgICAgIDwvZGl2PjwhLS1saXN0LWNvbnQtLT5cXFxcblxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2xpc3QtY29udFxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2xpc3QtY2FwdGlvbiB0aW1lLWFuZC13b3JrLW1wX19saXN0LWNhcHRpb25fbWluaVxcXFxcIj7Qn9GA0LjQs9C+0YDQvtC0PC9wPlxcXFxuICAgICAgICAgICAgPHVsIGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2xpc3RcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmRpc3RyaWN0IDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oNiwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICA8L3VsPlxcXFxuICAgICAgICA8L2Rpdj48IS0tbGlzdC1jb250LS0+XFxcXG5cXFxcbiAgICAgICAgPGJyIGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2NsZWFyXFxcXFwiPlxcXFxuICAgIDwvZGl2PjwhLS1saXN0LWJpZy1jb250LS0+XFxcXG5cXFxcblxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fbGlzdC1iaWctY29udFxcXFxcIj5cXFxcbiAgICAgICAgPHAgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fbGlzdC1jYXB0aW9uXFxcXFwiPtCe0L/Qu9Cw0YLQsDwvcD5cXFxcblxcXFxuXFxcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fbGlzdC1jb250XFxcXFwiPlxcXFxuICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fbGlzdC1jYXB0aW9uIHRpbWUtYW5kLXdvcmstbXBfX2xpc3QtY2FwdGlvbl9taW5pXFxcXFwiPtCk0L7RgNC80LAg0YHQvtGC0YDRg9C00L3QuCZzaHk70YfQtdGB0YLQstCwPC9wPlxcXFxuICAgICAgICAgICAgPHVsIGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2xpc3RcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPGxpPtCf0YDQtdC00L7Qv9C70LDRgtCwPC9saT5cXFxcbiAgICAgICAgICAgICAgICA8bGk+0J/QviDRhNCw0LrRgtGDINCy0YvQv9C+0LvQvdC10L3QvdGL0YUg0YDQsNCx0L7RgjwvbGk+XFxcXG4gICAgICAgICAgICAgICAgPGxpPtCg0LDRgdGB0YDQvtGH0LrQsCDQv9C70LDRgtC10LbQsDwvbGk+XFxcXG4gICAgICAgICAgICA8L3VsPlxcXFxuICAgICAgICA8L2Rpdj48IS0tbGlzdC1jb250LS0+XFxcXG5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJ0aW1lLWFuZC13b3JrLW1wX19saXN0LWNvbnRcXFxcXCI+XFxcXG4gICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJ0aW1lLWFuZC13b3JrLW1wX19saXN0LWNhcHRpb24gdGltZS1hbmQtd29yay1tcF9fbGlzdC1jYXB0aW9uX21pbmlcXFxcXCI+0KHQv9C+0YHQvtCx0Ysg0L7Qv9C70LDRgtGLPC9wPlxcXFxuICAgICAgICAgICAgPHVsIGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2xpc3RcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPGxpPtCd0LDQu9C40YfQvdGL0Lk8L2xpPlxcXFxuICAgICAgICAgICAgICAgIDxsaT7QkdC10LfQvdCw0LvQuNGH0L3Ri9C5XFxcXG4gICAgICAgICAgICAgICAgICAgIDx1bD5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT7QntC/0LvQsNGC0LAg0YfQtdGA0LXQtyDRjdC70LXQutGC0YDQvtC90L3Ri9C1INC/0LvQsNGC0LXQttC90YvQtSDRgdC40YHRgtC10LzRizwvbGk+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+0J7Qv9C70LDRgtCwINC/0L4g0LrRgNC10LTQuNGC0L3QvtC5L9C00LXQsdC10YLQvtCy0L7QuSDQutCw0YDRgtC1PC9saT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT7QntC/0LvQsNGC0LAg0YfQtdGA0LXQtyDRgtC10YDQvNC40L3QsNC70Ys8L2xpPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPtCR0LDQvdC60L7QstGB0LrQuNC5INC/0LXRgNC10LLQvtC0PC9saT5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT7Qn9GA0LXQtNC+0YHRgtCw0LLQu9C10L3QuNC1INGA0LDRgdGB0YDQvtGH0LrQuDwvbGk+XFxcXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XFxcXG4gICAgICAgICAgICAgICAgPC9saT5cXFxcbiAgICAgICAgICAgIDwvdWw+XFxcXG4gICAgICAgIDwvZGl2PjwhLS1saXN0LWNvbnQtLT5cXFxcbiAgICAgICAgPGJyIGNsYXNzPVxcXFxcInRpbWUtYW5kLXdvcmstbXBfX2NsZWFyXFxcXFwiPlxcXFxuICAgIDwvZGl2PjwhLS1saXN0LWNvbnQtLT5cXFxcbiAgICA8YnIgY2xhc3M9XFxcXFwidGltZS1hbmQtd29yay1tcF9fY2xlYXJcXFxcXCI+XFxcXG5cXFxcbiAgICA8IS0tIEVSUk9SIC0tPlxcXFxuICAgIDxwIHN0eWxlPVxcXFxcImNvbG9yOiByZWQ7IGZvbnQtd2VpZ2h0OiBib2xkXFxcXFwiPi0tLS0tLSBFUlJPUiEgKNGD0YHQu9C+0LLQuNGPIC0g0LLRi9C10LfQtCDQvdCwINC00L7QvCwg0L7Qv9C70LDRgtCwKSAtLS0tLS08L3A+XFxcXG4gICAgISHQv9C10YDQtdC00LXQu9Cw0LXRgiDQuNC70YzRj1xcXFxuICAgINCj0YHQu9C+0LLQuNGPINC+0L/Qu9Cw0YLRizogXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC53b3JrQ29uZGl0aW9uIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5wYXltZW50Rm9ybSA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCJcXFxcbiAgICDQo9GB0LvQvtCy0LjRjyDQvtC/0LvQsNGC0Ys6IFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAud29ya0NvbmRpdGlvbiA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuY29vcEZvcm0gOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiXFxcXG4gICAg0JLRi9C10LfQtCDQvdCwINC00L7QvDogXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC53b3JrQ29uZGl0aW9uIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5jb21taW5nIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxuICAgIDwhLS0gRVJST1IgLS0+XFxcXG48L2Rpdj5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAnbWFzdGVyLW1pbmljYXJkJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9tYXN0ZXIvbWFzdGVyLW1pbmljYXJkL21hc3Rlci1taW5pY2FyZC9pbmRleC5qcycpLCBwcm9wZXJ0aWVzOiB7XCJuYW1lXCI6XCJtYXN0ZXItbWluaWNhcmRcIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwibWFzdGVyLW1pbmljYXJkX2ZyZWVcIjtcXG4gIH0sXCIzXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBsYW1iZGE9dGhpcy5sYW1iZGE7XFxuICByZXR1cm4gXCIgICAgICAgICAgICA8aSBjbGFzcz1cXFxcXCJtYXN0ZXItbWluaWNhcmRfX2xpa2VcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcImxpa2VcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCIgXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC52a0xpa2VzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5jb3VudExpa2VzIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIjwvaT5cXFxcblwiO1xcbn0sXCI1XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgbGFtYmRhPXRoaXMubGFtYmRhLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3Npbmc7XFxuICByZXR1cm4gXCIgICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJtYXN0ZXItbWluaWNhcmRfX3RvLXBhZ2VcXFxcXCIgaHJlZj1cXFxcXCIvXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYSgoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdlIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5udW1iZXIgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiXFxcXFwiPtCd0LAg0YHRgtGA0LDQvdC40YbRgyDQvNCw0YHRgtC10YDQsDxpPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJzdHJlbGthXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9pPjwvYT5cXFxcblwiO1xcbn0sXCI3XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBsYW1iZGE9dGhpcy5sYW1iZGE7XFxuICByZXR1cm4gXCIgICAgICAgIDxwIGNsYXNzPVxcXFxcIm1hc3Rlci1taW5pY2FyZF9fY29tcGFueVxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxzcGFuPjxpbWcgY2xhc3M9XFxcXFwibWFzdGVyLW1pbmljYXJkX19sb2dvXFxcXFwiIHNyYz1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmltZ1NyYyB8fCAoZGVwdGgwICYmIGRlcHRoMC5pbWdTcmMpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb21wYW55IDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5pbWdJRCA6IHN0YWNrMSksIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5udWxsIDogZGVwdGgwKSwgNzAsIHtcIm5hbWVcIjpcImltZ1NyY1wiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcXCIgYWx0PVxcXFxcIlxcXFxcIj48L3NwYW4+XFxcXG4gICAgICAgICAgICA8c3Bhbj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbXBhbnkgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLm5hbWUgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiPC9zcGFuPlxcXFxuICAgICAgICA8L3A+XFxcXG5cIjtcXG59LFwiOVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIm1hc3Rlci1taW5pY2FyZF9fc2VydmljZXNfaGFsZlwiO1xcbiAgfSxcIjExXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGxhbWJkYT10aGlzLmxhbWJkYSwgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb247XFxuICByZXR1cm4gXCIgICAgICAgICAgICA8bGk+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKGxhbWJkYShkZXB0aDAsIGRlcHRoMCkpXFxuICAgICsgXCI8L2xpPlxcXFxuXCI7XFxufSxcIjEzXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGxhbWJkYT10aGlzLmxhbWJkYSwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgYnVmZmVyID0gXCIgICAgICAgIDx1bCBjbGFzcz1cXFxcXCJtYXN0ZXItY29udGVudC13aWRnZXRcXFxcXCI+XFxcXG4gICAgICAgICAgICA8bGkgY2xhc3M9XFxcXFwiXCI7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnZSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuc2FsZXMgOiBzdGFjazEpLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMTQsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgYnVmZmVyICs9IFwiIG1hc3Rlci1jb250ZW50LXdpZGdldF9fZ2lmdFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8aT5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwiZ2lmdFwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcblxcXFxuICAgICAgICAgICAgICAgIDxkaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm1hc3Rlci1jb250ZW50LXdpZGdldF9faW5mb1xcXFxcIj48c3Bhbj5cXFxcblwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXJzLmlzIHx8IChkZXB0aDAgJiYgZGVwdGgwLmlzKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zYWxlcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazFbXFwnMFxcJ10gOiBzdGFjazEpKSAhPSBudWxsID8gc3RhY2sxLnR5cGUgOiBzdGFjazEpLCBcIj09XCIsIDEsIHtcIm5hbWVcIjpcImlzXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxNywgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgc3RhY2sxID0gKChoZWxwZXJzLmlzIHx8IChkZXB0aDAgJiYgZGVwdGgwLmlzKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zYWxlcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazFbXFwnMFxcJ10gOiBzdGFjazEpKSAhPSBudWxsID8gc3RhY2sxLnR5cGUgOiBzdGFjazEpLCBcIj09XCIsIDIsIHtcIm5hbWVcIjpcImlzXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxOSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgc3RhY2sxID0gKChoZWxwZXJzLmlzIHx8IChkZXB0aDAgJiYgZGVwdGgwLmlzKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zYWxlcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazFbXFwnMFxcJ10gOiBzdGFjazEpKSAhPSBudWxsID8gc3RhY2sxLnR5cGUgOiBzdGFjazEpLCBcIj09XCIsIDMsIHtcIm5hbWVcIjpcImlzXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyMSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgYnVmZmVyICs9IFwiICAgICAgICAgICAgICAgICAgICA8L3NwYW4+PC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm1hc3Rlci1jb250ZW50LXdpZGdldF9fdGV4dFxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2FsZXMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxW1xcJzBcXCddIDogc3RhY2sxKSkgIT0gbnVsbCA/IHN0YWNrMS50aXRsZSA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCI8L3A+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L2xpPlxcXFxuICAgICAgICAgICAgPGxpIGNsYXNzPVxcXFxcIlwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2UgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmFsYnVtcyA6IHN0YWNrMSksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyMywgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICBidWZmZXIgKz0gXCIgbWFzdGVyLWNvbnRlbnQtd2lkZ2V0X19waG90b1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8aT5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwicGljdHVyZVwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcblxcXFxuICAgICAgICAgICAgICAgIDxkaXY+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm1hc3Rlci1jb250ZW50LXdpZGdldF9faW5mb1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgINCjINCc0LDRgdGC0LXRgNCwOjxicj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuZ2V0TnVtRW5kaW5nIHx8IChkZXB0aDAgJiYgZGVwdGgwLmdldE51bUVuZGluZykgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5hbGJ1bXNDb3VudCA6IGRlcHRoMCksIFwi0YTQvtGC0L7QsNC70YzQsdC+0LwsINGE0L7RgtC+0LDQu9GM0LHQvtC80LAsINGE0L7RgtC+0LDQu9GM0LHQvtC80L7QslwiLCB7XCJuYW1lXCI6XCJnZXROdW1FbmRpbmdcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPC9zdHJvbmc+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtYXN0ZXItY29udGVudC13aWRnZXRfX3RleHRcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuYWxidW1zVGl0bGUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFsYnVtc1RpdGxlIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImFsYnVtc1RpdGxlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3A+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L2xpPlxcXFxuICAgICAgICAgICAgPGxpIGNsYXNzPVxcXFxcIlwiO1xcbiAgc3RhY2sxID0gaGVscGVyc1tcXCdpZlxcJ10uY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2UgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnZpZGVvcyA6IHN0YWNrMSksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyNSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICBidWZmZXIgKz0gXCIgbWFzdGVyLWNvbnRlbnQtd2lkZ2V0X192aWRlb1xcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8aT5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwidmlkZW9cIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtYXN0ZXItY29udGVudC13aWRnZXRfX2luZm9cXFxcXCI+PHNwYW4+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMuaW1nSUQgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmltZ0lEIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcImltZ0lEXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3NwYW4+PC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcIm1hc3Rlci1jb250ZW50LXdpZGdldF9fdGV4dFxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudmlkZW9zIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMVtcXCcwXFwnXSA6IHN0YWNrMSkpICE9IG51bGwgPyBzdGFjazEudGl0bGUgOiBzdGFjazEpLCBkZXB0aDApKVxcbiAgICArIFwiPC9wPlxcXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPC9saT5cXFxcbiAgICAgICAgICAgIDxsaSBjbGFzcz1cXFxcXCJcIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdlIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5jb21tZW50cyA6IHN0YWNrMSksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyNywgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgbWFzdGVyLWNvbnRlbnQtd2lkZ2V0X19jb21tZW50XFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxpPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJkaWFsb2dcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCI8L2k+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2PlxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtYXN0ZXItY29udGVudC13aWRnZXRfX2luZm9cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICDQoyDQnNCw0YHRgtC10YDQsDo8YnI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5nZXROdW1FbmRpbmcgfHwgKGRlcHRoMCAmJiBkZXB0aDAuZ2V0TnVtRW5kaW5nKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudmtMaWtlcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEuY291bnRMaWtlcyA6IHN0YWNrMSksIFwi0YDQtdC60L7QvNC10L3QtNCw0YbQuNGPLCDRgNC10LrQvtC80LXQvdC00LDRhtC40LgsINGA0LXQutC+0LzQtdC90LTQsNGG0LjQuVwiLCB7XCJuYW1lXCI6XCJnZXROdW1FbmRpbmdcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiPGJyPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmdldE51bUVuZGluZyB8fCAoZGVwdGgwICYmIGRlcHRoMC5nZXROdW1FbmRpbmcpIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29tbWVudHNDb3VudCA6IGRlcHRoMCksIFwi0L7RgtC30YvQsiwg0L7RgtC30YvQstCwLCDQvtGC0LfRi9Cy0L7QslwiLCB7XCJuYW1lXCI6XCJnZXROdW1FbmRpbmdcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdHJvbmc+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgICAgIDwvcD5cXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFxcXCJtYXN0ZXItY29udGVudC13aWRnZXRfX3RleHRcXFxcXCI+wqtcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29tbWVudHMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxW1xcJzBcXCddIDogc3RhY2sxKSkgIT0gbnVsbCA/IHN0YWNrMS50ZXh0IDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIsK7PC9wPlxcXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPC9saT5cXFxcbiAgICAgICAgPC91bD5cXFxcblwiO1xcbn0sXCIxNFwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazE7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zYWxlcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazFbXFwnMFxcJ10gOiBzdGFjazEpKSAhPSBudWxsID8gc3RhY2sxLnRpdGxlIDogc3RhY2sxKSwge1wibmFtZVwiOlwiaWZcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDE1LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IHJldHVybiBzdGFjazE7IH1cXG4gIGVsc2UgeyByZXR1cm4gXFwnXFwnOyB9XFxuICB9LFwiMTVcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJhY3RcIjtcXG4gIH0sXCIxN1wiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICDQn9C+0LTQsNGA0L7QulxcXFxuXCI7XFxuICB9LFwiMTlcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgINCh0LrQuNC00LrQsCBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2FsZXMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxW1xcJzBcXCddIDogc3RhY2sxKSkgIT0gbnVsbCA/IHN0YWNrMS5kaXNjb3VudCA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCIlXFxcXG5cIjtcXG59LFwiMjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBsYW1iZGE9dGhpcy5sYW1iZGEsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24obGFtYmRhKCgoc3RhY2sxID0gKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuc2FsZXMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxW1xcJzBcXCddIDogc3RhY2sxKSkgIT0gbnVsbCA/IHN0YWNrMS5kaXNjb3VudCA6IHN0YWNrMSksIGRlcHRoMCkpXFxuICAgICsgXCIg0YDRg9CxLlxcXFxuXCI7XFxufSxcIjIzXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMTtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9ICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmFsYnVtcyA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazFbXFwnMFxcJ10gOiBzdGFjazEpKSAhPSBudWxsID8gc3RhY2sxLm5hbWUgOiBzdGFjazEpLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMTUsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgcmV0dXJuIHN0YWNrMTsgfVxcbiAgZWxzZSB7IHJldHVybiBcXCdcXCc7IH1cXG4gIH0sXCIyNVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazE7XFxuICBzdGFjazEgPSBoZWxwZXJzW1xcJ2lmXFwnXS5jYWxsKGRlcHRoMCwgKChzdGFjazEgPSAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC52aWRlb3MgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxW1xcJzBcXCddIDogc3RhY2sxKSkgIT0gbnVsbCA/IHN0YWNrMS50aXRsZSA6IHN0YWNrMSksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxNSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyByZXR1cm4gc3RhY2sxOyB9XFxuICBlbHNlIHsgcmV0dXJuIFxcJ1xcJzsgfVxcbiAgfSxcIjI3XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMTtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9ICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLmNvbW1lbnRzIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMVtcXCcwXFwnXSA6IHN0YWNrMSkpICE9IG51bGwgPyBzdGFjazEudGV4dCA6IHN0YWNrMSksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxNSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyByZXR1cm4gc3RhY2sxOyB9XFxuICBlbHNlIHsgcmV0dXJuIFxcJ1xcJzsgfVxcbiAgfSxcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGxhbWJkYT10aGlzLmxhbWJkYSwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcIlwiO1xcbiAgc3RhY2sxID0gaGVscGVycy51bmxlc3MuY2FsbChkZXB0aDAsICgoc3RhY2sxID0gKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBhZ2UgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLmlkIDogc3RhY2sxKSwge1wibmFtZVwiOlwidW5sZXNzXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiBtYXN0ZXItbWluaWNhcmRcXFxcXCI+XFxcXG5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcIm1hc3Rlci1taW5pY2FyZF9fcGhvdG8tY29udFxcXFxcIj5cXFxcbiAgICAgICAgPGltZyBjbGFzcz1cXFxcXCJtYXN0ZXItbWluaWNhcmRfX3Bob3RvXFxcXFwiIHNyYz1cXFxcXCJodHRwOi8vYXBpLWZtLnByZXNlbnQtdGx0LnJ1L2ZpbGVzP2tleT1cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pbWdJRCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaW1nSUQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiaW1nSURcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIiBhbHQ9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMubmFtZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubmFtZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJuYW1lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnZSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgzLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiAgICA8L2Rpdj5cXFxcblxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwibWFzdGVyLW1pbmljYXJkX19jb250YWN0LXdyYXBcXFxcXCI+XFxcXG4gICAgICAgIDxjYXQtbWFzdGVyLXBob25lLWJ0biBpZD1cXFxcXCJtYXN0ZXItcGhvbmUtYnRuLVwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmlkIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5pZCA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJpZFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiIHBob25lPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29udGFjdHMgOiBkZXB0aDApKSAhPSBudWxsID8gc3RhY2sxLnBob25lIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIiBwYWdlPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbihsYW1iZGEoKChzdGFjazEgPSAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnZSA6IGRlcHRoMCkpICE9IG51bGwgPyBzdGFjazEubnVtYmVyIDogc3RhY2sxKSwgZGVwdGgwKSlcXG4gICAgKyBcIlxcXFxcIiBvd25lcj1cXFxcXCJcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5pZCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWQgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwiaWRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIlxcXFxcIj48L2NhdC1tYXN0ZXItcGhvbmUtYnRuPlxcXFxuXFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoKHN0YWNrMSA9IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5wYWdlIDogZGVwdGgwKSkgIT0gbnVsbCA/IHN0YWNrMS5udW1iZXIgOiBzdGFjazEpLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oNSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICBidWZmZXIgKz0gXCIgICAgICAgIDxhIGNsYXNzPVxcXFxcIm1hc3Rlci1taW5pY2FyZF9fc2hvdy1zZXJ2aWNlcyBqcy1zZXJ2aWNlcy10b2dnbGVcXFxcXCIgaHJlZj1cXFxcXCIjXFxcXFwiPtCf0L7QutCw0LfQsNGC0Ywg0YPRgdC70YPQs9C4PC9hPlxcXFxuICAgIDwvZGl2PlxcXFxuXFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuY29tcGFueSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSg3LCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIlxcXFxuICAgIDxwIGNsYXNzPVxcXFxcIm1hc3Rlci1taW5pY2FyZF9fbmFtZVxcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5uYW1lIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5uYW1lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm5hbWVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvcD5cXFxcblxcXFxuICAgIDxwIGNsYXNzPVxcXFxcIm1hc3Rlci1taW5pY2FyZF9fc3BlY1xcXFxcIj5cIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy5zcGVjIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5zcGVjIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInNwZWNcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKSlcXG4gICAgKyBcIjwvcD5cXFxcblxcXFxuICAgIDx1bCBjbGFzcz1cXFxcXCJcIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaXNXaWRnZXQgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJpZlwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oOSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICBidWZmZXIgKz0gXCIgbWFzdGVyLW1pbmljYXJkX19zZXJ2aWNlcyBqcy1taW5pY2FyZC1zZXJ2aWNlcy1jdXRcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnNlcnZpY2VzIDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oMTEsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgYnVmZmVyICs9IFwiICAgIDwvdWw+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnZSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxMywgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L2Rpdj5cXFxcblxcXFxuXFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfSxcbntuYW1lOiAnbWFzdGVyLXBob25lLWJ0bicsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvbWFzdGVyL21hc3Rlci1taW5pY2FyZC9tYXN0ZXItcGhvbmUtYnRuL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcIm1hc3Rlci1waG9uZS1idG5cIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCIxXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uO1xcbiAgcmV0dXJuIFwiICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwicGhvbmUtYnRuX191cmxcXFxcXCIgaHJlZj1cXFxcXCIvXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucGFnZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJwYWdlXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+0LXRidC1INC60L7QvdGC0LDQutGC0Ys8L2E+XFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBoZWxwZXIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgYnVmZmVyID0gXCI8ZGl2IGNsYXNzPVxcXFxcInBob25lLWJ0blxcXFxcIj5cXFxcbiAgICA8cCBjbGFzcz1cXFxcXCJwaG9uZS1idG5fX3RpcCBqcy1tYXN0ZXItcGhvbmUtdGlwXFxcXFwiPlxcXFxuICAgICAgICDQn9C+0LbQsNC70YPQudGB0YLQsCDRgdC60LDQttC40YLQtSDQvNCw0YHRgtC10YDRgyDRh9GC0L4g0L3QsNGI0LvQuCDQtdCz0L4g0L3QsCDQvdCw0YjQtdC8INGB0LDQudGC0LVcXFxcbiAgICAgICAgPGkgY2xhc3M9XFxcXFwianMtY2xvc2UtdGlwXFxcXFwiPlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJjbG9zZVwiLCB7XCJuYW1lXCI6XCJpY29uXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pKSlcXG4gICAgKyBcIjwvaT5cXFxcbiAgICA8L3A+XFxcXG4gICAgPGJ1dHRvbiBjbGFzcz1cXFxcXCJwaG9uZS1idG5fX2J1dHRvbiBqcy1zaG93LXBob25lXFxcXFwiIGRhdGEtaWQ9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMub3duZXIgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm93bmVyIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcIm93bmVyXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XFxcXG4gICAgICAgINCf0L7QutCw0LfQsNGC0Ywg0YLQtdC70LXRhNC+0L1cXFxcbiAgICA8L2J1dHRvbj5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcInBob25lLWJ0bl9fcGhvbmUtZGV0YWlscyBqcy1zaG93LXBob25lLWRldGFpbHNcXFxcXCI+XFxcXG4gICAgICAgIDxwIGNsYXNzPVxcXFxcInBob25lLWJ0bl9fcGhvbmVcXFxcXCI+XCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMucGhvbmUgfHwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLnBob25lIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInBob25lXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCI8L3A+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAucGFnZSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIiAgICA8L2Rpdj5cXFxcbjwvZGl2PlxcXFxuXCI7XFxufSxcInVzZURhdGFcIjp0cnVlfScsIGVycm9yVGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHJldHVybiBcIlxcXFxuXCI7XFxuICB9LFwidXNlRGF0YVwiOnRydWV9J30sXG57bmFtZTogJ2RvcC1mdW5jdGlvbicsIGNvbnN0cnVjdG9yOiByZXF1aXJlKCcuL2NhdGJlcnJ5X2NvbXBvbmVudHMvcGFnZS9wYWdlLW1haW4vZG9wLWZ1bmN0aW9uL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcImRvcC1mdW5jdGlvblwiLFwidGVtcGxhdGVcIjpcIi4vdGVtcGxhdGUuaGJzXCIsXCJlcnJvclRlbXBsYXRlXCI6XCIuL2Vycm9yLmhic1wiLFwibG9naWNcIjpcImluZGV4LmpzXCJ9LCB0ZW1wbGF0ZVNvdXJjZTogJ3tcIjFcIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVxcXFxcImJlY29tZS1tYXN0ZXJfX2l0ZW1cXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnNbXFwnaWZcXCddLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAuaWNvbiA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImlmXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgyLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLnByb2dyYW0oNCwgZGF0YSksXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIiAgICAgICAgICAgICAgICAgICAgPC9saT5cXFxcblwiO1xcbn0sXCIyXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGJ1ZmZlciA9IFwiICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwiYmVjb21lLW1hc3Rlcl9faXRlbS1saW5rIGJlY29tZS1tYXN0ZXJfX2l0ZW0tbGlua19ob3ZlclxcXFxcIiBocmVmPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXFxcImJlY29tZS1tYXN0ZXJfX2ljb25cXFxcXCI+PC9zcGFuPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cXFxcblwiO1xcbn0sXCI0XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGJ1ZmZlciA9IFwiICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwiYmVjb21lLW1hc3Rlcl9faXRlbS1saW5rXFxcXFwiIGhyZWY9XFxcXFwiXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVyID0gKGhlbHBlciA9IGhlbHBlcnMudXJsIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC51cmwgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidXJsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YX0pIDogaGVscGVyKSkpXFxuICAgICsgXCJcXFxcXCI+XCI7XFxuICBzdGFjazEgPSAoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnRpdGxlIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC50aXRsZSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJ0aXRsZVwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIHJldHVybiBidWZmZXIgKyBcIjwvYT5cXFxcblwiO1xcbn0sXCI2XCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgdmFyIHN0YWNrMSwgaGVscGVyLCBmdW5jdGlvblR5cGU9XCJmdW5jdGlvblwiLCBoZWxwZXJNaXNzaW5nPWhlbHBlcnMuaGVscGVyTWlzc2luZywgZXNjYXBlRXhwcmVzc2lvbj10aGlzLmVzY2FwZUV4cHJlc3Npb24sIGJ1ZmZlciA9IFwiICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcXFwiYWJvdXQtY29tcGFueV9faXRlbVxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImFib3V0LWNvbXBhbnlfX2l0ZW0tbGlua1xcXFxcIiBocmVmPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L2E+XFxcXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcXG5cIjtcXG59LFwiOFwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGJ1ZmZlciA9IFwiICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcXFwiYmF5ZGFfX2l0ZW0tY3ViZVxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy51bmxlc3MuY2FsbChkZXB0aDAsIChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5lbXB0eSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcInVubGVzc1wiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oOSwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCIgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxcXG5cIjtcXG59LFwiOVwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBzdGFjazEsIGhlbHBlciwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIiwgaGVscGVyTWlzc2luZz1oZWxwZXJzLmhlbHBlck1pc3NpbmcsIGVzY2FwZUV4cHJlc3Npb249dGhpcy5lc2NhcGVFeHByZXNzaW9uLCBidWZmZXIgPSBcIiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImJheWRhX19pdGVtLWN1YmUtbGlua1xcXFxcIiBocmVmPVxcXFxcIlwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLnVybCB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudXJsIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBmdW5jdGlvblR5cGUgPyBoZWxwZXIuY2FsbChkZXB0aDAsIHtcIm5hbWVcIjpcInVybFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiXFxcXFwiPlwiO1xcbiAgc3RhY2sxID0gKChoZWxwZXIgPSAoaGVscGVyID0gaGVscGVycy50aXRsZSB8fCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAudGl0bGUgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogaGVscGVyTWlzc2luZyksKHR5cGVvZiBoZWxwZXIgPT09IGZ1bmN0aW9uVHlwZSA/IGhlbHBlci5jYWxsKGRlcHRoMCwge1wibmFtZVwiOlwidGl0bGVcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkgOiBoZWxwZXIpKTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICByZXR1cm4gYnVmZmVyICsgXCI8L2E+XFxcXG5cIjtcXG59LFwiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICB2YXIgc3RhY2sxLCBidWZmZXIgPSBcIjxkaXYgY2xhc3M9XFxcXFwiZG9wLWZ1bmN0aW9uXFxcXFwiPlxcXFxuICAgIDxkaXYgY2xhc3M9XFxcXFwiZG9wLWZ1bmN0aW9uX19pbm5lclxcXFxcIj5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJiZWNvbWUtbWFzdGVyXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJiZWNvbWUtbWFzdGVyX19pbm5lclxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImJlY29tZS1tYXN0ZXJfX3RpdGxlIGRvcC1mdW5jdGlvbi1ibG9jay1qc1xcXFxcIj7QnNCw0YHRgtC10YDQsNC8PC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXFxcImJlY29tZS1tYXN0ZXJfX21lbnVcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm1lbnVNYXN0ZXIgOiBkZXB0aDApLCB7XCJuYW1lXCI6XCJlYWNoXCIsXCJoYXNoXCI6e30sXCJmblwiOnRoaXMucHJvZ3JhbSgxLCBkYXRhKSxcImludmVyc2VcIjp0aGlzLm5vb3AsXCJkYXRhXCI6ZGF0YX0pO1xcbiAgaWYgKHN0YWNrMSAhPSBudWxsKSB7IGJ1ZmZlciArPSBzdGFjazE7IH1cXG4gIGJ1ZmZlciArPSBcIiAgICAgICAgICAgICAgICA8L3VsPlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImFib3V0LWNvbXBhbnlcXFxcXCI+XFxcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImFib3V0LWNvbXBhbnlfX2lubmVyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiYWJvdXQtY29tcGFueV9fdGl0bGUgZG9wLWZ1bmN0aW9uLWJsb2NrLWpzXFxcXFwiPtCeINC60L7QvNC/0LDQvdC40Lg8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XFxcXFwiYWJvdXQtY29tcGFueV9fbWVudVxcXFxcIj5cXFxcblwiO1xcbiAgc3RhY2sxID0gaGVscGVycy5lYWNoLmNhbGwoZGVwdGgwLCAoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAubWVudUFib3V0IDogZGVwdGgwKSwge1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjp0aGlzLnByb2dyYW0oNiwgZGF0YSksXCJpbnZlcnNlXCI6dGhpcy5ub29wLFwiZGF0YVwiOmRhdGF9KTtcXG4gIGlmIChzdGFjazEgIT0gbnVsbCkgeyBidWZmZXIgKz0gc3RhY2sxOyB9XFxuICBidWZmZXIgKz0gXCIgICAgICAgICAgICAgICAgPC91bD5cXFxcbiAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJiYXlkYVxcXFxcIj5cXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiYmF5ZGFfX2lubmVyXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcXFwiYmF5ZGFfX3RpdGxlIGRvcC1mdW5jdGlvbi1ibG9jay1qc1xcXFxcIj7QoNCw0LfQstC70LXRh9C10L3QuNGPPC9kaXY+XFxcXG4gICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXFxcImJheWRhX19tZW51LWN1YmVcXFxcXCI+XFxcXG5cIjtcXG4gIHN0YWNrMSA9IGhlbHBlcnMuZWFjaC5jYWxsKGRlcHRoMCwgKGRlcHRoMCAhPSBudWxsID8gZGVwdGgwLm1lbnVCYXlkYSA6IGRlcHRoMCksIHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6dGhpcy5wcm9ncmFtKDgsIGRhdGEpLFwiaW52ZXJzZVwiOnRoaXMubm9vcCxcImRhdGFcIjpkYXRhfSk7XFxuICBpZiAoc3RhY2sxICE9IG51bGwpIHsgYnVmZmVyICs9IHN0YWNrMTsgfVxcbiAgcmV0dXJuIGJ1ZmZlciArIFwiICAgICAgICAgICAgICAgIDwvdWw+XFxcXG4gICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPC9kaXY+XFxcXG4gICAgPC9kaXY+XFxcXG48L2Rpdj5cXFxcblwiO1xcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0nLCBlcnJvclRlbXBsYXRlU291cmNlOiAne1wiY29tcGlsZXJcIjpbNixcIj49IDIuMC4wLWJldGEuMVwiXSxcIm1haW5cIjpmdW5jdGlvbihkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XFxuICByZXR1cm4gXCJcXFxcblwiO1xcbiAgfSxcInVzZURhdGFcIjp0cnVlfSd9LFxue25hbWU6ICdtYWluLWZ1bmN0aW9uJywgY29uc3RydWN0b3I6IHJlcXVpcmUoJy4vY2F0YmVycnlfY29tcG9uZW50cy9wYWdlL3BhZ2UtbWFpbi9tYWluLWZ1bmN0aW9uL2luZGV4LmpzJyksIHByb3BlcnRpZXM6IHtcIm5hbWVcIjpcIm1haW4tZnVuY3Rpb25cIixcInRlbXBsYXRlXCI6XCIuL3RlbXBsYXRlLmhic1wiLFwiZXJyb3JUZW1wbGF0ZVwiOlwiLi9lcnJvci5oYnNcIixcImxvZ2ljXCI6XCJpbmRleC5qc1wifSwgdGVtcGxhdGVTb3VyY2U6ICd7XCJjb21waWxlclwiOls2LFwiPj0gMi4wLjAtYmV0YS4xXCJdLFwibWFpblwiOmZ1bmN0aW9uKGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcXG4gIHZhciBoZWxwZXIsIGhlbHBlck1pc3Npbmc9aGVscGVycy5oZWxwZXJNaXNzaW5nLCBlc2NhcGVFeHByZXNzaW9uPXRoaXMuZXNjYXBlRXhwcmVzc2lvbiwgZnVuY3Rpb25UeXBlPVwiZnVuY3Rpb25cIjtcXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcXFwibWFpbi1mdW5jdGlvblxcXFxcIj5cXFxcbiAgICA8ZGl2IGNsYXNzPVxcXFxcIm1haW4tZnVuY3Rpb25fX2lubmVyXFxcXFwiPlxcXFxuICAgICAgICA8Y2F0LXNlYXJjaCBpZD1cXFxcXCJzZWFyY2hcXFxcXCI+PC9jYXQtc2VhcmNoPlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcIm9yXFxcXFwiPtC40LvQuDwvZGl2PlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZpbmQtbWFzdGVyIGpzLWZpbmQtbWFzdGVyXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGEgY2xhc3M9XFxcXFwiZmluZC1tYXN0ZXJfX2lubmVyXFxcXFwiIGhyZWY9XFxcXFwiL2NhdGFsb2dcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJmaW5kLW1hc3Rlcl9faW5uZXItcmVsXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImZpbmQtbWFzdGVyX19pY29uXFxcXFwiPlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgKyBlc2NhcGVFeHByZXNzaW9uKCgoaGVscGVycy5pY29uIHx8IChkZXB0aDAgJiYgZGVwdGgwLmljb24pIHx8IGhlbHBlck1pc3NpbmcpLmNhbGwoZGVwdGgwLCBcIm1hbi1pbi1zdW5cIiwgXCJpY29uX3doaXRlXCIsIHtcIm5hbWVcIjpcImljb25cIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhfSkpKVxcbiAgICArIFwiXFxcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImZpbmQtbWFzdGVyX190aXRsZVxcXFxcIj7QktGL0LHQtdGA0Lgg0JzQsNGB0YLQtdGA0LA8L3A+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXFxcImZpbmQtbWFzdGVyX19idG5cXFxcXCI+0KMg0L3QsNGBIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBoZWxwZXJzLmNvdW50TWFzdGVyIHx8IChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMC5jb3VudE1hc3RlciA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBoZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gZnVuY3Rpb25UeXBlID8gaGVscGVyLmNhbGwoZGVwdGgwLCB7XCJuYW1lXCI6XCJjb3VudE1hc3RlclwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSA6IGhlbHBlcikpKVxcbiAgICArIFwiPC9zcGFuPlxcXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPC9hPlxcXFxuICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJjYWxsLWJhY2tcXFxcXCI+XFxcXG4gICAgICAgICAgICA8YSBjbGFzcz1cXFxcXCJjYWxsLWJhY2tfX2lubmVyXFxcXFwiIGhyZWY9XFxcXFwiL3JlcXVlc3RcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJjYWxsLWJhY2tfX2lubmVyLXJlbFxcXFxcIj5cXFxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJjYWxsLWJhY2tfX2ljb25cXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICArIGVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXJzLmljb24gfHwgKGRlcHRoMCAmJiBkZXB0aDAuaWNvbikgfHwgaGVscGVyTWlzc2luZykuY2FsbChkZXB0aDAsIFwic3Rhci1pbi1zdW5cIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICsgZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlcnMuaWNvbiB8fCAoZGVwdGgwICYmIGRlcHRoMC5pY29uKSB8fCBoZWxwZXJNaXNzaW5nKS5jYWxsKGRlcHRoMCwgXCJzdGFyLWxpbmVcIiwge1wibmFtZVwiOlwiaWNvblwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGF9KSkpXFxuICAgICsgXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxcXG5cXFxcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcXFwiY2FsbC1iYWNrX190aXRsZVxcXFxcIj7Ql9Cw0LrQsNC20Lgg0YPRgdC70YPQs9GDPC9wPlxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXFxcImNhbGwtYmFja19fdGV4dFxcXFxcIj7QnNGLINCx0LXRgdC/0LvQsNGC0L3QviDQvtGC0L/RgNCw0LLQuNC8INCy0LDRiNGDINC30LDRj9Cy0LrRgyDQstGB0LXQvCDQv9C+0LTRhdC+0LTRj9GJ0LjQvCDQnNCw0YHRgtC10YDQsNC8PC9wPlxcXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFxcXCJjYWxsLWJhY2tfX2J0blxcXFxcIj7QodC+0LfQtNCw0YLRjCDQt9Cw0Y/QstC60YM8L3NwYW4+XFxcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgICAgICA8L2E+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImNhdGFsb2dzXFxcXFwiPlxcXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJjYXRhbG9nc19faW5uZXJcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFxcXCJjYXRhbG9nc19fc2VydmljZXNcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXFxcImNhdGFsb2dzX19zZXJ2aWNlcy1saW5rXFxcXFwiIGhyZWY9XFxcXFwiL2NhdGFsb2dcXFxcXCI+0JLQtdGB0Ywg0LrQsNGC0LDQu9C+0LMg0YPRgdC70YPQszwvYT5cXFxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXFxcImNhdGFsb2dzX19kb3BcXFxcXCI+XFxcXG4gICAgICAgICAgICAgICAgICAgIDxjYXQtY2F0YWxvZy1saXN0IGlkPVxcXFxcImNhdGFsb2ctbGlzdFxcXFxcIiBkYXRhLW1vZD1cXFxcXCJwYWdlX21haW5cXFxcXCI+PC9jYXQtY2F0YWxvZy1saXN0PlxcXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcXFxuICAgICAgICAgICAgPC9kaXY+XFxcXG4gICAgICAgIDwvZGl2PlxcXFxuICAgIDwvZGl2PlxcXFxuPC9kaXY+XFxcXG5cIjtcXG59LFwidXNlRGF0YVwiOnRydWV9JywgZXJyb3JUZW1wbGF0ZVNvdXJjZTogJ3tcImNvbXBpbGVyXCI6WzYsXCI+PSAyLjAuMC1iZXRhLjFcIl0sXCJtYWluXCI6ZnVuY3Rpb24oZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xcbiAgcmV0dXJuIFwiXFxcXG5cIjtcXG4gIH0sXCJ1c2VEYXRhXCI6dHJ1ZX0nfVxuXTtcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG5cdHJvdXRlRGVmaW5pdGlvbnMgPSByZXF1aXJlKCcuL3JvdXRlcy5qcycpIHx8IFtdLFxuXHRDYXRiZXJyeSA9IHJlcXVpcmUoJy4vbm9kZV9tb2R1bGVzL2NhdGJlcnJ5L2Jyb3dzZXIvQ2F0YmVycnkuanMnKSxcblx0TG9nZ2VyID0gcmVxdWlyZSgnLi9ub2RlX21vZHVsZXMvY2F0YmVycnkvYnJvd3Nlci9Mb2dnZXIuanMnKSxcblx0Qm9vdHN0cmFwcGVyQmFzZSA9XG5cdFx0cmVxdWlyZSgnLi9ub2RlX21vZHVsZXMvY2F0YmVycnkvbGliL2Jhc2UvQm9vdHN0cmFwcGVyQmFzZS5qcycpLFxuXHRTdG9yZURpc3BhdGNoZXIgPSByZXF1aXJlKCcuL25vZGVfbW9kdWxlcy9jYXRiZXJyeS9saWIvU3RvcmVEaXNwYXRjaGVyJyksXG5cdE1vZHVsZUFwaVByb3ZpZGVyID1cblx0XHRyZXF1aXJlKCcuL25vZGVfbW9kdWxlcy9jYXRiZXJyeS9icm93c2VyL3Byb3ZpZGVycy9Nb2R1bGVBcGlQcm92aWRlcicpLFxuXHRDb29raWVXcmFwcGVyID0gcmVxdWlyZSgnLi9ub2RlX21vZHVsZXMvY2F0YmVycnkvYnJvd3Nlci9Db29raWVXcmFwcGVyJyk7XG5cbnZhciBERUJVR19ET0NVTUVOVF9VUERBVEVEID0gJ0RvY3VtZW50IHVwZGF0ZWQgKCVkIHN0b3JlKHMpIGNoYW5nZWQpJyxcblx0REVCVUdfQ09NUE9ORU5UX0JPVU5EID0gJ0NvbXBvbmVudCBcIiVzXCIgaXMgYm91bmQnLFxuXHRERUJVR19DT01QT05FTlRfVU5CT1VORCA9ICdDb21wb25lbnQgXCIlc1wiIGlzIHVuYm91bmQnO1xuXG51dGlsLmluaGVyaXRzKEJvb3RzdHJhcHBlciwgQm9vdHN0cmFwcGVyQmFzZSk7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIGJyb3dzZXIgQ2F0YmVycnkncyBib290c3RyYXBwZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEJvb3RzdHJhcHBlckJhc2VcbiAqL1xuZnVuY3Rpb24gQm9vdHN0cmFwcGVyKCkge1xuXHRCb290c3RyYXBwZXJCYXNlLmNhbGwodGhpcywgQ2F0YmVycnkpO1xufVxuXG4vKipcbiAqIENvbmZpZ3VyZXMgQ2F0YmVycnkncyBzZXJ2aWNlIGxvY2F0b3IuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnT2JqZWN0IEFwcGxpY2F0aW9uIGNvbmZpZyBvYmplY3QuXG4gKiBAcGFyYW0ge1NlcnZpY2VMb2NhdG9yfSBsb2NhdG9yIFNlcnZpY2UgbG9jYXRvciB0byBjb25maWd1cmUuXG4gKi9cbkJvb3RzdHJhcHBlci5wcm90b3R5cGUuY29uZmlndXJlID0gZnVuY3Rpb24gKGNvbmZpZ09iamVjdCwgbG9jYXRvcikge1xuXHRCb290c3RyYXBwZXJCYXNlLnByb3RvdHlwZS5jb25maWd1cmUuY2FsbCh0aGlzLCBjb25maWdPYmplY3QsIGxvY2F0b3IpO1xuXG5cdC8vIGlmIGJyb3dzZXIgc3RpbGwgZG9lcyBub3QgaGF2ZSBwcm9taXNlcyB0aGVuIGFkZCBpdC5cblx0aWYgKCEoJ1Byb21pc2UnIGluIHdpbmRvdykpIHtcblx0XHR3aW5kb3cuUHJvbWlzZSA9IGxvY2F0b3IucmVzb2x2ZSgncHJvbWlzZScpO1xuXHR9XG5cblx0bG9jYXRvci5yZWdpc3Rlcignc3RvcmVEaXNwYXRjaGVyJywgU3RvcmVEaXNwYXRjaGVyLCBjb25maWdPYmplY3QsIHRydWUpO1xuXHRsb2NhdG9yLnJlZ2lzdGVyKFxuXHRcdCdtb2R1bGVBcGlQcm92aWRlcicsIE1vZHVsZUFwaVByb3ZpZGVyLCBjb25maWdPYmplY3QsIHRydWVcblx0KTtcblx0bG9jYXRvci5yZWdpc3RlcignY29va2llV3JhcHBlcicsIENvb2tpZVdyYXBwZXIsIGNvbmZpZ09iamVjdCwgdHJ1ZSk7XG5cblx0bG9jYXRvci5yZWdpc3Rlckluc3RhbmNlKCd3aW5kb3cnLCB3aW5kb3cpO1xuXG5cdHZhciBsb2dnZXJDb25maWcgPSBjb25maWdPYmplY3QubG9nZ2VyIHx8IHt9LFxuXHRcdGxvZ2dlciA9IG5ldyBMb2dnZXIobG9nZ2VyQ29uZmlnLmxldmVscyk7XG5cdGxvY2F0b3IucmVnaXN0ZXJJbnN0YW5jZSgnbG9nZ2VyJywgbG9nZ2VyKTtcblx0d2luZG93Lm9uZXJyb3IgPSBmdW5jdGlvbiBlcnJvckhhbmRsZXIobXNnLCB1cmksIGxpbmUpIHtcblx0XHRsb2dnZXIuZmF0YWwodXJpICsgJzonICsgbGluZSArICcgJyArIG1zZyk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH07XG5cdHZhciBldmVudEJ1cyA9IGxvY2F0b3IucmVzb2x2ZSgnZXZlbnRCdXMnKTtcblx0dGhpcy5fd3JhcEV2ZW50c1dpdGhMb2dnZXIoY29uZmlnT2JqZWN0LCBldmVudEJ1cywgbG9nZ2VyKTtcblxuXHRyb3V0ZURlZmluaXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHJvdXRlRGVmaW5pdGlvbikge1xuXHRcdGxvY2F0b3IucmVnaXN0ZXJJbnN0YW5jZSgncm91dGVEZWZpbml0aW9uJywgcm91dGVEZWZpbml0aW9uKTtcblx0fSk7XG5cblx0c3RvcmVzLmZvckVhY2goZnVuY3Rpb24gKHN0b3JlKSB7XG5cdFx0bG9jYXRvci5yZWdpc3Rlckluc3RhbmNlKCdzdG9yZScsIHN0b3JlKTtcblx0fSk7XG5cblx0Y29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjb21wb25lbnQpIHtcblx0XHRsb2NhdG9yLnJlZ2lzdGVySW5zdGFuY2UoJ2NvbXBvbmVudCcsIGNvbXBvbmVudCk7XG5cdH0pO1xufTtcblxuLyoqXG4gKiBXcmFwcyBldmVudCBidXMgd2l0aCBsb2cgbWVzc2FnZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIEFwcGxpY2F0aW9uIGNvbmZpZy5cbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBldmVudEJ1cyBFdmVudCBlbWl0dGVyIHRoYXQgaW1wbGVtZW50cyBldmVudCBidXMuXG4gKiBAcGFyYW0ge0xvZ2dlcn0gbG9nZ2VyIExvZ2dlciB0byB3cml0ZSBtZXNzYWdlcy5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuQm9vdHN0cmFwcGVyLnByb3RvdHlwZS5fd3JhcEV2ZW50c1dpdGhMb2dnZXIgPVxuXHRmdW5jdGlvbiAoY29uZmlnLCBldmVudEJ1cywgbG9nZ2VyKSB7XG5cdFx0Qm9vdHN0cmFwcGVyQmFzZS5wcm90b3R5cGUuX3dyYXBFdmVudHNXaXRoTG9nZ2VyXG5cdFx0XHQuY2FsbCh0aGlzLCBjb25maWcsIGV2ZW50QnVzLCBsb2dnZXIpO1xuXG5cdFx0dmFyIGlzUmVsZWFzZSA9IEJvb2xlYW4oY29uZmlnLmlzUmVsZWFzZSk7XG5cdFx0aWYgKGlzUmVsZWFzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRldmVudEJ1c1xuXHRcdFx0Lm9uKCdkb2N1bWVudFVwZGF0ZWQnLCBmdW5jdGlvbiAoYXJncykge1xuXHRcdFx0XHRsb2dnZXIuZGVidWcodXRpbC5mb3JtYXQoREVCVUdfRE9DVU1FTlRfVVBEQVRFRCwgYXJncy5sZW5ndGgpKTtcblx0XHRcdH0pXG5cdFx0XHQub24oJ2NvbXBvbmVudEJvdW5kJywgZnVuY3Rpb24gKGFyZ3MpIHtcblx0XHRcdFx0bG9nZ2VyLmRlYnVnKHV0aWwuZm9ybWF0KFxuXHRcdFx0XHRcdERFQlVHX0NPTVBPTkVOVF9CT1VORCxcblx0XHRcdFx0XHRhcmdzLmVsZW1lbnQudGFnTmFtZSArIChhcmdzLmlkID8gJyMnICsgYXJncy5pZCA6ICcnKVxuXHRcdFx0XHQpKTtcblx0XHRcdH0pXG5cdFx0XHQub24oJ2NvbXBvbmVudFVuYm91bmQnLCBmdW5jdGlvbiAoYXJncykge1xuXHRcdFx0XHRsb2dnZXIuZGVidWcodXRpbC5mb3JtYXQoXG5cdFx0XHRcdFx0REVCVUdfQ09NUE9ORU5UX1VOQk9VTkQsXG5cdFx0XHRcdFx0YXJncy5lbGVtZW50LnRhZ05hbWUgKyAoYXJncy5pZCA/ICcjJyArIGFyZ3MuaWQgOiAnJylcblx0XHRcdFx0KSk7XG5cdFx0XHR9KTtcblx0fTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgQm9vdHN0cmFwcGVyKCk7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2F0YmVycnkgPSByZXF1aXJlKCdjYXRiZXJyeScpLFxuLy8gdGhpcyBjb25maWcgd2lsbCBiZSByZXBsYWNlZCBieSBgLi9jb25maWcvYnJvd3Nlci5qc29uYCB3aGVuIGJ1aWxkaW5nXG4vLyBiZWNhdXNlIG9mIGBicm93c2VyYCBmaWVsZCBpbiBgcGFja2FnZS5qc29uYFxuICAgIGNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnL2Vudmlyb25tZW50Lmpzb24nKSxcbiAgICB0ZW1wbGF0ZUVuZ2luZSA9IHJlcXVpcmUoJy4vc3BlY2lhbF9tb2R1bGVzL2NhdGJlcnJ5LWhhbmRsZWJhcnMnKSxcbiAgICBoZWxwZXJzID0gcmVxdWlyZSgnLi9zcGVjaWFsX21vZHVsZXMvY2F0YmVycnktaGFuZGxlYmFycy1oZWxwZXJzJyksXG4gICAgY2F0ID0gY2F0YmVycnkuY3JlYXRlKGNvbmZpZyk7XG5cbi8vIHJlZ2lzdGVyIHRlbXBsYXRlIHByb3ZpZGVyIHRvIENhdGJlcnJ5IFNlcnZpY2UgTG9jYXRvclxudGVtcGxhdGVFbmdpbmUucmVnaXN0ZXIoY2F0LmxvY2F0b3IpO1xuaGVscGVycy5yZWdpc3RlcihjYXQubG9jYXRvcilcblxuY2F0LnN0YXJ0V2hlblJlYWR5KCk7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBDb21tb25IMTtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJjb21tb24taDFcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ29tbW9uSDEoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5Db21tb25IMS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLiRjb250ZXh0LmF0dHJpYnV0ZXM7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cbkNvbW1vbkgxLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cbkNvbW1vbkgxLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tbW9uUGFnaW5hdG9yO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcImNvbW1vbi1wYWdpbmF0b3JcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ29tbW9uUGFnaW5hdG9yKCkge1xufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cbkNvbW1vblBhZ2luYXRvci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgbW9kZWwgPSB0aGlzLiRjb250ZXh0LmF0dHJpYnV0ZXMubW9kZWw7XG4gICAgaWYgKCFtb2RlbClcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwiaXMtcGFnaW5hdG9yXCI6IGZhbHNlXG4gICAgICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5zZW5kQWN0aW9uKFwic2V0TW9kZWxcIiwgbW9kZWwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLiRjb250ZXh0LmdldFN0b3JlRGF0YSgpO1xuICAgICAgICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuQ29tbW9uUGFnaW5hdG9yLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNsaWNrOiB7XG4gICAgICAgICAgICAnLnBhZ2luYXRvcl9fbnVtYmVyJzogdGhpcy5faGFuZGxlQ2xpY2tcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuQ29tbW9uUGFnaW5hdG9yLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5Db21tb25QYWdpbmF0b3IucHJvdG90eXBlLl9oYW5kbGVDbGljayA9IGZ1bmN0aW9uKCl7XG4gICAgd2luZG93LnNjcm9sbFRvKDAsMCk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBCcmVhZGNydW1wcztcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJicmVhZGNydW1wc1wiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBCcmVhZGNydW1wcygpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cbkJyZWFkY3J1bXBzLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cbkJyZWFkY3J1bXBzLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNsaWNrOiB7XG4gICAgICAgICAgICAnLmpzLXBhcmVudC1ydWInOiB0aGlzLl9jbGlja0hhbmRsZXIsXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbkJyZWFkY3J1bXBzLnByb3RvdHlwZS5fY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIC8vdmFyIGVsID0gb2JqLnRhcmdldDtcbiAgICB2YXIgcG9zID0gJCgnLmpzLXBhcmVudC1ydWInKS5wb3NpdGlvbigpLmxlZnQgKyAkKCcuanMtcGFyZW50LXJ1YicpLndpZHRoKCk7XG4gICAgJCgnLmpzLWJyZWFkY3J1bWJzLWxpc3QnKS5jc3MoJ2xlZnQnLCBwb3MpLnRvZ2dsZSgpO1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuQnJlYWRjcnVtcHMucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBEb3BDYXRhbG9ncztcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJkb3AtY2F0YWxvZ3NcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRG9wQ2F0YWxvZ3MoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5Eb3BDYXRhbG9ncy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ2RhdGEtbW9kJzogdGhpcy4kY29udGV4dC5hdHRyaWJ1dGVzWydkYXRhLW1vZCddLFxuICAgICAgICBjYXRhbG9nczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHVybDogXCIvc2FsZVwiLFxuICAgICAgICAgICAgICAgIGljbzogXCJnaWZ0XCIsXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwi0J/QvtC40YHQuiDQv9C+INGB0LrQuNC00LrQtVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHVybDogXCIvdmlkZW9cIixcbiAgICAgICAgICAgICAgICBpY286IFwidmlkZW9cIixcbiAgICAgICAgICAgICAgICB0aXRsZTogXCLQn9C+0LjRgdC6INC/0L4g0LLQuNC00LXQvlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHVybDogXCIvc292ZXR5XCIsXG4gICAgICAgICAgICAgICAgaWNvOiBcInF3ZXN0aW9uXCIsXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwi0KHQtdC60YDQtdGC0Ysg0JzQsNGB0YLQtdGA0L7QslwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHVybDogXCIvY29tcGFueVwiLFxuICAgICAgICAgICAgICAgIGljbzogXCJjYXNlXCIsXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwi0JrQsNGC0LDQu9C+0LMg0YTQuNGA0LxcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuRG9wQ2F0YWxvZ3MucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuRG9wQ2F0YWxvZ3MucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBEb2N1bWVudDtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJkb2N1bWVudFwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBEb2N1bWVudCgpIHsgfVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhlYWQ7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwiaGVhZFwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBIZWFkKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuSGVhZC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBMb2FkZXI7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwibG9hZGVyXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIExvYWRlcigpIHsgfVxuXG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFzdGVyQmxvY2tBYm91dDtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJtYXN0ZXItYmxvY2stYWJvdXRcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFzdGVyQmxvY2tBYm91dCgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cbk1hc3RlckJsb2NrQWJvdXQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy4kY29udGV4dC5hdHRyaWJ1dGVzWydtYXN0ZXItcGFnZSddKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRjb250ZXh0LmdldFN0b3JlRGF0YSgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGRhdGEuYWJvdXRFZHVjID0gZGF0YS5hYm91dEVkdWMucmVwbGFjZSgvXFxuL2csIFwiPGJyPlwiKTtcbiAgICAgICAgICAgICAgICBkYXRhLmFib3V0RXhwID0gZGF0YS5hYm91dEV4cC5yZXBsYWNlKC9cXG4vZywgXCI8YnI+XCIpO1xuICAgICAgICAgICAgICAgIGRhdGEuYWJvdXRBZGRJbmZvID0gZGF0YS5hYm91dEFkZEluZm8ucmVwbGFjZSgvXFxuL2csIFwiPGJyPlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhYm91dEVkdWM6IGRhdGEuYWJvdXRFZHVjLFxuICAgICAgICAgICAgICAgICAgICBhYm91dEV4cDogZGF0YS5hYm91dEV4cCxcbiAgICAgICAgICAgICAgICAgICAgYWJvdXRBZGRJbmZvOiBkYXRhLmFib3V0QWRkSW5mb1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuTWFzdGVyQmxvY2tBYm91dC5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5NYXN0ZXJCbG9ja0Fib3V0LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFzdGVyQmxvY2tBcnRpY2xlO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcIm1hc3Rlci1ibG9jay1hcnRpY2xlXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1hc3RlckJsb2NrQXJ0aWNsZSgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cbk1hc3RlckJsb2NrQXJ0aWNsZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLiRjb250ZXh0LmF0dHJpYnV0ZXNbJ21hc3Rlci1wYWdlJ10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5hcnRpY2xlcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uYXV0aG9yID0gZGF0YS5uYW1lOyAvL9C00L7QsdCw0LLQu9GP0LXQvCDQsNCy0YLQvtGA0LAg0LTQu9GPINC60LDQttC00L7QuSDRgdGC0LDRgtGM0LhcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEuYXJ0aWNsZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGFydGljbGVzOiBkYXRhLmFydGljbGVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5NYXN0ZXJCbG9ja0FydGljbGUucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuTWFzdGVyQmxvY2tBcnRpY2xlLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFzdGVyQmxvY2tMaW5rO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcIm1hc3Rlci1ibG9jay1saW5rXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1hc3RlckJsb2NrTGluaygpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cbk1hc3RlckJsb2NrTGluay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLiRjb250ZXh0LmF0dHJpYnV0ZXNbJ21hc3Rlci1wYWdlJ10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhLmNvbnRhY3RzKTtcbiAgICAgICAgICAgICAgICBkYXRhLmNvbnRhY3RzLmxpbmtzID0gSlNPTi5wYXJzZShkYXRhLmNvbnRhY3RzLmxpbmtzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBsaW5rczogZGF0YS5jb250YWN0cy5saW5rc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuTWFzdGVyQmxvY2tMaW5rLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cbk1hc3RlckJsb2NrTGluay5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hc3RlckJsb2NrUGhvdG87XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwibWFzdGVyLWJsb2NrLXBob3RvXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1hc3RlckJsb2NrUGhvdG8oKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5NYXN0ZXJCbG9ja1Bob3RvLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuJGNvbnRleHQuYXR0cmlidXRlc1snbWFzdGVyLXBhZ2UnXSkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEuYWxidW1zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhbGJ1bXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDE5OTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvd25lclR5cGVcIjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm93bmVySURcIjogMTAxOSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCLQkNC70YzQsdC+0Lwg4oSWMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3RhdHVzXCI6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwaG90b3NcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDYzODUzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGJ1bUlEXCI6IDE5OTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImltZ0lEXCI6IFwiNTY5MzQ1ODYyMzA0MVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNjM4NTQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFsYnVtSURcIjogMTk5MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW1nSURcIjogXCI1NjkzNDU4NjhiYmIzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA2Mzg1NSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxidW1JRFwiOiAxOTkxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbWdJRFwiOiBcIjU2OTM0NTg3MDEzNjdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDYzODU2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGJ1bUlEXCI6IDE5OTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImltZ0lEXCI6IFwiNTY5MzQ1ODc3MTg0MFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNjM4NTcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFsYnVtSURcIjogMTk5MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW1nSURcIjogXCI1NjkzNDU4N2Q4ZTA1XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA2Mzg1OCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxidW1JRFwiOiAxOTkxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbWdJRFwiOiBcIjU2OTM0NTg4NDVlYjRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDYzODU5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGJ1bUlEXCI6IDE5OTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImltZ0lEXCI6IFwiNTY5MzQ1ODhhZjc2NlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogMTk5MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm93bmVyVHlwZVwiOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib3duZXJJRFwiOiAxMDU4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcItCh0LXRgNGC0LjRhNC40LrQsNGC0YtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0YXR1c1wiOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGhvdG9zXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA2NDA2OCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxidW1JRFwiOiAxOTkzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbWdJRFwiOiBcIjU2OTM0NWJhMjBkYzlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDY0MDY5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGJ1bUlEXCI6IDE5OTMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImltZ0lEXCI6IFwiNTY5MzQ1YmE4MGY4NFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogNjQwNzAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFsYnVtSURcIjogMTk5MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW1nSURcIjogXCI1NjkzNDViYWViNGQ5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA2NDA3MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxidW1JRFwiOiAxOTkzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbWdJRFwiOiBcIjU2OTM0NWJiNWY5MmFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDY0MDcyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGJ1bUlEXCI6IDE5OTMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImltZ0lEXCI6IFwiNTY5MzQ1YmM2YWVlOFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIjogODgzMzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFsYnVtSURcIjogMTk5MyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW1nSURcIjogXCI1NjkzNTAzZTYxMjg0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiA4ODMzMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxidW1JRFwiOiAxOTkzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbWdJRFwiOiBcIjU2OTM1MDNlYzUzNzdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IDExOTc2MSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxidW1JRFwiOiAxOTkzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbWdJRFwiOiBcIjU2OTM2ZTA4NDlhZTlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5NYXN0ZXJCbG9ja1Bob3RvLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhbGJ1bSA9ICQoJy5waG90by1tZF9fYWxidW0tY292ZXInKTtcbiAgICB2YXIgYWxidW1Db250ID0gJCgnLnBob3RvLW1kX19hbGJ1bS1jb250Jyk7XG4gICAgdmFyIGFsYnVtUGhvdG9zID0gJCgnLnBob3RvLW1kX19pbWctcHJldicpO1xuICAgIGFsYnVtLmJpbmQoJ2NsaWNrJywgc2hvd0FsYnVtKTtcbiAgICBhbGJ1bVBob3Rvcy5iaW5kKCdjbGljaycsIHNob3dBbGJ1bUltZyk7XG4gICAgYWxidW0uZmlyc3QoKS5hZGRDbGFzcygnYWN0Jyk7XG5cbiAgICBmdW5jdGlvbiBzaG93QWxidW0oKSB7XG4gICAgICAgIGFsYnVtQ29udC5oaWRlKCk7XG4gICAgICAgIGFsYnVtLnJlbW92ZUNsYXNzKCdhY3QnKTtcbiAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0Jyk7XG4gICAgICAgICQoJyNjb250LScgKyAoJCh0aGlzKS5hdHRyKCdpZCcpKSkuc2hvdygpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvd0FsYnVtSW1nKCkge1xuICAgICAgICAkLmZhbmN5Ym94KGFsYnVtUGhvdG9zLCB7XG4gICAgICAgICAgICB0eXBlOiAnaW1hZ2UnLFxuICAgICAgICAgICAgaW5kZXggOiBhbGJ1bVBob3Rvcy5pbmRleCh0aGlzKSxcbiAgICAgICAgICAgIGhlbHBlcnM6IHtcbiAgICAgICAgICAgICAgICBvdmVybGF5OiB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2tlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5NYXN0ZXJCbG9ja1Bob3RvLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFsYnVtID0gJCgnLnBob3RvLW1kX19hbGJ1bS1jb3ZlcicpO1xuICAgIHZhciBhbGJ1bVBob3RvcyA9ICQoJy5waG90by1tZF9faW1nLXByZXYnKTtcblxuICAgIGFsYnVtLnVuYmluZCgnY2xpY2snKTtcbiAgICBhbGJ1bVBob3Rvcy51bmJpbmQoJ2NsaWNrJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hc3RlckJsb2NrUmV2aWV3O1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcIm1hc3Rlci1ibG9jay1yZXZpZXdcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFzdGVyQmxvY2tSZXZpZXcoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5NYXN0ZXJCbG9ja1Jldmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLiRjb250ZXh0LmF0dHJpYnV0ZXNbJ21hc3Rlci1wYWdlJ10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgZGF0YS52a0xpa2VzLmRhdGEgPSBKU09OLnBhcnNlKGRhdGEudmtMaWtlcy5kYXRhKTtcbiAgICAgICAgICAgICAgICBkYXRhLnZrTGlrZXMuZGF0YS5sZW5ndGggPSA5OyAvL9GD0LrQvtGA0LDRh9C40LLQsNC10Lwg0LzQsNGB0YHQuNCyINC00L4gOSDRjdC70LXQvNC10L3RgtC+0LJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEuY29tbWVudHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRzOiBkYXRhLmNvbW1lbnRzLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgdmtMaWtlczogZGF0YS52a0xpa2VzLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBkYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGltZ0lEOiBkYXRhLmltZ0lEXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5NYXN0ZXJCbG9ja1Jldmlldy5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5NYXN0ZXJCbG9ja1Jldmlldy5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hc3RlckJsb2NrU2FsZTtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJtYXN0ZXItYmxvY2stc2FsZVwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYXN0ZXJCbG9ja1NhbGUoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5NYXN0ZXJCbG9ja1NhbGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy4kY29udGV4dC5hdHRyaWJ1dGVzWydtYXN0ZXItcGFnZSddKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiRjb250ZXh0LmdldFN0b3JlRGF0YSgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZGF0YS5zYWxlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2FsZXM6IGRhdGEuc2FsZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cbk1hc3RlckJsb2NrU2FsZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2FsZSA9ICQoJy5zYWxlJyk7XG4gICAgc2FsZS5maW5kKCdhJykuYmluZCgnY2xpY2snLCBzaG93U2FsZVBvcHVwKTtcblxuICAgIGZ1bmN0aW9uIHNob3dTYWxlUG9wdXAoKSB7XG4gICAgICAgIHZhciB0bXAgPSAkKHRoaXMpLnBhcmVudCgpLmNsb25lKCk7XG4gICAgICAgIHRtcC5hZGRDbGFzcygncG9wdXAnKTtcbiAgICAgICAgJC5mYW5jeWJveC5vcGVuKHRtcCwge1xuICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgIGhlbHBlcnM6IHtcbiAgICAgICAgICAgICAgICBvdmVybGF5OiB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2tlZDogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5NYXN0ZXJCbG9ja1NhbGUucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBNYXN0ZXJCbG9ja1NlcnZpY2U7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwibWFzdGVyLWJsb2NrLXNlcnZpY2VcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFzdGVyQmxvY2tTZXJ2aWNlKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuTWFzdGVyQmxvY2tTZXJ2aWNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuJGNvbnRleHQuYXR0cmlidXRlc1snbWFzdGVyLXBhZ2UnXSkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGRhdGEuc2VydmljZXMpO1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZHNWYWxTdW0gPSAwO1xuICAgICAgICAgICAgICAgIHZhciBmaWVsZHNWYWxIYWxmU3VtID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgcGFydDEgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgcGFydDIgPSBbXTtcblxuICAgICAgICAgICAgICAgIGRhdGEuc2VydmljZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmllbGRzVmFsTGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkc1ZhbExlbmd0aCA9IGl0ZW0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGRzVmFsTGVuZ3RoIDwgMjApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkc1ZhbExlbmd0aCA9IDIwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkc1ZhbFN1bSArPSBmaWVsZHNWYWxMZW5ndGg7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZGF0YS5zZXJ2aWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZHNWYWxMZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgZmllbGRzVmFsTGVuZ3RoID0gaXRlbS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZHNWYWxIYWxmU3VtIDwgZmllbGRzVmFsU3VtIC8gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFydDEucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQyLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmllbGRzVmFsSGFsZlN1bSArPSBmaWVsZHNWYWxMZW5ndGg7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZGF0YS5zZXJ2aWNlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGRhdGEuc2VydmljZXMucGFydDEgPSBwYXJ0MTtcbiAgICAgICAgICAgICAgICBkYXRhLnNlcnZpY2VzLnBhcnQyID0gcGFydDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZXM6IGRhdGEuc2VydmljZXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cbk1hc3RlckJsb2NrU2VydmljZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5NYXN0ZXJCbG9ja1NlcnZpY2UucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBNYXN0ZXJCbG9ja1ZpZGVvO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcIm1hc3Rlci1ibG9jay12aWRlb1wiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYXN0ZXJCbG9ja1ZpZGVvKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuTWFzdGVyQmxvY2tWaWRlby5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLiRjb250ZXh0LmF0dHJpYnV0ZXNbJ21hc3Rlci1wYWdlJ10pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhLnZpZGVvcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9zOiBkYXRhLnZpZGVvc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuTWFzdGVyQmxvY2tWaWRlby5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmlkZW8gPSAkKCcudmlkZW8tbWRfX3ZpZGVvLWNvdmVyJyk7XG4gICAgdmlkZW8uYmluZCgnY2xpY2snLCBzaG93VmlkZW8pO1xuXG4gICAgZnVuY3Rpb24gc2hvd1ZpZGVvKCkge1xuICAgICAgICAkLmZhbmN5Ym94Lm9wZW4odGhpcywge1xuICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgIHR5cGU6ICdpZnJhbWUnLFxuICAgICAgICAgICAgaGVscGVyczoge1xuICAgICAgICAgICAgICAgIG92ZXJsYXk6IHtcbiAgICAgICAgICAgICAgICAgICAgbG9ja2VkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cbk1hc3RlckJsb2NrVmlkZW8ucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKCcudmlkZW8tbWRfX3ZpZGVvLWNvdmVyJykudW5iaW5kKCdjbGljaycpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBNYXN0ZXJCbG9ja1dvcms7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwibWFzdGVyLWJsb2NrLXdvcmtcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFzdGVyQmxvY2tXb3JrKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuTWFzdGVyQmxvY2tXb3JrLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuJGNvbnRleHQuYXR0cmlidXRlc1snbWFzdGVyLXBhZ2UnXSkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVtcEFyciA9IG5ldyBBcnJheSg3KTtcbiAgICAgICAgICAgICAgICBkYXRhLnNjaGVkdWxlLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5vcGVuID0gaXRlbS5vcGVuLnN1YnN0cigwLCA1KTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5jbG9zZSA9IGl0ZW0uY2xvc2Uuc3Vic3RyKDAsIDUpO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wQXJyW2l0ZW0uZGF5IC0gMV0gPSBpdGVtO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRhdGEuc2NoZWR1bGUgPSB0ZW1wQXJyO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlOiBkYXRhLnNjaGVkdWxlLFxuICAgICAgICAgICAgICAgICAgICBkaXN0cmljdDogZGF0YS5kaXN0cmljdHMsXG4gICAgICAgICAgICAgICAgICAgIHdvcmtDb25kaXRpb246IGRhdGEud29ya0NvbmRpdGlvblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuTWFzdGVyQmxvY2tXb3JrLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cbk1hc3RlckJsb2NrV29yay5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBNYXN0ZXJGaWx0ZXI7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwibWFzdGVyLWZpbHRlclwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYXN0ZXJGaWx0ZXIoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5NYXN0ZXJGaWx0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHBhdGgsIGN1cnJlbnRUYWc7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHBhdGggPSAnLycgKyBkYXRhLnJ1YnJpa2EucGFyZW50LnVuaXF1ZSArICcvJyArIGRhdGEucnVicmlrYS51bmlxdWU7XG5cbiAgICAgICAgICAgIHJldHVybiBzZWxmLiRjb250ZXh0LmdldFN0b3JlRGF0YSgnbWFzdGVyL01hc3Rlckxpc3QnKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChtYXN0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKG1hc3RlcikubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbk5hbWU6IFwibWFzdGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwi0JzQsNGB0YLQtdGA0LBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY286IFwibWFuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi4kY29udGV4dC5nZXRTdG9yZURhdGEoJ21hc3Rlci9NYXN0ZXJWaWRlbycpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmlkZW8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAoT2JqZWN0LmtleXMobWFzdGVyKS5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHBhdGggKyAnL3ZpZGVvJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25OYW1lOiBcInZpZGVvXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLQktC40LTQtdC+INCc0LDRgdGC0LXRgNC+0LJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljbzogXCJ2aWRlb1wiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiBzZWxmLiRjb250ZXh0LmdldFN0b3JlRGF0YSgnbWFzdGVyL01hc3RlclZpZGVvJylcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChzYWxlcykge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIChPYmplY3Qua2V5cyhtYXN0ZXIpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcGF0aCArICcvc2FsZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uTmFtZTogXCJzYWxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCLQodC60LjQtNC60Lgg0JzQsNGB0YLQtdGA0L7QslwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvOiBcImdpZnRcIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gc2VsZi4kY29udGV4dC5nZXRTdG9yZURhdGEoJ21hc3Rlci9NYXN0ZXJWaWRlbycpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoc2VjcmV0cykge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIChPYmplY3Qua2V5cyhtYXN0ZXIpLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogcGF0aCArICcvc292ZXR5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25OYW1lOiBcInNvdmV0eVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwi0KHQtdC60YDQtdGC0Ysg0JzQsNGB0YLQtdGA0L7QslwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvOiBcInF3ZXN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHNlbGYuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCdtYXN0ZXIvTWFzdGVyVmlkZW8nKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNvbXBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9pZiAoT2JqZWN0LmtleXMobWFzdGVyKS5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHBhdGggKyAnL2NvbXBhbnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbk5hbWU6IFwiY29tcGFueVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwi0JrQsNGC0LDQu9C+0LMg0YTQuNGA0LxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljbzogXCJjYXNlXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX2RlY29yZU9wZW5TZWN0aW9uKHJlc3VsdCwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7ZmlsdGVyU2VjdGlvbjogcmVzdWx0fTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbn07XG4vKipcbiAqINCU0LXQutCw0YDQuNGA0L7QstCw0L3QuNC1INC+0YLQutGA0YvRgtC+0Lkg0YHQtdC60YbQuNC4ICjQtNC+0LHQsNCy0LvQtdC90LjQtSDRgtC10LPQvtCyLCDQvtGA0YLQuNGA0L7QstC60LgpXG4gKiBAcGFyYW0gcmVzdWx0INC80LDRgdGB0LjQsiDQtNC70Y8g0LTQtdC60L7RgNC40YDQvtCy0LDQvdC40Y9cbiAqIEBwYXJhbSBydWJyaWthINGA0YPQsdGA0LjQutCwINC40Lcg0YHRgtC+0YDQsFxuICogQHByaXZhdGVcbiAqL1xuTWFzdGVyRmlsdGVyLnByb3RvdHlwZS5fZGVjb3JlT3BlblNlY3Rpb24gPSBmdW5jdGlvbiAocmVzdWx0LCBkYXRhKSB7XG4gICAgdmFyIGN1cnJlbnRTZWN0aW9uID0gZGF0YS5zZWN0aW9uO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHJlc3VsdFtpXS5zZWN0aW9uTmFtZSA9PSBjdXJyZW50U2VjdGlvbikge1xuXG4gICAgICAgICAgICB2YXIgdGFncyA9IHRoaXMuX2dldFRhZ3MoZGF0YSk7XG4gICAgICAgICAgICByZXN1bHRbaV0ub3BlblNlY3Rpb24gPSB7dGFnc0dyb3VwOiB0YWdzfTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50U2VjdGlvbiA9PSAnbWFzdGVycycpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbaV0ub3BlblNlY3Rpb24uc29ydEJ5ID0ge1xuICAgICAgICAgICAgICAgICAgICBcInVybFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBcIm1ldGhvZFwiOiBcImdldFwiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICog0J/QtdGA0LXRgdGC0YDQvtC50LrQsCDRgtC10LPQvtCyXG4gKiBAcGFyYW0gdGFnc0pzb24g0YLRjdCz0Lgg0LjQtyBqc29uXG4gKiBAcGFyYW0gcGF0aCDQsNCx0YHQvtC70Y7RgtC90YvQuSDRgNC+0LTQuNGC0LXQu9GM0YHQutC40Lkg0L/Rg9GC0Ywg0LTQu9GPINGB0YHRi9C70L7QuiDQsiDRgtC10LPQsNGFXG4gKiBAcGFyYW0gY3VycmVudFRhZyDRgtC10LrRg9GJ0LjQuSDRgtC10LMg0LTQu9GPINCy0YvQtNC10LvQtdC90LjRj1xuICogQHJldHVybnMge0FycmF5fSDRgtC10LPQuCDRgNCw0LfQsdC40YLRi9C1INC/0L4g0LPRgNGD0L/Qv9Cw0LxcbiAqIEBwcml2YXRlXG4gKi9cbk1hc3RlckZpbHRlci5wcm90b3R5cGUuX2dldFRhZ3MgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBwYXRoID0gJy8nICsgZGF0YS5ydWJyaWthLnBhcmVudC51bmlxdWUgKyAnLycgKyBkYXRhLnJ1YnJpa2EudW5pcXVlO1xuICAgIHZhciB0YWdzSnNvbiA9IGRhdGEucnVicmlrYS50YWdzO1xuICAgIHZhciBjdXJyZW50VGFnID0gZGF0YS50YWcudW5pcXVlIDtcbiAgICB2YXIgY3VycmVudFNlY3Rpb24gPSBkYXRhLnNlY3Rpb247XG4gICAgdmFyIHRhZ3MgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKHRhZ3NKc29uKVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgdmFyIHRhZyA9IHRhZ3NKc29uW25dO1xuICAgICAgICAgICAgdGFnLmlzQWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmICghdGFnc1t0YWcuZ3JvdXBdKVxuICAgICAgICAgICAgICAgIHRhZ3NbdGFnLmdyb3VwXSA9IFtdO1xuXG4gICAgICAgICAgICBpZiAodGFnLnVuaXF1ZSA9PSBjdXJyZW50VGFnKSB7XG4gICAgICAgICAgICAgICAgdGFnLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0YWcudXJsQmFjayA9IHBhdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3VycmVudFNlY3Rpb24gPT0gJ21hc3RlcicpIHtcbiAgICAgICAgICAgICAgICB0YWcucGF0aCA9IHBhdGggKyAnLycgKyB0YWcudW5pcXVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YWcucGF0aCA9IHBhdGggKyAnLycgKyB0YWcudW5pcXVlICsgJy8nICsgY3VycmVudFNlY3Rpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRhZ3NbdGFnLmdyb3VwXS5wdXNoKHRhZyk7XG4gICAgICAgIH0pO1xuXG4gICAgLy/RgdC+0YDRgtC40YDRg9C10LxcbiAgICB2YXIgdGFnc0dyb3VwID0gW107XG4gICAgT2JqZWN0LmtleXModGFncykuc29ydCgpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0YWdzR3JvdXAucHVzaCh7XG4gICAgICAgICAgICB0aXRsZToga2V5LFxuICAgICAgICAgICAgdGFnczogdGFnc1trZXldXG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0YWdzR3JvdXA7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cbk1hc3RlckZpbHRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjbGljazoge1xuICAgICAgICAgICAgJy5qcy1maWx0ZXItdG9nZ2xlLWJ0bi5hY3RpdmUnOiB0aGlzLl9jbGlja1NlY3Rpb25cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbk1hc3RlckZpbHRlci5wcm90b3R5cGUuX2NsaWNrU2VjdGlvbiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgZG9tID0gb2JqLnRhcmdldDtcbiAgICB2YXIgZWw7XG4gICAgaWYgKCEoJChkb20pLmhhc0NsYXNzKCdqcy1maWx0ZXItdG9nZ2xlLWJ0bicpICYmICQoZG9tKS5oYXNDbGFzcygnYWN0aXZlJykpKVxuICAgICAgICBlbCA9ICQoZG9tKS5wYXJlbnRzKCcuanMtZmlsdGVyLXRvZ2dsZS1idG4nKTtcbiAgICBlbHNlXG4gICAgICAgIGVsID0gJChkb20pO1xuICAgIGVsLnBhcmVudCgpLmZpbmQoJy5qcy1maWx0ZXItdG9nZ2xlLXNlY3Rpb24nKS5zbGlkZVRvZ2dsZSgpO1xuICAgIGVsLmZpbmQoJy5maWx0ZXItc2VjdGlvbl9fYXJyb3ctaWNvbicpLnRvZ2dsZUNsYXNzKCdkb3duJyk7XG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cbk1hc3RlckZpbHRlci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hc3Rlckxpc3Q7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwibWFzdGVyLWxpc3RcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFzdGVyTGlzdCgkc2VydmljZUxvY2F0b3IpIHtcbi8vIHdlIGNhbiB1c2Ugd2luZG93IGZyb20gdGhlIGxvY2F0b3IgaW4gYSBicm93c2VyIG9ubHlcbiAgICBpZiAodGhpcy4kY29udGV4dC5pc0Jyb3dzZXIpIHtcbiAgICAgICAgdGhpcy5fd2luZG93ID0gJHNlcnZpY2VMb2NhdG9yLnJlc29sdmUoJ3dpbmRvdycpO1xuICAgICAgICB0aGlzLl9oYW5kbGVTY3JvbGwgPSB0aGlzLl9oYW5kbGVTY3JvbGwuYmluZCh0aGlzKTtcbiAgICB9XG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuTWFzdGVyTGlzdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLiRjb250ZXh0LmdldFN0b3JlRGF0YSgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5NYXN0ZXJMaXN0LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9hbGxNaW5pY2FyZFNlcnZpY2VzQ3V0KTtcbiAgICB0aGlzLl93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5faGFuZGxlU2Nyb2xsKTtcbn07XG5cbk1hc3Rlckxpc3QucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl93aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5fYWxsTWluaWNhcmRTZXJ2aWNlc0N1dCk7XG4gICAgdGhpcy5fd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuX2hhbmRsZVNjcm9sbCk7XG4gICAgdGhpcy4kY29udGV4dC5jb2xsZWN0R2FyYmFnZSgpO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIHdpbmRvdyBzY3JvbGwgZm9yIGluZmluaXRlIHNjcm9sbCBsb2FkaW5nLlxuICogQHByaXZhdGVcbiAqL1xuTWFzdGVyTGlzdC5wcm90b3R5cGUuX2hhbmRsZVNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHdpbmRvd0hlaWdodCA9IHRoaXMuX3dpbmRvdy5pbm5lckhlaWdodCxcbiAgICAgICAgc2Nyb2xsVG9wID0gdGhpcy5fd2luZG93LnBhZ2VZT2Zmc2V0LFxuICAgICAgICBkb2MgPSB0aGlzLl93aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gc2Nyb2xsIHRvIHRoZSBib3R0b20gb2YgdGhlIHBhZ2UgbG9hZCBtb3JlIGl0ZW1zXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICF0aGlzLl9pc0J1c3kgJiZcbiAgICAgICAgICAgIChzY3JvbGxUb3AgPj0gKGRvYy5zY3JvbGxIZWlnaHQgLSB3aW5kb3dIZWlnaHQgKiAyKSB8fFxuICAgICAgICAgICAgZG9jLnNjcm9sbEhlaWdodCA8PSB3aW5kb3dIZWlnaHQpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5faXNCdXN5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNGaW5pc2gpIHtcbiAgICAgICAgICAgICAgICAkKCcjd2FpdC1zcGlubmVyJykuc2hvdygpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRNb3JlSXRlbXMoKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZmluaXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmluaXNoID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5faXNGaW5pc2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5faXNCdXN5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjd2FpdC1zcGlubmVyJykuZmFkZU91dCg4MDApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH1cbn07XG5NYXN0ZXJMaXN0LnByb3RvdHlwZS5faXNCdXN5ID0gZmFsc2U7XG5NYXN0ZXJMaXN0LnByb3RvdHlwZS5faXNGaW5pc2ggPSBmYWxzZTtcbi8qKlxuICogTG9hZHMgbW9yZSBpdGVtcyB0byBmZWVkLlxuICogQHByaXZhdGVcbiAqL1xuTWFzdGVyTGlzdC5wcm90b3R5cGUuX2xvYWRNb3JlSXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuc2VuZEFjdGlvbignZ2V0TmV4dFBhZ2UnKTtcbn07XG5cbk1hc3Rlckxpc3QucHJvdG90eXBlLl9hbGxNaW5pY2FyZFNlcnZpY2VzQ3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICQoJy5tYXN0ZXItbWluaWNhcmQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG1pbmljYXJkU2VydmljZXMgPSAkKHRoaXMpLmZpbmQoJy5tYXN0ZXItbWluaWNhcmRfX3NlcnZpY2VzJyk7XG4gICAgICAgIHZhciBzZXJ2aWNlc0xpc3QgPSBtaW5pY2FyZFNlcnZpY2VzLmZpbmQoJ2xpJyk7XG4gICAgICAgIHZhciBtYXhIZWlnaHQgPVxuICAgICAgICAgICAgJCh0aGlzKS5oZWlnaHQoKSAtICgkKHRoaXMpLmZpbmQoJy5tYXN0ZXItbWluaWNhcmRfX25hbWUnKS5oZWlnaHQoKSArICQodGhpcykuZmluZCgnLm1hc3Rlci1taW5pY2FyZF9fc3BlYycpLmhlaWdodCgpKTtcbiAgICAgICAgdmFyIHNlcnZpY2VzQ291bnQgPSBtaW5pY2FyZFNlcnZpY2VzLmZpbmQoJ2xpJykubGVuZ3RoO1xuXG4gICAgICAgIGlmIChtaW5pY2FyZFNlcnZpY2VzLmhlaWdodCgpID4gbWF4SGVpZ2h0KSB7XG4gICAgICAgICAgICB3aGlsZSAobWluaWNhcmRTZXJ2aWNlcy5oZWlnaHQoKSA+IG1heEhlaWdodCAmJiBzZXJ2aWNlc0NvdW50ID49IDApIHtcbiAgICAgICAgICAgICAgICAkKHNlcnZpY2VzTGlzdFtzZXJ2aWNlc0NvdW50IC0gMV0pLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlc0NvdW50LS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoKG1pbmljYXJkU2VydmljZXMuaGVpZ2h0KCkgKyAxMCkgPCBtYXhIZWlnaHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChtaW5pY2FyZFNlcnZpY2VzLmhlaWdodCgpIDwgbWF4SGVpZ2h0ICYmIGkgPCBzZXJ2aWNlc0NvdW50ICsgMSkge1xuICAgICAgICAgICAgICAgICQoc2VydmljZXNMaXN0W2ldKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1pbmljYXJkU2VydmljZXMuaGVpZ2h0KCkgPiBtYXhIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAkKHNlcnZpY2VzTGlzdFtpIC0gMV0pLmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hc3Rlck1pbmljYXJkO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcIm1hc3Rlci1taW5pY2FyZFwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNYXN0ZXJNaW5pY2FyZCgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cbk1hc3Rlck1pbmljYXJkLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiB0aGlzLiRjb250ZXh0LmdldFN0b3JlRGF0YSgpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBpZiAoIWRhdGEpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIG1hc3RlcklEID0gc2VsZi4kY29udGV4dC5hdHRyaWJ1dGVzWydtYXN0ZXItaWQnXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhW2ldLmlkID09IG1hc3RlcklEKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG1hc3Rlcikge1xuICAgICAgICAgICAgaWYgKCFtYXN0ZXIpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKG1hc3Rlci5wYWdlICYmIChcbiAgICAgICAgICAgICAgICAgICAgKG1hc3Rlci5wYWdlLnNhbGVzICYmIG1hc3Rlci5zYWxlc1swXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKG1hc3Rlci5wYWdlLmFsYnVtcyAmJiBtYXN0ZXIuYWxidW1zWzBdKSB8fFxuICAgICAgICAgICAgICAgICAgICAobWFzdGVyLnBhZ2UudmlkZW9zICYmIG1hc3Rlci52aWRlb3NbMF0pIHx8XG4gICAgICAgICAgICAgICAgICAgIChtYXN0ZXIucGFnZS5jb21tZW50cyAmJiBtYXN0ZXIuY29tbWVudHNbMF0pXG4gICAgICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICAgIG1hc3Rlci5pc1dpZGdldCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWFzdGVyLnBhZ2UgJiYgbWFzdGVyLnBhZ2UuYWxidW1zICYmIG1hc3Rlci5hbGJ1bXMpIHtcbiAgICAgICAgICAgICAgICBtYXN0ZXIuYWxidW1zQ291bnQgPSBtYXN0ZXIuYWxidW1zLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBtYXN0ZXIuYWxidW1zVGl0bGUgPSBbXTtcbiAgICAgICAgICAgICAgICBtYXN0ZXIuYWxidW1zLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hc3Rlci5hbGJ1bXNUaXRsZS5wdXNoKGVsLm5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1hc3Rlci5hbGJ1bXNUaXRsZSA9IG1hc3Rlci5hbGJ1bXNUaXRsZS5qb2luKCcsICcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hc3Rlci5wYWdlICYmIG1hc3Rlci5wYWdlLmNvbW1lbnRzICYmIG1hc3Rlci5jb21tZW50cykge1xuICAgICAgICAgICAgICAgIG1hc3Rlci5jb21tZW50c0NvdW50ID0gbWFzdGVyLmNvbW1lbnRzLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzZXJ2aWNlc05vcm1hbGx5ID0gW107XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhtYXN0ZXIuc2VydmljZXMpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGksIGFycikge1xuICAgICAgICAgICAgICAgIHZhciBzZXJ2aWNlID0gbWFzdGVyLnNlcnZpY2VzW2l0ZW1dO1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgPSBzZXJ2aWNlLnJlcGxhY2UoL1xcdTAwQTAvZywgXCIgXCIpO1xuICAgICAgICAgICAgICAgIHNlcnZpY2VzTm9ybWFsbHkucHVzaChzZXJ2aWNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWFzdGVyLnNlcnZpY2VzID0gc2VydmljZXNOb3JtYWxseTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coT2JqZWN0LmtleXMobWFzdGVyLnNlcnZpY2VzKSk7XG4gICAgICAgICAgICByZXR1cm4gbWFzdGVyO1xuICAgICAgICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuTWFzdGVyTWluaWNhcmQucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCgnLm1hc3Rlci1jb250ZW50LXdpZGdldCBsaScpLmJpbmQoJ21vdXNlZW50ZXInLCBzaG93V2lkZ2V0VGFiKTtcblxuICAgICQoJy5tYXN0ZXItY29udGVudC13aWRnZXQnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCh0aGlzKS5maW5kKCcuYWN0JykuZmlyc3QoKS5hZGRDbGFzcygnc2hvdycpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIHNob3dXaWRnZXRUYWIoKSB7XG4gICAgICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKCdhY3QnKSkge1xuICAgICAgICAgICAgJCh0aGlzKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKCdzaG93Jyk7XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdzaG93Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9taW5pY2FyZFNlcnZpY2VzQ3V0KCk7XG4gICAgcmV0dXJuIHt9O1xufTtcbk1hc3Rlck1pbmljYXJkLnByb3RvdHlwZS5fbWluaWNhcmRTZXJ2aWNlc0N1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWluaWNhcmQgPSAkKCcjJyArIHRoaXMuJGNvbnRleHQuZWxlbWVudC5pZCk7XG4gICAgdmFyIG1pbmljYXJkU2VydmljZXMgPSBtaW5pY2FyZC5maW5kKCcubWFzdGVyLW1pbmljYXJkX19zZXJ2aWNlcycpO1xuICAgIHZhciBtYXhIZWlnaHQgPVxuICAgICAgICBtaW5pY2FyZC5maW5kKCcubWFzdGVyLW1pbmljYXJkJykuaGVpZ2h0KCkgLSAobWluaWNhcmQuZmluZCgnLm1hc3Rlci1taW5pY2FyZF9fbmFtZScpLmhlaWdodCgpICsgbWluaWNhcmQuZmluZCgnLm1hc3Rlci1taW5pY2FyZF9fc3BlYycpLmhlaWdodCgpKTtcbiAgICB2YXIgc2VydmljZXNDb3VudCA9IG1pbmljYXJkU2VydmljZXMuZmluZCgnbGknKS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobWluaWNhcmRTZXJ2aWNlcy5oZWlnaHQoKSA+IG1heEhlaWdodCAmJiBzZXJ2aWNlc0NvdW50ICE9IDApIHtcbiAgICAgICAgJChtaW5pY2FyZFNlcnZpY2VzLmZpbmQoJ2xpJylbc2VydmljZXNDb3VudF0pLmhpZGUoKTtcbiAgICAgICAgc2VydmljZXNDb3VudC0tO1xuICAgIH1cbn07XG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cbk1hc3Rlck1pbmljYXJkLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCgnLm1hc3Rlci1jb250ZW50LXdpZGdldCBsaScpLnVuYmluZCgnbW91c2VlbnRlcicpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBNYXN0ZXJQaG9uZUJ0bjtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJtYXN0ZXItcGhvbmUtYnRuXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1hc3RlclBob25lQnRuKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuTWFzdGVyUGhvbmVCdG4ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5hdHRyaWJ1dGVzO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5NYXN0ZXJQaG9uZUJ0bi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjbGljazoge1xuICAgICAgICAgICAgJy5qcy1zaG93LXBob25lJzogdGhpcy5fY2xpY2tQaG9uZUhhbmRsZXIsXG4gICAgICAgICAgICAnLmpzLWNsb3NlLXRpcCc6IHRoaXMuX2NsaWNrQ2xvc2VUaXBIYW5kbGVyXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5NYXN0ZXJQaG9uZUJ0bi5wcm90b3R5cGUuX2NsaWNrUGhvbmVIYW5kbGVyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBlbCA9IG9iai50YXJnZXQ7XG4gICAgJChlbCkuaGlkZSgpO1xuICAgICQoZWwpLnNpYmxpbmdzKCcuanMtc2hvdy1waG9uZS1kZXRhaWxzJykuc2hvdygpO1xuICAgICQoZWwpLmNsb3Nlc3QoJy5tYXN0ZXItbWluaWNhcmQnKS5maW5kKCcuanMtbWFzdGVyLXBob25lLXRpcCcpLmZhZGVJbig0MDApLmRlbGF5KDQwMDApLmZhZGVPdXQoNTAwKTtcbn07XG5NYXN0ZXJQaG9uZUJ0bi5wcm90b3R5cGUuX2NsaWNrQ2xvc2VUaXBIYW5kbGVyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBlbCA9IG9iai50YXJnZXQ7XG4gICAgJChlbCkuY2xvc2VzdCgnLmpzLW1hc3Rlci1waG9uZS10aXAnKS5zdG9wKCkuZmFkZU91dCg1MDApO1xufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5NYXN0ZXJQaG9uZUJ0bi5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hc3RlclBhZ2U7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwibWFzdGVyLXBhZ2VcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFzdGVyUGFnZSgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cbk1hc3RlclBhZ2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coZGF0YS5jb21wYW55KTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSk7XG59O1xuXG5NYXN0ZXJQYWdlLnByb3RvdHlwZS5fdGEgPSBudWxsO1xuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5NYXN0ZXJQYWdlLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtZW51ID0gJCgnLm1lbnUtbXAnKTtcbiAgICB2YXIgbWVudU9mZnNldCA9IG1lbnUub2Zmc2V0KCk7XG4gICAgdmFyIHRhID0gJCgndGV4dGFyZWEnKTtcblxuICAgICQod2luZG93KS5iaW5kKCdzY3JvbGwnLCBmaXhlZFNlY3Rpb25NZW51KTtcbiAgICAkKHdpbmRvdykuYmluZCgnc2Nyb2xsJywgbWVudUhpZ2hsaWdodCk7XG4gICAgJCgnLm1lbnUtbXAgYScpLmJpbmQoJ2NsaWNrJywgc2Nyb2xsVG9TZWN0aW9uKTtcbiAgICAkKCcuY29udGFjdHMtbXBfX3Nob3ctY29udGFjdCcpLmJpbmQoJ2NsaWNrJywgc2hvd0NvbnRhY3QpO1xuICAgICQoJy5qcy1zaG93LWNhbGxiYWNrLXBvcHVwJykuYmluZCgnY2xpY2snLCBzaG93Q2FsbGJhY2tQb3B1cCk7XG4gICAgYXV0b3NpemUodGEpO1xuXG4gICAgLy/Qv9C+0LrQsNC30LDRgtGMINC60L7QvdGC0LDQutGC0YtcbiAgICBmdW5jdGlvbiBzaG93Q29udGFjdCgpIHtcbiAgICAgICAgJCh0aGlzKS5jbG9zZXN0KCcuY29udGFjdHMtbXBfX2NhcCcpLmhpZGUoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8v0L/Qu9Cw0LLQsNGO0YnQtdCz0L4g0LzQtdC90Y5cbiAgICBmdW5jdGlvbiBmaXhlZFNlY3Rpb25NZW51KCkge1xuICAgICAgICBpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgMzAgPiBtZW51T2Zmc2V0LnRvcCkge1xuICAgICAgICAgICAgbWVudS5hZGRDbGFzcygnZml4ZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lbnUucmVtb3ZlQ2xhc3MoJ2ZpeGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL9GB0LrRgNC+0LvQuyDQtNC+INGB0LXQutGG0LjQuFxuICAgIGZ1bmN0aW9uIG1lbnVIaWdobGlnaHQoKSB7XG4gICAgICAgICQoJy5tYXN0ZXItcGFnZV9fc2VjdGlvbi1jb250JykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgNTAgPiAkKHRoaXMpLm9mZnNldCgpLnRvcCAmJiAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyAzMCA8ICQodGhpcykub2Zmc2V0KCkudG9wICsgJCh0aGlzKS5pbm5lckhlaWdodCgpKSB7XG4gICAgICAgICAgICAgICAgbWVudS5maW5kKCcuYWN0JykucmVtb3ZlQ2xhc3MoJ2FjdCcpO1xuICAgICAgICAgICAgICAgIG1lbnUuZmluZCgnW2hyZWY9IycgKyAkKHRoaXMpLmNoaWxkcmVuKCkuYXR0cignaWQnKSArICddJykuYWRkQ2xhc3MoJ2FjdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvL9C90LDQstC40LPQsNGG0LjQuCDQstC90YPRgtGA0Lgg0YHRgtGA0LDQvdC40YbRiyDQvNCw0YHRgtC10YDQsFxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvU2VjdGlvbigpIHtcbiAgICAgICAgJCh3aW5kb3cpLnVuYmluZCgnc2Nyb2xsJywgbWVudUhpZ2hsaWdodCk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCh3aW5kb3cpLmJpbmQoJ3Njcm9sbCcsIG1lbnVIaWdobGlnaHQpO1xuICAgICAgICB9LCAxMDUwKTtcbiAgICAgICAgbWVudS5maW5kKCcuYWN0JykucmVtb3ZlQ2xhc3MoJ2FjdCcpO1xuICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3QnKTtcbiAgICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICAgICAgc2Nyb2xsVG9wOiAkKCQodGhpcykuYXR0cignaHJlZicpKS5vZmZzZXQoKS50b3AgLSA1MFxuICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8v0L/QvtC60LDQt9Cw0YLRjCBwb3B1cCAtINC30LDQutCw0LfQsNGC0Ywg0LfQstC+0L3QvtC6XG4gICAgZnVuY3Rpb24gc2hvd0NhbGxiYWNrUG9wdXAoKSB7XG4gICAgICAgIHZhciBmb3JtID0gJCgnLmNhbGxiYWNrLXBvcHVwJyk7XG4gICAgICAgICQuZmFuY3lib3gub3Blbihmb3JtLCB7XG4gICAgICAgICAgICBwYWRkaW5nOiAwXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5NYXN0ZXJQYWdlLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigndGV4dGFyZWEnKTtcbiAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cbiAgICAkKHdpbmRvdykudW5iaW5kKCdzY3JvbGwnKTtcbiAgICAkKCcubWVudS1tcCcpLmZpbmQoJ2EnKS51bmJpbmQoJ2NsaWNrJyk7XG4gICAgJCgnLmNvbnRhY3RzLW1wX19zaG93LWNvbnRhY3QnKS51bmJpbmQoJ2NsaWNrJyk7XG4gICAgJCgnLmpzLXNob3ctY2FsbGJhY2stcG9wdXAnKS51bmJpbmQoJ2NsaWNrJyk7XG4gICAgZXZ0LmluaXRFdmVudCgnYXV0b3NpemU6ZGVzdHJveScsIHRydWUsIGZhbHNlKTtcbiAgICB0YS5kaXNwYXRjaEV2ZW50KGV2dCk7XG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBNYXN0ZXJSZWNvbW1lbmRlZDtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJtYXN0ZXItcmVjb21tZW5kZWRcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFzdGVyUmVjb21tZW5kZWQoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5NYXN0ZXJSZWNvbW1lbmRlZC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIC8vcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJpcy1yZWNvbW1lbmRlZC1tYXN0ZXJzXCI6IHRydWUsXG4gICAgICAgIFwidXJsLWFycm93LWxlZnRcIjogXCI0MDRcIixcbiAgICAgICAgXCJ1cmwtYXJyb3ctcmlnaHRcIjogXCI0MDRcIixcbiAgICAgICAgXCJyZWNvbW1lbmRlZC1tYXN0ZXJcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibWFzdGVyLXVybFwiOiBcIjQwNFwiLFxuICAgICAgICAgICAgICAgIFwic3JjXCI6IFwiL2ltZy9hc3NldHMvbWFzdGVyX3JlY29tbWVuZGVkLzM3MjAuanBnXCIsXG4gICAgICAgICAgICAgICAgXCJhbHRcIjogXCLQmtC90Y/Qt9C10LIg0JAu0K4uXCIsXG4gICAgICAgICAgICAgICAgXCJtYXN0ZXItbmFtZVwiOiBcItCa0L3Rj9C30LXQsiDQkC7Qri5cIixcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGF0aW9uLW51bWJlclwiOiBcIjI3INGH0LXQu9C+0LLQtdC6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJtYXN0ZXItdXJsXCI6IFwiNDA0XCIsXG4gICAgICAgICAgICAgICAgXCJzcmNcIjogXCIvaW1nL2Fzc2V0cy9tYXN0ZXJfcmVjb21tZW5kZWQvNDYxNy5qcGdcIixcbiAgICAgICAgICAgICAgICBcImFsdFwiOiBcItCl0LDQu9GM0LfQvtCyINCQLlwiLFxuICAgICAgICAgICAgICAgIFwibWFzdGVyLW5hbWVcIjogXCLQpdCw0LvRjNC30L7QsiDQkC5cIixcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGF0aW9uLW51bWJlclwiOiBcIjYg0YfQtdC70L7QstC10LpcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm1hc3Rlci11cmxcIjogXCI0MDRcIixcbiAgICAgICAgICAgICAgICBcInNyY1wiOiBcIi9pbWcvYXNzZXRzL21hc3Rlcl9yZWNvbW1lbmRlZC83NDI4LmpwZ1wiLFxuICAgICAgICAgICAgICAgIFwiYWx0XCI6IFwi0JHRg9C70LPQsNC60L7QsiDQki7QkC5cIixcbiAgICAgICAgICAgICAgICBcIm1hc3Rlci1uYW1lXCI6IFwi0JHRg9C70LPQsNC60L7QsiDQki7QkC5cIixcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGF0aW9uLW51bWJlclwiOiBcIjUg0YfQtdC70L7QstC10LpcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm1hc3Rlci11cmxcIjogXCI0MDRcIixcbiAgICAgICAgICAgICAgICBcInNyY1wiOiBcIi9pbWcvYXNzZXRzL21hc3Rlcl9yZWNvbW1lbmRlZC8zNzIwLmpwZ1wiLFxuICAgICAgICAgICAgICAgIFwiYWx0XCI6IFwi0JrQvdGP0LfQtdCyINCQLtCuLlwiLFxuICAgICAgICAgICAgICAgIFwibWFzdGVyLW5hbWVcIjogXCLQmtC90Y/Qt9C10LIg0JAu0K4uXCIsXG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRhdGlvbi1udW1iZXJcIjogXCIyNyDRh9C10LvQvtCy0LXQulwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibWFzdGVyLXVybFwiOiBcIjQwNFwiLFxuICAgICAgICAgICAgICAgIFwic3JjXCI6IFwiL2ltZy9hc3NldHMvbWFzdGVyX3JlY29tbWVuZGVkLzQ2MTcuanBnXCIsXG4gICAgICAgICAgICAgICAgXCJhbHRcIjogXCLQpdCw0LvRjNC30L7QsiDQkC5cIixcbiAgICAgICAgICAgICAgICBcIm1hc3Rlci1uYW1lXCI6IFwi0KXQsNC70YzQt9C+0LIg0JAuXCIsXG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRhdGlvbi1udW1iZXJcIjogXCI2INGH0LXQu9C+0LLQtdC6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJtYXN0ZXItdXJsXCI6IFwiNDA0XCIsXG4gICAgICAgICAgICAgICAgXCJzcmNcIjogXCIvaW1nL2Fzc2V0cy9tYXN0ZXJfcmVjb21tZW5kZWQvNzQyOC5qcGdcIixcbiAgICAgICAgICAgICAgICBcImFsdFwiOiBcItCR0YPQu9Cz0LDQutC+0LIg0JIu0JAuXCIsXG4gICAgICAgICAgICAgICAgXCJtYXN0ZXItbmFtZVwiOiBcItCR0YPQu9Cz0LDQutC+0LIg0JIu0JAuXCIsXG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRhdGlvbi1udW1iZXJcIjogXCI1INGH0LXQu9C+0LLQtdC6XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJtYXN0ZXItdXJsXCI6IFwiNDA0XCIsXG4gICAgICAgICAgICAgICAgXCJzcmNcIjogXCIvaW1nL2Fzc2V0cy9tYXN0ZXJfcmVjb21tZW5kZWQvMzcyMC5qcGdcIixcbiAgICAgICAgICAgICAgICBcImFsdFwiOiBcItCa0L3Rj9C30LXQsiDQkC7Qri5cIixcbiAgICAgICAgICAgICAgICBcIm1hc3Rlci1uYW1lXCI6IFwi0JrQvdGP0LfQtdCyINCQLtCuLlwiLFxuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kYXRpb24tbnVtYmVyXCI6IFwiMjcg0YfQtdC70L7QstC10LpcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIm1hc3Rlci11cmxcIjogXCI0MDRcIixcbiAgICAgICAgICAgICAgICBcInNyY1wiOiBcIi9pbWcvYXNzZXRzL21hc3Rlcl9yZWNvbW1lbmRlZC80NjE3LmpwZ1wiLFxuICAgICAgICAgICAgICAgIFwiYWx0XCI6IFwi0KXQsNC70YzQt9C+0LIg0JAuXCIsXG4gICAgICAgICAgICAgICAgXCJtYXN0ZXItbmFtZVwiOiBcItCl0LDQu9GM0LfQvtCyINCQLlwiLFxuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kYXRpb24tbnVtYmVyXCI6IFwiNiDRh9C10LvQvtCy0LXQulwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwibWFzdGVyLXVybFwiOiBcIjQwNFwiLFxuICAgICAgICAgICAgICAgIFwic3JjXCI6IFwiL2ltZy9hc3NldHMvbWFzdGVyX3JlY29tbWVuZGVkLzc0MjguanBnXCIsXG4gICAgICAgICAgICAgICAgXCJhbHRcIjogXCLQkdGD0LvQs9Cw0LrQvtCyINCSLtCQLlwiLFxuICAgICAgICAgICAgICAgIFwibWFzdGVyLW5hbWVcIjogXCLQkdGD0LvQs9Cw0LrQvtCyINCSLtCQLlwiLFxuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kYXRpb24tbnVtYmVyXCI6IFwiNSDRh9C10LvQvtCy0LXQulwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cbk1hc3RlclJlY29tbWVuZGVkLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYmluZFNsaWNrKCk7XG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cbk1hc3RlclJlY29tbWVuZGVkLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy51bmJpbmRTbGljaygpO1xufTtcblxuTWFzdGVyUmVjb21tZW5kZWQucHJvdG90eXBlLmJpbmRTbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKCcubWFzdGVyX3JlY29tbWVuZGVkX19zbGlkZXInKS5zbGljayh7XG4gICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICBpbmZpbml0ZTogZmFsc2UsXG4gICAgICAgIHNwZWVkOiA3MDAsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogNCxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDMsXG4gICAgICAgIHByZXZBcnJvdzogJzxkaXYgY2xhc3M9XCJzbGljay1wcmV2XCI+JyArXG4gICAgICAgICc8c3ZnIGNsYXNzPVwiaWNvbiBpY29uX3N0cmVsa2FcIiB0aXRsZT1cImljb25fc3RyZWxrYVwiIHJvbGU9XCJpbWdcIj4nICtcbiAgICAgICAgJzx1c2UgeGxpbms6aHJlZj1cIi9pY29uLXN2Zy9zdmctc3ltYm9scy5zdmcjaWNvbl9zdHJlbGthXCIvPicgK1xuICAgICAgICAnPC9zdmc+JyArXG4gICAgICAgICc8L2Rpdj4nLFxuICAgICAgICBuZXh0QXJyb3c6ICc8ZGl2IGNsYXNzPVwic2xpY2stbmV4dFwiPicgK1xuICAgICAgICAnPHN2ZyBjbGFzcz1cImljb24gaWNvbl9zdHJlbGthXCIgdGl0bGU9XCJpY29uX3N0cmVsa2FcIiByb2xlPVwiaW1nXCI+JyArXG4gICAgICAgICc8dXNlIHhsaW5rOmhyZWY9XCIvaWNvbi1zdmcvc3ZnLXN5bWJvbHMuc3ZnI2ljb25fc3RyZWxrYVwiLz4nICtcbiAgICAgICAgJzwvc3ZnPicgK1xuICAgICAgICAnPC9kaXY+J1xuICAgIH0pO1xufTtcbk1hc3RlclJlY29tbWVuZGVkLnByb3RvdHlwZS51bmJpbmRTbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAkKCcubWFzdGVyX3JlY29tbWVuZGVkX19zbGlkZXInKS5zbGljayhcInVuc2xpY2tcIik7XG59OyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBNYXN0ZXJSdWJyaWthO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcIm1hc3Rlci1ydWJyaWthXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1hc3RlclJ1YnJpa2EoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5NYXN0ZXJSdWJyaWthLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cbk1hc3RlclJ1YnJpa2EucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuTWFzdGVyUnVicmlrYS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE90aGVyTmV3c0l0ZW07XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwib3RoZXItbmV3cy1pdGVtXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE90aGVyTmV3c0l0ZW0oKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5PdGhlck5ld3NJdGVtLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cbk90aGVyTmV3c0l0ZW0ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuT3RoZXJOZXdzSXRlbS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE90aGVyTmV3cztcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJvdGhlci1uZXdzXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE90aGVyTmV3cygpIHtcbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5PdGhlck5ld3MucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuT3RoZXJOZXdzLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cbk90aGVyTmV3cy5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE90aGVyUmVjb21tZW5kYXRpb247XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwib3RoZXItcmVjb21tZW5kYXRpb25cIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gT3RoZXJSZWNvbW1lbmRhdGlvbigpIHtcbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5PdGhlclJlY29tbWVuZGF0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKClcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuT3RoZXJSZWNvbW1lbmRhdGlvbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5PdGhlclJlY29tbWVuZGF0aW9uLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gT3RoZXJWYWNhbmN5SXRlbTtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJvdGhlci12YWNhbmN5LWl0ZW1cIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gT3RoZXJWYWNhbmN5SXRlbSgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cbk90aGVyVmFjYW5jeUl0ZW0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuT3RoZXJWYWNhbmN5SXRlbS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5PdGhlclZhY2FuY3lJdGVtLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gT3RoZXJWYWNhbmN5O1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcIm90aGVyLXZhY2FuY3lcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gT3RoZXJWYWNhbmN5KCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuT3RoZXJWYWNhbmN5LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKClcbiAgICAgICAgLnRoZW4gKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhY2FuY3k6IHJlc1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cbk90aGVyVmFjYW5jeS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5PdGhlclZhY2FuY3kucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBSdWJpa2F0b3I7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwicnViaWthdG9yXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJ1YmlrYXRvcigpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblJ1YmlrYXRvci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblJ1YmlrYXRvci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5SdWJpa2F0b3IucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlQ29udGFjdDtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJwYWdlLWNvbnRhY3RcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFnZUNvbnRhY3QoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5QYWdlQ29udGFjdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIFwicGhvbmVcIjogXCIoODQ4MikgNzQxLTE0N1wiLFxuICAgICAgICBcImVtYWlsXCI6IFwiaW5mb0BmYWNlbWFzdGVyLnJ1XCIsXG4gICAgICAgIFwiYWRyZXNzXCI6IFwi0LMuINCi0L7Qu9GM0Y/RgtGC0LgsINGD0LsuINCQ0LLRgtC+0YHRgtGA0L7QuNGC0LXQu9C10LkgNDHQkC0xXCJcbiAgICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblBhZ2VDb250YWN0LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cblBhZ2VDb250YWN0LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnZUZlZWRiYWNrO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInBhZ2UtZmVlZGJhY2tcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFnZUZlZWRiYWNrKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuUGFnZUZlZWRiYWNrLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUGFnZUZlZWRiYWNrLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cblBhZ2VGZWVkYmFjay5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VMb2dpbjtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJwYWdlLWxvZ2luXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFBhZ2VMb2dpbigpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblBhZ2VMb2dpbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblBhZ2VMb2dpbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5QYWdlTG9naW4ucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBEb3BGdW5jdGlvbjtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJkb3AtZnVuY3Rpb25cIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRG9wRnVuY3Rpb24oKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5Eb3BGdW5jdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIFwibWVudU1hc3RlclwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ1cmxcIjogXCIvcmVnaXN0cmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcItCh0YLQsNGC0Ywg0JzQsNGB0YLQtdGA0L7QvFwiLFxuICAgICAgICAgICAgICAgIFwiaWNvblwiOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidXJsXCI6IFwiL3JlY29tbWVuZGF0aW9uXCIsXG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiBcItCc0LDRgdGC0LXRgNCwINC+INGB0LDQudGC0LVcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcIm1lbnVBYm91dFwiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ1cmxcIjogXCIvbmV3c1wiLFxuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLQndC+0LLQvtGB0YLQuFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidXJsXCI6IFwiL3ZhY2FuY3lcIixcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi0JLQsNC60LDQvdGB0LjQuFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwibWVudUJheWRhXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInVybFwiOiBcIi80MDRcIixcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi0JrQvtC90LrRg9GA0YHRiyDQs9Cw0LfQtdGC0Ysg0J/RgNC10LfQtdC90YJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInVybFwiOiBcIi80MDRcIixcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi0JzQsNGA0YjRgNGD0YLQutC4INCi0L7Qu9GM0Y/RgtGC0Lgg0YEgMDEuMDEuMjAxNVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidXJsXCI6IFwiLzQwNFwiLFxuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLQlNCw0YfQvdGL0LUg0L/QtdGA0LXQstC+0LfQutC4XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJlbXB0eVwiOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cbkRvcEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cbkRvcEZ1bmN0aW9uLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFpbjtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJtYWluXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1haW4oKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5NYWluLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuTWFpbi5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5NYWluLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFpbkZ1bmN0aW9uO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcIm1haW4tZnVuY3Rpb25cIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFpbkZ1bmN0aW9uKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuTWFpbkZ1bmN0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgY291bnRNYXN0ZXI6ICcxIDIzNCDQnNCw0YHRgtC10YDQsCdcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5NYWluRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuTWFpbkZ1bmN0aW9uLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnZU1hc3RlclBhZ2U7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwicGFnZS1tYXN0ZXItcGFnZVwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYWdlTWFzdGVyUGFnZSgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblBhZ2VNYXN0ZXJQYWdlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUGFnZU1hc3RlclBhZ2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuUGFnZU1hc3RlclBhZ2UucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlTWFzdGVyUnVicmlrYTtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJwYWdlLW1hc3Rlci1ydWJyaWthXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFBhZ2VNYXN0ZXJSdWJyaWthKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuUGFnZU1hc3RlclJ1YnJpa2EucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5QYWdlTWFzdGVyUnVicmlrYS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5QYWdlTWFzdGVyUnVicmlrYS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VOZXdzSXRlbTtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJwYWdlLW5ld3MtaXRlbVwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYWdlTmV3c0l0ZW0oKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5QYWdlTmV3c0l0ZW0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUGFnZU5ld3NJdGVtLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cblBhZ2VOZXdzSXRlbS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VOZXdzO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInBhZ2UtbmV3c1wiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYWdlTmV3cygpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblBhZ2VOZXdzLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUGFnZU5ld3MucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuUGFnZU5ld3MucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlT2ZlcnRhO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInBhZ2Utb2ZlcnRhXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFBhZ2VPZmVydGEoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5QYWdlT2ZlcnRhLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUGFnZU9mZXJ0YS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5QYWdlT2ZlcnRhLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnZVJlY29tbWVuZGF0aW9uO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInBhZ2UtcmVjb21tZW5kYXRpb25cIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFnZVJlY29tbWVuZGF0aW9uKCkge1xufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblBhZ2VSZWNvbW1lbmRhdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5QYWdlUmVjb21tZW5kYXRpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuUGFnZVJlY29tbWVuZGF0aW9uLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnZVJlZ2lzdHJhdGlvbjtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJwYWdlLXJlZ2lzdHJhdGlvblwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYWdlUmVnaXN0cmF0aW9uKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuUGFnZVJlZ2lzdHJhdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblBhZ2VSZWdpc3RyYXRpb24ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuUGFnZVJlZ2lzdHJhdGlvbi5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VSZXF1ZXN0O1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInBhZ2UtcmVxdWVzdFwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYWdlUmVxdWVzdCgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblBhZ2VSZXF1ZXN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUGFnZVJlcXVlc3QucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuUGFnZVJlcXVlc3QucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlU2FsZUNhdGFsb2c7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwicGFnZS1zYWxlLWNhdGFsb2dcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFnZVNhbGVDYXRhbG9nKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuUGFnZVNhbGVDYXRhbG9nLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUGFnZVNhbGVDYXRhbG9nLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cblBhZ2VTYWxlQ2F0YWxvZy5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VTb3ZldHlDYXRhbG9nO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInBhZ2Utc292ZXR5LWNhdGFsb2dcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFnZVNvdmV0eUNhdGFsb2coKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5QYWdlU292ZXR5Q2F0YWxvZy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblBhZ2VTb3ZldHlDYXRhbG9nLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cblBhZ2VTb3ZldHlDYXRhbG9nLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnZVZhY2FuY3lJdGVtO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInBhZ2UtdmFjYW5jeS1pdGVtXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFBhZ2VWYWNhbmN5SXRlbSgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblBhZ2VWYWNhbmN5SXRlbS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblBhZ2VWYWNhbmN5SXRlbS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5QYWdlVmFjYW5jeUl0ZW0ucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlVmFjYW5jeTtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJwYWdlLXZhY2FuY3lcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFnZVZhY2FuY3koKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5QYWdlVmFjYW5jeS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblBhZ2VWYWNhbmN5LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cblBhZ2VWYWNhbmN5LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnZVZpZGVvQ2F0YWxvZztcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJwYWdlLXZpZGVvLWNhdGFsb2dcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFnZVZpZGVvQ2F0YWxvZygpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblBhZ2VWaWRlb0NhdGFsb2cucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUGFnZVZpZGVvQ2F0YWxvZy5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5QYWdlVmlkZW9DYXRhbG9nLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnZXNDb250ZW50O1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInBhZ2VzLWNvbnRlbnRcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFnZXNDb250ZW50KCkgeyB9XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuUGFnZXNDb250ZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzLiRjb250ZXh0LmdldFN0b3JlRGF0YSgpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKi9cblBhZ2VzQ29udGVudC5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5oaWRlTG9hZGVyKCk7XG59O1xuXG4vKipcbiAqIEhpZGVzIGxvYWRlciBpbiB0ZW1wbGF0ZS5cbiAqL1xuUGFnZXNDb250ZW50LnByb3RvdHlwZS5oaWRlTG9hZGVyID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgbG9hZGVycyA9IHRoaXMuJGNvbnRleHQuZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnY2F0LWxvYWRlcicpO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxvYWRlcnMubGVuZ3RoOyBpKyspIHtcblx0XHRsb2FkZXJzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdH1cblx0d2luZG93LnNjcm9sbFRvKDAsMCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZvb3RlcjtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJwYWdlcy1mb290ZXJcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRm9vdGVyKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuRm9vdGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGlua3M6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInVybFwiOiBcIi9vZmVydGFcIixcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi0J7RhNC10YDRgtCwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ1cmxcIjogXCIvY29udGFjdFwiLFxuICAgICAgICAgICAgICAgIFwidGl0bGVcIjogXCLQmtC+0L3RgtCw0LrRgtGLXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ1cmxcIjogXCIvZmVlZGJhY2tcIixcbiAgICAgICAgICAgICAgICBcInRpdGxlXCI6IFwi0J7QsdGA0LDRgtC90LDRjyDRgdCy0Y/Qt9GMXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuRm9vdGVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB3aW5kb3dIZWlnaHQgPSAkKHdpbmRvdykuaGVpZ2h0KCk7XG4gICAgJCgnI3RvLXRvcCBhJykuYmluZCgnY2xpY2snLCBzY3JvbGxUb1RvcCk7XG4gICAgJCh3aW5kb3cpLmJpbmQoJ3Njcm9sbCcsIGlzVmlzaWJsZVRvVG9wKTtcblxuICAgIGZ1bmN0aW9uIHNjcm9sbFRvVG9wKCkge1xuICAgICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7XG4gICAgICAgICAgICBzY3JvbGxUb3A6IDBcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1Zpc2libGVUb1RvcCgpIHtcbiAgICAgICAgaWYgKHdpbmRvd0hlaWdodCAvIDIgPiAkKHdpbmRvdykuc2Nyb2xsVG9wKCkpIHtcbiAgICAgICAgICAgICQoJyN0by10b3AnKS5mYWRlT3V0KDQwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKCcjdG8tdG9wJykuZmFkZUluKDQwMCk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cbkZvb3Rlci5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgICQoJyN0by10b3AgYScpLnVuYmluZCgnY2xpY2snKTtcbiAgICAkKHdpbmRvdykudW5iaW5kKCdzY3JvbGwnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnZXNIZWFkZXI7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwicGFnZXMtaGVhZGVyXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFBhZ2VzSGVhZGVyKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuUGFnZXNIZWFkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEuaGVhZGVyO1xuICAgICAgICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUGFnZXNIZWFkZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuUGFnZXNIZWFkZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFBBR0VTID0gcmVxdWlyZShcIi4uLy4uLy4uL2NvbmZpZy9wYWdlcy5qc29uXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhZ2VzTmF2aWdhdGlvbjtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJwYWdlcy1uYXZpZ2F0aW9uXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFBhZ2VzTmF2aWdhdGlvbigpIHtcbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5QYWdlc05hdmlnYXRpb24ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtZW51OiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGluazogJy9jYXRhbG9nJyxcbiAgICAgICAgICAgICAgICBuYW1lOiBQQUdFUy5jYXRhbG9nLnRpdGxlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxpbms6ICcvcmVxdWVzdCcsXG4gICAgICAgICAgICAgICAgbmFtZTogUEFHRVMucmVxdWVzdC50aXRsZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsaW5rOiAnL3JlZ2lzdHJhdGlvbicsXG4gICAgICAgICAgICAgICAgbmFtZTogUEFHRVMucmVnaXN0cmF0aW9uLnRpdGxlXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWdpc3RyYXRpb25BYm91dDtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJyZWdpc3RyYXRpb24tYWJvdXRcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUmVnaXN0cmF0aW9uQWJvdXQoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5SZWdpc3RyYXRpb25BYm91dC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblJlZ2lzdHJhdGlvbkFib3V0LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cblJlZ2lzdHJhdGlvbkFib3V0LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVnaXN0cmF0aW9uRmFxO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInJlZ2lzdHJhdGlvbi1mYXFcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUmVnaXN0cmF0aW9uRmFxKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuUmVnaXN0cmF0aW9uRmFxLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUmVnaXN0cmF0aW9uRmFxLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cblJlZ2lzdHJhdGlvbkZhcS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZ2lzdHJhdGlvbkZvcm07XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwicmVnaXN0cmF0aW9uLWZvcm1cIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUmVnaXN0cmF0aW9uRm9ybSgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblJlZ2lzdHJhdGlvbkZvcm0ucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IFwiL3JlZy1tYXN0ZXIvc3VjY2Vzcy5qc29uXCIsXG4gICAgICAgIHVybExLOiBcIjQwNFwiLFxuICAgICAgICBtZXRob2Q6IFwiZ2V0XCJcbiAgICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblJlZ2lzdHJhdGlvbkZvcm0ucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuUmVnaXN0cmF0aW9uRm9ybS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZ2lzdHJhdGlvbkhlYWRlcjtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJyZWdpc3RyYXRpb24taGVhZGVyXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJlZ2lzdHJhdGlvbkhlYWRlcigpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblJlZ2lzdHJhdGlvbkhlYWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblJlZ2lzdHJhdGlvbkhlYWRlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5SZWdpc3RyYXRpb25IZWFkZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWdpc3RyYXRpb25Nb3JlUGFnZTtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJyZWdpc3RyYXRpb24tbW9yZS1wYWdlXCIgY29tcG9uZW50LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJlZ2lzdHJhdGlvbk1vcmVQYWdlKCkge1xuXG59XG5cbi8qKlxuICogR2V0cyBkYXRhIGNvbnRleHQgZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IERhdGEgY29udGV4dFxuICogZm9yIHRlbXBsYXRlIGVuZ2luZS5cbiAqL1xuUmVnaXN0cmF0aW9uTW9yZVBhZ2UucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5SZWdpc3RyYXRpb25Nb3JlUGFnZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5SZWdpc3RyYXRpb25Nb3JlUGFnZS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZ2lzdHJhdGlvblByaWNlO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInJlZ2lzdHJhdGlvbi1wcmljZVwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSZWdpc3RyYXRpb25QcmljZSgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblJlZ2lzdHJhdGlvblByaWNlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUmVnaXN0cmF0aW9uUHJpY2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2xpY2s6IHtcbiAgICAgICAgICAgICcudGFiLWNvbnRlbnRfX25hbWUnOiB0aGlzLl9jbGlja0hhbmRsZVxuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5SZWdpc3RyYXRpb25QcmljZS5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG5SZWdpc3RyYXRpb25QcmljZS5wcm90b3R5cGUuX2NsaWNrSGFuZGxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBlbCA9ICQob2JqLnRhcmdldCk7XG4gICAgaWYgKCFlbC5oYXNDbGFzcygndGFiLWNvbnRlbnRfX25hbWUnKSlcbiAgICAgICAgZWwgPSBlbC5wYXJlbnRzKCcudGFiLWNvbnRlbnRfX25hbWUnKTtcblxuICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnRzKCcudGFiLWNvbnRlbnQnKTtcbiAgICBpZiAocGFyZW50Lmhhc0NsYXNzKCd0YWItY29udGVudF9hY3RpdmUnKSlcbiAgICAgICAgcmV0dXJuO1xuICAgICQoJy50YWItY29udGVudF9hY3RpdmUnKS5yZW1vdmVDbGFzcygndGFiLWNvbnRlbnRfYWN0aXZlJyk7XG4gICAgcGFyZW50LmFkZENsYXNzKCd0YWItY29udGVudF9hY3RpdmUnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVnaXN0cmF0aW9uV2h5V2U7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgQ2F0LWNvbXBvbmVudCBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNjYXQtY29tcG9uZW50c1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwicmVnaXN0cmF0aW9uLXdoeS13ZVwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSZWdpc3RyYXRpb25XaHlXZSgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblJlZ2lzdHJhdGlvbldoeVdlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY291bnQ6IHtcbiAgICAgICAgICAgIG1hc3RlcjogXCIxIDAwMFwiLFxuICAgICAgICAgICAgbWFzdGVyTmFtZTogXCLQvNCw0YHRgtC10YDQvtCyPGJyPtC90LAg0YHQsNC50YLQtVwiLFxuICAgICAgICAgICAgdmlzaXRzOiBcIjEyIDAwMFwiLFxuICAgICAgICAgICAgb3JkZXJzOiBcIjEgMDAwXCJcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuUmVnaXN0cmF0aW9uV2h5V2UucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuUmVnaXN0cmF0aW9uV2h5V2UucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBDYXRhbG9nO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcImNhdGFsb2dcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ2F0YWxvZygpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cbkNhdGFsb2cucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBydWJyaWthdG9yOiBkYXRhXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGV2ZW50IGJpbmRpbmcgc2V0dGluZ3MgZm9yIHRoZSBjb21wb25lbnQuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBCaW5kaW5nIHNldHRpbmdzLlxuICovXG5DYXRhbG9nLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNsaWNrOiB7XG4gICAgICAgICAgICAnLmpzLXJ1YnJpa2EtbGlzdCc6IHRoaXMuX2NsaWNrSGFuZGxlcixcbiAgICAgICAgICAgICcuanMtcnVicmlrYS1jb2xsYXBzZWQnOiB0aGlzLl9jbGlja0FsbEhhbmRsZXJcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbkNhdGFsb2cucHJvdG90eXBlLl9jbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIGVsID0gb2JqLnRhcmdldDtcbiAgICAkKGVsKS5wYXJlbnRzKCcucnVicmlrYS1saXN0JykuZmluZCgnLnJ1YnJpa2EtbGlzdF9fbGlzdCcpLnRvZ2dsZSgpO1xufVxuXG5DYXRhbG9nLnByb3RvdHlwZS5fY2xpY2tBbGxIYW5kbGVyID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBlbCA9IG9iai50YXJnZXQ7XG4gICAgdmFyIHNlbGYgPSAkKGVsKS5wYXJlbnRzKCcuanMtcnVicmlrYS1jb2xsYXBzZWQnKTtcblxuICAgIHZhciBjbCA9ICdtYXN0ZXItcnVicmlrYXRvci1wYWdlJztcbiAgICB2YXIgY2xfY29sID0gY2wgKyAnX2NvbGxhcHNlZCc7XG4gICAgdmFyIGVsID0gJCgnLm1hc3Rlci1ydWJyaWthdG9yLXBhZ2UnKTtcblxuICAgIGlmIChlbC5oYXNDbGFzcyhjbF9jb2wpKSB7XG4gICAgICAgIGVsLnJlbW92ZUNsYXNzKGNsX2NvbCk7XG4gICAgICAgICQoJy5ydWJyaWthLWxpc3RfX2xpc3QnKS5zaG93KCk7XG4gICAgICAgIHNlbGYuZmluZCgnLnJ1YnJpa2EtbGlzdF9fbmFtZScpLmh0bWwoJ9Ch0LLQtdGA0L3Rg9GC0Ywg0LLRgdC1INGA0YPQsdGA0LjQutC4JylcbiAgICAgICAgICAgIC5lbmQoKS5maW5kKCcucnVicmlrYS1saXN0X19pY29uJykuYWRkQ2xhc3MoJ3J1YnJpa2EtbGlzdF9faWNvbl9yb3RhdGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBlbC5hZGRDbGFzcyhjbF9jb2wpO1xuICAgICAgICAkKCcucnVicmlrYS1saXN0X19saXN0JykuaGlkZSgpO1xuICAgICAgICBzZWxmLmZpbmQoJy5ydWJyaWthLWxpc3RfX25hbWUnKS5odG1sKCfQoNCw0LfQstC10YDQvdGD0YLRjCDQstGB0LUg0YDRg9Cx0YDQuNC60LgnKVxuICAgICAgICAgICAgLmVuZCgpLmZpbmQoJy5ydWJyaWthLWxpc3RfX2ljb24nKS5yZW1vdmVDbGFzcygncnVicmlrYS1saXN0X19pY29uX3JvdGF0ZScpO1xuICAgIH1cbn1cbi8qKlxuICogRG9lcyBjbGVhbmluZyBmb3IgZXZlcnl0aGluZyB0aGF0IGhhdmUgTk9UIGJlZW4gc2V0IGJ5IC5iaW5kKCkgbWV0aG9kLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZXx1bmRlZmluZWR9IFByb21pc2Ugb3Igbm90aGluZy5cbiAqL1xuQ2F0YWxvZy5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG5cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBTYWxlO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInNhbGVcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU2FsZSgpIHtcblxufVxuXG4vKipcbiAqIEdldHMgZGF0YSBjb250ZXh0IGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBEYXRhIGNvbnRleHRcbiAqIGZvciB0ZW1wbGF0ZSBlbmdpbmUuXG4gKi9cblNhbGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuU2FsZS5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5TYWxlLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gU2VhcmNoO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInNlYXJjaFwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTZWFyY2goKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5TZWFyY2gucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBtb2RpZmljYXRvcjogdGhpcy4kY29udGV4dC5hdHRyaWJ1dGVzLm1vZGlmaWNhdG9yLFxuICAgIHVybDogJycsXG4gICAgbWV0aG9kOiAnJ1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblNlYXJjaC5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcblxuLyoqXG4gKiBEb2VzIGNsZWFuaW5nIGZvciBldmVyeXRoaW5nIHRoYXQgaGF2ZSBOT1QgYmVlbiBzZXQgYnkgLmJpbmQoKSBtZXRob2QuXG4gKiBUaGlzIG1ldGhvZCBpcyBvcHRpb25hbC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfHVuZGVmaW5lZH0gUHJvbWlzZSBvciBub3RoaW5nLlxuICovXG5TZWFyY2gucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uICgpIHtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBTZXJ2aWNlUmVxdWVzdDtcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBDYXQtY29tcG9uZW50IGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI2NhdC1jb21wb25lbnRzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJzZXJ2aWNlLXJlcXVlc3RcIiBjb21wb25lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU2VydmljZVJlcXVlc3QoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5TZXJ2aWNlUmVxdWVzdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIFJldHVybnMgZXZlbnQgYmluZGluZyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IEJpbmRpbmcgc2V0dGluZ3MuXG4gKi9cblNlcnZpY2VSZXF1ZXN0LnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cblNlcnZpY2VSZXF1ZXN0LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gU29jaWFsO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IENhdC1jb21wb25lbnQgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjY2F0LWNvbXBvbmVudHNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInNvY2lhbFwiIGNvbXBvbmVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTb2NpYWwoKSB7XG5cbn1cblxuLyoqXG4gKiBHZXRzIGRhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gRGF0YSBjb250ZXh0XG4gKiBmb3IgdGVtcGxhdGUgZW5naW5lLlxuICovXG5Tb2NpYWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICB1cmw6ICdodHRwOi8vdmsuY29tL2ZtX21mJyxcbiAgICAgIGljbzogJ3ZrJ1xuICAgIH0sXG4gICAge1xuICAgICAgdXJsOiAnaHR0cDovL3d3dy5mYWNlYm9vay5jb20vZmFjZS5tYXN0JyxcbiAgICAgIGljbzogJ2ZiJ1xuICAgIH0sXG4gICAge1xuICAgICAgdXJsOiAnaHR0cDovL3d3dy5vZG5va2xhc3NuaWtpLnJ1L2ZhY2VtYXN0ZXInLFxuICAgICAgaWNvOiAnb2snXG4gICAgfSxcbiAgICB7XG4gICAgICB1cmw6ICdodHRwOi8vdHdpdHRlci5jb20vRmFjZW1hc3RlclJ1JyxcbiAgICAgIGljbzogJ3R3J1xuICAgIH1cbiAgXTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBldmVudCBiaW5kaW5nIHNldHRpbmdzIGZvciB0aGUgY29tcG9uZW50LlxuICogVGhpcyBtZXRob2QgaXMgb3B0aW9uYWwuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gQmluZGluZyBzZXR0aW5ncy5cbiAqL1xuU29jaWFsLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuXG4vKipcbiAqIERvZXMgY2xlYW5pbmcgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBoYXZlIE5PVCBiZWVuIHNldCBieSAuYmluZCgpIG1ldGhvZC5cbiAqIFRoaXMgbWV0aG9kIGlzIG9wdGlvbmFsLlxuICogQHJldHVybnMge1Byb21pc2V8dW5kZWZpbmVkfSBQcm9taXNlIG9yIG5vdGhpbmcuXG4gKi9cblNvY2lhbC5wcm90b3R5cGUudW5iaW5kID0gZnVuY3Rpb24gKCkge1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUEFHRVMgPSByZXF1aXJlKFwiLi4vY29uZmlnL3BhZ2VzLmpzb25cIik7XG5cbm1vZHVsZS5leHBvcnRzID0gQnJlYWRjcnVtcHM7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgU3RvcmUgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjc3RvcmVzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJicmVhZGNydW1wc1wiIHN0b3JlLlxuICogQHBhcmFtIHtVSFJ9ICR1aHIgVW5pdmVyc2FsIEhUVFAgcmVxdWVzdC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBCcmVhZGNydW1wcygkdWhyKSB7XG4gICAgdGhpcy5fdWhyID0gJHVocjtcbiAgICB0aGlzLiRjb250ZXh0LnNldERlcGVuZGVuY3koJ1BhZ2VzJyk7XG59XG5cbi8qKlxuICogQ3VycmVudCB1bml2ZXJzYWwgSFRUUCByZXF1ZXN0IHRvIGRvIGl0IGluIGlzb21vcnBoaWMgd2F5LlxuICogQHR5cGUge1VIUn1cbiAqIEBwcml2YXRlXG4gKi9cbkJyZWFkY3J1bXBzLnByb3RvdHlwZS5fdWhyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGxpZmV0aW1lIG9mIGRhdGEgKGluIG1pbGxpc2Vjb25kcykgdGhhdCBpcyByZXR1cm5lZCBieSB0aGlzIHN0b3JlLlxuICogQHR5cGUge251bWJlcn0gTGlmZXRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5CcmVhZGNydW1wcy5wcm90b3R5cGUuJGxpZmV0aW1lID0gNjAwMDA7XG5cbi8qKlxuICogTG9hZHMgZGF0YSBmcm9tIHJlbW90ZSBzb3VyY2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gTG9hZGVkIGRhdGEuXG4gKi9cbkJyZWFkY3J1bXBzLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgYnJjcm1wID0gW107XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCdQYWdlcycpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgICAgICBpZiAocGFnZS5jdXJyZW50ID09IFwibWFzdGVyLXJ1YnJpa2FcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5fbG9hZEZvclJ1YnJpa2EoKTtcblxuICAgICAgICAgICAgaWYgKHBhZ2UuY3VycmVudCA9PSBcIm5ld3MtaXRlbVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9sb2FkRm9yTmV3c0l0ZW0oKTtcblxuICAgICAgICAgICAgYnJjcm1wLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBQQUdFU1twYWdlLmN1cnJlbnRdLnRpdGxlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBicmNybXA7XG4gICAgICAgIH0pO1xufTtcblxuQnJlYWRjcnVtcHMucHJvdG90eXBlLl9sb2FkRm9yUnVicmlrYSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCdUYWcnKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgdmFyIGxpbmtzO1xuICAgICAgICAgICAgaWYgKGRhdGEudGFnLnVuaXF1ZSkge1xuICAgICAgICAgICAgICAgIGxpbmtzID0gc2VsZi5fZ2V0Rm9yVGFnKGRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaW5rcyA9IHNlbGYuX2dldEZvclJ1YnJpa2EoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbGlua3M7XG4gICAgICAgIH0pO1xufTtcblxuQnJlYWRjcnVtcHMucHJvdG90eXBlLl9nZXRGb3JUYWcgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHZhciBsaW5rcyA9IHRoaXMuX2dldEZvclJ1YkFuZFRhZyhkYXRhKTtcbiAgICBsaW5rcy5wdXNoKHtcbiAgICAgICAgdGl0bGU6IGRhdGEucnVicmlrYS5uYW1lLFxuICAgICAgICB1cmw6ICcvJyArIGRhdGEucnVicmlrYS5wYXJlbnQudW5pcXVlICsgJy8nICsgZGF0YS5ydWJyaWthLnVuaXF1ZVxuICAgIH0pO1xuICAgIGxpbmtzLnB1c2goe1xuICAgICAgICB0aXRsZTogZGF0YS50YWcubmFtZVxuICAgIH0pO1xuICAgIHJldHVybiBsaW5rcztcbn07XG5cbkJyZWFkY3J1bXBzLnByb3RvdHlwZS5fZ2V0Rm9yUnVicmlrYSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGxpbmtzID0gdGhpcy5fZ2V0Rm9yUnViQW5kVGFnKGRhdGEpO1xuICAgIGxpbmtzLnB1c2goe1xuICAgICAgICB0aXRsZTogZGF0YS5ydWJyaWthLm5hbWVcbiAgICB9KTtcbiAgICByZXR1cm4gbGlua3M7XG59O1xuXG5CcmVhZGNydW1wcy5wcm90b3R5cGUuX2dldEZvclJ1YkFuZFRhZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIHBvZHJ1YnJpa3MgPSBkYXRhLnJ1YnJpa2EubmVhcmJ5O1xuICAgIHZhciBsaW5rc1BvZHJ1YnJpa3MgPSBbXTtcbiAgICB2YXIgbGlua3MgPSBbXTtcblxuICAgIE9iamVjdC5rZXlzKHBvZHJ1YnJpa3MpXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChudW0pIHtcbiAgICAgICAgICAgIGlmIChwb2RydWJyaWtzW251bV0uc3RhdHVzID09IDEpXG4gICAgICAgICAgICAgICAgbGlua3NQb2RydWJyaWtzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogcG9kcnVicmlrc1tudW1dLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHVybDogJy8nICsgZGF0YS5ydWJyaWthLnBhcmVudC51bmlxdWUgKyAnLycgKyBwb2RydWJyaWtzW251bV0udW5pcXVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgbGlua3MucHVzaCh7XG4gICAgICAgIHRpdGxlOiBcItCa0LDRgtCw0LvQvtCzINGD0YHQu9GD0LNcIixcbiAgICAgICAgdXJsOiBcIi9jYXRhbG9nXCJcbiAgICB9KTtcblxuICAgIGxpbmtzLnB1c2goe1xuICAgICAgICB0aXRsZTogZGF0YS5ydWJyaWthLnBhcmVudC5uYW1lLFxuICAgICAgICB1cmw6IFwiL1wiICsgZGF0YS5ydWJyaWthLnBhcmVudC51bmlxdWUsXG4gICAgICAgIGxpbmtzOiBsaW5rc1BvZHJ1YnJpa3NcbiAgICB9KTtcbiAgICByZXR1cm4gbGlua3M7XG59O1xuXG5CcmVhZGNydW1wcy5wcm90b3R5cGUuX2xvYWRGb3JOZXdzSXRlbSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCdvdGhlci9OZXdzSXRlbScpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB2YXIgbGlua3MgPSBbXTtcbiAgICAgICAgICAgIGxpbmtzLnB1c2goe1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcItCd0L7QstC+0YHRgtC4XCIsXG4gICAgICAgICAgICAgICAgdXJsOiBcIi9uZXdzXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGlua3MucHVzaCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGxpbmtzO1xuICAgICAgICB9KTtcbn07XG4vKipcbiAqIEhhbmRsZXMgYWN0aW9uIG5hbWVkIFwic29tZS1hY3Rpb25cIiBmcm9tIGFueSBjb21wb25lbnQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gUmVzcG9uc2UgdG8gY29tcG9uZW50LlxuICovXG5CcmVhZGNydW1wcy5wcm90b3R5cGUuaGFuZGxlU29tZUFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBIZXJlIHlvdSBjYW4gY2FsbCB0aGlzLiRjb250ZXh0LmNoYW5nZWQoKSBpZiB5b3Uga25vd1xuICAgIC8vIHRoYXQgcmVtb3RlIGRhdGEgc291cmNlIGhhcyBiZWVuIGNoYW5nZWQuXG4gICAgLy8gQWxzbyB5b3UgY2FuIGhhdmUgbWFueSBoYW5kbGUgbWV0aG9kcyBmb3Igb3RoZXIgYWN0aW9ucy5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBQQUdFUyA9IHJlcXVpcmUoXCIuLi9jb25maWcvcGFnZXMuanNvblwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBIZWFkO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IFN0b3JlIGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI3N0b3Jlc1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwiaGVhZFwiIHN0b3JlLlxuICogQHBhcmFtIHtVSFJ9ICR1aHIgVW5pdmVyc2FsIEhUVFAgcmVxdWVzdC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBIZWFkKCR1aHIpIHtcbiAgICB0aGlzLl91aHIgPSAkdWhyO1xuICAgIHRoaXMuY3VycmVudFBhZ2UgPSBcIm1haW5cIjtcbiAgICB0aGlzLiRjb250ZXh0LnNldERlcGVuZGVuY3koJ1BhZ2VzJyk7XG59XG5cbi8qKlxuICogQ3VycmVudCB1bml2ZXJzYWwgSFRUUCByZXF1ZXN0IHRvIGRvIGl0IGluIGlzb21vcnBoaWMgd2F5LlxuICogQHR5cGUge1VIUn1cbiAqIEBwcml2YXRlXG4gKi9cbkhlYWQucHJvdG90eXBlLl91aHIgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgbGlmZXRpbWUgb2YgZGF0YSAoaW4gbWlsbGlzZWNvbmRzKSB0aGF0IGlzIHJldHVybmVkIGJ5IHRoaXMgc3RvcmUuXG4gKiBAdHlwZSB7bnVtYmVyfSBMaWZldGltZSBpbiBtaWxsaXNlY29uZHMuXG4gKi9cbkhlYWQucHJvdG90eXBlLiRsaWZldGltZSA9IDYwMDAwO1xuXG4vKipcbiAqIExvYWRzIGRhdGEgZnJvbSByZW1vdGUgc291cmNlLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IExvYWRlZCBkYXRhLlxuICovXG5IZWFkLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5nZXRTdG9yZURhdGEoJ1BhZ2VzJylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgICAgIGlmIChwYWdlLmN1cnJlbnQgPT0gXCJtYXN0ZXItcnVicmlrYVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9sb2FkRm9yUnVicmlrYSgpO1xuICAgICAgICAgICAgaWYgKHBhZ2UuY3VycmVudCA9PSBcIm5ld3MtaXRlbVwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLl9sb2FkRm9yTmV3c0l0ZW0oKTtcblxuICAgICAgICAgICAgdmFyIGRhdGEgPSBQQUdFU1twYWdlLmN1cnJlbnRdO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAvL3RpdGxlOiBkYXRhLnRpdGxlICsgJy4gRmFjZU1hc3Rlci5ydS4g0KHQv9C10YbQuNCw0LvQuNGB0YLRiyDQotC+0LvRjNGP0YLRgtC4JyxcbiAgICAgICAgICAgICAgICAvL2Rlc2NyaXB0aW9uOiBkYXRhLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIC8va2V5d29yZHM6IGRhdGEua2V5d29yZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59O1xuXG5IZWFkLnByb3RvdHlwZS5fbG9hZEZvclJ1YnJpa2EgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCdUYWcnKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogZGF0YS5jdXJyZW50U2VvLmhlYWRUaXRsZSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZGF0YS5jdXJyZW50U2VvLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgICAgIGtleXdvcmRzOiBkYXRhLmN1cnJlbnRTZW8ua2V5d29yZHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59O1xuXG5IZWFkLnByb3RvdHlwZS5fbG9hZEZvck5ld3NJdGVtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLiRjb250ZXh0LmdldFN0b3JlRGF0YSgnb3RoZXIvTmV3c0l0ZW0nKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogZGF0YS50aXRsZSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZGF0YS5wcmV2aWV3LFxuICAgICAgICAgICAgICAgIGtleXdvcmRzOiAn0L3QvtCy0L7RgdGC0YwsIGZhY2VtYXN0ZXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufTtcbi8qKlxuICogSGFuZGxlcyBhY3Rpb24gbmFtZWQgXCJzb21lLWFjdGlvblwiIGZyb20gYW55IGNvbXBvbmVudC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBSZXNwb25zZSB0byBjb21wb25lbnQuXG4gKi9cbkhlYWQucHJvdG90eXBlLmhhbmRsZVNldEN1cnJlbnRQYWdlID0gZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICB0aGlzLmN1cnJlbnRQYWdlID0gcGFnZTtcbiAgICB0aGlzLiRjb250ZXh0LmNoYW5nZWQoKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBQQUdFUyA9IHJlcXVpcmUoXCIuLi9jb25maWcvcGFnZXMuanNvblwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYWdlcztcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBTdG9yZSBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNzdG9yZXNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcIlBhZ2VzXCIgc3RvcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gJGNvbmZpZyBBcHBsaWNhdGlvbiBjb25maWcuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFnZXMoJGNvbmZpZykge1xuICAgIHRoaXMuX2NvbmZpZyA9ICRjb25maWc7XG4gICAgdGhpcy4kY29udGV4dC5zZXREZXBlbmRlbmN5KCdUYWcnKTtcbn1cblxuLyoqXG4gKiBDdXJyZW50IGFwcGxpY2F0aW9uIGNvbmZpZy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5QYWdlcy5wcm90b3R5cGUuX2NvbmZpZyA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBsaWZldGltZSBvZiBkYXRhIChpbiBtaWxsaXNlY29uZHMpIHRoYXQgaXMgcmV0dXJuZWQgYnkgdGhpcyBzdG9yZS5cbiAqIEB0eXBlIHtudW1iZXJ9IExpZmV0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAqL1xuUGFnZXMucHJvdG90eXBlLiRsaWZldGltZSA9IDM2MDAwMDA7XG5cbi8qKlxuICogTG9hZHMgZGF0YSBmcm9tIHJlbW90ZSBzb3VyY2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gTG9hZGVkIGRhdGEuXG4gKi9cblBhZ2VzLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY3VycmVudFBhZ2UgPSBzZWxmLiRjb250ZXh0LnN0YXRlLnBhZ2U7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKDEpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSA9PSBcIm1hc3Rlci1ydWJyaWthXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCdUYWcnKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UGFnZSA9PSBcIm1hc3Rlci1wYWdlXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCdtYXN0ZXIvTWFzdGVySXRlbScpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlID09IFwibmV3cy1pdGVtXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCdvdGhlci9OZXdzSXRlbScpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlID09IFwidmFjYW5jeS1pdGVtXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCdvdGhlci9WYWNhbmN5SXRlbScpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRQYWdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGNvbnRleHQucmVkaXJlY3QoJy9tYWluJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghUEFHRVMuaGFzT3duUHJvcGVydHkoY3VycmVudFBhZ2UpKSB7XG4gICAgICAgICAgICAgICAgc2VsZi4kY29udGV4dC5ub3RGb3VuZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQ6IGN1cnJlbnRQYWdlLFxuICAgICAgICAgICAgICAgIGlzQWN0aXZlOiB7fSxcblxuICAgICAgICAgICAgICAgIGhlYWRlcjogc2VsZi5nZXRIZWFkZXJEYXRhKCksXG4gICAgICAgICAgICAgICAgZm9vdGVyOiBzZWxmLmdldEZvb3RlckRhdGEoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKFBBR0VTKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5pc0FjdGl2ZVtwYWdlXSA9IChjdXJyZW50UGFnZSA9PT0gcGFnZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbn07XG5cblBhZ2VzLnByb3RvdHlwZS5nZXRIZWFkZXJEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHZpc2l0Q291bnQ6ICcxMiAzMjMg0L/QvtGB0LXRidC10L3QuNC5JyxcbiAgICAgICAgaXNHdWVzdDogdHJ1ZVxuICAgIH07XG59O1xuXG5QYWdlcy5wcm90b3R5cGUuZ2V0Rm9vdGVyRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBwaG9uZTogJyg4NDgyKSA3NC00NC0xOSdcbiAgICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFnaW5hdG9yO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IFN0b3JlIGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI3N0b3Jlc1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwiUGFnaW5hdG9yXCIgc3RvcmUuXG4gKiBAcGFyYW0ge1VIUn0gJHVociBVbml2ZXJzYWwgSFRUUCByZXF1ZXN0LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFBhZ2luYXRvcigkdWhyKSB7XG4gICAgdGhpcy5fdWhyID0gJHVocjtcbiAgICB0aGlzLl9tb2RlbDtcbn1cblxuLyoqXG4gKiBDdXJyZW50IHVuaXZlcnNhbCBIVFRQIHJlcXVlc3QgdG8gZG8gaXQgaW4gaXNvbW9ycGhpYyB3YXkuXG4gKiBAdHlwZSB7VUhSfVxuICogQHByaXZhdGVcbiAqL1xuUGFnaW5hdG9yLnByb3RvdHlwZS5fdWhyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGxpZmV0aW1lIG9mIGRhdGEgKGluIG1pbGxpc2Vjb25kcykgdGhhdCBpcyByZXR1cm5lZCBieSB0aGlzIHN0b3JlLlxuICogQHR5cGUge251bWJlcn0gTGlmZXRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5QYWdpbmF0b3IucHJvdG90eXBlLiRsaWZldGltZSA9IDYwMDAwO1xuXG4vKipcbiAqIExvYWRzIGRhdGEgZnJvbSByZW1vdGUgc291cmNlLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IExvYWRlZCBkYXRhLlxuICovXG5QYWdpbmF0b3IucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9tb2RlbClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBjdXJyZW50UGFnZSA9IHRoaXMuJGNvbnRleHQuc3RhdGUuY3VycmVudFBhZ2UgfHwgMTtcblxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoMSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKHNlbGYuX21vZGVsKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGNvbnRleHQuc2VuZEFjdGlvbihzZWxmLl9tb2RlbCwgXCJnZXRQYWdpbmF0b3JcIilcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhWydpcy1wYWdpbmF0b3InXSA9PSBmYWxzZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IGRhdGEuY3VycmVudCAtIDQgPCAwID8gMSA6IGRhdGEuY3VycmVudCAtIDQ7XG4gICAgICAgICAgICB2YXIgZW5kID0gc3RhcnQgKyA5IDwgZGF0YS5jb3VudCA/IHN0YXJ0ICsgOSA6IGRhdGEuY291bnQ7XG4gICAgICAgICAgICB2YXIgbGlzdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDw9IGVuZDsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgXCJpcy1zZWxlY3RlZFwiOiAoZGF0YS5jdXJyZW50ID09IGkpLFxuICAgICAgICAgICAgICAgICAgICBcInVybFwiOiBkYXRhLnVybCArIGksXG4gICAgICAgICAgICAgICAgICAgIFwibnVtYmVyXCI6IGlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtb2RlbDogc2VsZi5fbW9kZWwsXG4gICAgICAgICAgICAgICAgXCJpcy1wYWdpbmF0b3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICB1cmw6IGRhdGEudXJsICsgMVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogZGF0YS51cmwgKyBkYXRhLmNvdW50XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsaXN0OiBsaXN0XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIGFjdGlvbiBuYW1lZCBcInNvbWUtYWN0aW9uXCIgZnJvbSBhbnkgY29tcG9uZW50LlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IFJlc3BvbnNlIHRvIGNvbXBvbmVudC5cbiAqL1xuUGFnaW5hdG9yLnByb3RvdHlwZS5oYW5kbGVTZXRNb2RlbCA9IGZ1bmN0aW9uIChtb2RlbCkge1xuICAgIHRoaXMuX21vZGVsID0gbW9kZWw7XG59O1xuUGFnaW5hdG9yLnByb3RvdHlwZS5oYW5kbGVHZXRDdXJyZW50UGFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kY29udGV4dC5zdGF0ZS5jdXJyZW50UGFnZSB8fCAxO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRhZztcblxuLypcbiAqIFRoaXMgaXMgYSBDYXRiZXJyeSBTdG9yZSBmaWxlLlxuICogTW9yZSBkZXRhaWxzIGNhbiBiZSBmb3VuZCBoZXJlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCNzdG9yZXNcbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBcInRhZ1wiIHN0b3JlLlxuICogQHBhcmFtIHtVSFJ9ICR1aHIgVW5pdmVyc2FsIEhUVFAgcmVxdWVzdC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBUYWcoJHVocikge1xuICAgIHRoaXMuX3VociA9ICR1aHI7XG4gICAgdGhpcy4kY29udGV4dC5zZXREZXBlbmRlbmN5KCdydWJyaWthL1J1YnJpa2EnKTtcbn1cblxuLyoqXG4gKiBDdXJyZW50IHVuaXZlcnNhbCBIVFRQIHJlcXVlc3QgdG8gZG8gaXQgaW4gaXNvbW9ycGhpYyB3YXkuXG4gKiBAdHlwZSB7VUhSfVxuICogQHByaXZhdGVcbiAqL1xuVGFnLnByb3RvdHlwZS5fdWhyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGxpZmV0aW1lIG9mIGRhdGEgKGluIG1pbGxpc2Vjb25kcykgdGhhdCBpcyByZXR1cm5lZCBieSB0aGlzIHN0b3JlLlxuICogQHR5cGUge251bWJlcn0gTGlmZXRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5UYWcucHJvdG90eXBlLiRsaWZldGltZSA9IDYwMDAwO1xuXG4vKipcbiAqIExvYWRzIGRhdGEgZnJvbSByZW1vdGUgc291cmNlLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IExvYWRlZCBkYXRhLlxuICovXG5UYWcucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBzZWN0aW9uID0gdGhpcy4kY29udGV4dC5zdGF0ZS5zZWN0aW9uIHx8ICdtYXN0ZXInO1xuICAgIHZhciB0YWcgPSB0aGlzLiRjb250ZXh0LnN0YXRlLnRhZyB8fCAnJztcbiAgICB2YXIgZGF0YSA9IHt9O1xuXG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKFwicnVicmlrYS9SdWJyaWthXCIpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChydWJyaWthKSB7XG4gICAgICAgICAgICBkYXRhLnJ1YnJpa2EgPSBydWJyaWthO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGFnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhdGggPSAnaHR0cDovL2FwaS1mbS5wcmVzZW50LXRsdC5ydS90YWcnO1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcjogJ1tcImFuZFwiLFtcIj1cIiwgXCJ1bmlxdWVcIiwgXCInICsgdGFnICsgJ1wiXSxbXCI9XCIsXCJzdGF0dXNcIixcIjFcIl1dJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZDogJ3NlbydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3Voci5nZXQocGF0aCwgb3B0aW9uKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cy5jb2RlID49IDQwMCAmJiByZXN1bHQuc3RhdHVzLmNvZGUgPCA2MDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LnN0YXR1cy50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuY29udGVudFswXTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHRhZ0RhdGEpIHtcbiAgICAgICAgICAgIGlmICh0YWcgJiYgdGFnRGF0YSA9PSB7fSlcbiAgICAgICAgICAgICAgICBzZWxmLiRjb250ZXh0Lm5vdEZvdW5kKCk7XG5cbiAgICAgICAgICAgIGRhdGEudGFnID0gdGFnRGF0YTtcbiAgICAgICAgICAgIGRhdGEuc2VjdGlvbiA9IHNlY3Rpb247XG4gICAgICAgICAgICBkYXRhLmN1cnJlbnRTZW8gPSB0YWcgPyBzZWxmLl9nZXRDdXJyZW50U2VvKGRhdGEudGFnLCBkYXRhLnNlY3Rpb24pIDogc2VsZi5fZ2V0Q3VycmVudFNlbyhkYXRhLnJ1YnJpa2EsIGRhdGEuc2VjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYWN0aW9uIG5hbWVkIFwic29tZS1hY3Rpb25cIiBmcm9tIGFueSBjb21wb25lbnQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gUmVzcG9uc2UgdG8gY29tcG9uZW50LlxuICovXG5UYWcucHJvdG90eXBlLmhhbmRsZVNvbWVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gSGVyZSB5b3UgY2FuIGNhbGwgdGhpcy4kY29udGV4dC5jaGFuZ2VkKCkgaWYgeW91IGtub3dcbiAgICAvLyB0aGF0IHJlbW90ZSBkYXRhIHNvdXJjZSBoYXMgYmVlbiBjaGFuZ2VkLlxuICAgIC8vIEFsc28geW91IGNhbiBoYXZlIG1hbnkgaGFuZGxlIG1ldGhvZHMgZm9yIG90aGVyIGFjdGlvbnMuXG59O1xuXG5UYWcucHJvdG90eXBlLl9nZXRDdXJyZW50U2VvID0gZnVuY3Rpb24gKGRhdGEsIHNlY3Rpb24pIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHZhciBzZW8gPSBkYXRhLnNlbztcblxuICAgIE9iamVjdC5rZXlzKHNlbylcbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24gPT0gc2VvW2tleV0uc2VjdGlvbilcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzZW9ba2V5XTtcbiAgICAgICAgfSk7XG4gICAgaWYgKCFyZXN1bHQpXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoZWFkVGl0bGU6IGRhdGEubmFtZSxcbiAgICAgICAgICAgIHBhZ2VUaXRsZTogZGF0YS5uYW1lXG4gICAgICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGF0ZUZvcm1hdCA9IHJlcXVpcmUoJy4uLy4uL2xpYi91dGlsL0RhdGVGb3JtYXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXN0ZXJJdGVtO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IFN0b3JlIGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI3N0b3Jlc1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwibWFzdGVyL01hc3Rlckl0ZW1cIiBzdG9yZS5cbiAqIEBwYXJhbSB7VUhSfSAkdWhyIFVuaXZlcnNhbCBIVFRQIHJlcXVlc3QuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFzdGVySXRlbSgkdWhyKSB7XG4gICAgdGhpcy5fdWhyID0gJHVocjtcbn1cblxuLyoqXG4gKiBDdXJyZW50IHVuaXZlcnNhbCBIVFRQIHJlcXVlc3QgdG8gZG8gaXQgaW4gaXNvbW9ycGhpYyB3YXkuXG4gKiBAdHlwZSB7VUhSfVxuICogQHByaXZhdGVcbiAqL1xuTWFzdGVySXRlbS5wcm90b3R5cGUuX3VociA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBsaWZldGltZSBvZiBkYXRhIChpbiBtaWxsaXNlY29uZHMpIHRoYXQgaXMgcmV0dXJuZWQgYnkgdGhpcyBzdG9yZS5cbiAqIEB0eXBlIHtudW1iZXJ9IExpZmV0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAqL1xuTWFzdGVySXRlbS5wcm90b3R5cGUuJGxpZmV0aW1lID0gNjAwMDA7XG5cbi8qKlxuICogTG9hZHMgZGF0YSBmcm9tIHJlbW90ZSBzb3VyY2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gTG9hZGVkIGRhdGEuXG4gKi9cbk1hc3Rlckl0ZW0ucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBpZCA9IHRoaXMuJGNvbnRleHQuc3RhdGUuaXRlbTtcbiAgICBpZiAoIWlkKVxuICAgICAgICByZXR1cm47XG5cbiAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBub3cgPSBkYXRlRm9ybWF0KG5vdywgXCJ5eXl5LW1tLWRkXCIpO1xuICAgIHZhciBwYXRoID0gJ2h0dHA6Ly9hcGktZm0ucHJlc2VudC10bHQucnUvbWFzdGVyLXBhZ2UnO1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBmaWx0ZXI6ICdbXCJhbmRcIiwgW1wiPVwiLFwibnVtYmVyXCIsIFwiJyArIGlkICsgJ1wiXSxbXCI8PVwiLCBcImRhdGVTdGFydFwiLCBcIicgKyBub3cgKyAnXCJdLFtcIj49XCIsIFwiZGF0ZUVuZFwiLCBcIicgKyBub3cgKyAnXCJdXSdcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuX3Voci5nZXQocGF0aCwgb3B0aW9ucylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMuY29kZSA+PSA0MDAgJiYgcmVzdWx0LnN0YXR1cy5jb2RlIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5zdGF0dXMudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0LmNvbnRlbnQubGVuZ3RoID09IDApXG4gICAgICAgICAgICAgICAgc2VsZi4kY29udGV4dC5ub3RGb3VuZCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmNvbnRlbnRbMF07XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgICAgICB2YXIgcGF0aE0gPSAnaHR0cDovL2FwaS1mbS5wcmVzZW50LXRsdC5ydS9tYXN0ZXInO1xuICAgICAgICAgICAgdmFyIG9wdGlvbk0gPSB7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6ICdbXCJhbmRcIiwgW1wiPVwiLCBcImlkXCIsIFwiJyArIHBhZ2UubWFzdGVySUQgKyAnXCJdLFtcIj1cIixcInB1YmxpY1N0YXR1c1wiLCBcIjFcIl1dJyxcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kOiAnY29udGFjdHMsYXJ0aWNsZXMsY29tbWVudHMsZGlzdHJpY3RzLGFsYnVtcyxzYWxlcyxzY2hlZHVsZSx2aWRlb3Msd29ya0NvbmRpdGlvbixjYWxsYmFja3MsdmtMaWtlcyxydWJyaWthLHRhZ3MsY29tcGFueSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX3Voci5nZXQocGF0aE0sIG9wdGlvbk0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cy5jb2RlID49IDQwMCAmJiByZXN1bHQuc3RhdHVzLmNvZGUgPCA2MDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuc3RhdHVzLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuY29udGVudC5sZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJGNvbnRleHQubm90Rm91bmQoKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3VsdC5jb250ZW50WzBdO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnNlcnZpY2VzID0gSlNPTi5wYXJzZShkYXRhLnNlcnZpY2VzKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pc0Jsb2NrID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VzczogcGFnZS5zZXJ2aWNlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcItCj0YHQu9GD0LPQuFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcms6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCLQo9GB0LvQvtCy0LjRjyDRgNCw0LHQvtGC0YtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzOiBwYWdlLnNhbGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwi0KHQutC40LTQutC4INC4INC/0L7QtNCw0YDQutC4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiAoZGF0YS5zYWxlcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFib3V0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwi0J4g0YHQtdCx0LVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IGRhdGEuYWJvdXRFZHVjIHx8IGRhdGEuYWJvdXRFeHAgfHxkYXRhLmFib3V0QWRkSW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFydGljbGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3M6IHBhZ2UuYXJ0aWNsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCLQn9C+0LvQtdC30L3QviDQv9C+0YfQuNGC0LDRgtGMXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiAoZGF0YS5hcnRpY2xlcy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzOiBwYWdlLmFsYnVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcItCk0L7RgtC+XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiAoZGF0YS5hbGJ1bXMubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWRlbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VzczogcGFnZS52aWRlb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCLQktC40LTQtdC+XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiAoZGF0YS52aWRlb3MubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzOiBwYWdlLmxpbmtzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwi0KHRgdGL0LvQutC4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiAoZGF0YS5jb250YWN0cy5saW5rcylcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICByZXZpZXc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3M6IHBhZ2UuY29tbWVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCLQntGC0LfRi9Cy0Ysg0Lgg0YDQtdC60L7QvNC10L3QtNCw0YbQuNC4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucGFnZSA9IHBhZ2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbn07XG5cbi8qKlxuICogSGFuZGxlcyBhY3Rpb24gbmFtZWQgXCJzb21lLWFjdGlvblwiIGZyb20gYW55IGNvbXBvbmVudC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBSZXNwb25zZSB0byBjb21wb25lbnQuXG4gKi9cbk1hc3Rlckl0ZW0ucHJvdG90eXBlLmhhbmRsZVNvbWVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gSGVyZSB5b3UgY2FuIGNhbGwgdGhpcy4kY29udGV4dC5jaGFuZ2VkKCkgaWYgeW91IGtub3dcbiAgICAvLyB0aGF0IHJlbW90ZSBkYXRhIHNvdXJjZSBoYXMgYmVlbiBjaGFuZ2VkLlxuICAgIC8vIEFsc28geW91IGNhbiBoYXZlIG1hbnkgaGFuZGxlIG1ldGhvZHMgZm9yIG90aGVyIGFjdGlvbnMuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hc3Rlckxpc3Q7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgU3RvcmUgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjc3RvcmVzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJtYXN0ZXIvbWFzdGVyTGlzdFwiIHN0b3JlLlxuICogQHBhcmFtIHtVSFJ9ICR1aHIgVW5pdmVyc2FsIEhUVFAgcmVxdWVzdC50aGlzXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFzdGVyTGlzdCgkdWhyKSB7XG4gICAgdGhpcy5fdWhyID0gJHVocjtcbiAgICB0aGlzLl9jdXJyZW50RmVlZCA9IFtdO1xuICAgIHRoaXMuJGNvbnRleHQuc2V0RGVwZW5kZW5jeSgnVGFnJyk7XG59XG5cbk1hc3Rlckxpc3QucHJvdG90eXBlLl9jdXJyZW50RmVlZCA9IG51bGw7XG5NYXN0ZXJMaXN0LnByb3RvdHlwZS5fY3VycmVudFBhZ2UgPSAxO1xuTWFzdGVyTGlzdC5wcm90b3R5cGUuX2lzRmluaXNoZWQgPSBmYWxzZTtcblxuLyoqXG4gKiBDdXJyZW50IHVuaXZlcnNhbCBIVFRQIHJlcXVlc3QgdG8gZG8gaXQgaW4gaXNvbW9ycGhpYyB3YXkuXG4gKiBAdHlwZSB7VUhSfVxuICogQHByaXZhdGVcbiAqL1xuTWFzdGVyTGlzdC5wcm90b3R5cGUuX3VociA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBsaWZldGltZSBvZiBkYXRhIChpbiBtaWxsaXNlY29uZHMpIHRoYXQgaXMgcmV0dXJuZWQgYnkgdGhpcyBzdG9yZS5cbiAqIEB0eXBlIHtudW1iZXJ9IExpZmV0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAqL1xuTWFzdGVyTGlzdC5wcm90b3R5cGUuJGxpZmV0aW1lID0gNjAwMDA7XG5cbi8qKlxuICogTG9hZHMgZGF0YSBmcm9tIHJlbW90ZSBzb3VyY2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gTG9hZGVkIGRhdGEuXG4gKi9cbk1hc3Rlckxpc3QucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKCdUYWcnKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgICAgICBpZiAoIXRhZy5ydWJyaWthKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHNlbGYuX2NsZWFyRmVlZCh0YWcpO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2xvYWREYXRhUGVyUGFnZShzZWxmLl9jdXJyZW50UGFnZSwgdGFnLnJ1YnJpa2EuaWQsIHRhZy50YWcuaWQpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCB8fCByZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5faXNGaW5pc2hlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2N1cnJlbnRGZWVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9zdHJ1Y3J1clJlc3VsdChyZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5fY3VycmVudEZlZWQgPSBzZWxmLl9jdXJyZW50RmVlZC5jb25jYXQocmVzdWx0KTtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9jdXJyZW50RmVlZDtcbiAgICAgICAgfSk7XG59O1xuTWFzdGVyTGlzdC5wcm90b3R5cGUuX2NsZWFyRmVlZCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICB0aGlzLl9jdXJyZW50UnVicmlrYSA9IHRoaXMuX2N1cnJlbnRSdWJyaWthIHx8IHRhZy5ydWJyaWthLmlkO1xuICAgIHRoaXMuX2N1cnJlbnRUYWcgPSB0aGlzLl9jdXJyZW50VGFnIHx8IHRhZy50YWcuaWQ7XG4gICAgaWYgKHRoaXMuX2N1cnJlbnRSdWJyaWthICE9IHRhZy5ydWJyaWthLmlkIHx8IHRoaXMuX2N1cnJlbnRUYWcgIT0gdGFnLnRhZy5pZCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50RmVlZCA9IFtdO1xuICAgICAgICB0aGlzLl9jdXJyZW50UGFnZSA9IDE7XG4gICAgICAgIHRoaXMuX2lzRmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fY3VycmVudFJ1YnJpa2EgPSB0YWcucnVicmlrYS5pZDtcbiAgICAgICAgdGhpcy5fY3VycmVudFRhZyA9IHRhZy50YWcuaWQ7XG4gICAgfVxufTtcbk1hc3Rlckxpc3QucHJvdG90eXBlLl9sb2FkRGF0YVBlclBhZ2UgPSBmdW5jdGlvbiAocGFnZSwgcnVicmlrYUlELCB0YWdJRCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcGF0aCA9ICdodHRwOi8vYXBpLWZtLnByZXNlbnQtdGx0LnJ1L21hc3Rlci9hY3RpdmUnO1xuICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBmaWx0ZXI6ICdbXCJhbmRcIixbXCI9XCIsIFwicnVicmlrYUlEXCIsIFwiJyArIHJ1YnJpa2FJRCArICdcIl1dJyxcbiAgICAgICAgICAgIGV4cGFuZDogJ2NvbW1lbnRzLHNhbGVzLHZpZGVvcyx2a0xpa2VzLGFsYnVtcyxjb250YWN0cyxwYWdlLGNvbXBhbnknLFxuICAgICAgICAgICAgb3JkZXI6ICdzb3J0JyxcbiAgICAgICAgICAgIHBhZ2U6IHBhZ2VcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKHRhZ0lEKSB7XG4gICAgICAgIHBhdGggPSAnaHR0cDovL2FwaS1mbS5wcmVzZW50LXRsdC5ydS9tYXN0ZXIvYnl0YWcvJyArIHRhZ0lEO1xuICAgIH1cblxuICAgIHJldHVybiBzZWxmLl91aHIuZ2V0KHBhdGgsIG9wdGlvbnMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzLmNvZGUgPj0gNDAwICYmIHJlc3VsdC5zdGF0dXMuY29kZSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuc3RhdHVzLnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5jb250ZW50O1xuICAgICAgICB9KTtcbn07XG5cbk1hc3Rlckxpc3QucHJvdG90eXBlLl9zdHJ1Y3J1clJlc3VsdCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAobWFzdGVyKSB7XG4gICAgICAgIG1hc3Rlci5zZXJ2aWNlcyA9IEpTT04ucGFyc2UobWFzdGVyLnNlcnZpY2VzKTtcbiAgICAgICAgaWYgKG1hc3Rlci52a0xpa2VzKSB7XG4gICAgICAgICAgICBtYXN0ZXIudmtMaWtlcy5jb3VudExpa2VzID0gbWFzdGVyLnZrTGlrZXMuY291bnRMaWtlcyA/IG1hc3Rlci52a0xpa2VzLmNvdW50TGlrZXMgOiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWFzdGVyLnZrTGlrZXMgPSB7fTtcbiAgICAgICAgICAgIG1hc3Rlci52a0xpa2VzLmNvdW50TGlrZXMgPSAwO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuLyoqXG4gKiBIYW5kbGVzIGFjdGlvbiBuYW1lZCBcInNvbWUtYWN0aW9uXCIgZnJvbSBhbnkgY29tcG9uZW50LlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IFJlc3BvbnNlIHRvIGNvbXBvbmVudC5cbiAqL1xuTWFzdGVyTGlzdC5wcm90b3R5cGUuaGFuZGxlR2V0TmV4dFBhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2lzRmluaXNoZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzZWxmLl9jdXJyZW50RmVlZCB8fCBzZWxmLl9jdXJyZW50RmVlZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5sb2FkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICBzZWxmLl9jdXJyZW50UGFnZSsrO1xuICAgICAgICAgICAgc2VsZi4kY29udGV4dC5jaGFuZ2VkKCk7XG4gICAgICAgIH0pO1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hc3RlclNvdmV0eTtcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG5cdFx0U3RvcmVQYWdpbmF0b3IgPSByZXF1aXJlKCcuLi8uLi9saWIvU3RvcmVQYWdpbmF0b3InKTtcblxudXRpbC5pbmhlcml0cyhNYXN0ZXJTb3ZldHksIFN0b3JlUGFnaW5hdG9yKTtcblxuZnVuY3Rpb24gTWFzdGVyU292ZXR5KCkge1xuXHRTdG9yZVBhZ2luYXRvci5jYWxsKHRoaXMpO1xuXHR0aGlzLl9wYXRoID0gJ2h0dHA6Ly9hcGktZm0ucHJlc2VudC10bHQucnUvYXJ0aWNsZS9hY3RpdmUnO1xuXHR0aGlzLl9vcHRpb25zID0ge1xuXHRcdGRhdGE6IHtcblx0XHRcdG9yZGVyOiAnaWQgREVTQydcblx0XHR9XG5cdH07XG5cdHRoaXMuX3VybCA9IFwiL3NvdmV0eS9wYWdlL1wiO1xuXHR0aGlzLl9jYXRhbG9nID0gdGhpcy4kY29udGV4dC5zdGF0ZS5jYXRhbG9nO1xuXHRpZiAodGhpcy5fY2F0YWxvZykge1xuXHRcdHRoaXMuX29wdGlvbnMuZGF0YS5maWx0ZXIgPSAnW1tcIj1cIixcInJ1YnJpa2FJRFwiLFwiJyArIHRoaXMuX2NhdGFsb2cgKyAnXCJdXSc7XG5cdFx0dGhpcy5fdXJsID0gXCIvc292ZXR5L2NhdGFsb2cvXCIgKyB0aGlzLl9jYXRhbG9nICsgXCIvcGFnZS9cIjtcblx0fVxufSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBNYXN0ZXJWaWRlbztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG4gICAgU3RvcmVQYWdpbmF0b3IgPSByZXF1aXJlKCcuLi8uLi9saWIvU3RvcmVQYWdpbmF0b3InKTtcblxudXRpbC5pbmhlcml0cyhNYXN0ZXJWaWRlbywgU3RvcmVQYWdpbmF0b3IpO1xuXG5mdW5jdGlvbiBNYXN0ZXJWaWRlbygpIHtcbiAgICBTdG9yZVBhZ2luYXRvci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuX3BhdGggPSAnaHR0cDovL2FwaS1mbS5wcmVzZW50LXRsdC5ydS92aWRlby9hY3RpdmUnO1xuICAgIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIG9yZGVyOiAnaWQgREVTQydcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5fdXJsID0gXCIvdmlkZW8vcGFnZS9cIjtcbiAgICB0aGlzLl9jYXRhbG9nID0gdGhpcy4kY29udGV4dC5zdGF0ZS5jYXRhbG9nO1xuICAgIGlmICh0aGlzLl9jYXRhbG9nKSB7XG4gICAgICAgIHRoaXMuX29wdGlvbnMuZGF0YS5maWx0ZXIgPSAnW1tcIj1cIixcInJ1YnJpa2FJRFwiLFwiJyArIHRoaXMuX2NhdGFsb2cgKyAnXCJdXSc7XG4gICAgICAgIHRoaXMuX3VybCA9IFwiL3ZpZGVvL2NhdGFsb2cvXCIgKyB0aGlzLl9jYXRhbG9nICsgXCIvcGFnZS9cIjtcbiAgICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlY29tbWVuZGVkO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IFN0b3JlIGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI3N0b3Jlc1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwibWFzdGVyL1JlY29tbWVuZGVkXCIgc3RvcmUuXG4gKiBAcGFyYW0ge1VIUn0gJHVociBVbml2ZXJzYWwgSFRUUCByZXF1ZXN0LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJlY29tbWVuZGVkKCR1aHIpIHtcblx0dGhpcy5fdWhyID0gJHVocjtcbn1cblxuLyoqXG4gKiBDdXJyZW50IHVuaXZlcnNhbCBIVFRQIHJlcXVlc3QgdG8gZG8gaXQgaW4gaXNvbW9ycGhpYyB3YXkuXG4gKiBAdHlwZSB7VUhSfVxuICogQHByaXZhdGVcbiAqL1xuUmVjb21tZW5kZWQucHJvdG90eXBlLl91aHIgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgbGlmZXRpbWUgb2YgZGF0YSAoaW4gbWlsbGlzZWNvbmRzKSB0aGF0IGlzIHJldHVybmVkIGJ5IHRoaXMgc3RvcmUuXG4gKiBAdHlwZSB7bnVtYmVyfSBMaWZldGltZSBpbiBtaWxsaXNlY29uZHMuXG4gKi9cblJlY29tbWVuZGVkLnByb3RvdHlwZS4kbGlmZXRpbWUgPSA2MDAwMDtcblxuLyoqXG4gKiBMb2FkcyBkYXRhIGZyb20gcmVtb3RlIHNvdXJjZS5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBMb2FkZWQgZGF0YS5cbiAqL1xuUmVjb21tZW5kZWQucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdC8vIEhlcmUgeW91IGNhbiBkbyBhbnkgSFRUUCByZXF1ZXN0cyB1c2luZyB0aGlzLl91aHIuXG5cdC8vIFBsZWFzZSByZWFkIGRldGFpbHMgaGVyZSBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnktdWhyLlxufTtcblxuLyoqXG4gKiBIYW5kbGVzIGFjdGlvbiBuYW1lZCBcInNvbWUtYWN0aW9uXCIgZnJvbSBhbnkgY29tcG9uZW50LlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IFJlc3BvbnNlIHRvIGNvbXBvbmVudC5cbiAqL1xuUmVjb21tZW5kZWQucHJvdG90eXBlLmhhbmRsZVNvbWVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG5cdC8vIEhlcmUgeW91IGNhbiBjYWxsIHRoaXMuJGNvbnRleHQuY2hhbmdlZCgpIGlmIHlvdSBrbm93XG5cdC8vIHRoYXQgcmVtb3RlIGRhdGEgc291cmNlIGhhcyBiZWVuIGNoYW5nZWQuXG5cdC8vIEFsc28geW91IGNhbiBoYXZlIG1hbnkgaGFuZGxlIG1ldGhvZHMgZm9yIG90aGVyIGFjdGlvbnMuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5ld3M7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIFN0b3JlUGFnaW5hdG9yID0gcmVxdWlyZSgnLi4vLi4vbGliL1N0b3JlUGFnaW5hdG9yJyk7XG5cbnV0aWwuaW5oZXJpdHMoTmV3cywgU3RvcmVQYWdpbmF0b3IpO1xuXG5mdW5jdGlvbiBOZXdzKCkge1xuICAgIFN0b3JlUGFnaW5hdG9yLmNhbGwodGhpcyk7XG4gICAgdGhpcy5fcGF0aCA9ICdodHRwOi8vYXBpLWZtLnByZXNlbnQtdGx0LnJ1L2Fib3V0LW5ld3MnO1xuICAgIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGZpbHRlcjogJ1tcImFuZFwiLFtcIj1cIixcInN0YXR1c1wiLFwiMVwiXV0nLFxuICAgICAgICAgICAgb3JkZXI6ICdkYXRlIERFU0MnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuX3VybCA9IFwiL25ld3MvcGFnZS9cIjtcbn0iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gTmV3c0l0ZW07XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgU3RvcmUgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjc3RvcmVzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJvdGhlci9OZXdzSXRlbVwiIHN0b3JlLlxuICogQHBhcmFtIHtVSFJ9ICR1aHIgVW5pdmVyc2FsIEhUVFAgcmVxdWVzdC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBOZXdzSXRlbSgkdWhyKSB7XG4gICAgdGhpcy5fdWhyID0gJHVocjtcbn1cblxuLyoqXG4gKiBDdXJyZW50IHVuaXZlcnNhbCBIVFRQIHJlcXVlc3QgdG8gZG8gaXQgaW4gaXNvbW9ycGhpYyB3YXkuXG4gKiBAdHlwZSB7VUhSfVxuICogQHByaXZhdGVcbiAqL1xuTmV3c0l0ZW0ucHJvdG90eXBlLl91aHIgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgbGlmZXRpbWUgb2YgZGF0YSAoaW4gbWlsbGlzZWNvbmRzKSB0aGF0IGlzIHJldHVybmVkIGJ5IHRoaXMgc3RvcmUuXG4gKiBAdHlwZSB7bnVtYmVyfSBMaWZldGltZSBpbiBtaWxsaXNlY29uZHMuXG4gKi9cbk5ld3NJdGVtLnByb3RvdHlwZS4kbGlmZXRpbWUgPSA2MDAwMDtcblxuLyoqXG4gKiBMb2FkcyBkYXRhIGZyb20gcmVtb3RlIHNvdXJjZS5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBMb2FkZWQgZGF0YS5cbiAqL1xuTmV3c0l0ZW0ucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBpdGVtID0gdGhpcy4kY29udGV4dC5zdGF0ZS5pdGVtO1xuICAgIHZhciBwYXRoID0gJ2h0dHA6Ly9hcGktZm0ucHJlc2VudC10bHQucnUvYWJvdXQtbmV3cyc7XG4gICAgaWYgKCFpdGVtKVxuICAgICAgICByZXR1cm47XG5cbiAgICB2YXIgb3B0aW9uID0ge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBmaWx0ZXI6ICdbXCJhbmRcIixbXCI9XCIsXCJpZFwiLFwiJyArIGl0ZW0gKyAnXCJdLFtcIj1cIiwgXCJzdGF0dXNcIiwgXCIxXCJdXSdcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuX3Voci5nZXQocGF0aCwgb3B0aW9uKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMuY29kZSA+PSA0MDAgJiYgcmVzdWx0LnN0YXR1cy5jb2RlIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5zdGF0dXMudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0LmNvbnRlbnQubGVuZ3RoID09IDApXG4gICAgICAgICAgICAgICAgc2VsZi4kY29udGV4dC5ub3RGb3VuZCgpO1xuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmNvbnRlbnRbMF07XG4gICAgICAgIH0pO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIGFjdGlvbiBuYW1lZCBcInNvbWUtYWN0aW9uXCIgZnJvbSBhbnkgY29tcG9uZW50LlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IFJlc3BvbnNlIHRvIGNvbXBvbmVudC5cbiAqL1xuTmV3c0l0ZW0ucHJvdG90eXBlLmhhbmRsZVNvbWVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBIZXJlIHlvdSBjYW4gY2FsbCB0aGlzLiRjb250ZXh0LmNoYW5nZWQoKSBpZiB5b3Uga25vd1xuICAgIC8vIHRoYXQgcmVtb3RlIGRhdGEgc291cmNlIGhhcyBiZWVuIGNoYW5nZWQuXG4gICAgLy8gQWxzbyB5b3UgY2FuIGhhdmUgbWFueSBoYW5kbGUgbWV0aG9kcyBmb3Igb3RoZXIgYWN0aW9ucy5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVjb21tZW5kYXRpb247XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuICAgIFN0b3JlUGFnaW5hdG9yID0gcmVxdWlyZSgnLi4vLi4vbGliL1N0b3JlUGFnaW5hdG9yJyk7XG5cbnV0aWwuaW5oZXJpdHMoUmVjb21tZW5kYXRpb24sIFN0b3JlUGFnaW5hdG9yKTtcblxuZnVuY3Rpb24gUmVjb21tZW5kYXRpb24oKSB7XG4gICAgU3RvcmVQYWdpbmF0b3IuY2FsbCh0aGlzKTtcbiAgICB0aGlzLl9wYXRoID0gJ2h0dHA6Ly9hcGktZm0ucHJlc2VudC10bHQucnUvYWJvdXQtY29tbWVudCc7XG4gICAgdGhpcy5fdXJsID0gXCIvcmVjb21tZW5kYXRpb24vcGFnZS9cIjtcbn0iLCIndXNlIHN0cmljdCc7XG52YXIgZGF0ZUZvcm1hdCA9IHJlcXVpcmUoJy4uLy4uL2xpYi91dGlsL0RhdGVGb3JtYXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBWYWNhbmN5O1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IFN0b3JlIGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI3N0b3Jlc1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwib3RoZXIvdmFjYW5jeVwiIHN0b3JlLlxuICogQHBhcmFtIHtVSFJ9ICR1aHIgVW5pdmVyc2FsIEhUVFAgcmVxdWVzdC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBWYWNhbmN5KCR1aHIpIHtcbiAgICB0aGlzLl91aHIgPSAkdWhyO1xufVxuXG4vKipcbiAqIEN1cnJlbnQgdW5pdmVyc2FsIEhUVFAgcmVxdWVzdCB0byBkbyBpdCBpbiBpc29tb3JwaGljIHdheS5cbiAqIEB0eXBlIHtVSFJ9XG4gKiBAcHJpdmF0ZVxuICovXG5WYWNhbmN5LnByb3RvdHlwZS5fdWhyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGxpZmV0aW1lIG9mIGRhdGEgKGluIG1pbGxpc2Vjb25kcykgdGhhdCBpcyByZXR1cm5lZCBieSB0aGlzIHN0b3JlLlxuICogQHR5cGUge251bWJlcn0gTGlmZXRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5WYWNhbmN5LnByb3RvdHlwZS4kbGlmZXRpbWUgPSA2MDAwMDtcblxuLyoqXG4gKiBMb2FkcyBkYXRhIGZyb20gcmVtb3RlIHNvdXJjZS5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBMb2FkZWQgZGF0YS5cbiAqL1xuVmFjYW5jeS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aCA9ICdodHRwOi8vYXBpLWZtLnByZXNlbnQtdGx0LnJ1L2Fib3V0LXZhY2FuY3knO1xuICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgIG5vdyA9IGRhdGVGb3JtYXQobm93LCBcInl5eXktbW0tZGRcIik7XG4gICAgbm93ID0gXCIyMDE0LTAzLTIwXCI7IC8v0LTQu9GPINGC0LXRgdGC0LAgLSDRg9Cx0YDQsNGC0YwhXG5cbiAgICB2YXIgb3B0aW9uID0ge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBmaWx0ZXI6ICdbXCJhbmRcIixbXCI8PVwiLFwiY3JlYXRlRGF0ZVwiLFwiJyArIG5vdyArICdcIl0sW1wiPj1cIiwgXCJlbmREYXRlXCIsIFwiJyArIG5vdyArICdcIl0sW1wiPVwiLCBcInN0YXR1c1wiLCBcIjFcIl1dJ1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5fdWhyLmdldChwYXRoLCBvcHRpb24pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzLmNvZGUgPj0gNDAwICYmIHJlc3VsdC5zdGF0dXMuY29kZSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuc3RhdHVzLnRleHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmNvbnRlbnQ7XG4gICAgICAgIH0pO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIGFjdGlvbiBuYW1lZCBcInNvbWUtYWN0aW9uXCIgZnJvbSBhbnkgY29tcG9uZW50LlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IFJlc3BvbnNlIHRvIGNvbXBvbmVudC5cbiAqL1xuVmFjYW5jeS5wcm90b3R5cGUuaGFuZGxlU29tZUFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyBIZXJlIHlvdSBjYW4gY2FsbCB0aGlzLiRjb250ZXh0LmNoYW5nZWQoKSBpZiB5b3Uga25vd1xuICAgIC8vIHRoYXQgcmVtb3RlIGRhdGEgc291cmNlIGhhcyBiZWVuIGNoYW5nZWQuXG4gICAgLy8gQWxzbyB5b3UgY2FuIGhhdmUgbWFueSBoYW5kbGUgbWV0aG9kcyBmb3Igb3RoZXIgYWN0aW9ucy5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkYXRlRm9ybWF0ID0gcmVxdWlyZSgnLi4vLi4vbGliL3V0aWwvRGF0ZUZvcm1hdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZhY2FuY3lJdGVtO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IFN0b3JlIGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI3N0b3Jlc1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwib3RoZXIvdmFjYW5jeUl0ZW1cIiBzdG9yZS5cbiAqIEBwYXJhbSB7VUhSfSAkdWhyIFVuaXZlcnNhbCBIVFRQIHJlcXVlc3QuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gVmFjYW5jeUl0ZW0oJHVocikge1xuICAgIHRoaXMuX3VociA9ICR1aHI7XG59XG5cbi8qKlxuICogQ3VycmVudCB1bml2ZXJzYWwgSFRUUCByZXF1ZXN0IHRvIGRvIGl0IGluIGlzb21vcnBoaWMgd2F5LlxuICogQHR5cGUge1VIUn1cbiAqIEBwcml2YXRlXG4gKi9cblZhY2FuY3lJdGVtLnByb3RvdHlwZS5fdWhyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGxpZmV0aW1lIG9mIGRhdGEgKGluIG1pbGxpc2Vjb25kcykgdGhhdCBpcyByZXR1cm5lZCBieSB0aGlzIHN0b3JlLlxuICogQHR5cGUge251bWJlcn0gTGlmZXRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5WYWNhbmN5SXRlbS5wcm90b3R5cGUuJGxpZmV0aW1lID0gNjAwMDA7XG5cbi8qKlxuICogTG9hZHMgZGF0YSBmcm9tIHJlbW90ZSBzb3VyY2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gTG9hZGVkIGRhdGEuXG4gKi9cblZhY2FuY3lJdGVtLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgaWQgPSB0aGlzLiRjb250ZXh0LnN0YXRlLml0ZW07XG4gICAgaWYgKCFpZClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBwYXRoID0gJ2h0dHA6Ly9hcGktZm0ucHJlc2VudC10bHQucnUvYWJvdXQtdmFjYW5jeSc7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgbm93ID0gZGF0ZUZvcm1hdChub3csIFwieXl5eS1tbS1kZFwiKTtcbiAgICBub3cgPSBcIjIwMTQtMDMtMjBcIjsgLy/QtNC70Y8g0YLQtdGB0YLQsCAtINGD0LHRgNCw0YLRjCFcblxuICAgIHZhciBvcHRpb24gPSB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGZpbHRlcjogJ1tcImFuZFwiLFtcIj1cIiwgXCJpZFwiLCBcIicgKyBpZCArICdcIl0sW1wiPD1cIixcImNyZWF0ZURhdGVcIixcIicgKyBub3cgKyAnXCJdLFtcIj49XCIsIFwiZW5kRGF0ZVwiLCBcIicgKyBub3cgKyAnXCJdLFtcIj1cIiwgXCJzdGF0dXNcIiwgXCIxXCJdXSdcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuX3Voci5nZXQocGF0aCwgb3B0aW9uKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cy5jb2RlID49IDQwMCAmJiByZXN1bHQuc3RhdHVzLmNvZGUgPCA2MDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LnN0YXR1cy50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQuY29udGVudC5sZW5ndGggPT0gMClcbiAgICAgICAgICAgICAgICBzZWxmLiRjb250ZXh0Lm5vdEZvdW5kKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQuY29udGVudFswXSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmNvbnRlbnRbMF07XG4gICAgICAgIH0pO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIGFjdGlvbiBuYW1lZCBcInNvbWUtYWN0aW9uXCIgZnJvbSBhbnkgY29tcG9uZW50LlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IFJlc3BvbnNlIHRvIGNvbXBvbmVudC5cbiAqL1xuVmFjYW5jeUl0ZW0ucHJvdG90eXBlLmhhbmRsZVNvbWVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gSGVyZSB5b3UgY2FuIGNhbGwgdGhpcy4kY29udGV4dC5jaGFuZ2VkKCkgaWYgeW91IGtub3dcbiAgICAvLyB0aGF0IHJlbW90ZSBkYXRhIHNvdXJjZSBoYXMgYmVlbiBjaGFuZ2VkLlxuICAgIC8vIEFsc28geW91IGNhbiBoYXZlIG1hbnkgaGFuZGxlIG1ldGhvZHMgZm9yIG90aGVyIGFjdGlvbnMuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJ1YnJpa2E7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgU3RvcmUgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjc3RvcmVzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJydWJyaWthL1J1YnJpa2FcIiBzdG9yZS5cbiAqIEBwYXJhbSB7VUhSfSAkdWhyIFVuaXZlcnNhbCBIVFRQIHJlcXVlc3QuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUnVicmlrYSgkdWhyKSB7XG4gICAgdGhpcy5fdWhyID0gJHVocjtcbn1cblxuLyoqXG4gKiBDdXJyZW50IHVuaXZlcnNhbCBIVFRQIHJlcXVlc3QgdG8gZG8gaXQgaW4gaXNvbW9ycGhpYyB3YXkuXG4gKiBAdHlwZSB7VUhSfVxuICogQHByaXZhdGVcbiAqL1xuUnVicmlrYS5wcm90b3R5cGUuX3VociA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBsaWZldGltZSBvZiBkYXRhIChpbiBtaWxsaXNlY29uZHMpIHRoYXQgaXMgcmV0dXJuZWQgYnkgdGhpcyBzdG9yZS5cbiAqIEB0eXBlIHtudW1iZXJ9IExpZmV0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAqL1xuUnVicmlrYS5wcm90b3R5cGUuJGxpZmV0aW1lID0gNjAwMDA7XG5cbi8qKlxuICogTG9hZHMgZGF0YSBmcm9tIHJlbW90ZSBzb3VyY2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gTG9hZGVkIGRhdGEuXG4gKi9cblJ1YnJpa2EucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBydWJyaWthID0gdGhpcy4kY29udGV4dC5zdGF0ZS5ydWJyaWthO1xuICAgIHZhciBwb2RydWJyaWthID0gdGhpcy4kY29udGV4dC5zdGF0ZS5wb2RydWJyaWthO1xuXG4gICAgaWYgKCFwb2RydWJyaWthKSB7XG4gICAgICAgIHNlbGYuJGNvbnRleHQubm90Rm91bmQoKTtcbiAgICB9XG5cbiAgICB2YXIgdXJsID0gJ2h0dHA6Ly9hcGktZm0ucHJlc2VudC10bHQucnUvcnVicmlrYSc7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGZpbHRlcjogJ1tcImFuZFwiLCBbXCI9XCIsIFwidW5pcXVlXCIsIFwiJyArIHBvZHJ1YnJpa2EgKyAnXCJdLFtcIj1cIixcInN0YXR1c1wiLFwiMVwiXV0nLFxuICAgICAgICAgICAgZXhwYW5kOiBcInRhZ3MscGFyZW50LG5lYXJieSxzZW9cIlxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5fdWhyLmdldCh1cmwsIG9wdGlvbnMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzLmNvZGUgPj0gNDAwICYmIHJlc3VsdC5zdGF0dXMuY29kZSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuc3RhdHVzLnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3VsdC5jb250ZW50Lmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgICAgIHNlbGYuJGNvbnRleHQubm90Rm91bmQoKTtcblxuICAgICAgICAgICAgdmFyIGRhdGEgPSByZXN1bHQuY29udGVudFswXTtcblxuICAgICAgICAgICAgaWYgKGRhdGEucGFyZW50SUQgPT0gMClcbiAgICAgICAgICAgICAgICBzZWxmLiRjb250ZXh0Lm5vdEZvdW5kKCk7XG5cbiAgICAgICAgICAgIGlmIChydWJyaWthICE9IGRhdGEucGFyZW50LnVuaXF1ZSlcbiAgICAgICAgICAgICAgICBzZWxmLiRjb250ZXh0Lm5vdEZvdW5kKCk7XG5cbiAgICAgICAgICAgIGRhdGEucG9kcnVicmlrYSA9IHBvZHJ1YnJpa2E7XG4gICAgICAgICAgICBkYXRhLnJ1YnJpa2EgPSBydWJyaWthO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIGFjdGlvbiBuYW1lZCBcInNvbWUtYWN0aW9uXCIgZnJvbSBhbnkgY29tcG9uZW50LlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IFJlc3BvbnNlIHRvIGNvbXBvbmVudC5cbiAqLyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBSdWJyaWthdG9yO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IFN0b3JlIGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI3N0b3Jlc1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwicnVicmlrYS9SdWJyaWthdG9yXCIgc3RvcmUuXG4gKiBAcGFyYW0ge1VIUn0gJHVociBVbml2ZXJzYWwgSFRUUCByZXF1ZXN0LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJ1YnJpa2F0b3IoJHVocikge1xuICAgIHRoaXMuX3VociA9ICR1aHI7XG4gICAgdGhpcy5fcGF0aCA9ICdodHRwOi8vYXBpLWZtLnByZXNlbnQtdGx0LnJ1L3J1YnJpa2EnO1xuICAgIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGZpbHRlcjogJ1tcImFuZFwiLFtcIj1cIiwgXCJzdGF0dXNcIiwgXCIxXCJdXScsXG4gICAgICAgICAgICBleHBhbmQ6ICdtYXN0ZXJDb3VudCcsXG4gICAgICAgICAgICBvcmRlcjogJ3NvcnQnLFxuICAgICAgICAgICAgbGltaXQ6IDMwMFxuICAgICAgICB9XG4gICAgfTtcbn1cblxuLyoqXG4gKiBDdXJyZW50IHVuaXZlcnNhbCBIVFRQIHJlcXVlc3QgdG8gZG8gaXQgaW4gaXNvbW9ycGhpYyB3YXkuXG4gKiBAdHlwZSB7VUhSfVxuICogQHByaXZhdGVcbiAqL1xuUnVicmlrYXRvci5wcm90b3R5cGUuX3VociA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBsaWZldGltZSBvZiBkYXRhIChpbiBtaWxsaXNlY29uZHMpIHRoYXQgaXMgcmV0dXJuZWQgYnkgdGhpcyBzdG9yZS5cbiAqIEB0eXBlIHtudW1iZXJ9IExpZmV0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAqL1xuUnVicmlrYXRvci5wcm90b3R5cGUuJGxpZmV0aW1lID0gNjAwMDAwO1xuXG4vKipcbiAqIExvYWRzIGRhdGEgZnJvbSByZW1vdGUgc291cmNlLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IExvYWRlZCBkYXRhLlxuICovXG5cblJ1YnJpa2F0b3IucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Voci5nZXQodGhpcy5fcGF0aCwgdGhpcy5fb3B0aW9ucylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMuY29kZSA+PSA0MDAgJiYgcmVzdWx0LnN0YXR1cy5jb2RlIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5zdGF0dXMudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3VsdC5jb250ZW50O1xuICAgICAgICAgICAgdmFyIHBvZHJ1YnJpa3NUcmVlID0ge307XG4gICAgICAgICAgICB2YXIgcm9vdFRyZWUgPSB7fTtcbiAgICAgICAgICAgIHZhciByb290VHJlZUNvdW50ID0ge307XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGEpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBkYXRhW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5wYXJlbnRJRCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByb290VHJlZVtlbC5zb3J0XSA9IHtlbDogZWx9O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwb2RydWJyaWtzVHJlZVtlbC5wYXJlbnRJRF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9kcnVicmlrc1RyZWVbZWwucGFyZW50SURdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2RydWJyaWtzVHJlZVtlbC5wYXJlbnRJRF0ucHVzaChlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByb290VHJlZUNvdW50W2VsLnBhcmVudElEXSA9ICtlbC5tYXN0ZXJDb3VudCArIChyb290VHJlZUNvdW50W2VsLnBhcmVudElEXSA/IHJvb3RUcmVlQ291bnRbZWwucGFyZW50SURdIDogIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHJvb3RUcmVlKVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9kcnVicmlrc1RyZWVbcm9vdFRyZWVba2V5XS5lbC5pZF0uc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEubmFtZSA+IGIubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJvb3RUcmVlW2tleV0ucG9kcnVicmlrcyA9IHBvZHJ1YnJpa3NUcmVlW3Jvb3RUcmVlW2tleV0uZWwuaWRdO1xuICAgICAgICAgICAgICAgICAgICByb290VHJlZVtrZXldLmNvdW50ID0gcm9vdFRyZWVDb3VudFtyb290VHJlZVtrZXldLmVsLmlkXTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiByb290VHJlZTtcbiAgICAgICAgfSk7XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYWN0aW9uIG5hbWVkIFwic29tZS1hY3Rpb25cIiBmcm9tIGFueSBjb21wb25lbnQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gUmVzcG9uc2UgdG8gY29tcG9uZW50LlxuICovXG5SdWJyaWthdG9yLnByb3RvdHlwZS5oYW5kbGVTb21lQWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIEhlcmUgeW91IGNhbiBjYWxsIHRoaXMuJGNvbnRleHQuY2hhbmdlZCgpIGlmIHlvdSBrbm93XG4gICAgLy8gdGhhdCByZW1vdGUgZGF0YSBzb3VyY2UgaGFzIGJlZW4gY2hhbmdlZC5cbiAgICAvLyBBbHNvIHlvdSBjYW4gaGF2ZSBtYW55IGhhbmRsZSBtZXRob2RzIGZvciBvdGhlciBhY3Rpb25zLlxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBSdWJyaWthdG9yQ29tcGFueTtcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG5cdFx0UnVicmlrYXRvciA9IHJlcXVpcmUoJy4vUnVicmlrYXRvcicpO1xuXG51dGlsLmluaGVyaXRzKFJ1YnJpa2F0b3JDb21wYW55LCBSdWJyaWthdG9yKTtcblxuZnVuY3Rpb24gUnVicmlrYXRvckNvbXBhbnkoKSB7XG5cdFJ1YnJpa2F0b3IuY2FsbCh0aGlzKTtcblx0dGhpcy5fcGF0aCA9ICdodHRwOi8vYXBpLWZtLnByZXNlbnQtdGx0LnJ1L3J1YnJpa2EtY29tcGFueSc7XG5cdHRoaXMuX29wdGlvbnMgPSB7XG5cdFx0ZGF0YToge1xuXHRcdFx0ZmlsdGVyOiAnW1wiYW5kXCIsW1wiPVwiLCBcInN0YXR1c1wiLCBcIjFcIl1dJyxcblx0XHRcdG9yZGVyOiAnc29ydCcsXG5cdFx0XHRsaW1pdDogMjAwXG5cdFx0fVxuXHR9O1xufSIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBSdWJyaWthdG9yUGFyZW50O1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IFN0b3JlIGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI3N0b3Jlc1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwicnVicmlrYS9SdWJyaWthdG9yUGFyZW50XCIgc3RvcmUuXG4gKiBAcGFyYW0ge1VIUn0gJHVociBVbml2ZXJzYWwgSFRUUCByZXF1ZXN0LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFJ1YnJpa2F0b3JQYXJlbnQoJHVocikge1xuICAgIHRoaXMuX3VociA9ICR1aHI7XG59XG5cbi8qKlxuICogQ3VycmVudCB1bml2ZXJzYWwgSFRUUCByZXF1ZXN0IHRvIGRvIGl0IGluIGlzb21vcnBoaWMgd2F5LlxuICogQHR5cGUge1VIUn1cbiAqIEBwcml2YXRlXG4gKi9cblJ1YnJpa2F0b3JQYXJlbnQucHJvdG90eXBlLl91aHIgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgbGlmZXRpbWUgb2YgZGF0YSAoaW4gbWlsbGlzZWNvbmRzKSB0aGF0IGlzIHJldHVybmVkIGJ5IHRoaXMgc3RvcmUuXG4gKiBAdHlwZSB7bnVtYmVyfSBMaWZldGltZSBpbiBtaWxsaXNlY29uZHMuXG4gKi9cblJ1YnJpa2F0b3JQYXJlbnQucHJvdG90eXBlLiRsaWZldGltZSA9IDYwMDAwO1xuXG4vKipcbiAqIExvYWRzIGRhdGEgZnJvbSByZW1vdGUgc291cmNlLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IExvYWRlZCBkYXRhLlxuICovXG5SdWJyaWthdG9yUGFyZW50LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXRoID0gJ2h0dHA6Ly9hcGktZm0ucHJlc2VudC10bHQucnUvcnVicmlrYSc7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGZpbHRlcjogJ1tcImFuZFwiLFtcIj1cIiwgXCJwYXJlbnRJRFwiLCBcIjBcIl1dJyxcbiAgICAgICAgICAgIG9yZGVyOiAnbmFtZScsXG4gICAgICAgICAgICBsaW1pdDogMjAwXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB0aGlzLl91aHIuZ2V0KHBhdGgsIG9wdGlvbnMpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzLmNvZGUgPj0gNDAwICYmIHJlc3VsdC5zdGF0dXMuY29kZSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuc3RhdHVzLnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5jb250ZW50O1xuICAgICAgICB9KTtcbn07XG5cbi8qKlxuICogSGFuZGxlcyBhY3Rpb24gbmFtZWQgXCJzb21lLWFjdGlvblwiIGZyb20gYW55IGNvbXBvbmVudC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBSZXNwb25zZSB0byBjb21wb25lbnQuXG4gKi9cblJ1YnJpa2F0b3JQYXJlbnQucHJvdG90eXBlLmhhbmRsZVNvbWVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gSGVyZSB5b3UgY2FuIGNhbGwgdGhpcy4kY29udGV4dC5jaGFuZ2VkKCkgaWYgeW91IGtub3dcbiAgICAvLyB0aGF0IHJlbW90ZSBkYXRhIHNvdXJjZSBoYXMgYmVlbiBjaGFuZ2VkLlxuICAgIC8vIEFsc28geW91IGNhbiBoYXZlIG1hbnkgaGFuZGxlIG1ldGhvZHMgZm9yIG90aGVyIGFjdGlvbnMuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJ1YnJpa2F0b3JTYWxlO1xuXG4vKlxuICogVGhpcyBpcyBhIENhdGJlcnJ5IFN0b3JlIGZpbGUuXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGhlcmVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRiZXJyeS9jYXRiZXJyeS9ibG9iL21hc3Rlci9kb2NzL2luZGV4Lm1kI3N0b3Jlc1xuICovXG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIFwicnVicmlrYS9ydWJyaWthdG9yU2FsZVwiIHN0b3JlLlxuICogQHBhcmFtIHtVSFJ9ICR1aHIgVW5pdmVyc2FsIEhUVFAgcmVxdWVzdC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSdWJyaWthdG9yU2FsZSgkdWhyKSB7XG4gICAgdGhpcy5fdWhyID0gJHVocjtcbiAgICB0aGlzLl9wYXRoID0gJ2h0dHA6Ly9hcGktZm0ucHJlc2VudC10bHQucnUvcnVicmlrYSc7XG4gICAgdGhpcy5fb3B0aW9ucyA9IHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgZmlsdGVyOiAnW1wiYW5kXCIsW1wiPVwiLCBcInN0YXR1c1wiLCBcIjFcIl1dJyxcbiAgICAgICAgICAgIGV4cGFuZDogJ3NhbGVDb3VudCcsXG4gICAgICAgICAgICBvcmRlcjogJ3NvcnQnLFxuICAgICAgICAgICAgbGltaXQ6IDMwMFxuICAgICAgICB9XG4gICAgfTtcbiAgICB0aGlzLl9ncm91cHMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwi0KDQtdC80L7QvdGCLCDRgdGC0YDQvtC40YLQtdC70YzRgdGC0LLQviwg0LjQvdGC0LXRgNGM0LXRgFwiLFxuICAgICAgICAgICAgY2hpbGRyZW5JRDogWzg2LCA4NywgODgsIDEwMl1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCLQl9C00L7RgNC+0LLRjNC1LCDQutGA0LDRgdC+0YLQsCwg0LzQvtC00LBcIixcbiAgICAgICAgICAgIGNoaWxkcmVuSUQ6IFsyNCwgMTQzLCAxMTMsIDI3LCAxMzJdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwi0J7RgtC00YvRhSDQuCDQv9GA0LDQt9C00L3QuNC60LhcIixcbiAgICAgICAgICAgIGNoaWxkcmVuSUQ6IFszNiwgMTAzLCAxMjUsIDE0OV1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCLQmtC+0L3RgdGD0LvRjNGC0LDRhtC40LhcIixcbiAgICAgICAgICAgIGNoaWxkcmVuSUQ6IFs1LCAxMTRdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwi0JDQstGC0L7Rg9GB0LvRg9Cz0Lgg0Lgg0LTQvtGB0YLQsNCy0LrQsFwiLFxuICAgICAgICAgICAgY2hpbGRyZW5JRDogWzE5LCAxMDZdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwi0J3QtdC00LLQuNC20LjQvNC+0YHRgtGMXCIsXG4gICAgICAgICAgICBjaGlsZHJlbklEOiBbMV1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCLQotC10YXQvdC40LrQsFwiLFxuICAgICAgICAgICAgY2hpbGRyZW5JRDogWzQyXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcItCU0YDQuNCz0LjQtSDRg9GB0LvRg9Cz0LhcIixcbiAgICAgICAgICAgIGNoaWxkcmVuSUQ6IFtdXG4gICAgICAgIH1cbiAgICBdO1xuICAgIHRoaXMuX3BhcmVudFRvR3JvdXAgPSB7fTtcbiAgICB0aGlzLmxvYWRSdWJyaWtzID0gZmFsc2U7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZ3JvdXBzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXMuX2dyb3Vwc1tpXTtcbiAgICAgICAgZWwuY2hpbGRyZW5JRC5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgc2VsZi5fcGFyZW50VG9Hcm91cFtpZF0gPSBpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbi8qKlxuICogQ3VycmVudCB1bml2ZXJzYWwgSFRUUCByZXF1ZXN0IHRvIGRvIGl0IGluIGlzb21vcnBoaWMgd2F5LlxuICogQHR5cGUge1VIUn1cbiAqIEBwcml2YXRlXG4gKi9cblJ1YnJpa2F0b3JTYWxlLnByb3RvdHlwZS5fdWhyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGxpZmV0aW1lIG9mIGRhdGEgKGluIG1pbGxpc2Vjb25kcykgdGhhdCBpcyByZXR1cm5lZCBieSB0aGlzIHN0b3JlLlxuICogQHR5cGUge251bWJlcn0gTGlmZXRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5SdWJyaWthdG9yU2FsZS5wcm90b3R5cGUuJGxpZmV0aW1lID0gNjAwMDA7XG5cbi8qKlxuICogTG9hZHMgZGF0YSBmcm9tIHJlbW90ZSBzb3VyY2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gTG9hZGVkIGRhdGEuXG4gKi9cblJ1YnJpa2F0b3JTYWxlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY3VycmVudFJ1YnJpa2EgPSBzZWxmLiRjb250ZXh0LnN0YXRlLmNhdGFsb2c7XG5cbiAgICBpZiAoc2VsZi5sb2FkUnVicmlrcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWN0aXZlOiBjdXJyZW50UnVicmlrYSxcbiAgICAgICAgICAgIGxpc3Q6IHNlbGYuX2dyb3Vwc1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9sb2FkRGF0YSgpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNlbGYubG9hZFJ1YnJpa3MgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhY3RpdmU6IGN1cnJlbnRSdWJyaWthLFxuICAgICAgICAgICAgICAgIGxpc3Q6IHNlbGYuX2dyb3Vwc1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn07XG4vKipcbiAqINCX0LDQs9GA0YPQt9C60LAg0YDRg9Cx0YDQuNC60LDRgtC+0YDQsCDQuCDQv9C10YDQtdGB0YLRgNC+0LnQutCwINC/0L7QtCDQvdGD0LbQvdGL0Lkg0YTQvtGA0LzQsNGCXG4gKiBAcmV0dXJucyB7Kn1cbiAqIEBwcml2YXRlXG4gKi9cblJ1YnJpa2F0b3JTYWxlLnByb3RvdHlwZS5fbG9hZERhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuX3Voci5nZXQodGhpcy5fcGF0aCwgdGhpcy5fb3B0aW9ucylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMuY29kZSA+PSA0MDAgJiYgcmVzdWx0LnN0YXR1cy5jb2RlIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5zdGF0dXMudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3VsdC5jb250ZW50O1xuICAgICAgICAgICAgdmFyIGRhdGFMZXZlbCA9IHt9O1xuXG4gICAgICAgICAgICAvL9GB0L3QsNGH0LDRgtCwINCy0YvRgdGC0YDQsNC40LLQsNC10Lwg0LTRgNC10LLQvtCy0LjQtNC90YPRjiDRgdGC0YDRg9C60YLRg9GA0YNcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwucGFyZW50SUQgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGFMZXZlbFtlbC5pZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhTGV2ZWxbZWwuaWRdID0ge3Jvb3Q6IGVsLCBjaGlsZDogW10sIHNhbGVDb3VudDogMH07XG4gICAgICAgICAgICAgICAgICAgIGRhdGFMZXZlbFtlbC5pZF0ucm9vdCA9IGVsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLl9wYXJlbnRUb0dyb3VwW2VsLmlkXSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2dyb3Vwc1tzZWxmLl9ncm91cHMubGVuZ3RoIC0gMV0uY2hpbGRyZW5JRC5wdXNoKGVsLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YUxldmVsW2VsLnBhcmVudElEXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFMZXZlbFtlbC5wYXJlbnRJRF0gPSB7cm9vdDoge30sIGNoaWxkOiBbXSwgc2FsZUNvdW50OiAwfTtcblxuICAgICAgICAgICAgICAgICAgICBkYXRhTGV2ZWxbZWwucGFyZW50SURdLnNhbGVDb3VudCArPSArZWwuc2FsZUNvdW50O1xuICAgICAgICAgICAgICAgICAgICBkYXRhTGV2ZWxbZWwucGFyZW50SURdLmNoaWxkLnB1c2goZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvL9C30LDRgtC10Lwg0L/RgNC40YbQtdC/0LvRj9C10Lwg0Log0LPQu9Cw0LLQvdC+0LzRgyDQtNC10YDQtdCy0YNcbiAgICAgICAgICAgIHNlbGYuX2dyb3Vwcy5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIGVsLmNoaWxkcmVuID0gW107XG4gICAgICAgICAgICAgICAgZWwuc2FsZUNvdW50ID0gMDtcblxuICAgICAgICAgICAgICAgIGlmIChlbC5jaGlsZHJlbklELmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IGVsLmNoaWxkcmVuSURbMF07XG4gICAgICAgICAgICAgICAgICAgIGVsLnNhbGVDb3VudCA9IGRhdGFMZXZlbFtpZF0uc2FsZUNvdW50O1xuICAgICAgICAgICAgICAgICAgICBkYXRhTGV2ZWxbaWRdLnJvb3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZWwuY2hpbGRyZW4ucHVzaChkYXRhTGV2ZWxbaWRdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbC5jaGlsZHJlbklELmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zYWxlQ291bnQgKz0gZGF0YUxldmVsW2lkXS5zYWxlQ291bnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5jaGlsZHJlbi5wdXNoKGRhdGFMZXZlbFtpZF0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG59O1xuLyoqXG4gKiBIYW5kbGVzIGFjdGlvbiBuYW1lZCBcInNvbWUtYWN0aW9uXCIgZnJvbSBhbnkgY29tcG9uZW50LlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0PnxPYmplY3R8bnVsbHx1bmRlZmluZWR9IFJlc3BvbnNlIHRvIGNvbXBvbmVudC5cbiAqL1xuUnVicmlrYXRvclNhbGUucHJvdG90eXBlLmhhbmRsZVNvbWVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gSGVyZSB5b3UgY2FuIGNhbGwgdGhpcy4kY29udGV4dC5jaGFuZ2VkKCkgaWYgeW91IGtub3dcbiAgICAvLyB0aGF0IHJlbW90ZSBkYXRhIHNvdXJjZSBoYXMgYmVlbiBjaGFuZ2VkLlxuICAgIC8vIEFsc28geW91IGNhbiBoYXZlIG1hbnkgaGFuZGxlIG1ldGhvZHMgZm9yIG90aGVyIGFjdGlvbnMuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBTYWxlQnlSdWJyaWthO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKSxcbiAgICBTdG9yZVBhZ2luYXRvciA9IHJlcXVpcmUoJy4uLy4uL2xpYi9TdG9yZVBhZ2luYXRvcicpO1xuLyoqXG4gKiDQvdCw0YHQu9C10LTRg9C10LzRgdGPINC+0YIg0L/QsNCz0LjQvdCw0YLQvtGA0LAg0LTQu9GPINC/0L7RgdGC0YDQsNC90LjRh9C90L7QuSDQvdCw0LLQuNCz0LDRhtC40LhcbiAqL1xudXRpbC5pbmhlcml0cyhTYWxlQnlSdWJyaWthLCBTdG9yZVBhZ2luYXRvcik7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgU3RvcmUgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjc3RvcmVzXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgXCJzYWxlL1NhbGVCeVJ1YnJpa2FcIiBzdG9yZS5cbiAqIEBwYXJhbSB7VUhSfSAkdWhyIFVuaXZlcnNhbCBIVFRQIHJlcXVlc3QuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gU2FsZUJ5UnVicmlrYSgkdWhyKSB7XG4gICAgU3RvcmVQYWdpbmF0b3IuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuJGNvbnRleHQuc2V0RGVwZW5kZW5jeShcInJ1YnJpa2EvUnVicmlrYXRvclNhbGVcIik7XG4gICAgdGhpcy5fcGF0aCA9ICdodHRwOi8vYXBpLWZtLnByZXNlbnQtdGx0LnJ1L3NhbGUvYWN0aXZlJztcbiAgICB0aGlzLl9vcHRpb25zID0ge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBleHBhbmQ6ICdvd25lcidcbiAgICAgICAgfVxuICAgIH07XG59XG5cbi8qKlxuICogQ3VycmVudCB1bml2ZXJzYWwgSFRUUCByZXF1ZXN0IHRvIGRvIGl0IGluIGlzb21vcnBoaWMgd2F5LlxuICogQHR5cGUge1VIUn1cbiAqIEBwcml2YXRlXG4gKi9cblNhbGVCeVJ1YnJpa2EucHJvdG90eXBlLl91aHIgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgbGlmZXRpbWUgb2YgZGF0YSAoaW4gbWlsbGlzZWNvbmRzKSB0aGF0IGlzIHJldHVybmVkIGJ5IHRoaXMgc3RvcmUuXG4gKiBAdHlwZSB7bnVtYmVyfSBMaWZldGltZSBpbiBtaWxsaXNlY29uZHMuXG4gKi9cblNhbGVCeVJ1YnJpa2EucHJvdG90eXBlLiRsaWZldGltZSA9IDYwMDAwO1xuLyoqXG4gKiDQpdGA0LDQvdC40LvQuNGJ0LUg0LTQu9GPINGA0YPQsdGA0LjQutCw0YLQvtGA0LBcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBwcml2YXRlXG4gKi9cblNhbGVCeVJ1YnJpa2EucHJvdG90eXBlLl9ydWJyaWthdG9yID0gW107XG5cbi8qKlxuICog0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0LfQvdCw0YfQtdC90LjQtSDQtNC70Y8gdXJsINCyINC/0LDQs9C40L3QsNGC0L7RgNC1XG4gKiDQktGL0LfQvtCy0LXQvCDRjdGC0L7RgiDQvNC10YLQvtC0LCDQutC+0LPQtNCwINGD0LfQvdCw0LXQvCDRgtC10LrRg9GJ0YPRjiDRgNGD0LHRgNC40LrRg1xuICogQHBhcmFtIHJ1YnJpa2FcbiAqIEBwcml2YXRlXG4gKi9cblNhbGVCeVJ1YnJpa2EucHJvdG90eXBlLl9zZXRVcmxGb3JQYWdlID0gZnVuY3Rpb24gKHJ1YnJpa2EpIHtcbiAgICB0aGlzLl91cmwgPSBcIi9zYWxlL2NhdGFsb2cvXCIgKyBydWJyaWthICsgXCIvcGFnZS9cIjtcbn07XG5cbi8qKlxuICogTG9hZHMgZGF0YSBmcm9tIHJlbW90ZSBzb3VyY2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gTG9hZGVkIGRhdGEuXG4gKi9cblNhbGVCeVJ1YnJpa2EucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoMSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8g0LLRi9GP0YHQvdC40Lwg0YLQtdC60YPRidGD0Y4g0YHRgtGA0LDQvdC40YbRg1xuICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGNvbnRleHQuc2VuZEFjdGlvbihcIlBhZ2luYXRvclwiLCBcImdldEN1cnJlbnRQYWdlXCIpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocGFnZSkge1xuICAgICAgICAgICAgLy/Rg9GB0YLQsNC90L7QstC40Lwg0LfQvdCw0YfQtdC90LjRjyDQtNC70Y8g0YHRgtGA0LDQvdC40YbRi1xuICAgICAgICAgICAgc2VsZi5fY3VycmVudFBhZ2UgPSBwYWdlO1xuICAgICAgICAgICAgc2VsZi5fb3B0aW9ucy5kYXRhLnBhZ2UgPSBwYWdlO1xuICAgICAgICAgICAgLy/QstGL0Y/RgdC90LjQvCDRgtC10LrRg9GJ0LjQtSDQtNCw0L3QvdGL0LUg0L/QviDRgNGD0LHRgNC40LrQtVxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuJGNvbnRleHQuZ2V0U3RvcmVEYXRhKFwicnVicmlrYS9SdWJyaWthdG9yU2FsZVwiKVxuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocnVicmlrYXRvcikge1xuICAgICAgICAgICAgLy/Qt9Cw0L/QvtC80L3QuNC8INCy0LXRgdGMINGA0YPQsdGA0LjQutCw0YLQvtGAINCyINC/0LXRgNC10LzQtdC90L3QvtC5XG4gICAgICAgICAgICBzZWxmLl9ydWJyaWthdG9yID0gcnVicmlrYXRvci5saXN0O1xuICAgICAgICAgICAgLy/QtdGB0LvQuCDQvdC10YIg0LDQutGC0LjQstC90L7QuSDRgNGD0LHRgNC40LrQuCDQt9C90LDRh9C40YIg0Y3RgtC+INCz0LvQsNCy0L3QsNGPINGB0YLRgNCw0L3QuNGG0LBcbiAgICAgICAgICAgIGlmICghcnVicmlrYXRvci5hY3RpdmUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuX2dldERhdGFGb3JNYWluUGFnZSgpOy8v0YHRhNC+0YDQvNC40YDRg9C10Lwg0LTQsNC90L3Ri9C1INC00LvRjyDQs9C70LDQstC90L7QuSDRgdGC0YDQsNC90LjRhtGLXG5cbiAgICAgICAgICAgIC8v0LjQvdCw0YfQtdC1INGB0YTQvtGA0LzQuNGA0YPQtdC8INC00LDQvdC90YvQtSDQtNC70Y8g0YDRg9Cx0YDQuNC60LhcbiAgICAgICAgICAgIC8v0L3QviDQtNC70Y8g0L3QsNGH0LDQu9CwINGD0YHRgtCw0L3QvtCy0LjQvCB1cmwg0LTQu9GPINC90LDQstC40LPQsNGG0LjQuCDQv9C+INGC0LXQutGD0YnQtdC5INGA0YPQsdGA0LjQutC1XG4gICAgICAgICAgICBzZWxmLl9zZXRVcmxGb3JQYWdlKHJ1YnJpa2F0b3IuYWN0aXZlKTtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9nZXREYXRhRm9yUnVicmlrYVBhZ2UocnVicmlrYXRvci5hY3RpdmUpO1xuICAgICAgICB9KTtcbn07XG4vKipcbiAqINCk0L7RgNC80LjRgNC+0LLQsNC90LjQtSDQtNCw0L3QvdGL0YUg0LTQu9GPINCz0LvQsNCy0L3QvtC5INGB0YLRgNCw0L3QuNGG0Ysg0LrQsNGC0LDQu9C+0LPQsCDRgdC60LjQtNC+0LpcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICogQHByaXZhdGVcbiAqL1xuU2FsZUJ5UnVicmlrYS5wcm90b3R5cGUuX2dldERhdGFGb3JNYWluUGFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHByb21pc2VzID0gW107Ly/QvNCw0YHRgdC40LIg0LTQu9GPINC/0YDQvtC80LjRgdC+0LJcblxuICAgIC8v0KHRhNC+0YDQvNC40YDRg9C10Lwg0YHQv9C40YHQvtC6IGlkINC/0L4g0LPRgNGD0L/Qv9Cw0Lwg0YDRg9Cx0YDQuNC6LCDQtNC70Y8g0YLQvtCz0L4g0YfRgtC+0LHRiyDQtNC+0YHRgtCw0YLRjCDQv9C+IDQg0LDQutGG0LjQuCDQtNC70Y8g0LrQsNC20LTQvtC5INCz0YDRg9C/0L/Ri1xuICAgIHRoaXMuX3J1YnJpa2F0b3IuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIGxpc3RJRCA9IFtdO1xuICAgICAgICBlbC5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQuY2hpbGQuZm9yRWFjaChmdW5jdGlvbiAocnVicmlrYSkge1xuICAgICAgICAgICAgICAgIGxpc3RJRC5wdXNoKHJ1YnJpa2EuaWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvL9C00LvRjyDQutCw0LbQtNC+0LPQviDQtNC10LvQsNC10Lwg0LfQsNC/0YDQvtGBINC6IGFwaVxuICAgICAgICBwcm9taXNlcy5wdXNoKHNlbGYuX2dldFNhbGVEYXRhKGxpc3RJRCkpO1xuICAgIH0pO1xuICAgIC8v0LbQtNC10Lwg0LrQvtCz0LTQsCDQstGB0LUg0L/RgNC+0LzQuNGB0Ysg0LLRi9C/0L7Qu9C90Y/RgtGB0Y9cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpXG4gICAgICAgIC8v0LfQsNGC0LXQvCDQtNC+0LHQsNCy0LjQvCDQuiDQtNCw0L3QvdGL0Lwg0L/QviDRgNGD0LHRgNC40LrQsNC8INC/0YDQuNC90LDQtNC70LXQttCw0YnQuNC1INC40Lwg0YHQutC40LTQutC4XG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChzYWxlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuX3J1YnJpa2F0b3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9ydWJyaWthdG9yW2ldLnNhbGUgPSBzYWxlW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g0Lgg0L7RgtC00LDQtNC40Lwg0LLRgdC1INGN0YLQviDQsiBoYnNcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9ydWJyaWthdG9yO1xuICAgICAgICB9KTtcbn07XG5cbi8qKlxuICog0KTQvtGA0LzQuNGA0L7QstCw0L3QuNC1INC00LDQvdC90YvRhSDQtNC70Y8g0YHRgtGA0LDQvdC40YbRiyDRgNGD0LHRgNC40LrQuCDQutCw0YLQsNC70L7Qs9CwINGB0LrQuNC00L7QulxuICogQHBhcmFtIGN1cnJlbnRSdWJyaWthINGC0LXQutGD0LDRjyDRgNGD0LHRgNC40LrQsFxuICogQHJldHVybnMge1Byb21pc2V9XG4gKiBAcHJpdmF0ZVxuICovXG5TYWxlQnlSdWJyaWthLnByb3RvdHlwZS5fZ2V0RGF0YUZvclJ1YnJpa2FQYWdlID0gZnVuY3Rpb24gKGN1cnJlbnRSdWJyaWthKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBsaXN0SUQgPSBbXTtcblxuICAgIC8v0L/QtdGA0LXQsdC10YDQtdC8INCy0LXRgdGMINGA0YPQsdGA0LjQutCw0YLQvtGAINC4INC+0YLQvNC10YLQuNC8INCw0LrRgtC40LLQvdC+0YHRgtGM0Y4g0YLQtSDQstC10YLQstC4INC60L7RgtC+0YDRi9C1INC90LXQvtCx0YXQvtC00LjQvNC+INC+0YLQutGA0YvRgtGMXG4gICAgLy/RgtCw0LrQttC1INGB0YDQsNC30YMg0L/QvtC00LPQvtGC0L7QstC40Lwg0YHQv9C40YHQvtC6IGlkINC00LvRjyDQt9Cw0L/RgNC+0YHQsCDQv9C+INCw0LrRhtC40Y/QvFxuICAgIHRoaXMuX3J1YnJpa2F0b3IuZm9yRWFjaChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgZWwuYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgZWwuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5yb290ICYmIGNoaWxkLnJvb3QuaWQgPT0gY3VycmVudFJ1YnJpa2EpIHtcbiAgICAgICAgICAgICAgICBlbC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNoaWxkLnJvb3QuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjdXJyZW50UnVicmlrYSA9IGNoaWxkLnJvb3Q7XG5cbiAgICAgICAgICAgICAgICBjaGlsZC5jaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChydWJyaWthKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1YnJpa2EuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RJRC5wdXNoKHJ1YnJpa2EuaWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5jaGlsZC5mb3JFYWNoKGZ1bmN0aW9uIChydWJyaWthKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChydWJyaWthLmlkID09IGN1cnJlbnRSdWJyaWthKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBydWJyaWthLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQucm9vdC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFJ1YnJpa2EgPSBydWJyaWthO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdElELnB1c2gocnVicmlrYS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBydWJyaWthLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnJvb3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQucm9vdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRoaXMuX29wdGlvbnMuZGF0YS5maWx0ZXIgPSAnW1wiYW5kXCIsIFtcImluXCIsIFwicnVicmlrYUlEXCIsWycgKyBsaXN0SUQuam9pbignLCcpICsgJ11dXSc7XG4gICAgdGhpcy5fb3B0aW9ucy5kYXRhLmxpbWl0ID0gMjA7XG4gICAgcmV0dXJuIHRoaXMuX3Voci5nZXQodGhpcy5fcGF0aCwgdGhpcy5fb3B0aW9ucylcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXMuY29kZSA+PSA0MDAgJiYgcmVzdWx0LnN0YXR1cy5jb2RlIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3VsdC5zdGF0dXMudGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9wYWdlQ291bnQgPSByZXN1bHQuc3RhdHVzLmhlYWRlcnNbJ3gtcGFnaW5hdGlvbi1wYWdlLWNvdW50J107XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmNvbnRlbnQ7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChzYWxlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiBzZWxmLl9jdXJyZW50UGFnZSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UnVicmlrYTogY3VycmVudFJ1YnJpa2EsXG4gICAgICAgICAgICAgICAgcnVicmlrYXRvcjogc2VsZi5fcnVicmlrYXRvcixcbiAgICAgICAgICAgICAgICBzYWxlOiBzYWxlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbn07XG5cbi8qKlxuICog0JLQvtC30LLRgNCw0YnQsNC10YIg0YHQv9C40YHQvtC6INCw0LrRhtC40Lkg0L/QviDRgdC/0LjRgdC60YMgaWQg0YDRg9Cx0YDQuNC60LhcbiAqIEBwYXJhbSBpZCDQvNCw0YHQuNC40LIg0YHQv9C40YHQvtC6IGlkINGA0YPQsdGA0LjQulxuICogQHJldHVybnMgeyp9XG4gKiBAcHJpdmF0ZVxuICovXG5TYWxlQnlSdWJyaWthLnByb3RvdHlwZS5fZ2V0U2FsZURhdGEgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICB0aGlzLl9vcHRpb25zLmRhdGEuZmlsdGVyID0gJ1tcImFuZFwiLCBbXCJpblwiLCBcInJ1YnJpa2FJRFwiLFsnICsgaWQuam9pbignLCcpICsgJ11dXSc7XG4gICAgdGhpcy5fb3B0aW9ucy5kYXRhLmxpbWl0ID0gNDtcbiAgICByZXR1cm4gdGhpcy5fdWhyLmdldCh0aGlzLl9wYXRoLCB0aGlzLl9vcHRpb25zKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0LnN0YXR1cy5jb2RlID49IDQwMCAmJiByZXN1bHQuc3RhdHVzLmNvZGUgPCA2MDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzdWx0LnN0YXR1cy50ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuY29udGVudDtcbiAgICAgICAgfSk7XG59O1xuXG5cbi8qKlxuICogSGFuZGxlcyBhY3Rpb24gbmFtZWQgXCJzb21lLWFjdGlvblwiIGZyb20gYW55IGNvbXBvbmVudC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD58T2JqZWN0fG51bGx8dW5kZWZpbmVkfSBSZXNwb25zZSB0byBjb21wb25lbnQuXG4gKi9cblNhbGVCeVJ1YnJpa2EucHJvdG90eXBlLmhhbmRsZVNvbWVBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gSGVyZSB5b3UgY2FuIGNhbGwgdGhpcy4kY29udGV4dC5jaGFuZ2VkKCkgaWYgeW91IGtub3dcbiAgICAvLyB0aGF0IHJlbW90ZSBkYXRhIHNvdXJjZSBoYXMgYmVlbiBjaGFuZ2VkLlxuICAgIC8vIEFsc28geW91IGNhbiBoYXZlIG1hbnkgaGFuZGxlIG1ldGhvZHMgZm9yIG90aGVyIGFjdGlvbnMuXG59O1xuIiwibW9kdWxlLmV4cG9ydHM9e1xuXHRcInRpdGxlXCI6IFwiRmFjZU1hc3Rlci5ydVwiLFxuXHRcImlzUmVsZWFzZVwiOiB0cnVlXG59XG4iLCJtb2R1bGUuZXhwb3J0cz17XG4gIFwibWFpblwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcItCf0L7QuNGB0Log0JzQsNGB0YLQtdGA0L7QsiDQsiDRgdGE0LXRgNC1INGD0YHQu9GD0LNcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwi0J/QvtC40YHQuiDQnNCw0YHRgtC10YDQvtCyINCyINGB0YTQtdGA0LUg0YPRgdC70YPQs1wiLFxuICAgIFwia2V5d29yZHNcIjogXCLQv9C+0LjRgdC6INGD0YHQu9GD0LMsINC80LDRgdGC0LXRgNCwLCDRgdC/0LXRhtC40LDQu9C40YHRgtGLINCi0L7Qu9GM0Y/RgtGC0LhcIlxuICB9LFxuICBcImNhdGFsb2dcIjoge1xuICAgIFwidGl0bGVcIjogXCLQmtCw0YLQsNC70L7QsyDRg9GB0LvRg9CzXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwia2V5d29yZHNcIjogXCJcIlxuICB9LFxuICBcInJlcXVlc3RcIjoge1xuICAgIFwidGl0bGVcIjogXCLQl9Cw0LrQsNC30LDRgtGMINGD0YHQu9GD0LPRg1wiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICBcImtleXdvcmRzXCI6IFwiXCJcbiAgfSxcbiAgXCJyZWdpc3RyYXRpb25cIjoge1xuICAgIFwidGl0bGVcIjogXCLQodGC0LDRgtGMINCc0LDRgdGC0LXRgNC+0LxcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJrZXl3b3Jkc1wiOiBcIlwiXG4gIH0sXG4gIFwibG9naW5cIjoge1xuICAgIFwidGl0bGVcIjogXCLQktGF0L7QtCDQtNC70Y8g0JzQsNGB0YLQtdGA0L7QslwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICBcImtleXdvcmRzXCI6IFwiXCJcbiAgfSxcbiAgXCJzYWxlXCI6IHtcbiAgICBcInRpdGxlXCI6IFwiINCa0LDRgtCw0LvQvtCzINGB0LrQuNC00LrQuCDQuCDQv9C+0LTQsNGA0LrQuFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICBcImtleXdvcmRzXCI6IFwiXCJcbiAgfSxcbiAgXCJ2aWRlb1wiOiB7XG4gICAgXCJ0aXRsZVwiOiBcItCS0LjQtNC10L4g0JzQsNGB0YLQtdGA0L7QslwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICBcImtleXdvcmRzXCI6IFwiXCJcbiAgfSxcbiAgXCJzb3ZldHlcIjoge1xuICAgIFwidGl0bGVcIjogXCLQodC10LrRgNC10YLRiyDQvNCw0YHRgtC10YDQvtCyXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwia2V5d29yZHNcIjogXCJcIlxuICB9LFxuICBcImNvbXBhbnlcIjoge1xuICAgIFwidGl0bGVcIjogXCLQmtCw0YLQsNC70L7QsyDQutC+0LzQv9Cw0L3QuNC5XCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwia2V5d29yZHNcIjogXCJcIlxuICB9LFxuICBcInJlY29tbWVuZGF0aW9uXCI6IHtcbiAgICBcInRpdGxlXCI6IFwi0KDQtdC60L7QvNC10L3QtNCw0YbQuNC4INCc0LDRgdGC0LXRgNC+0LJcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwi0KDQtdC60L7QvNC10L3QtNCw0YbQuNC4INCc0LDRgdGC0LXRgNC+0LJcIixcbiAgICBcImtleXdvcmRzXCI6IFwi0L7RgtC30YvQstGLLCDRgNC10LrQvtC80LXQvdC00LDRhtC40LhcIlxuICB9LFxuICBcIm5ld3NcIjoge1xuICAgIFwidGl0bGVcIjogXCLQndC+0LLQvtGB0YLQuFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICBcImtleXdvcmRzXCI6IFwiXCJcbiAgfSxcbiAgXCJ2YWNhbmN5XCI6IHtcbiAgICBcInRpdGxlXCI6IFwi0JLQsNC60LDQvdGB0LjQuFwiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICBcImtleXdvcmRzXCI6IFwiXCJcbiAgfSxcbiAgXCJvZmVydGFcIjoge1xuICAgIFwidGl0bGVcIjogXCLQntGE0LXRgNGC0LBcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJrZXl3b3Jkc1wiOiBcIlwiXG4gIH0sXG4gIFwiY29udGFjdFwiOiB7XG4gICAgXCJ0aXRsZVwiOiBcItCa0L7QvdGC0LDQutGC0YtcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJrZXl3b3Jkc1wiOiBcIlwiXG4gIH0sXG4gIFwiZmVlZGJhY2tcIjoge1xuICAgIFwidGl0bGVcIjogXCLQntCx0YDQsNGC0L3QsNGPINGB0LLRj9C30YxcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJrZXl3b3Jkc1wiOiBcIlwiXG4gIH0sXG4gIFwibWFzdGVyLXJ1YnJpa2FcIjoge30sXG4gIFwibWFzdGVyLXBhZ2VcIjoge30sXG4gIFwibmV3cy1pdGVtXCI6IHt9LFxuICBcInZhY2FuY3ktaXRlbVwiOiB7fSxcbiAgXCJrb25rdXJzLWl0ZW1cIjoge31cbn0iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gU3RvcmVQYWdpbmF0b3I7XG5cbi8qXG4gKiBUaGlzIGlzIGEgQ2F0YmVycnkgU3RvcmUgZmlsZS5cbiAqIE1vcmUgZGV0YWlscyBjYW4gYmUgZm91bmQgaGVyZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2NhdGJlcnJ5L2NhdGJlcnJ5L2Jsb2IvbWFzdGVyL2RvY3MvaW5kZXgubWQjc3RvcmVzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge1VIUn0gJHVociBVbml2ZXJzYWwgSFRUUCByZXF1ZXN0LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN0b3JlUGFnaW5hdG9yKCkge1xuICAgIHRoaXMuX3VociA9IHRoaXMuJGNvbnRleHQubG9jYXRvci5yZXNvbHZlKCd1aHInKTtcbiAgICB0aGlzLl9wYWdlQ291bnQgPSAxO1xuICAgIHRoaXMuX2N1cnJlbnRQYWdlID0gMTtcbiAgICB0aGlzLl9wYXRoID0gJyc7XG4gICAgdGhpcy5fb3B0aW9ucyA9IHtkYXRhOiB7fX07XG4gICAgdGhpcy5fdXJsID0gJyc7XG5cbiAgICB0aGlzLiRjb250ZXh0LnNldERlcGVuZGVuY3koXCJQYWdpbmF0b3JcIik7XG59XG5cbi8qKlxuICogQ3VycmVudCB1bml2ZXJzYWwgSFRUUCByZXF1ZXN0IHRvIGRvIGl0IGluIGlzb21vcnBoaWMgd2F5LlxuICogQHR5cGUge1VIUn1cbiAqIEBwcml2YXRlXG4gKi9cblN0b3JlUGFnaW5hdG9yLnByb3RvdHlwZS5fdWhyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGxpZmV0aW1lIG9mIGRhdGEgKGluIG1pbGxpc2Vjb25kcykgdGhhdCBpcyByZXR1cm5lZCBieSB0aGlzIHN0b3JlLlxuICogQHR5cGUge251bWJlcn0gTGlmZXRpbWUgaW4gbWlsbGlzZWNvbmRzLlxuICovXG5TdG9yZVBhZ2luYXRvci5wcm90b3R5cGUuJGxpZmV0aW1lID0gNjAwMDA7XG5cbi8qKlxuICogTG9hZHMgZGF0YSBmcm9tIHJlbW90ZSBzb3VyY2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fE9iamVjdHxudWxsfHVuZGVmaW5lZH0gTG9hZGVkIGRhdGEuXG4gKi9cblN0b3JlUGFnaW5hdG9yLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcGF0aCA9IHRoaXMuX3BhdGg7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKDEpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLiRjb250ZXh0LnNlbmRBY3Rpb24oXCJQYWdpbmF0b3JcIiwgXCJnZXRDdXJyZW50UGFnZVwiKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgICAgIHNlbGYuX2N1cnJlbnRQYWdlID0gcGFnZTtcbiAgICAgICAgICAgIHNlbGYuX29wdGlvbnMuZGF0YS5wYWdlID0gcGFnZTtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl91aHIuZ2V0KHBhdGgsIHNlbGYuX29wdGlvbnMpXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3RhdHVzLmNvZGUgPj0gNDAwICYmIHJlc3VsdC5zdGF0dXMuY29kZSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXN1bHQuc3RhdHVzLnRleHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxmLl9wYWdlQ291bnQgPSByZXN1bHQuc3RhdHVzLmhlYWRlcnNbJ3gtcGFnaW5hdGlvbi1wYWdlLWNvdW50J107XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlOiBzZWxmLl9jdXJyZW50UGFnZSxcbiAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHQuY29udGVudFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG59O1xuXG5cblN0b3JlUGFnaW5hdG9yLnByb3RvdHlwZS5oYW5kbGVHZXRQYWdpbmF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9wYWdlQ291bnQgfHwgdGhpcy5fcGFnZUNvdW50ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFwiaXMtcGFnaW5hdG9yXCI6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgXCJpcy1wYWdpbmF0b3JcIjogdHJ1ZSxcbiAgICAgICAgXCJ1cmxcIjogdGhpcy5fdXJsLFxuICAgICAgICBcImNvdW50XCI6IHRoaXMuX3BhZ2VDb3VudCxcbiAgICAgICAgXCJjdXJyZW50XCI6IHRoaXMuX2N1cnJlbnRQYWdlXG4gICAgfTtcbn07IiwiLypcbiAqIERhdGUgRm9ybWF0IDEuMi4zXG4gKiAoYykgMjAwNy0yMDA5IFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPlxuICogTUlUIGxpY2Vuc2VcbiAqXG4gKiBJbmNsdWRlcyBlbmhhbmNlbWVudHMgYnkgU2NvdHQgVHJlbmRhIDxzY290dC50cmVuZGEubmV0PlxuICogYW5kIEtyaXMgS293YWwgPGNpeGFyLmNvbS9+a3Jpcy5rb3dhbC8+XG4gKlxuICogQWNjZXB0cyBhIGRhdGUsIGEgbWFzaywgb3IgYSBkYXRlIGFuZCBhIG1hc2suXG4gKiBSZXR1cm5zIGEgZm9ybWF0dGVkIHZlcnNpb24gb2YgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgZGF0ZSBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkYXRlL3RpbWUuXG4gKiBUaGUgbWFzayBkZWZhdWx0cyB0byBkYXRlRm9ybWF0Lm1hc2tzLmRlZmF1bHQuXG4gKi9cblxudmFyIGRhdGVGb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyXHR0b2tlbiA9IC9kezEsNH18bXsxLDR9fHl5KD86eXkpP3woW0hoTXNUdF0pXFwxP3xbTGxvU1pdfFwiW15cIl0qXCJ8J1teJ10qJy9nLFxuICAgICAgICB0aW1lem9uZSA9IC9cXGIoPzpbUE1DRUFdW1NEUF1UfCg/OlBhY2lmaWN8TW91bnRhaW58Q2VudHJhbHxFYXN0ZXJufEF0bGFudGljKSAoPzpTdGFuZGFyZHxEYXlsaWdodHxQcmV2YWlsaW5nKSBUaW1lfCg/OkdNVHxVVEMpKD86Wy0rXVxcZHs0fSk/KVxcYi9nLFxuICAgICAgICB0aW1lem9uZUNsaXAgPSAvW14tK1xcZEEtWl0vZyxcbiAgICAgICAgcGFkID0gZnVuY3Rpb24gKHZhbCwgbGVuKSB7XG4gICAgICAgICAgICB2YWwgPSBTdHJpbmcodmFsKTtcbiAgICAgICAgICAgIGxlbiA9IGxlbiB8fCAyO1xuICAgICAgICAgICAgd2hpbGUgKHZhbC5sZW5ndGggPCBsZW4pIHZhbCA9IFwiMFwiICsgdmFsO1xuICAgICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfTtcblxuICAgIC8vIFJlZ2V4ZXMgYW5kIHN1cHBvcnRpbmcgZnVuY3Rpb25zIGFyZSBjYWNoZWQgdGhyb3VnaCBjbG9zdXJlXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlLCBtYXNrLCB1dGMpIHtcbiAgICAgICAgdmFyIGRGID0gZGF0ZUZvcm1hdDtcblxuICAgICAgICAvLyBZb3UgY2FuJ3QgcHJvdmlkZSB1dGMgaWYgeW91IHNraXAgb3RoZXIgYXJncyAodXNlIHRoZSBcIlVUQzpcIiBtYXNrIHByZWZpeClcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMSAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0ZSkgPT0gXCJbb2JqZWN0IFN0cmluZ11cIiAmJiAhL1xcZC8udGVzdChkYXRlKSkge1xuICAgICAgICAgICAgbWFzayA9IGRhdGU7XG4gICAgICAgICAgICBkYXRlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFzc2luZyBkYXRlIHRocm91Z2ggRGF0ZSBhcHBsaWVzIERhdGUucGFyc2UsIGlmIG5lY2Vzc2FyeVxuICAgICAgICBkYXRlID0gZGF0ZSA/IG5ldyBEYXRlKGRhdGUpIDogbmV3IERhdGU7XG4gICAgICAgIGlmIChpc05hTihkYXRlKSkgdGhyb3cgU3ludGF4RXJyb3IoXCJpbnZhbGlkIGRhdGVcIik7XG5cbiAgICAgICAgbWFzayA9IFN0cmluZyhkRi5tYXNrc1ttYXNrXSB8fCBtYXNrIHx8IGRGLm1hc2tzW1wiZGVmYXVsdFwiXSk7XG5cbiAgICAgICAgLy8gQWxsb3cgc2V0dGluZyB0aGUgdXRjIGFyZ3VtZW50IHZpYSB0aGUgbWFza1xuICAgICAgICBpZiAobWFzay5zbGljZSgwLCA0KSA9PSBcIlVUQzpcIikge1xuICAgICAgICAgICAgbWFzayA9IG1hc2suc2xpY2UoNCk7XG4gICAgICAgICAgICB1dGMgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyXHRfID0gdXRjID8gXCJnZXRVVENcIiA6IFwiZ2V0XCIsXG4gICAgICAgICAgICBkID0gZGF0ZVtfICsgXCJEYXRlXCJdKCksXG4gICAgICAgICAgICBEID0gZGF0ZVtfICsgXCJEYXlcIl0oKSxcbiAgICAgICAgICAgIG0gPSBkYXRlW18gKyBcIk1vbnRoXCJdKCksXG4gICAgICAgICAgICB5ID0gZGF0ZVtfICsgXCJGdWxsWWVhclwiXSgpLFxuICAgICAgICAgICAgSCA9IGRhdGVbXyArIFwiSG91cnNcIl0oKSxcbiAgICAgICAgICAgIE0gPSBkYXRlW18gKyBcIk1pbnV0ZXNcIl0oKSxcbiAgICAgICAgICAgIHMgPSBkYXRlW18gKyBcIlNlY29uZHNcIl0oKSxcbiAgICAgICAgICAgIEwgPSBkYXRlW18gKyBcIk1pbGxpc2Vjb25kc1wiXSgpLFxuICAgICAgICAgICAgbyA9IHV0YyA/IDAgOiBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCksXG4gICAgICAgICAgICBmbGFncyA9IHtcbiAgICAgICAgICAgICAgICBkOiAgICBkLFxuICAgICAgICAgICAgICAgIGRkOiAgIHBhZChkKSxcbiAgICAgICAgICAgICAgICBkZGQ6ICBkRi5pMThuLmRheU5hbWVzW0RdLFxuICAgICAgICAgICAgICAgIGRkZGQ6IGRGLmkxOG4uZGF5TmFtZXNbRCArIDddLFxuICAgICAgICAgICAgICAgIG06ICAgIG0gKyAxLFxuICAgICAgICAgICAgICAgIG1tOiAgIHBhZChtICsgMSksXG4gICAgICAgICAgICAgICAgbW1tOiAgZEYuaTE4bi5tb250aE5hbWVzW21dLFxuICAgICAgICAgICAgICAgIG1tbW06IGRGLmkxOG4ubW9udGhOYW1lc1ttICsgMTJdLFxuICAgICAgICAgICAgICAgIHl5OiAgIFN0cmluZyh5KS5zbGljZSgyKSxcbiAgICAgICAgICAgICAgICB5eXl5OiB5LFxuICAgICAgICAgICAgICAgIGg6ICAgIEggJSAxMiB8fCAxMixcbiAgICAgICAgICAgICAgICBoaDogICBwYWQoSCAlIDEyIHx8IDEyKSxcbiAgICAgICAgICAgICAgICBIOiAgICBILFxuICAgICAgICAgICAgICAgIEhIOiAgIHBhZChIKSxcbiAgICAgICAgICAgICAgICBNOiAgICBNLFxuICAgICAgICAgICAgICAgIE1NOiAgIHBhZChNKSxcbiAgICAgICAgICAgICAgICBzOiAgICBzLFxuICAgICAgICAgICAgICAgIHNzOiAgIHBhZChzKSxcbiAgICAgICAgICAgICAgICBsOiAgICBwYWQoTCwgMyksXG4gICAgICAgICAgICAgICAgTDogICAgcGFkKEwgPiA5OSA/IE1hdGgucm91bmQoTCAvIDEwKSA6IEwpLFxuICAgICAgICAgICAgICAgIHQ6ICAgIEggPCAxMiA/IFwiYVwiICA6IFwicFwiLFxuICAgICAgICAgICAgICAgIHR0OiAgIEggPCAxMiA/IFwiYW1cIiA6IFwicG1cIixcbiAgICAgICAgICAgICAgICBUOiAgICBIIDwgMTIgPyBcIkFcIiAgOiBcIlBcIixcbiAgICAgICAgICAgICAgICBUVDogICBIIDwgMTIgPyBcIkFNXCIgOiBcIlBNXCIsXG4gICAgICAgICAgICAgICAgWjogICAgdXRjID8gXCJVVENcIiA6IChTdHJpbmcoZGF0ZSkubWF0Y2godGltZXpvbmUpIHx8IFtcIlwiXSkucG9wKCkucmVwbGFjZSh0aW1lem9uZUNsaXAsIFwiXCIpLFxuICAgICAgICAgICAgICAgIG86ICAgIChvID4gMCA/IFwiLVwiIDogXCIrXCIpICsgcGFkKE1hdGguZmxvb3IoTWF0aC5hYnMobykgLyA2MCkgKiAxMDAgKyBNYXRoLmFicyhvKSAlIDYwLCA0KSxcbiAgICAgICAgICAgICAgICBTOiAgICBbXCJ0aFwiLCBcInN0XCIsIFwibmRcIiwgXCJyZFwiXVtkICUgMTAgPiAzID8gMCA6IChkICUgMTAwIC0gZCAlIDEwICE9IDEwKSAqIGQgJSAxMF1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG1hc2sucmVwbGFjZSh0b2tlbiwgZnVuY3Rpb24gKCQwKSB7XG4gICAgICAgICAgICByZXR1cm4gJDAgaW4gZmxhZ3MgPyBmbGFnc1skMF0gOiAkMC5zbGljZSgxLCAkMC5sZW5ndGggLSAxKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0oKTtcblxuLy8gU29tZSBjb21tb24gZm9ybWF0IHN0cmluZ3NcbmRhdGVGb3JtYXQubWFza3MgPSB7XG4gICAgXCJkZWZhdWx0XCI6ICAgICAgXCJkZGQgbW1tIGRkIHl5eXkgSEg6TU06c3NcIixcbiAgICBzaG9ydERhdGU6ICAgICAgXCJtL2QveXlcIixcbiAgICBtZWRpdW1EYXRlOiAgICAgXCJtbW0gZCwgeXl5eVwiLFxuICAgIGxvbmdEYXRlOiAgICAgICBcIm1tbW0gZCwgeXl5eVwiLFxuICAgIGZ1bGxEYXRlOiAgICAgICBcImRkZGQsIG1tbW0gZCwgeXl5eVwiLFxuICAgIHNob3J0VGltZTogICAgICBcImg6TU0gVFRcIixcbiAgICBtZWRpdW1UaW1lOiAgICAgXCJoOk1NOnNzIFRUXCIsXG4gICAgbG9uZ1RpbWU6ICAgICAgIFwiaDpNTTpzcyBUVCBaXCIsXG4gICAgaXNvRGF0ZTogICAgICAgIFwieXl5eS1tbS1kZFwiLFxuICAgIGlzb1RpbWU6ICAgICAgICBcIkhIOk1NOnNzXCIsXG4gICAgaXNvRGF0ZVRpbWU6ICAgIFwieXl5eS1tbS1kZCdUJ0hIOk1NOnNzXCIsXG4gICAgaXNvVXRjRGF0ZVRpbWU6IFwiVVRDOnl5eXktbW0tZGQnVCdISDpNTTpzcydaJ1wiXG59O1xuXG4vLyBJbnRlcm5hdGlvbmFsaXphdGlvbiBzdHJpbmdzXG5kYXRlRm9ybWF0LmkxOG4gPSB7XG4gICAgZGF5TmFtZXM6IFtcbiAgICAgICAgXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIixcbiAgICAgICAgXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXG4gICAgXSxcbiAgICBtb250aE5hbWVzOiBbXG4gICAgICAgIFwiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCIsXG4gICAgICAgIFwiSmFudWFyeVwiLCBcIkZlYnJ1YXJ5XCIsIFwiTWFyY2hcIiwgXCJBcHJpbFwiLCBcIk1heVwiLCBcIkp1bmVcIiwgXCJKdWx5XCIsIFwiQXVndXN0XCIsIFwiU2VwdGVtYmVyXCIsIFwiT2N0b2JlclwiLCBcIk5vdmVtYmVyXCIsIFwiRGVjZW1iZXJcIlxuICAgIF1cbn07XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGRhdGVGb3JtYXQ7IiwiLypcbiAqIGNhdGJlcnJ5XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IERlbmlzIFJlY2hrdW5vdiBhbmQgcHJvamVjdCBjb250cmlidXRvcnMuXG4gKlxuICogY2F0YmVycnkncyBsaWNlbnNlIGZvbGxvd3M6XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sXG4gKiBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLFxuICogcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAqIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKlxuICogVGhpcyBsaWNlbnNlIGFwcGxpZXMgdG8gYWxsIHBhcnRzIG9mIGNhdGJlcnJ5IHRoYXQgYXJlIG5vdCBleHRlcm5hbGx5XG4gKiBtYWludGFpbmVkIGxpYnJhcmllcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2F0YmVycnk7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuXHRDYXRiZXJyeUJhc2UgPSByZXF1aXJlKCcuLi9saWIvYmFzZS9DYXRiZXJyeUJhc2UnKTtcblxudXRpbC5pbmhlcml0cyhDYXRiZXJyeSwgQ2F0YmVycnlCYXNlKTtcblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgYnJvd3NlciB2ZXJzaW9uIG9mIENhdGJlcnJ5LlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBDYXRiZXJyeUJhc2VcbiAqL1xuZnVuY3Rpb24gQ2F0YmVycnkoKSB7XG5cdENhdGJlcnJ5QmFzZS5jYWxsKHRoaXMpO1xufVxuXG4vKipcbiAqIEN1cnJlbnQgcmVxdWVzdCByb3V0ZXIuXG4gKiBAdHlwZSB7UmVxdWVzdFJvdXRlcn1cbiAqIEBwcml2YXRlXG4gKi9cbkNhdGJlcnJ5LnByb3RvdHlwZS5fcm91dGVyID0gbnVsbDtcblxuLyoqXG4gKiBXcmFwcyBjdXJyZW50IEhUTUwgZG9jdW1lbnQgd2l0aCBDYXRiZXJyeSBldmVudCBoYW5kbGVycy5cbiAqL1xuQ2F0YmVycnkucHJvdG90eXBlLndyYXBEb2N1bWVudCA9IGZ1bmN0aW9uICgpIHtcblx0dGhpcy5fcm91dGVyID0gdGhpcy5sb2NhdG9yLnJlc29sdmUoJ3JlcXVlc3RSb3V0ZXInKTtcbn07XG5cbi8qKlxuICogU3RhcnRzIENhdGJlcnJ5IGFwcGxpY2F0aW9uIHdoZW4gRE9NIGlzIHJlYWR5LlxuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2UgZm9yIG5vdGhpbmcuXG4gKi9cbkNhdGJlcnJ5LnByb3RvdHlwZS5zdGFydFdoZW5SZWFkeSA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKHdpbmRvdy5jYXRiZXJyeSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0fVxuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChmdWxmaWxsKSB7XG5cdFx0d2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRzZWxmLndyYXBEb2N1bWVudCgpO1xuXHRcdFx0d2luZG93LmNhdGJlcnJ5ID0gc2VsZjtcblx0XHRcdGZ1bGZpbGwoKTtcblx0XHR9KTtcblx0fSk7XG59OyIsIi8qXG4gKiBjYXRiZXJyeVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5J3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeSB0aGF0IGFyZSBub3QgZXh0ZXJuYWxseVxuICogbWFpbnRhaW5lZCBsaWJyYXJpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvb2tpZVdyYXBwZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuXHRDb29raWVXcmFwcGVyQmFzZSA9IHJlcXVpcmUoJy4uL2xpYi9iYXNlL0Nvb2tpZVdyYXBwZXJCYXNlJyk7XG5cbnV0aWwuaW5oZXJpdHMoQ29va2llV3JhcHBlciwgQ29va2llV3JhcHBlckJhc2UpO1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBicm93c2VyIGNvb2tpZSB3cmFwcGVyLlxuICogQHBhcmFtIHtXaW5kb3d9ICR3aW5kb3cgV2luZG93IG9iamVjdC5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBDb29raWVXcmFwcGVyKCR3aW5kb3cpIHtcblx0Q29va2llV3JhcHBlckJhc2UuY2FsbCh0aGlzKTtcblx0dGhpcy5fd2luZG93ID0gJHdpbmRvdztcbn1cblxuLyoqXG4gKiBDdXJyZW50IGJyb3dzZXIgd2luZG93LlxuICogQHR5cGUge1dpbmRvd31cbiAqIEBwcml2YXRlXG4gKi9cbkNvb2tpZVdyYXBwZXIucHJvdG90eXBlLl93aW5kb3cgPSBudWxsO1xuXG4vKipcbiAqIEdldHMgY3VycmVudCBjb29raWUgc3RyaW5nLlxuICogQHJldHVybnMge3N0cmluZ30gQ29va2llIHN0cmluZy5cbiAqL1xuQ29va2llV3JhcHBlci5wcm90b3R5cGUuZ2V0Q29va2llU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdGhpcy5fd2luZG93LmRvY3VtZW50LmNvb2tpZSA/XG5cdFx0dGhpcy5fd2luZG93LmRvY3VtZW50LmNvb2tpZS50b1N0cmluZygpIDpcblx0XHQnJztcbn07XG5cbi8qKlxuICogU2V0cyBjb29raWUgdG8gdGhpcyB3cmFwcGVyLlxuICogQHBhcmFtIHtPYmplY3R9IGNvb2tpZVNldHVwIENvb2tpZSBzZXR1cCBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29va2llU2V0dXAua2V5IENvb2tpZSBrZXkuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29va2llU2V0dXAudmFsdWUgQ29va2llIHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXI/fSBjb29raWVTZXR1cC5tYXhBZ2UgTWF4IGNvb2tpZSBhZ2UgaW4gc2Vjb25kcy5cbiAqIEBwYXJhbSB7RGF0ZT99IGNvb2tpZVNldHVwLmV4cGlyZXMgRXhwaXJlIGRhdGUuXG4gKiBAcGFyYW0ge3N0cmluZz99IGNvb2tpZVNldHVwLnBhdGggVVJJIHBhdGggZm9yIGNvb2tpZS5cbiAqIEBwYXJhbSB7c3RyaW5nP30gY29va2llU2V0dXAuZG9tYWluIENvb2tpZSBkb21haW4uXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBjb29raWVTZXR1cC5zZWN1cmUgSXMgY29va2llIHNlY3VyZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBjb29raWVTZXR1cC5odHRwT25seSBJcyBjb29raWUgSFRUUCBvbmx5LlxuICogQHJldHVybnMge3N0cmluZ30gQ29va2llIHNldHVwIHN0cmluZy5cbiAqL1xuQ29va2llV3JhcHBlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGNvb2tpZVNldHVwKSB7XG5cdHZhciBjb29raWUgPSB0aGlzLl9jb252ZXJ0VG9Db29raWVTZXR1cChjb29raWVTZXR1cCk7XG5cdHRoaXMuX3dpbmRvdy5kb2N1bWVudC5jb29raWUgPSBjb29raWU7XG5cdHJldHVybiBjb29raWU7XG59OyIsIi8qXG4gKiBjYXRiZXJyeVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNSBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5J3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeSB0aGF0IGFyZSBub3QgZXh0ZXJuYWxseVxuICogbWFpbnRhaW5lZCBsaWJyYXJpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERvY3VtZW50UmVuZGVyZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuXHRtb3JwaGRvbSA9IHJlcXVpcmUoJ21vcnBoZG9tJyksXG5cdGVycm9ySGVscGVyID0gcmVxdWlyZSgnLi4vbGliL2hlbHBlcnMvZXJyb3JIZWxwZXInKSxcblx0bW9kdWxlSGVscGVyID0gcmVxdWlyZSgnLi4vbGliL2hlbHBlcnMvbW9kdWxlSGVscGVyJyksXG5cdGhyVGltZUhlbHBlciA9IHJlcXVpcmUoJy4uL2xpYi9oZWxwZXJzL2hyVGltZUhlbHBlcicpLFxuXHREb2N1bWVudFJlbmRlcmVyQmFzZSA9IHJlcXVpcmUoJy4uL2xpYi9iYXNlL0RvY3VtZW50UmVuZGVyZXJCYXNlJyk7XG5cbnV0aWwuaW5oZXJpdHMoRG9jdW1lbnRSZW5kZXJlciwgRG9jdW1lbnRSZW5kZXJlckJhc2UpO1xuXG52YXIgV0FSTl9JRF9OT1RfU1BFQ0lGSUVEID0gJ0NvbXBvbmVudCBcIiVzXCIgZG9lcyBub3QgaGF2ZSBhbiBJRCwgc2tpcHBpbmcuLi4nLFxuXHRXQVJOX1NBTUVfSUQgPVxuXHRcdCdUaGUgZHVwbGljYXRlZCBJRCBcIiVzXCIgaGFzIGJlZW4gZm91bmQsIHNraXBwaW5nIGNvbXBvbmVudCBcIiVzXCIuLi4nO1xuXG52YXIgU1BFQ0lBTF9JRFMgPSB7XG5cdFx0JCRoZWFkOiAnJCRoZWFkJyxcblx0XHQkJGRvY3VtZW50OiAnJCRkb2N1bWVudCdcblx0fSxcblx0VEFHX05BTUVTID0ge1xuXHRcdFRJVExFOiAnVElUTEUnLFxuXHRcdEhUTUw6ICdIVE1MJyxcblx0XHRIRUFEOiAnSEVBRCcsXG5cdFx0QkFTRTogJ0JBU0UnLFxuXHRcdFNUWUxFOiAnU1RZTEUnLFxuXHRcdFNDUklQVDogJ1NDUklQVCcsXG5cdFx0Tk9TQ1JJUFQ6ICdOT1NDUklQVCcsXG5cdFx0TUVUQTogJ01FVEEnLFxuXHRcdExJTks6ICdMSU5LJ1xuXHR9LFxuXHROT0RFX1RZUEVTID0ge1xuXHRcdEVMRU1FTlRfTk9ERTogMSxcblx0XHRURVhUX05PREU6IDMsXG5cdFx0UFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFOiA3LFxuXHRcdENPTU1FTlRfTk9ERTogOFxuXHR9LFxuXHRFUlJPUl9DUkVBVEVfV1JPTkdfQVJHVU1FTlRTID0gJ1RhZyBuYW1lIHNob3VsZCBiZSBhIHN0cmluZyAnICtcblx0XHQnYW5kIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGFuIG9iamVjdCcsXG5cdEVSUk9SX0NSRUFURV9XUk9OR19OQU1FID0gJ0NvbXBvbmVudCBmb3IgdGFnIFwiJXNcIiBub3QgZm91bmQnLFxuXHRFUlJPUl9DUkVBVEVfV1JPTkdfSUQgPSAnVGhlIElEIGlzIG5vdCBzcGVjaWZpZWQgb3IgYWxyZWFkeSB1c2VkJyxcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxNS9XRC11aWV2ZW50cy0yMDE1MDMxOS8jZXZlbnQtdHlwZXMtbGlzdFxuXHROT05fQlVCQkxJTkdfRVZFTlRTID0ge1xuXHRcdGFib3J0OiB0cnVlLFxuXHRcdGJsdXI6IHRydWUsXG5cdFx0ZXJyb3I6IHRydWUsXG5cdFx0Zm9jdXM6IHRydWUsXG5cdFx0bG9hZDogdHJ1ZSxcblx0XHRtb3VzZWVudGVyOiB0cnVlLFxuXHRcdG1vdXNlbGVhdmU6IHRydWUsXG5cdFx0cmVzaXplOiB0cnVlLFxuXHRcdHVubG9hZDogdHJ1ZVxuXHR9O1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBkb2N1bWVudCByZW5kZXJlci5cbiAqIEBwYXJhbSB7U2VydmljZUxvY2F0b3J9ICRzZXJ2aWNlTG9jYXRvciBMb2NhdG9yIHRvIHJlc29sdmUgZGVwZW5kZW5jaWVzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBEb2N1bWVudFJlbmRlcmVyQmFzZVxuICovXG5mdW5jdGlvbiBEb2N1bWVudFJlbmRlcmVyKCRzZXJ2aWNlTG9jYXRvcikge1xuXHREb2N1bWVudFJlbmRlcmVyQmFzZS5jYWxsKHRoaXMsICRzZXJ2aWNlTG9jYXRvcik7XG5cdHRoaXMuX2NvbXBvbmVudEluc3RhbmNlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdHRoaXMuX2NvbXBvbmVudEVsZW1lbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0dGhpcy5fY29tcG9uZW50QmluZGluZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHR0aGlzLl9jdXJyZW50Q2hhbmdlZFN0b3JlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdHRoaXMuX3dpbmRvdyA9ICRzZXJ2aWNlTG9jYXRvci5yZXNvbHZlKCd3aW5kb3cnKTtcblx0dGhpcy5fbG9nZ2VyID0gJHNlcnZpY2VMb2NhdG9yLnJlc29sdmUoJ2xvZ2dlcicpO1xuXHR0aGlzLl9jb25maWcgPSAkc2VydmljZUxvY2F0b3IucmVzb2x2ZSgnY29uZmlnJyk7XG5cdHRoaXMuX3N0b3JlRGlzcGF0Y2hlciA9ICRzZXJ2aWNlTG9jYXRvci5yZXNvbHZlKCdzdG9yZURpc3BhdGNoZXInKTtcblxuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0dGhpcy5fZXZlbnRCdXMub24oJ3N0b3JlQ2hhbmdlZCcsIGZ1bmN0aW9uIChzdG9yZU5hbWUpIHtcblx0XHRzZWxmLl9jdXJyZW50Q2hhbmdlZFN0b3Jlc1tzdG9yZU5hbWVdID0gdHJ1ZTtcblx0XHRpZiAoc2VsZi5faXNTdGF0ZUNoYW5naW5nKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHNlbGYuX3VwZGF0ZVN0b3JlQ29tcG9uZW50cygpO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDdXJyZW50IGFwcGxpY2F0aW9uIGNvbmZpZy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5fY29uZmlnID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGxvZ2dlci5cbiAqIEB0eXBlIHtMb2dnZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5fbG9nZ2VyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IHN0b3JlIGRpc3BhdGNoZXIuXG4gKiBAdHlwZSB7U3RvcmVEaXNwYXRjaGVyfVxuICogQHByb3RlY3RlZFxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5fc3RvcmVEaXNwYXRjaGVyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IHNldCBvZiBjb21wb25lbnQgaW5zdGFuY2VzIGJ5IHVuaXF1ZSBrZXlzLlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9jb21wb25lbnRJbnN0YW5jZXMgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgc2V0IG9mIGNvbXBvbmVudCBlbGVtZW50cyBieSB1bmlxdWUga2V5cy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5fY29tcG9uZW50RWxlbWVudHMgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgc2V0IG9mIGNvbXBvbmVudCBiaW5kaW5ncyBieSB1bmlxdWUga2V5cy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5fY29tcG9uZW50QmluZGluZ3MgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgcm91dGluZyBjb250ZXh0LlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9jdXJyZW50Um91dGluZ0NvbnRleHQgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgc2V0IG9mIGNoYW5nZWQgc3RvcmVzLlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9jdXJyZW50Q2hhbmdlZFN0b3JlcyA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBwcm9taXNlIGZvciByZW5kZXJlZCBwYWdlLlxuICogQHR5cGUge1Byb21pc2V9XG4gKiBAcHJpdmF0ZVxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5fcmVuZGVyZWRQcm9taXNlID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IHN0YXRlIG9mIHVwZGF0aW5nIGNvbXBvbmVudHMuXG4gKiBAdHlwZSB7Ym9vbGVhbn1cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9pc1VwZGF0aW5nID0gZmFsc2U7XG5cbi8qKlxuICogQ3VycmVudCBhd2FpdGluZyByb3V0aW5nLlxuICogQHR5cGUge3tzdGF0ZTogT2JqZWN0LCByb3V0aW5nQ29udGV4dDogT2JqZWN0fX1cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9hd2FpdGluZ1JvdXRpbmcgPSBudWxsO1xuXG4vKipcbiAqIFNldHMgdGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIGFwcGxpY2F0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIE5ldyBzdGF0ZSBvZiBhcHBsaWNhdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSByb3V0aW5nQ29udGV4dCBSb3V0aW5nIGNvbnRleHQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSBmb3Igbm90aGluZy5cbiAqL1xuRG9jdW1lbnRSZW5kZXJlci5wcm90b3R5cGUuaW5pdFdpdGhTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgcm91dGluZ0NvbnRleHQpIHtcblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRyZXR1cm4gc2VsZi5fZ2V0UHJvbWlzZUZvclJlYWR5U3RhdGUoKVxuXHRcdC50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuX2N1cnJlbnRSb3V0aW5nQ29udGV4dCA9IHJvdXRpbmdDb250ZXh0O1xuXHRcdFx0cmV0dXJuIHNlbGYuX3N0b3JlRGlzcGF0Y2hlci5zZXRTdGF0ZShzdGF0ZSwgcm91dGluZ0NvbnRleHQpO1xuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGNvbXBvbmVudHMgPSBzZWxmLl9jb21wb25lbnRMb2FkZXIuZ2V0Q29tcG9uZW50c0J5TmFtZXMoKSxcblx0XHRcdFx0ZWxlbWVudHMgPSBzZWxmLl9maW5kQ29tcG9uZW50cyhcblx0XHRcdFx0XHRzZWxmLl93aW5kb3cuZG9jdW1lbnQuYm9keSwgY29tcG9uZW50cywgdHJ1ZVxuXHRcdFx0XHQpO1xuXHRcdFx0ZWxlbWVudHMudW5zaGlmdChzZWxmLl93aW5kb3cuZG9jdW1lbnQuaGVhZCk7XG5cdFx0XHRlbGVtZW50cy51bnNoaWZ0KHNlbGYuX3dpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuXHRcdFx0cmV0dXJuIHNlbGYuX2luaXRpYWxXcmFwKGNvbXBvbmVudHMsIGVsZW1lbnRzKTtcblx0XHR9KTtcbn07XG5cbi8qKlxuICogUmVuZGVycyBuZXcgc3RhdGUgb2YgYXBwbGljYXRpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgTmV3IHN0YXRlIG9mIGFwcGxpY2F0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IHJvdXRpbmdDb250ZXh0IFJvdXRpbmcgY29udGV4dC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIGZvciBub3RoaW5nLlxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoc3RhdGUsIHJvdXRpbmdDb250ZXh0KSB7XG5cdHRoaXMuX2F3YWl0aW5nUm91dGluZyA9IHtcblx0XHRzdGF0ZTogc3RhdGUsXG5cdFx0cm91dGluZ0NvbnRleHQ6IHJvdXRpbmdDb250ZXh0XG5cdH07XG5cdGlmICh0aGlzLl9pc1N0YXRlQ2hhbmdpbmcpIHtcblx0XHRyZXR1cm4gdGhpcy5fcmVuZGVyZWRQcm9taXNlO1xuXHR9XG5cblx0Ly8gd2Ugc2hvdWxkIHNldCB0aGlzIGZsYWcgdG8gYXZvaWQgXCJzdG9yZUNoYW5nZWRcIlxuXHQvLyBldmVudCBoYW5kbGluZyBmb3Igbm93XG5cdHRoaXMuX2lzU3RhdGVDaGFuZ2luZyA9IHRydWU7XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRzZWxmLl9yZW5kZXJlZFByb21pc2UgPSB0aGlzLl9nZXRQcm9taXNlRm9yUmVhZHlTdGF0ZSgpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gYW5kIHRoZW4gd2UgdXBkYXRlIGFsbCBjb21wb25lbnRzIG9mIHRoZXNlIHN0b3JlcyBpbiBhIGJhdGNoLlxuXHRcdFx0cmV0dXJuIHNlbGYuX3VwZGF0ZVN0b3JlQ29tcG9uZW50cygpO1xuXHRcdH0pXG5cdFx0LmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ2Vycm9yJywgcmVhc29uKTtcblx0XHR9KVxuXHRcdC50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuX2lzU3RhdGVDaGFuZ2luZyA9IGZhbHNlO1xuXHRcdH0pO1xuXG5cdHJldHVybiB0aGlzLl9yZW5kZXJlZFByb21pc2U7XG59O1xuXG4vKipcbiAqIFJlbmRlcnMgY29tcG9uZW50IGludG8gSFRNTCBlbGVtZW50LlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEhUTUwgZWxlbWVudCBvZiBjb21wb25lbnRcbiAqIEBwYXJhbSB7T2JqZWN0P30gcmVuZGVyaW5nQ29udGV4dCBSZW5kZXJpbmcgY29udGV4dCBmb3IgZ3JvdXAgcmVuZGVyaW5nLlxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJDb21wb25lbnQgPVxuXHRmdW5jdGlvbiAoZWxlbWVudCwgcmVuZGVyaW5nQ29udGV4dCkge1xuXHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRyZXR1cm4gdGhpcy5fZ2V0UHJvbWlzZUZvclJlYWR5U3RhdGUoKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgaWQgPSBzZWxmLl9nZXRJZChlbGVtZW50KTtcblx0XHRcdFx0aWYgKCFpZCkge1xuXHRcdFx0XHRcdHNlbGYuX2xvZ2dlci53YXJuKFxuXHRcdFx0XHRcdFx0dXRpbC5mb3JtYXQoV0FSTl9JRF9OT1RfU1BFQ0lGSUVELCBjb21wb25lbnROYW1lKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCFyZW5kZXJpbmdDb250ZXh0KSB7XG5cdFx0XHRcdFx0cmVuZGVyaW5nQ29udGV4dCA9IHNlbGYuX2NyZWF0ZVJlbmRlcmluZ0NvbnRleHQoW10pO1xuXHRcdFx0XHRcdHJlbmRlcmluZ0NvbnRleHQucm9vdElkc1tpZF0gPSB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGNvbXBvbmVudE5hbWUgPSBtb2R1bGVIZWxwZXIuZ2V0T3JpZ2luYWxDb21wb25lbnROYW1lKFxuXHRcdFx0XHRcdFx0ZWxlbWVudC50YWdOYW1lXG5cdFx0XHRcdFx0KSxcblx0XHRcdFx0XHRoYWRDaGlsZHJlbiA9IGVsZW1lbnQuaGFzQ2hpbGROb2RlcygpLFxuXHRcdFx0XHRcdGNvbXBvbmVudCA9IHJlbmRlcmluZ0NvbnRleHQuY29tcG9uZW50c1tjb21wb25lbnROYW1lXSxcblx0XHRcdFx0XHRpbnN0YW5jZSA9IHNlbGYuX2NvbXBvbmVudEluc3RhbmNlc1tpZF07XG5cblx0XHRcdFx0aWYgKCFjb21wb25lbnQpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaWQgaW4gcmVuZGVyaW5nQ29udGV4dC5yZW5kZXJlZElkcykge1xuXHRcdFx0XHRcdHNlbGYuX2xvZ2dlci53YXJuKFxuXHRcdFx0XHRcdFx0dXRpbC5mb3JtYXQoV0FSTl9TQU1FX0lELCBpZCwgY29tcG9uZW50TmFtZSlcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlbmRlcmluZ0NvbnRleHQucmVuZGVyZWRJZHNbaWRdID0gdHJ1ZTtcblxuXHRcdFx0XHRpZiAoIWluc3RhbmNlKSB7XG5cdFx0XHRcdFx0Y29tcG9uZW50LmNvbnN0cnVjdG9yLnByb3RvdHlwZS4kY29udGV4dCA9XG5cdFx0XHRcdFx0XHRzZWxmLl9nZXRDb21wb25lbnRDb250ZXh0KGNvbXBvbmVudCwgZWxlbWVudCk7XG5cdFx0XHRcdFx0aW5zdGFuY2UgPSBzZWxmLl9zZXJ2aWNlTG9jYXRvci5yZXNvbHZlSW5zdGFuY2UoXG5cdFx0XHRcdFx0XHRjb21wb25lbnQuY29uc3RydWN0b3IsIHJlbmRlcmluZ0NvbnRleHQuY29uZmlnXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRpbnN0YW5jZS4kY29udGV4dCA9IGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUuJGNvbnRleHQ7XG5cdFx0XHRcdFx0c2VsZi5fY29tcG9uZW50SW5zdGFuY2VzW2lkXSA9IGluc3RhbmNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGV2ZW50QXJncyA9IHtcblx0XHRcdFx0XHRuYW1lOiBjb21wb25lbnROYW1lLFxuXHRcdFx0XHRcdGNvbnRleHQ6IGluc3RhbmNlLiRjb250ZXh0XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0c2VsZi5fY29tcG9uZW50RWxlbWVudHNbaWRdID0gZWxlbWVudDtcblxuXHRcdFx0XHR2YXIgc3RhcnRUaW1lID0gaHJUaW1lSGVscGVyLmdldCgpO1xuXHRcdFx0XHRzZWxmLl9ldmVudEJ1cy5lbWl0KCdjb21wb25lbnRSZW5kZXInLCBldmVudEFyZ3MpO1xuXG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXHRcdFx0XHRcdC50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdC8vIHdlIG5lZWQgdW5iaW5kIHRoZSB3aG9sZSBoaWVyYXJjaHkgb25seSBhdFxuXHRcdFx0XHRcdFx0Ly8gdGhlIGJlZ2lubmluZyBhbmQgbm90IGZvciBuZXcgZWxlbWVudHNcblx0XHRcdFx0XHRcdGlmICghKGlkIGluIHJlbmRlcmluZ0NvbnRleHQucm9vdElkcykgfHxcblx0XHRcdFx0XHRcdFx0IWhhZENoaWxkcmVuKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmV0dXJuIHNlbGYuX3VuYmluZEFsbChlbGVtZW50LCByZW5kZXJpbmdDb250ZXh0KTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7XG5cdFx0XHRcdFx0XHRzZWxmLl9ldmVudEJ1cy5lbWl0KCdlcnJvcicsIHJlYXNvbik7XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRpZiAoaW5zdGFuY2UuJGNvbnRleHQuZWxlbWVudCAhPT0gZWxlbWVudCkge1xuXHRcdFx0XHRcdFx0XHRpbnN0YW5jZS4kY29udGV4dCA9IHNlbGYuX2dldENvbXBvbmVudENvbnRleHQoXG5cdFx0XHRcdFx0XHRcdFx0Y29tcG9uZW50LCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YXIgcmVuZGVyTWV0aG9kID0gbW9kdWxlSGVscGVyLmdldE1ldGhvZFRvSW52b2tlKFxuXHRcdFx0XHRcdFx0XHRpbnN0YW5jZSwgJ3JlbmRlcidcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbW9kdWxlSGVscGVyLmdldFNhZmVQcm9taXNlKHJlbmRlck1ldGhvZCk7XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbiAoZGF0YUNvbnRleHQpIHtcblx0XHRcdFx0XHRcdHJldHVybiBjb21wb25lbnQudGVtcGxhdGUucmVuZGVyKGRhdGFDb250ZXh0KTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gc2VsZi5faGFuZGxlUmVuZGVyRXJyb3IoXG5cdFx0XHRcdFx0XHRcdGVsZW1lbnQsIGNvbXBvbmVudCwgcmVhc29uXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24gKGh0bWwpIHtcblx0XHRcdFx0XHRcdHZhciBpc0hlYWQgPSBlbGVtZW50LnRhZ05hbWUgPT09IFRBR19OQU1FUy5IRUFEO1xuXHRcdFx0XHRcdFx0aWYgKGh0bWwgPT09ICcnICYmIGlzSGVhZCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YXIgdG1wRWxlbWVudCA9IHNlbGYuX2NyZWF0ZVRlbXBvcmFyeUVsZW1lbnQoZWxlbWVudCk7XG5cdFx0XHRcdFx0XHR0bXBFbGVtZW50LmlubmVySFRNTCA9IGh0bWw7XG5cblx0XHRcdFx0XHRcdGlmIChpc0hlYWQpIHtcblx0XHRcdFx0XHRcdFx0c2VsZi5fbWVyZ2VIZWFkKGVsZW1lbnQsIHRtcEVsZW1lbnQpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG1vcnBoZG9tKGVsZW1lbnQsIHRtcEVsZW1lbnQsIHtcblx0XHRcdFx0XHRcdFx0b25CZWZvcmVNb3JwaEVsQ2hpbGRyZW46IGZ1bmN0aW9uIChmb3VuZEVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZm91bmRFbGVtZW50ID09PSBlbGVtZW50IHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQhc2VsZi5faXNDb21wb25lbnQoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJlbmRlcmluZ0NvbnRleHQuY29tcG9uZW50cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm91bmRFbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0dmFyIHByb21pc2VzID0gc2VsZi5fZmluZENvbXBvbmVudHMoXG5cdFx0XHRcdFx0XHRcdGVsZW1lbnQsIHJlbmRlcmluZ0NvbnRleHQuY29tcG9uZW50cywgZmFsc2Vcblx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdFx0Lm1hcChmdW5jdGlvbiAoaW5uZXJDb21wb25lbnQpIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc2VsZi5yZW5kZXJDb21wb25lbnQoXG5cdFx0XHRcdFx0XHRcdFx0XHRpbm5lckNvbXBvbmVudCwgcmVuZGVyaW5nQ29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHRcdC50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGV2ZW50QXJncy5oclRpbWUgPSBoclRpbWVIZWxwZXIuZ2V0KHN0YXJ0VGltZSk7XG5cdFx0XHRcdFx0XHRldmVudEFyZ3MudGltZSA9IGhyVGltZUhlbHBlci50b01pbGxpc2Vjb25kcyhcblx0XHRcdFx0XHRcdFx0ZXZlbnRBcmdzLmhyVGltZVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ2NvbXBvbmVudFJlbmRlcmVkJywgZXZlbnRBcmdzKTtcblx0XHRcdFx0XHRcdHJldHVybiBzZWxmLl9iaW5kQ29tcG9uZW50KGVsZW1lbnQpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0Ly8gY29sbGVjdGluZyBnYXJiYWdlIG9ubHkgd2hlblxuXHRcdFx0XHRcdFx0Ly8gdGhlIGVudGlyZSByZW5kZXJpbmcgaXMgZmluaXNoZWRcblx0XHRcdFx0XHRcdGlmICghKGlkIGluIHJlbmRlcmluZ0NvbnRleHQucm9vdElkcykgfHxcblx0XHRcdFx0XHRcdFx0IWhhZENoaWxkcmVuKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNlbGYuX2NvbGxlY3RSZW5kZXJpbmdHYXJiYWdlKHJlbmRlcmluZ0NvbnRleHQpO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0LmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdFx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ2Vycm9yJywgcmVhc29uKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHR9O1xuXG4vKipcbiAqIEdldHMgY29tcG9uZW50IGluc3RhbmNlIGJ5IElELlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENvbXBvbmVudCBJRC5cbiAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0gQ29tcG9uZW50IGluc3RhbmNlLlxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5nZXRDb21wb25lbnRCeUlkID0gZnVuY3Rpb24gKGlkKSB7XG5cdHJldHVybiB0aGlzLl9jb21wb25lbnRJbnN0YW5jZXNbaWRdIHx8IG51bGw7XG59O1xuXG4vKipcbiAqIEdldHMgY29tcG9uZW50IGluc3RhbmNlIGJ5IGEgRE9NIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgQ29tcG9uZW50J3MgRWxlbWVudC5cbiAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0gQ29tcG9uZW50IGluc3RhbmNlLlxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5nZXRDb21wb25lbnRCeUVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRpZiAoIWVsZW1lbnQpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHR2YXIgaWQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShtb2R1bGVIZWxwZXIuQVRUUklCVVRFX0lEKTtcblx0cmV0dXJuIHRoaXMuZ2V0Q29tcG9uZW50QnlJZChpZCk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB0aGF0IGV2ZXJ5IGluc3RhbmNlIG9mIGNvbXBvbmVudCBoYXMgZWxlbWVudCBvbiB0aGUgcGFnZSBhbmRcbiAqIHJlbW92ZXMgYWxsIHJlZmVyZW5jZXMgdG8gY29tcG9uZW50cyByZW1vdmVkIGZyb20gRE9NLlxuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2UgZm9yIG5vdGhpbmcuXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLmNvbGxlY3RHYXJiYWdlID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cdHJldHVybiB0aGlzLl9nZXRQcm9taXNlRm9yUmVhZHlTdGF0ZSgpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIHByb21pc2VzID0gW107XG5cdFx0XHRPYmplY3Qua2V5cyhzZWxmLl9jb21wb25lbnRFbGVtZW50cylcblx0XHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRcdFx0aWYgKFNQRUNJQUxfSURTLmhhc093blByb3BlcnR5KGlkKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgZWxlbWVudCA9IHNlbGYuX3dpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cdFx0XHRcdFx0aWYgKGVsZW1lbnQpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgcHJvbWlzZSA9IHNlbGYuX3VuYmluZENvbXBvbmVudChzZWxmLl9jb21wb25lbnRFbGVtZW50c1tpZF0pXG5cdFx0XHRcdFx0XHQudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuX3JlbW92ZUNvbXBvbmVudChpZCk7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0XHR9KTtcblx0XHRcdHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG5cdFx0fSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYW5kIHJlbmRlcnMgY29tcG9uZW50IGVsZW1lbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnTmFtZSBOYW1lIG9mIEhUTUwgdGFnLlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXMgRWxlbWVudCBhdHRyaWJ1dGVzLlxuICogQHJldHVybnMge1Byb21pc2U8RWxlbWVudD59IFByb21pc2UgZm9yIEhUTUwgZWxlbWVudCB3aXRoIHJlbmRlcmVkIGNvbXBvbmVudC5cbiAqL1xuRG9jdW1lbnRSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKHRhZ05hbWUsIGF0dHJpYnV0ZXMpIHtcblx0aWYgKHR5cGVvZiAodGFnTmFtZSkgIT09ICdzdHJpbmcnIHx8ICFhdHRyaWJ1dGVzIHx8XG5cdFx0dHlwZW9mIChhdHRyaWJ1dGVzKSAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoXG5cdFx0XHRuZXcgRXJyb3IoRVJST1JfQ1JFQVRFX1dST05HX0FSR1VNRU5UUylcblx0XHQpO1xuXHR9XG5cblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRyZXR1cm4gdGhpcy5fZ2V0UHJvbWlzZUZvclJlYWR5U3RhdGUoKVxuXHRcdC50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBjb21wb25lbnRzID0gc2VsZi5fY29tcG9uZW50TG9hZGVyLmdldENvbXBvbmVudHNCeU5hbWVzKCksXG5cdFx0XHRcdGNvbXBvbmVudE5hbWUgPSBtb2R1bGVIZWxwZXIuZ2V0T3JpZ2luYWxDb21wb25lbnROYW1lKHRhZ05hbWUpO1xuXG5cdFx0XHRpZiAobW9kdWxlSGVscGVyLmlzSGVhZENvbXBvbmVudChjb21wb25lbnROYW1lKSB8fFxuXHRcdFx0XHRtb2R1bGVIZWxwZXIuaXNEb2N1bWVudENvbXBvbmVudChjb21wb25lbnROYW1lKSB8fFxuXHRcdFx0XHQhKGNvbXBvbmVudE5hbWUgaW4gY29tcG9uZW50cykpIHtcblx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KFxuXHRcdFx0XHRcdG5ldyBFcnJvcih1dGlsLmZvcm1hdChFUlJPUl9DUkVBVEVfV1JPTkdfTkFNRSwgdGFnTmFtZSkpXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzYWZlVGFnTmFtZSA9IG1vZHVsZUhlbHBlci5nZXRUYWdOYW1lRm9yQ29tcG9uZW50TmFtZShjb21wb25lbnROYW1lKTtcblxuXHRcdFx0dmFyIGlkID0gYXR0cmlidXRlc1ttb2R1bGVIZWxwZXIuQVRUUklCVVRFX0lEXTtcblx0XHRcdGlmICghaWQgfHwgaWQgaW4gc2VsZi5fY29tcG9uZW50SW5zdGFuY2VzKSB7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoRVJST1JfQ1JFQVRFX1dST05HX0lEKSk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBlbGVtZW50ID0gc2VsZi5fd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoc2FmZVRhZ05hbWUpO1xuXHRcdFx0T2JqZWN0LmtleXMoYXR0cmlidXRlcylcblx0XHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcblx0XHRcdFx0XHRlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBzZWxmLnJlbmRlckNvbXBvbmVudChlbGVtZW50KVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdFx0XHRcdH0pO1xuXHRcdH0pO1xufTtcblxuLyoqXG4gKiBDbGVhcnMgYWxsIHJlZmVyZW5jZXMgdG8gcmVtb3ZlZCBjb21wb25lbnRzIGR1cmluZyByZW5kZXJpbmcgcHJvY2Vzcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZW5kZXJpbmdDb250ZXh0IENvbnRleHQgb2YgcmVuZGVyaW5nLlxuICogQHByaXZhdGVcbiAqL1xuRG9jdW1lbnRSZW5kZXJlci5wcm90b3R5cGUuX2NvbGxlY3RSZW5kZXJpbmdHYXJiYWdlID1cblx0ZnVuY3Rpb24gKHJlbmRlcmluZ0NvbnRleHQpIHtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0T2JqZWN0LmtleXMocmVuZGVyaW5nQ29udGV4dC51bmJvdW5kSWRzKVxuXHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRcdC8vIHRoaXMgY29tcG9uZW50IGhhcyBiZWVuIHJlbmRlcmVkIGFnYWluIGFuZCB3ZSBkbyBub3QgbmVlZCB0b1xuXHRcdFx0XHQvLyByZW1vdmUgaXQuXG5cdFx0XHRcdGlmIChpZCBpbiByZW5kZXJpbmdDb250ZXh0LnJlbmRlcmVkSWRzKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgc29tZW9uZSBhZGRlZCBhbiBlbGVtZW50IHdpdGggdGhlIHNhbWUgSUQgZHVyaW5nIHRoZVxuXHRcdFx0XHQvLyByZW5kZXJpbmcgcHJvY2Vzc1xuXHRcdFx0XHRpZiAoc2VsZi5fd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNlbGYuX3JlbW92ZUNvbXBvbmVudChpZCk7XG5cdFx0XHR9KTtcblx0fTtcblxuLyoqXG4gKiBVbmJpbmRzIGFsbCBldmVudCBoYW5kbGVycyBmcm9tIHNwZWNpZmllZCBjb21wb25lbnQgYW5kIGFsbCBpdCdzIGRlc2NlbmRhbnRzLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IENvbXBvbmVudCBIVE1MIGVsZW1lbnQuXG4gKiBAcGFyYW0ge09iamVjdH0gcmVuZGVyaW5nQ29udGV4dCBDb250ZXh0IG9mIHJlbmRlcmluZy5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIGZvciBub3RoaW5nLlxuICogQHByaXZhdGVcbiAqL1xuRG9jdW1lbnRSZW5kZXJlci5wcm90b3R5cGUuX3VuYmluZEFsbCA9IGZ1bmN0aW9uIChlbGVtZW50LCByZW5kZXJpbmdDb250ZXh0KSB7XG5cdHZhciBzZWxmID0gdGhpcyxcblx0XHRyb290SWQgPSB0aGlzLl9nZXRJZChlbGVtZW50KSxcblx0XHRwcm9taXNlcyA9IFtdO1xuXG5cdHNlbGYuX2ZpbmRDb21wb25lbnRzKGVsZW1lbnQsIHJlbmRlcmluZ0NvbnRleHQuY29tcG9uZW50cywgdHJ1ZSlcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAoaW5uZXJFbGVtZW50KSB7XG5cdFx0XHR2YXIgaWQgPSBzZWxmLl9nZXRJZChpbm5lckVsZW1lbnQpO1xuXHRcdFx0cmVuZGVyaW5nQ29udGV4dC51bmJvdW5kSWRzW2lkXSA9IHRydWU7XG5cdFx0XHRwcm9taXNlcy5wdXNoKHNlbGYuX3VuYmluZENvbXBvbmVudChpbm5lckVsZW1lbnQpKTtcblx0XHR9KTtcblxuXHRyZW5kZXJpbmdDb250ZXh0LnVuYm91bmRJZHNbcm9vdElkXSA9IHRydWU7XG5cdHByb21pc2VzLnB1c2godGhpcy5fdW5iaW5kQ29tcG9uZW50KGVsZW1lbnQpKTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuLyoqXG4gKiBVbmJpbmRzIGFsbCBldmVudCBoYW5kbGVycyBmcm9tIHNwZWNpZmllZCBjb21wb25lbnQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgQ29tcG9uZW50IEhUTUwgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIGZvciBub3RoaW5nLlxuICogQHByaXZhdGVcbiAqL1xuRG9jdW1lbnRSZW5kZXJlci5wcm90b3R5cGUuX3VuYmluZENvbXBvbmVudCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdHZhciBpZCA9IHRoaXMuX2dldElkKGVsZW1lbnQpLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdGluc3RhbmNlID0gdGhpcy5fY29tcG9uZW50SW5zdGFuY2VzW2lkXTtcblx0aWYgKCFpbnN0YW5jZSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0fVxuXHRpZiAoaWQgaW4gdGhpcy5fY29tcG9uZW50QmluZGluZ3MpIHtcblx0XHRPYmplY3Qua2V5cyh0aGlzLl9jb21wb25lbnRCaW5kaW5nc1tpZF0pXG5cdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG5cdFx0XHRcdGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcblx0XHRcdFx0XHRldmVudE5hbWUsXG5cdFx0XHRcdFx0c2VsZi5fY29tcG9uZW50QmluZGluZ3NbaWRdW2V2ZW50TmFtZV0uaGFuZGxlcixcblx0XHRcdFx0XHROT05fQlVCQkxJTkdfRVZFTlRTLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSlcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdGRlbGV0ZSB0aGlzLl9jb21wb25lbnRCaW5kaW5nc1tpZF07XG5cdH1cblx0dmFyIHVuYmluZE1ldGhvZCA9IG1vZHVsZUhlbHBlci5nZXRNZXRob2RUb0ludm9rZShpbnN0YW5jZSwgJ3VuYmluZCcpO1xuXHRyZXR1cm4gbW9kdWxlSGVscGVyLmdldFNhZmVQcm9taXNlKHVuYmluZE1ldGhvZClcblx0XHQudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRzZWxmLl9ldmVudEJ1cy5lbWl0KCdjb21wb25lbnRVbmJvdW5kJywge1xuXHRcdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0XHRpZDogIVNQRUNJQUxfSURTLmhhc093blByb3BlcnR5KGlkKSA/IGlkIDogbnVsbFxuXHRcdFx0fSk7XG5cdFx0fSlcblx0XHQuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikge1xuXHRcdFx0c2VsZi5fZXZlbnRCdXMuZW1pdCgnZXJyb3InLCByZWFzb24pO1xuXHRcdH0pO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGNvbXBvbmVudCBmcm9tIHRoZSBsaXN0LlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENvbXBvbmVudCdzIElEXG4gKiBAcHJpdmF0ZVxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5fcmVtb3ZlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGlkKSB7XG5cdGRlbGV0ZSB0aGlzLl9jb21wb25lbnRFbGVtZW50c1tpZF07XG5cdGRlbGV0ZSB0aGlzLl9jb21wb25lbnRJbnN0YW5jZXNbaWRdO1xuXHRkZWxldGUgdGhpcy5fY29tcG9uZW50QmluZGluZ3NbaWRdO1xufTtcblxuLyoqXG4gKiBCaW5kcyBhbGwgcmVxdWlyZWQgZXZlbnQgaGFuZGxlcnMgdG8gY29tcG9uZW50LlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IENvbXBvbmVudCBIVE1MIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSBmb3Igbm90aGluZy5cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9iaW5kQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0dmFyIGlkID0gdGhpcy5fZ2V0SWQoZWxlbWVudCksXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0aW5zdGFuY2UgPSB0aGlzLl9jb21wb25lbnRJbnN0YW5jZXNbaWRdO1xuXHRpZiAoIWluc3RhbmNlKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXHR9XG5cblx0dmFyIGJpbmRNZXRob2QgPSBtb2R1bGVIZWxwZXIuZ2V0TWV0aG9kVG9JbnZva2UoaW5zdGFuY2UsICdiaW5kJyk7XG5cdHJldHVybiBtb2R1bGVIZWxwZXIuZ2V0U2FmZVByb21pc2UoYmluZE1ldGhvZClcblx0XHQudGhlbihmdW5jdGlvbiAoYmluZGluZ3MpIHtcblx0XHRcdGlmICghYmluZGluZ3MgfHwgdHlwZW9mIChiaW5kaW5ncykgIT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ2NvbXBvbmVudEJvdW5kJywge1xuXHRcdFx0XHRcdGVsZW1lbnQ6IGVsZW1lbnQsXG5cdFx0XHRcdFx0aWQ6ICFTUEVDSUFMX0lEUy5oYXNPd25Qcm9wZXJ0eShpZCkgPyBpZCA6IG51bGxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHNlbGYuX2NvbXBvbmVudEJpbmRpbmdzW2lkXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdFx0XHRPYmplY3Qua2V5cyhiaW5kaW5ncylcblx0XHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuXHRcdFx0XHRcdGV2ZW50TmFtZSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGlmIChldmVudE5hbWUgaW4gc2VsZi5fY29tcG9uZW50QmluZGluZ3NbaWRdKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBzZWxlY3RvckhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhiaW5kaW5nc1tldmVudE5hbWVdKVxuXHRcdFx0XHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBoYW5kbGVyID0gYmluZGluZ3NbZXZlbnROYW1lXVtzZWxlY3Rvcl07XG5cdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgKGhhbmRsZXIpICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHNlbGVjdG9ySGFuZGxlcnNbc2VsZWN0b3JdID0gaGFuZGxlci5iaW5kKGluc3RhbmNlKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNlbGYuX2NvbXBvbmVudEJpbmRpbmdzW2lkXVtldmVudE5hbWVdID0ge1xuXHRcdFx0XHRcdFx0aGFuZGxlcjogc2VsZi5fY3JlYXRlQmluZGluZ0hhbmRsZXIoXG5cdFx0XHRcdFx0XHRcdGVsZW1lbnQsIHNlbGVjdG9ySGFuZGxlcnNcblx0XHRcdFx0XHRcdCksXG5cdFx0XHRcdFx0XHRzZWxlY3RvckhhbmRsZXJzOiBzZWxlY3RvckhhbmRsZXJzXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0XHRcdFx0XHRldmVudE5hbWUsXG5cdFx0XHRcdFx0XHRzZWxmLl9jb21wb25lbnRCaW5kaW5nc1tpZF1bZXZlbnROYW1lXS5oYW5kbGVyLFxuXHRcdFx0XHRcdFx0Tk9OX0JVQkJMSU5HX0VWRU5UUy5oYXNPd25Qcm9wZXJ0eShldmVudE5hbWUpXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fSk7XG5cdFx0XHRzZWxmLl9ldmVudEJ1cy5lbWl0KCdjb21wb25lbnRCb3VuZCcsIHtcblx0XHRcdFx0ZWxlbWVudDogZWxlbWVudCxcblx0XHRcdFx0aWQ6IGlkXG5cdFx0XHR9KTtcblx0XHR9KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyB1bml2ZXJzYWwgZXZlbnQgaGFuZGxlciBmb3IgZGVsZWdhdGVkIGV2ZW50cy5cbiAqIEBwYXJhbSB7RWxlbWVudH0gY29tcG9uZW50Um9vdCBSb290IGVsZW1lbnQgb2YgY29tcG9uZW50LlxuICogQHBhcmFtIHtPYmplY3R9IHNlbGVjdG9ySGFuZGxlcnMgTWFwIG9mIGV2ZW50IGhhbmRsZXJzIGJ5IENTUyBzZWxlY3RvcnMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFVuaXZlcnNhbCBldmVudCBoYW5kbGVyIGZvciBkZWxlZ2F0ZWQgZXZlbnRzLlxuICogQHByaXZhdGVcbiAqL1xuRG9jdW1lbnRSZW5kZXJlci5wcm90b3R5cGUuX2NyZWF0ZUJpbmRpbmdIYW5kbGVyID1cblx0ZnVuY3Rpb24gKGNvbXBvbmVudFJvb3QsIHNlbGVjdG9ySGFuZGxlcnMpIHtcblx0XHR2YXIgc2VsZWN0b3JzID0gT2JqZWN0LmtleXMoc2VsZWN0b3JIYW5kbGVycyk7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0dmFyIGRpc3BhdGNoZWRFdmVudCA9IGNyZWF0ZUN1c3RvbUV2ZW50KGV2ZW50LCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRlbGVtZW50ID0gZXZlbnQudGFyZ2V0LFxuXHRcdFx0XHR0YXJnZXRNYXRjaGVzID0gZ2V0TWF0Y2hlc01ldGhvZChlbGVtZW50KSxcblx0XHRcdFx0aXNIYW5kbGVkID0gc2VsZWN0b3JzLnNvbWUoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG5cdFx0XHRcdFx0aWYgKHRhcmdldE1hdGNoZXMoc2VsZWN0b3IpKSB7XG5cdFx0XHRcdFx0XHRzZWxlY3RvckhhbmRsZXJzW3NlbGVjdG9yXShkaXNwYXRjaGVkRXZlbnQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fSk7XG5cdFx0XHRpZiAoaXNIYW5kbGVkIHx8ICFldmVudC5idWJibGVzKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0d2hpbGUgKGVsZW1lbnQucGFyZW50RWxlbWVudCAmJiBlbGVtZW50ICE9PSBjb21wb25lbnRSb290KSB7XG5cdFx0XHRcdGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG5cdFx0XHRcdHRhcmdldE1hdGNoZXMgPSBnZXRNYXRjaGVzTWV0aG9kKGVsZW1lbnQpO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdG9ycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGlmICghdGFyZ2V0TWF0Y2hlcyhzZWxlY3RvcnNbaV0pKSB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aXNIYW5kbGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRzZWxlY3RvckhhbmRsZXJzW3NlbGVjdG9yc1tpXV0oZGlzcGF0Y2hlZEV2ZW50KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChpc0hhbmRsZWQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBlbGVtZW50IGlzIGEgY29tcG9uZW50LlxuICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudHMgQ3VycmVudCBjb21wb25lbnRzLlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IERPTSBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuRG9jdW1lbnRSZW5kZXJlci5wcm90b3R5cGUuX2lzQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudHMsIGVsZW1lbnQpIHtcblx0dmFyIGN1cnJlbnROb2RlTmFtZSA9IGVsZW1lbnQubm9kZU5hbWU7XG5cdHJldHVybiBtb2R1bGVIZWxwZXIuQ09NUE9ORU5UX1BSRUZJWF9SRUdFWFAudGVzdChjdXJyZW50Tm9kZU5hbWUpICYmXG5cdFx0KG1vZHVsZUhlbHBlci5nZXRPcmlnaW5hbENvbXBvbmVudE5hbWUoY3VycmVudE5vZGVOYW1lKSBpbiBjb21wb25lbnRzKTtcbn07XG5cbi8qKlxuICogRmluZHMgYWxsIGRlc2NlbmRhbnQgY29tcG9uZW50cyBvZiBzcGVjaWZpZWQgY29tcG9uZW50IGVsZW1lbnQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgUm9vdCBjb21wb25lbnQgSFRNTCBlbGVtZW50IHRvIGJlZ2luIHNlYXJjaCB3aXRoLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudHMgTWFwIG9mIGNvbXBvbmVudHMgYnkgbmFtZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGdvSW5Db21wb25lbnRzIEdvIGluc2lkZSBuZXN0ZWQgY29tcG9uZW50cy5cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9maW5kQ29tcG9uZW50cyA9XG5cdGZ1bmN0aW9uIChlbGVtZW50LCBjb21wb25lbnRzLCBnb0luQ29tcG9uZW50cykge1xuXHRcdHZhciBlbGVtZW50cyA9IFtdLFxuXHRcdFx0cXVldWUgPSBbZWxlbWVudF0sXG5cdFx0XHRjdXJyZW50Q2hpbGRyZW4sIGk7XG5cblx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0Y3VycmVudENoaWxkcmVuID0gcXVldWUuc2hpZnQoKS5jaGlsZE5vZGVzO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGN1cnJlbnRDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHQvLyB3ZSBuZWVkIG9ubHkgRWxlbWVudCBub2Rlc1xuXHRcdFx0XHRpZiAoY3VycmVudENoaWxkcmVuW2ldLm5vZGVUeXBlICE9PSAxKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBhbmQgdGhleSBzaG91bGQgYmUgY29tcG9uZW50c1xuXHRcdFx0XHRpZiAoIXRoaXMuX2lzQ29tcG9uZW50KGNvbXBvbmVudHMsIGN1cnJlbnRDaGlsZHJlbltpXSkpIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKGN1cnJlbnRDaGlsZHJlbltpXSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZ29JbkNvbXBvbmVudHMpIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKGN1cnJlbnRDaGlsZHJlbltpXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbWVudHMucHVzaChjdXJyZW50Q2hpbGRyZW5baV0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtZW50cztcblx0fTtcblxuLyoqXG4gKiBIYW5kbGVzIGVycm9yIHdoaWxlIHJlbmRlcmluZy5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBDb21wb25lbnQgSFRNTCBlbGVtZW50LlxuICogQHBhcmFtIHtPYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBFcnJvciB0byBoYW5kbGUuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBQcm9taXNlIGZvciBIVE1MIHN0cmluZy5cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9oYW5kbGVSZW5kZXJFcnJvciA9XG5cdGZ1bmN0aW9uIChlbGVtZW50LCBjb21wb25lbnQsIGVycm9yKSB7XG5cdFx0dGhpcy5fZXZlbnRCdXMuZW1pdCgnZXJyb3InLCBlcnJvcik7XG5cblx0XHQvLyBkbyBub3QgY29ycnVwdCBleGlzdGVkIEhFQUQgd2hlbiBlcnJvciBvY2N1cnNcblx0XHRpZiAoZWxlbWVudC50YWdOYW1lID09PSBUQUdfTkFNRVMuSEVBRCkge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgnJyk7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLl9jb25maWcuaXNSZWxlYXNlICYmIGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcblx0XHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoZXJyb3JIZWxwZXIucHJldHR5UHJpbnQoXG5cdFx0XHRcdGVycm9yLCB0aGlzLl93aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudFxuXHRcdFx0KSk7XG5cdFx0fSBlbHNlIGlmIChjb21wb25lbnQuZXJyb3JUZW1wbGF0ZSkge1xuXHRcdFx0cmV0dXJuIGNvbXBvbmVudC5lcnJvclRlbXBsYXRlLnJlbmRlcihlcnJvcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgnJyk7XG5cdH07XG5cbi8qKlxuICogVXBkYXRlcyBhbGwgY29tcG9uZW50cyB0aGF0IGRlcGVuZCBvbiBjdXJyZW50IHNldCBvZiBjaGFuZ2VkIHN0b3Jlcy5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIGZvciBub3RoaW5nLlxuICogQHByaXZhdGVcbiAqL1xuRG9jdW1lbnRSZW5kZXJlci5wcm90b3R5cGUuX3VwZGF0ZVN0b3JlQ29tcG9uZW50cyA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKHRoaXMuX2lzVXBkYXRpbmcpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblxuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0Ly8gaWYgZG9jdW1lbnQgY29tcG9uZW50IGlzIGNoYW5nZWQgd2Ugc2hvdWxkIHJlbG9hZCB0aGUgcGFnZVxuXHR2YXIgZG9jdW1lbnRTdG9yZSA9IHRoaXMuX3dpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFxuXHRcdG1vZHVsZUhlbHBlci5BVFRSSUJVVEVfU1RPUkVcblx0KTtcblx0aWYgKGRvY3VtZW50U3RvcmUgaW4gdGhpcy5fY3VycmVudENoYW5nZWRTdG9yZXMpIHtcblx0XHR2YXIgbmV3TG9jYXRpb24gPSB0aGlzLl9jdXJyZW50Um91dGluZ0NvbnRleHQubG9jYXRpb24udG9TdHJpbmcoKTtcblx0XHRpZiAobmV3TG9jYXRpb24gPT09IHRoaXMuX3dpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpKSB7XG5cdFx0XHR0aGlzLl93aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdFx0fVxuXHRcdHRoaXMuX3dpbmRvdy5sb2NhdGlvbi5hc3NpZ24obmV3TG9jYXRpb24pO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblx0fVxuXG5cdHRoaXMuX2lzVXBkYXRpbmcgPSB0cnVlO1xuXG5cdC8vIGlmIHdlIGhhdmUgYXdhaXRpbmcgcm91dGluZyB3ZSBzaG91bGQgYXBwbHkgc3RhdGUgdG8gdGhlIHN0b3Jlc1xuXHRpZiAodGhpcy5fYXdhaXRpbmdSb3V0aW5nKSB7XG5cdFx0dmFyIGNvbXBvbmVudHMgPSB0aGlzLl9jb21wb25lbnRMb2FkZXIuZ2V0Q29tcG9uZW50c0J5TmFtZXMoKSxcblx0XHRcdGNoYW5nZWRCeVN0YXRlID0gdGhpcy5fc3RvcmVEaXNwYXRjaGVyLnNldFN0YXRlKFxuXHRcdFx0XHR0aGlzLl9hd2FpdGluZ1JvdXRpbmcuc3RhdGUsXG5cdFx0XHRcdHRoaXMuX2F3YWl0aW5nUm91dGluZy5yb3V0aW5nQ29udGV4dFxuXHRcdFx0KTtcblxuXHRcdGNoYW5nZWRCeVN0YXRlLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRcdHNlbGYuX2N1cnJlbnRDaGFuZ2VkU3RvcmVzW25hbWVdID0gdHJ1ZTtcblx0XHR9KTtcblxuXHRcdC8vIHdlIHNob3VsZCB1cGRhdGUgY29udGV4dHMgb2YgdGhlIHN0b3JlcyB3aXRoIHRoZSBuZXcgcm91dGluZyBjb250ZXh0XG5cdFx0dGhpcy5fY3VycmVudFJvdXRpbmdDb250ZXh0ID0gdGhpcy5fYXdhaXRpbmdSb3V0aW5nLnJvdXRpbmdDb250ZXh0O1xuXHRcdE9iamVjdC5rZXlzKHRoaXMuX2NvbXBvbmVudEluc3RhbmNlcylcblx0XHRcdC5mb3JFYWNoKGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0XHR2YXIgaW5zdGFuY2UgPSBzZWxmLl9jb21wb25lbnRJbnN0YW5jZXNbaWRdO1xuXHRcdFx0XHRpbnN0YW5jZS4kY29udGV4dCA9IHNlbGYuX2dldENvbXBvbmVudENvbnRleHQoXG5cdFx0XHRcdFx0Y29tcG9uZW50c1tpbnN0YW5jZS4kY29udGV4dC5uYW1lXSxcblx0XHRcdFx0XHRpbnN0YW5jZS4kY29udGV4dC5lbGVtZW50XG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblx0XHR0aGlzLl9hd2FpdGluZ1JvdXRpbmcgPSBudWxsO1xuXHR9XG5cblx0dmFyIGNoYW5nZWRTdG9yZXMgPSBPYmplY3Qua2V5cyh0aGlzLl9jdXJyZW50Q2hhbmdlZFN0b3Jlcyk7XG5cdGlmIChjaGFuZ2VkU3RvcmVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRoaXMuX2lzVXBkYXRpbmcgPSBmYWxzZTtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cdH1cblxuXHR0aGlzLl9jdXJyZW50Q2hhbmdlZFN0b3JlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0dmFyIHJlbmRlcmluZ0NvbnRleHQgPSB0aGlzLl9jcmVhdGVSZW5kZXJpbmdDb250ZXh0KGNoYW5nZWRTdG9yZXMpLFxuXHRcdHByb21pc2VzID0gcmVuZGVyaW5nQ29udGV4dC5yb290cy5tYXAoZnVuY3Rpb24gKHJvb3QpIHtcblx0XHRcdHJlbmRlcmluZ0NvbnRleHQucm9vdElkc1tzZWxmLl9nZXRJZChyb290KV0gPSB0cnVlO1xuXHRcdFx0cmV0dXJuIHNlbGYucmVuZGVyQ29tcG9uZW50KHJvb3QsIHJlbmRlcmluZ0NvbnRleHQpO1xuXHRcdH0pO1xuXG5cdHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcylcblx0XHQuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikge1xuXHRcdFx0c2VsZi5fZXZlbnRCdXMuZW1pdCgnZXJyb3InLCByZWFzb24pO1xuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0c2VsZi5faXNVcGRhdGluZyA9IGZhbHNlO1xuXHRcdFx0c2VsZi5fZXZlbnRCdXMuZW1pdCgnZG9jdW1lbnRVcGRhdGVkJywgY2hhbmdlZFN0b3Jlcyk7XG5cdFx0XHRyZXR1cm4gc2VsZi5fdXBkYXRlU3RvcmVDb21wb25lbnRzKCk7XG5cdFx0fSk7XG59O1xuXG4vKipcbiAqIE1lcmdlcyBuZXcgYW5kIGV4aXN0ZWQgaGVhZCBlbGVtZW50cyBhbmQgY2hhbmdlIG9ubHkgZGlmZmVyZW5jZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gaGVhZCBIRUFEIERPTSBlbGVtZW50LlxuICogQHBhcmFtIHtFbGVtZW50fSBuZXdIZWFkIE5ldyBoZWFkIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG4vKmpzaGludCBtYXhjb21wbGV4aXR5OmZhbHNlICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5fbWVyZ2VIZWFkID0gZnVuY3Rpb24gKGhlYWQsIG5ld0hlYWQpIHtcblx0aWYgKCFuZXdIZWFkKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBzZWxmID0gdGhpcztcblxuXHR2YXIgbWFwID0gdGhpcy5fZ2V0SGVhZE1hcChoZWFkLmNoaWxkTm9kZXMpLFxuXHRcdGN1cnJlbnQsIGksIGtleSwgb2xkS2V5LCBvbGRJdGVtLFxuXHRcdHNhbWVNZXRhRWxlbWVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdGZvciAoaSA9IDA7IGkgPCBuZXdIZWFkLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcblx0XHRjdXJyZW50ID0gbmV3SGVhZC5jaGlsZE5vZGVzW2ldO1xuXG5cdFx0aWYgKCEoY3VycmVudC5ub2RlTmFtZSBpbiBtYXApKSB7XG5cdFx0XHRtYXBbY3VycmVudC5ub2RlTmFtZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRcdH1cblxuXHRcdHN3aXRjaCAoY3VycmVudC5ub2RlTmFtZSkge1xuXHRcdFx0Ly8gdGhlc2UgZWxlbWVudHMgY2FuIGJlIG9ubHkgcmVwbGFjZWRcblx0XHRcdGNhc2UgVEFHX05BTUVTLlRJVExFOlxuXHRcdFx0Y2FzZSBUQUdfTkFNRVMuQkFTRTpcblx0XHRcdGNhc2UgVEFHX05BTUVTLk5PU0NSSVBUOlxuXHRcdFx0XHRrZXkgPSB0aGlzLl9nZXROb2RlS2V5KGN1cnJlbnQpO1xuXHRcdFx0XHRvbGRJdGVtID0gaGVhZC5nZXRFbGVtZW50c0J5VGFnTmFtZShjdXJyZW50Lm5vZGVOYW1lKVswXTtcblx0XHRcdFx0aWYgKG9sZEl0ZW0pIHtcblx0XHRcdFx0XHRvbGRLZXkgPSB0aGlzLl9nZXROb2RlS2V5KG9sZEl0ZW0pO1xuXHRcdFx0XHRcdGhlYWQucmVwbGFjZUNoaWxkKGN1cnJlbnQsIG9sZEl0ZW0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGhlYWQuYXBwZW5kQ2hpbGQoY3VycmVudCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gd2hlbiB3ZSBkbyByZXBsYWNlIG9yIGFwcGVuZCBjdXJyZW50IGlzIHJlbW92ZWQgZnJvbSBuZXdIZWFkXG5cdFx0XHRcdC8vIHRoZXJlZm9yZSB3ZSBuZWVkIHRvIGRlY3JlbWVudCBpbmRleFxuXHRcdFx0XHRpLS07XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHQvLyB0aGVzZSBlbGVtZW50cyBjYW4gbm90IGJlIGRlbGV0ZWQgZnJvbSBoZWFkXG5cdFx0XHQvLyB0aGVyZWZvcmUgd2UganVzdCBhZGQgbmV3IGVsZW1lbnRzIHRoYXQgZGlmZmVycyBmcm9tIGV4aXN0ZWRcblx0XHRcdGNhc2UgVEFHX05BTUVTLlNUWUxFOlxuXHRcdFx0Y2FzZSBUQUdfTkFNRVMuTElOSzpcblx0XHRcdGNhc2UgVEFHX05BTUVTLlNDUklQVDpcblx0XHRcdFx0a2V5ID0gc2VsZi5fZ2V0Tm9kZUtleShjdXJyZW50KTtcblx0XHRcdFx0aWYgKCEoa2V5IGluIG1hcFtjdXJyZW50Lm5vZGVOYW1lXSkpIHtcblx0XHRcdFx0XHRoZWFkLmFwcGVuZENoaWxkKGN1cnJlbnQpO1xuXHRcdFx0XHRcdGktLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdC8vIG1ldGEgYW5kIG90aGVyIGVsZW1lbnRzIGNhbiBiZSBkZWxldGVkXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCBkZWxldGUgYW5kIGFwcGVuZCBzYW1lIGVsZW1lbnRzXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRrZXkgPSBzZWxmLl9nZXROb2RlS2V5KGN1cnJlbnQpO1xuXHRcdFx0XHRpZiAoa2V5IGluIG1hcFtjdXJyZW50Lm5vZGVOYW1lXSkge1xuXHRcdFx0XHRcdHNhbWVNZXRhRWxlbWVudHNba2V5XSA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aGVhZC5hcHBlbmRDaGlsZChjdXJyZW50KTtcblx0XHRcdFx0XHRpLS07XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0aWYgKFRBR19OQU1FUy5NRVRBIGluIG1hcCkge1xuXHRcdC8vIHJlbW92ZSBtZXRhIHRhZ3Mgd2hpY2ggYSBub3QgaW4gYSBuZXcgaGVhZCBzdGF0ZVxuXHRcdE9iamVjdC5rZXlzKG1hcFtUQUdfTkFNRVMuTUVUQV0pXG5cdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAobWV0YUtleSkge1xuXHRcdFx0XHRpZiAobWV0YUtleSBpbiBzYW1lTWV0YUVsZW1lbnRzKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aGVhZC5yZW1vdmVDaGlsZChtYXBbVEFHX05BTUVTLk1FVEFdW21ldGFLZXldKTtcblx0XHRcdH0pO1xuXHR9XG59O1xuXG4vKipcbiAqIEdldHMgbWFwIG9mIGFsbCBIRUFEJ3MgZWxlbWVudHMuXG4gKiBAcGFyYW0ge05vZGVMaXN0fSBoZWFkQ2hpbGRyZW4gSGVhZCBjaGlsZHJlbiBET00gbm9kZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBNYXAgb2YgSEVBRCBlbGVtZW50cy5cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9nZXRIZWFkTWFwID0gZnVuY3Rpb24gKGhlYWRDaGlsZHJlbikge1xuXHQvLyBDcmVhdGUgbWFwIG9mIDxtZXRhPiwgPGxpbms+LCA8c3R5bGU+IGFuZCA8c2NyaXB0PiB0YWdzXG5cdC8vIGJ5IHVuaXF1ZSBrZXlzIHRoYXQgY29udGFpbiBhdHRyaWJ1dGVzIGFuZCBjb250ZW50XG5cdHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuXHRcdGksIGN1cnJlbnQsXG5cdFx0c2VsZiA9IHRoaXM7XG5cblx0Zm9yIChpID0gMDsgaSA8IGhlYWRDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuXHRcdGN1cnJlbnQgPSBoZWFkQ2hpbGRyZW5baV07XG5cdFx0aWYgKCEoY3VycmVudC5ub2RlTmFtZSBpbiBtYXApKSB7XG5cdFx0XHRtYXBbY3VycmVudC5ub2RlTmFtZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRcdH1cblx0XHRtYXBbY3VycmVudC5ub2RlTmFtZV1bc2VsZi5fZ2V0Tm9kZUtleShjdXJyZW50KV0gPSBjdXJyZW50O1xuXHR9XG5cdHJldHVybiBtYXA7XG59O1xuXG4vKipcbiAqIEdldHMgdW5pcXVlIGVsZW1lbnQga2V5IHVzaW5nIGVsZW1lbnQncyBhdHRyaWJ1dGVzIGFuZCBpdHMgY29udGVudC5cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSBIVE1MIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBVbmlxdWUga2V5IGZvciBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuRG9jdW1lbnRSZW5kZXJlci5wcm90b3R5cGUuX2dldE5vZGVLZXkgPSBmdW5jdGlvbiAobm9kZSkge1xuXHR2YXIgY3VycmVudCwgaSxcblx0XHRhdHRyaWJ1dGVzID0gW107XG5cblx0aWYgKG5vZGUubm9kZVR5cGUgIT09IE5PREVfVFlQRVMuRUxFTUVOVF9OT0RFKSB7XG5cdFx0cmV0dXJuIG5vZGUubm9kZVZhbHVlIHx8ICcnO1xuXHR9XG5cblx0aWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7XG5cdFx0Zm9yIChpID0gMDsgaSA8IG5vZGUuYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y3VycmVudCA9IG5vZGUuYXR0cmlidXRlc1tpXTtcblx0XHRcdGF0dHJpYnV0ZXMucHVzaChjdXJyZW50Lm5hbWUgKyAnPScgKyBjdXJyZW50LnZhbHVlKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYXR0cmlidXRlc1xuXHRcdFx0LnNvcnQoKVxuXHRcdFx0LmpvaW4oJ3wnKSArICc+JyArIG5vZGUudGV4dENvbnRlbnQ7XG59O1xuXG4vKipcbiAqIERvZXMgaW5pdGlhbCB3cmFwcGluZyBmb3IgZXZlcnkgY29tcG9uZW50IG9uIHRoZSBwYWdlLlxuICogQHBhcmFtIHtBcnJheX0gY29tcG9uZW50cyBDdXJyZW50IGNvbXBvbmVudHMgbGlzdC5cbiAqIEBwYXJhbSB7QXJyYXl9IGVsZW1lbnQgRWxlbWVudHMgbGlzdC5cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9pbml0aWFsV3JhcCA9IGZ1bmN0aW9uIChjb21wb25lbnRzLCBlbGVtZW50cykge1xuXHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0Y3VycmVudCA9IGVsZW1lbnRzLnBvcCgpO1xuXG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXHRcdC50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBpZCA9IHNlbGYuX2dldElkKGN1cnJlbnQpO1xuXHRcdFx0aWYgKCFpZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBjb21wb25lbnROYW1lID0gbW9kdWxlSGVscGVyLmdldE9yaWdpbmFsQ29tcG9uZW50TmFtZShcblx0XHRcdFx0XHRjdXJyZW50Lm5vZGVOYW1lXG5cdFx0XHRcdCk7XG5cdFx0XHRpZiAoIShjb21wb25lbnROYW1lIGluIGNvbXBvbmVudHMpKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciBjb25zdHJ1Y3RvciA9IGNvbXBvbmVudHNbY29tcG9uZW50TmFtZV0uY29uc3RydWN0b3I7XG5cdFx0XHRjb25zdHJ1Y3Rvci5wcm90b3R5cGUuJGNvbnRleHQgPSBzZWxmLl9nZXRDb21wb25lbnRDb250ZXh0KFxuXHRcdFx0XHRjb21wb25lbnRzW2NvbXBvbmVudE5hbWVdLCBjdXJyZW50XG5cdFx0XHQpO1xuXG5cdFx0XHR2YXIgaW5zdGFuY2UgPSBzZWxmLl9zZXJ2aWNlTG9jYXRvci5yZXNvbHZlSW5zdGFuY2UoXG5cdFx0XHRcdGNvbnN0cnVjdG9yLCBzZWxmLl9jb25maWdcblx0XHRcdCk7XG5cdFx0XHRpbnN0YW5jZS4kY29udGV4dCA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZS4kY29udGV4dDtcblx0XHRcdHNlbGYuX2NvbXBvbmVudEVsZW1lbnRzW2lkXSA9IGN1cnJlbnQ7XG5cdFx0XHRzZWxmLl9jb21wb25lbnRJbnN0YW5jZXNbaWRdID0gaW5zdGFuY2U7XG5cdFx0XHQvLyBpbml0aWFsaXplIHRoZSBzdG9yZSBvZiB0aGUgY29tcG9uZW50XG5cdFx0XHRzZWxmLl9zdG9yZURpc3BhdGNoZXIuZ2V0U3RvcmUoXG5cdFx0XHRcdGN1cnJlbnQuZ2V0QXR0cmlidXRlKG1vZHVsZUhlbHBlci5BVFRSSUJVVEVfU1RPUkUpXG5cdFx0XHQpO1xuXHRcdFx0c2VsZi5fZXZlbnRCdXMuZW1pdCgnY29tcG9uZW50UmVuZGVyZWQnLCB7XG5cdFx0XHRcdG5hbWU6IGNvbXBvbmVudE5hbWUsXG5cdFx0XHRcdGF0dHJpYnV0ZXM6IGluc3RhbmNlLiRjb250ZXh0LmF0dHJpYnV0ZXMsXG5cdFx0XHRcdGNvbnRleHQ6IGluc3RhbmNlLiRjb250ZXh0XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBzZWxmLl9iaW5kQ29tcG9uZW50KGN1cnJlbnQpO1xuXHRcdH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0aWYgKGVsZW1lbnRzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0cmV0dXJuIHNlbGYuX2luaXRpYWxXcmFwKGNvbXBvbmVudHMsIGVsZW1lbnRzKTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZi5fZXZlbnRCdXMuZW1pdChcblx0XHRcdFx0J2RvY3VtZW50UmVuZGVyZWQnLCBzZWxmLl9jdXJyZW50Um91dGluZ0NvbnRleHRcblx0XHRcdCk7XG5cdFx0fSk7XG59O1xuXG4vKipcbiAqIEdldHMgY29tcG9uZW50IGNvbnRleHQgdXNpbmcgYmFzaWMgY29udGV4dC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IGRldGFpbHMuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgRE9NIGVsZW1lbnQgb2YgY29tcG9uZW50LlxuICogQHJldHVybnMge09iamVjdH0gQ29tcG9uZW50IGNvbnRleHQuXG4gKiBAcHJpdmF0ZVxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5fZ2V0Q29tcG9uZW50Q29udGV4dCA9XG5cdGZ1bmN0aW9uIChjb21wb25lbnQsIGVsZW1lbnQpIHtcblx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRzdG9yZU5hbWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShtb2R1bGVIZWxwZXIuQVRUUklCVVRFX1NUT1JFKSxcblx0XHRcdGNvbXBvbmVudENvbnRleHQgPSBPYmplY3QuY3JlYXRlKHRoaXMuX2N1cnJlbnRSb3V0aW5nQ29udGV4dCk7XG5cblx0XHQvLyBpbml0aWFsaXplIHRoZSBzdG9yZSBvZiB0aGUgY29tcG9uZW50XG5cdFx0dGhpcy5fc3RvcmVEaXNwYXRjaGVyLmdldFN0b3JlKHN0b3JlTmFtZSk7XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjb21wb25lbnRDb250ZXh0LCB7XG5cdFx0XHRuYW1lOiB7XG5cdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wb25lbnQubmFtZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdFx0fSxcblx0XHRcdGF0dHJpYnV0ZXM6IHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGF0dHJpYnV0ZXNUb09iamVjdChlbGVtZW50LmF0dHJpYnV0ZXMpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRjb21wb25lbnRDb250ZXh0LmVsZW1lbnQgPSBlbGVtZW50O1xuXHRcdGNvbXBvbmVudENvbnRleHQuZ2V0Q29tcG9uZW50QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0cmV0dXJuIHNlbGYuZ2V0Q29tcG9uZW50QnlJZChpZCk7XG5cdFx0fTtcblx0XHRjb21wb25lbnRDb250ZXh0LmdldENvbXBvbmVudEJ5RWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdFx0XHRyZXR1cm4gc2VsZi5nZXRDb21wb25lbnRCeUVsZW1lbnQoZWxlbWVudCk7XG5cdFx0fTtcblx0XHRjb21wb25lbnRDb250ZXh0LmNyZWF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICh0YWdOYW1lLCBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRyZXR1cm4gc2VsZi5jcmVhdGVDb21wb25lbnQodGFnTmFtZSwgYXR0cmlidXRlcyk7XG5cdFx0fTtcblx0XHRjb21wb25lbnRDb250ZXh0LmNvbGxlY3RHYXJiYWdlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIHNlbGYuY29sbGVjdEdhcmJhZ2UoKTtcblx0XHR9O1xuXHRcdGNvbXBvbmVudENvbnRleHQuZ2V0U3RvcmVEYXRhID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGN1cnJlbnRTdG9yZU5hbWUgPSBlbGVtZW50XG5cdFx0XHRcdC5nZXRBdHRyaWJ1dGUobW9kdWxlSGVscGVyLkFUVFJJQlVURV9TVE9SRSk7XG5cdFx0XHRyZXR1cm4gc2VsZi5fc3RvcmVEaXNwYXRjaGVyXG5cdFx0XHRcdC5nZXRTdG9yZURhdGEoY3VycmVudFN0b3JlTmFtZSk7XG5cdFx0fTtcblx0XHRjb21wb25lbnRDb250ZXh0LnNlbmRBY3Rpb24gPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuXHRcdFx0dmFyIGN1cnJlbnRTdG9yZU5hbWUgPSBlbGVtZW50XG5cdFx0XHRcdC5nZXRBdHRyaWJ1dGUobW9kdWxlSGVscGVyLkFUVFJJQlVURV9TVE9SRSk7XG5cdFx0XHRyZXR1cm4gc2VsZi5fc3RvcmVEaXNwYXRjaGVyXG5cdFx0XHRcdC5zZW5kQWN0aW9uKGN1cnJlbnRTdG9yZU5hbWUsIG5hbWUsIGFyZ3MpO1xuXHRcdH07XG5cdFx0Y29tcG9uZW50Q29udGV4dC5zZW5kQnJvYWRjYXN0QWN0aW9uID0gZnVuY3Rpb24gKG5hbWUsIGFyZ3MpIHtcblx0XHRcdHJldHVybiBzZWxmLl9zdG9yZURpc3BhdGNoZXJcblx0XHRcdFx0LnNlbmRCcm9hZGNhc3RBY3Rpb24obmFtZSwgYXJncyk7XG5cdFx0fTtcblxuXHRcdHJldHVybiBPYmplY3QuZnJlZXplKGNvbXBvbmVudENvbnRleHQpO1xuXHR9O1xuXG4vKipcbiAqIEZpbmRzIGFsbCByZW5kZXJpbmcgcm9vdHMgb24gcGFnZSBmb3IgYWxsIGNoYW5nZWQgc3RvcmVzLlxuICogQHBhcmFtIHtBcnJheX0gY2hhbmdlZFN0b3JlTmFtZXMgTGlzdCBvZiBzdG9yZSBuYW1lcyB3aGljaCBoYXMgYmVlbiBjaGFuZ2VkLlxuICogQHJldHVybnMge0FycmF5PEVsZW1lbnQ+fSBIVE1MIGVsZW1lbnRzIHRoYXQgYXJlIHJlbmRlcmluZyByb290cy5cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9maW5kUmVuZGVyaW5nUm9vdHMgPSBmdW5jdGlvbiAoY2hhbmdlZFN0b3JlTmFtZXMpIHtcblx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGhlYWRTdG9yZSA9IHRoaXMuX3dpbmRvdy5kb2N1bWVudC5oZWFkLmdldEF0dHJpYnV0ZShcblx0XHRcdG1vZHVsZUhlbHBlci5BVFRSSUJVVEVfU1RPUkVcblx0XHQpLFxuXHRcdGNvbXBvbmVudHMgPSB0aGlzLl9jb21wb25lbnRMb2FkZXIuZ2V0Q29tcG9uZW50c0J5TmFtZXMoKSxcblx0XHRjb21wb25lbnRzRWxlbWVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuXHRcdHN0b3JlTmFtZXNTZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpLFxuXHRcdHJvb3RzU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcblx0XHRyb290cyA9IFtdO1xuXG5cdC8vIHdlIHNob3VsZCBmaW5kIGFsbCBjb21wb25lbnRzIGFuZCB0aGVuIGxvb2tpbmcgZm9yIHJvb3RzXG5cdGNoYW5nZWRTdG9yZU5hbWVzXG5cdFx0LmZvckVhY2goZnVuY3Rpb24gKHN0b3JlTmFtZSkge1xuXHRcdFx0c3RvcmVOYW1lc1NldFtzdG9yZU5hbWVdID0gdHJ1ZTtcblx0XHRcdGNvbXBvbmVudHNFbGVtZW50c1tzdG9yZU5hbWVdID0gc2VsZi5fd2luZG93LmRvY3VtZW50XG5cdFx0XHRcdC5xdWVyeVNlbGVjdG9yQWxsKFxuXHRcdFx0XHRcdCdbJyArXG5cdFx0XHRcdFx0bW9kdWxlSGVscGVyLkFUVFJJQlVURV9JRCArXG5cdFx0XHRcdFx0J10nICtcblx0XHRcdFx0XHQnWycgK1xuXHRcdFx0XHRcdG1vZHVsZUhlbHBlci5BVFRSSUJVVEVfU1RPUkUgK1xuXHRcdFx0XHRcdCc9XCInICtcblx0XHRcdFx0XHRzdG9yZU5hbWUgK1xuXHRcdFx0XHRcdCdcIl0nXG5cdFx0XHRcdCk7XG5cdFx0fSk7XG5cblx0aWYgKG1vZHVsZUhlbHBlci5IRUFEX0NPTVBPTkVOVF9OQU1FIGluIGNvbXBvbmVudHMgJiZcblx0XHRoZWFkU3RvcmUgaW4gc3RvcmVOYW1lc1NldCkge1xuXHRcdHJvb3RzU2V0W3RoaXMuX2dldElkKHRoaXMuX3dpbmRvdy5kb2N1bWVudC5oZWFkKV0gPSB0cnVlO1xuXHRcdHJvb3RzLnB1c2godGhpcy5fd2luZG93LmRvY3VtZW50LmhlYWQpO1xuXHR9XG5cblx0Y2hhbmdlZFN0b3JlTmFtZXNcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAoc3RvcmVOYW1lKSB7XG5cdFx0XHR2YXIgY3VycmVudCwgY3VycmVudElkLFxuXHRcdFx0XHRsYXN0Um9vdCwgbGFzdFJvb3RJZCxcblx0XHRcdFx0Y3VycmVudFN0b3JlLCBjdXJyZW50Q29tcG9uZW50TmFtZTtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb25lbnRzRWxlbWVudHNbc3RvcmVOYW1lXS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjdXJyZW50ID0gY29tcG9uZW50c0VsZW1lbnRzW3N0b3JlTmFtZV1baV07XG5cdFx0XHRcdGN1cnJlbnRJZCA9IGNvbXBvbmVudHNFbGVtZW50c1tzdG9yZU5hbWVdW2ldXG5cdFx0XHRcdFx0LmdldEF0dHJpYnV0ZShtb2R1bGVIZWxwZXIuQVRUUklCVVRFX0lEKTtcblx0XHRcdFx0bGFzdFJvb3QgPSBjdXJyZW50O1xuXHRcdFx0XHRsYXN0Um9vdElkID0gY3VycmVudElkO1xuXHRcdFx0XHRjdXJyZW50Q29tcG9uZW50TmFtZSA9IG1vZHVsZUhlbHBlci5nZXRPcmlnaW5hbENvbXBvbmVudE5hbWUoXG5cdFx0XHRcdFx0Y3VycmVudC50YWdOYW1lXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0d2hpbGUgKGN1cnJlbnQucGFyZW50RWxlbWVudCkge1xuXHRcdFx0XHRcdGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudEVsZW1lbnQ7XG5cdFx0XHRcdFx0Y3VycmVudElkID0gc2VsZi5fZ2V0SWQoY3VycmVudCk7XG5cdFx0XHRcdFx0Y3VycmVudFN0b3JlID0gY3VycmVudC5nZXRBdHRyaWJ1dGUoXG5cdFx0XHRcdFx0XHRtb2R1bGVIZWxwZXIuQVRUUklCVVRFX1NUT1JFXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdC8vIHN0b3JlIGRpZCBub3QgY2hhbmdlIHN0YXRlXG5cdFx0XHRcdFx0aWYgKCFjdXJyZW50U3RvcmUgfHwgIShjdXJyZW50U3RvcmUgaW4gc3RvcmVOYW1lc1NldCkpIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGlzIG5vdCBhbiBhY3RpdmUgY29tcG9uZW50XG5cdFx0XHRcdFx0aWYgKCEoY3VycmVudENvbXBvbmVudE5hbWUgaW4gY29tcG9uZW50cykpIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGxhc3RSb290ID0gY3VycmVudDtcblx0XHRcdFx0XHRsYXN0Um9vdElkID0gY3VycmVudElkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChsYXN0Um9vdElkIGluIHJvb3RzU2V0KSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cm9vdHNTZXRbbGFzdFJvb3RJZF0gPSB0cnVlO1xuXHRcdFx0XHRyb290cy5wdXNoKGxhc3RSb290KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRyZXR1cm4gcm9vdHM7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgcmVuZGVyaW5nIGNvbnRleHQuXG4gKiBAcGFyYW0ge0FycmF5P30gY2hhbmdlZFN0b3JlcyBOYW1lcyBvZiBjaGFuZ2VkIHN0b3Jlcy5cbiAqIEByZXR1cm5zIHt7XG4gKiAgIGNvbmZpZzogT2JqZWN0LFxuICogICByZW5kZXJlZElkczoge30sXG4gKiAgIHVuYm91bmRJZHM6IHt9LFxuICogICBpc0hlYWRSZW5kZXJlZDogYm9vbGVhbixcbiAqICAgYmluZE1ldGhvZHM6IEFycmF5LFxuICogICByb3V0aW5nQ29udGV4dDogT2JqZWN0LFxuICogICBjb21wb25lbnRzOiBPYmplY3QsXG4gKiAgIHJvb3RzOiBBcnJheS48RWxlbWVudD5cbiAqIH19IFRoZSBjb250ZXh0IG9iamVjdC5cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9jcmVhdGVSZW5kZXJpbmdDb250ZXh0ID0gZnVuY3Rpb24gKGNoYW5nZWRTdG9yZXMpIHtcblx0dmFyIGNvbXBvbmVudHMgPSB0aGlzLl9jb21wb25lbnRMb2FkZXIuZ2V0Q29tcG9uZW50c0J5TmFtZXMoKTtcblxuXHRyZXR1cm4ge1xuXHRcdGNvbmZpZzogdGhpcy5fY29uZmlnLFxuXHRcdHJlbmRlcmVkSWRzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXHRcdHVuYm91bmRJZHM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cdFx0aXNIZWFkUmVuZGVyZWQ6IGZhbHNlLFxuXHRcdGJpbmRNZXRob2RzOiBbXSxcblx0XHRyb3V0aW5nQ29udGV4dDogdGhpcy5fY3VycmVudFJvdXRpbmdDb250ZXh0LFxuXHRcdGNvbXBvbmVudHM6IGNvbXBvbmVudHMsXG5cdFx0cm9vdElkczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblx0XHRyb290czogY2hhbmdlZFN0b3JlcyA/IHRoaXMuX2ZpbmRSZW5kZXJpbmdSb290cyhjaGFuZ2VkU3RvcmVzKSA6IFtdXG5cdH07XG59O1xuXG4vKipcbiAqIEdldHMgSUQgb2YgdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgSFRNTCBlbGVtZW50IG9mIGNvbXBvbmVudC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IElELlxuICovXG5Eb2N1bWVudFJlbmRlcmVyLnByb3RvdHlwZS5fZ2V0SWQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRpZiAoZWxlbWVudCA9PT0gdGhpcy5fd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuXHRcdHJldHVybiBTUEVDSUFMX0lEUy4kJGRvY3VtZW50O1xuXHR9XG5cdGlmIChlbGVtZW50ID09PSB0aGlzLl93aW5kb3cuZG9jdW1lbnQuaGVhZCkge1xuXHRcdHJldHVybiBTUEVDSUFMX0lEUy4kJGhlYWQ7XG5cdH1cblx0cmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKG1vZHVsZUhlbHBlci5BVFRSSUJVVEVfSUQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIHRlbXBvcmFyeSBjbG9uZSBvZiB0aGUgZWxlbWVudC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBET00gZWxlbWVudC5cbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjbG9uZS5cbiAqIEBwcml2YXRlXG4gKi9cbkRvY3VtZW50UmVuZGVyZXIucHJvdG90eXBlLl9jcmVhdGVUZW1wb3JhcnlFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0dmFyIHRtcCA9IHRoaXMuX3dpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KGVsZW1lbnQudGFnTmFtZSksXG5cdFx0YXR0cmlidXRlcyA9IGVsZW1lbnQuYXR0cmlidXRlcztcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dG1wLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVzW2ldLm5hbWUsIGF0dHJpYnV0ZXNbaV0udmFsdWUpO1xuXHR9XG5cdHJldHVybiB0bXA7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIE5hbWVkTm9kZU1hcCBvZiBBdHRyIGl0ZW1zIHRvIGtleS12YWx1ZSBvYmplY3QgbWFwLlxuICogQHBhcmFtIHtOYW1lZE5vZGVNYXB9IGF0dHJpYnV0ZXMgTGlzdCBvZiBFbGVtZW50IGF0dHJpYnV0ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBNYXAgb2YgYXR0cmlidXRlIHZhbHVlcyBieSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXR0cmlidXRlc1RvT2JqZWN0KGF0dHJpYnV0ZXMpIHtcblx0dmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdHJlc3VsdFthdHRyaWJ1dGVzW2ldLm5hbWVdID0gYXR0cmlidXRlc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEdldHMgY3Jvc3MtYnJvd3NlciBcIm1hdGNoZXNcIiBtZXRob2QgZm9yIHRoZSBlbGVtZW50LlxuICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50IEhUTUwgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gXCJtYXRjaGVzXCIgbWV0aG9kLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaGVzTWV0aG9kKGVsZW1lbnQpIHtcblx0dmFyIG1ldGhvZCA9IChlbGVtZW50Lm1hdGNoZXMgfHxcblx0XHRlbGVtZW50LndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGVsZW1lbnQubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZWxlbWVudC5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZWxlbWVudC5tc01hdGNoZXNTZWxlY3Rvcik7XG5cblx0cmV0dXJuIG1ldGhvZC5iaW5kKGVsZW1lbnQpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgaW1pdGF0aW9uIG9mIG9yaWdpbmFsIEV2ZW50IG9iamVjdCBidXQgd2l0aCBzcGVjaWZpZWQgY3VycmVudFRhcmdldC5cbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IE9yaWdpbmFsIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1cnJlbnRUYXJnZXRHZXR0ZXIgR2V0dGVyIGZvciBjdXJyZW50VGFyZ2V0LlxuICogQHJldHVybnMge0V2ZW50fSBXcmFwcGVkIGV2ZW50LlxuICovXG5mdW5jdGlvbiBjcmVhdGVDdXN0b21FdmVudChldmVudCwgY3VycmVudFRhcmdldEdldHRlcikge1xuXHR2YXIgY2F0RXZlbnQgPSBPYmplY3QuY3JlYXRlKGV2ZW50KSxcblx0XHRrZXlzID0gW10sXG5cdFx0cHJvcGVydGllcyA9IHt9O1xuXHRmb3IgKHZhciBrZXkgaW4gZXZlbnQpIHtcblx0XHRrZXlzLnB1c2goa2V5KTtcblx0fVxuXHRrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGlmICh0eXBlb2YgKGV2ZW50W2tleV0pID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRwcm9wZXJ0aWVzW2tleV0gPSB7XG5cdFx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHJldHVybiBldmVudFtrZXldLmJpbmQoZXZlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHByb3BlcnRpZXNba2V5XSA9IHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gZXZlbnRba2V5XTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRldmVudFtrZXldID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG5cblx0cHJvcGVydGllcy5jdXJyZW50VGFyZ2V0ID0ge1xuXHRcdGdldDogY3VycmVudFRhcmdldEdldHRlclxuXHR9O1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjYXRFdmVudCwgcHJvcGVydGllcyk7XG5cdE9iamVjdC5zZWFsKGNhdEV2ZW50KTtcblx0T2JqZWN0LmZyZWV6ZShjYXRFdmVudCk7XG5cdHJldHVybiBjYXRFdmVudDtcbn0iLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBMb2dnZXI7XG5cbnZhciBMRVZFTFMgPSB7XG5cdERFQlVHOiAnZGVidWcnLFxuXHRUUkFDRTogJ3RyYWNlJyxcblx0SU5GTzogJ2luZm8nLFxuXHRXQVJOOiAnd2FybicsXG5cdEVSUk9SOiAnZXJyb3InLFxuXHRGQVRBTDogJ2ZhdGFsJ1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGJyb3dzZXIgbG9nZ2VyLlxuICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSBsZXZlbHMgTGV2ZWxzIHRvIGxvZy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBMb2dnZXIobGV2ZWxzKSB7XG5cdGlmICh0eXBlb2YgKGxldmVscykgPT09ICdvYmplY3QnKSB7XG5cdFx0dGhpcy5fbGV2ZWxzID0gbGV2ZWxzO1xuXHR9XG5cblx0aWYgKHR5cGVvZiAobGV2ZWxzKSA9PT0gJ3N0cmluZycpIHtcblx0XHR0aGlzLl9sZXZlbHMgPSB7fTtcblx0XHRPYmplY3Qua2V5cyhMRVZFTFMpXG5cdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcblx0XHRcdFx0dGhpcy5fbGV2ZWxzW0xFVkVMU1tsZXZlbF1dID1cblx0XHRcdFx0XHQobGV2ZWxzLnNlYXJjaChMRVZFTFNbbGV2ZWxdKSAhPT0gLTEpO1xuXHRcdFx0fSwgdGhpcyk7XG5cdH1cblxuXHR0aGlzLmRlYnVnID0gdGhpcy5kZWJ1Zy5iaW5kKHRoaXMpO1xuXHR0aGlzLnRyYWNlID0gdGhpcy50cmFjZS5iaW5kKHRoaXMpO1xuXHR0aGlzLmluZm8gPSB0aGlzLmluZm8uYmluZCh0aGlzKTtcblx0dGhpcy53YXJuID0gdGhpcy53YXJuLmJpbmQodGhpcyk7XG5cdHRoaXMuZXJyb3IgPSB0aGlzLmVycm9yLmJpbmQodGhpcyk7XG5cdHRoaXMuZmF0YWwgPSB0aGlzLmZhdGFsLmJpbmQodGhpcyk7XG59XG5cbi8qKlxuICogQ3VycmVudCBsZXZlbHMgb2YgbG9nZ2luZy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5Mb2dnZXIucHJvdG90eXBlLl9sZXZlbHMgPSB7XG5cdGRlYnVnOiB0cnVlLFxuXHR0cmFjZTogdHJ1ZSxcblx0aW5mbzogdHJ1ZSxcblx0d2FybjogdHJ1ZSxcblx0ZXJyb3I6IHRydWUsXG5cdGZhdGFsOiB0cnVlXG59O1xuXG4vKipcbiAqIExvZ3MgdHJhY2UgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRyYWNlIG1lc3NhZ2UuXG4gKi9cbkxvZ2dlci5wcm90b3R5cGUudHJhY2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuXHRpZiAoIXRoaXMuX2xldmVscy50cmFjZSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChjb25zb2xlLmxvZykge1xuXHRcdGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXHR9XG59O1xuXG4vKipcbiAqIExvZ3MgdHJhY2UgbWVzc2FnZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRyYWNlIG1lc3NhZ2UuXG4gKi9cbkxvZ2dlci5wcm90b3R5cGUuZGVidWcgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuXHRpZiAoIXRoaXMuX2xldmVscy5kZWJ1Zykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChjb25zb2xlLmxvZykge1xuXHRcdGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuXHR9XG59O1xuXG4vKipcbiAqIExvZ3MgaW5mbyBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgSW5mb3JtYXRpb24gbWVzc2FnZS5cbiAqL1xuTG9nZ2VyLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcblx0aWYgKCF0aGlzLl9sZXZlbHMuaW5mbykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChjb25zb2xlLmluZm8pIHtcblx0XHRjb25zb2xlLmluZm8obWVzc2FnZSk7XG5cdH1cbn07XG5cbi8qKlxuICogTG9ncyB3YXJuIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBXYXJuaW5nIG1lc3NhZ2UuXG4gKi9cbkxvZ2dlci5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG5cdGlmICghdGhpcy5fbGV2ZWxzLndhcm4pIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoY29uc29sZS53YXJuKSB7XG5cdFx0Y29uc29sZS53YXJuKG1lc3NhZ2UpO1xuXHR9XG59O1xuLyoqXG4gKiBMb2dzIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ3xFcnJvcn0gZXJyb3IgRXJyb3Igb2JqZWN0IG9yIG1lc3NhZ2UuXG4gKi9cbkxvZ2dlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcblx0aWYgKCF0aGlzLl9sZXZlbHMuZXJyb3IpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR3cml0ZUVycm9yKGVycm9yKTtcbn07XG5cbi8qKlxuICogTG9ncyBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd8RXJyb3J9IGVycm9yIEVycm9yIG9iamVjdCBvciBtZXNzYWdlLlxuICovXG5Mb2dnZXIucHJvdG90eXBlLmZhdGFsID0gZnVuY3Rpb24gKGVycm9yKSB7XG5cdGlmICghdGhpcy5fbGV2ZWxzLmZhdGFsKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHdyaXRlRXJyb3IoZXJyb3IpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgZXJyb3IgdG8gY29uc29sZS5cbiAqIEBwYXJhbSB7RXJyb3J8c3RyaW5nfSBlcnJvciBFcnJvciB0byB3cml0ZS5cbiAqL1xuZnVuY3Rpb24gd3JpdGVFcnJvcihlcnJvcikge1xuXHR0cnkge1xuXHRcdGlmICghKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG5cdFx0XHRlcnJvciA9IHR5cGVvZiAoZXJyb3IpID09PSAnc3RyaW5nJyA/IG5ldyBFcnJvcihlcnJvcikgOiBuZXcgRXJyb3IoKTtcblx0XHR9XG5cdFx0aWYgKGNvbnNvbGUuZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuXHRcdH1cblx0fSBjYXRjaCAoZSkge1xuXHRcdHdyaXRlRXJyb3IoZSk7XG5cdH1cbn0iLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBSZXF1ZXN0Um91dGVyO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKSxcblx0VVJJID0gcmVxdWlyZSgnY2F0YmVycnktdXJpJykuVVJJO1xuXG52YXIgTU9VU0VfUFJJTUFSWV9LRVkgPSAwLFxuXHRIUkVGX0FUVFJJQlVURV9OQU1FID0gJ2hyZWYnLFxuXHRUQVJHRVRfQVRUUklCVVRFX05BTUUgPSAndGFyZ2V0Jyxcblx0QV9UQUdfTkFNRSA9ICdBJyxcblx0Qk9EWV9UQUdfTkFNRSA9ICdCT0RZJztcblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgYnJvd3NlciByZXF1ZXN0IHJvdXRlci5cbiAqIEBwYXJhbSB7U2VydmljZUxvY2F0b3J9ICRzZXJ2aWNlTG9jYXRvciBTZXJ2aWNlIGxvY2F0b3IgdG8gcmVzb2x2ZSBzZXJ2aWNlcy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSZXF1ZXN0Um91dGVyKCRzZXJ2aWNlTG9jYXRvcikge1xuXHR0aGlzLl9ldmVudEJ1cyA9ICRzZXJ2aWNlTG9jYXRvci5yZXNvbHZlKCdldmVudEJ1cycpO1xuXHR0aGlzLl93aW5kb3cgPSAkc2VydmljZUxvY2F0b3IucmVzb2x2ZSgnd2luZG93Jyk7XG5cdHRoaXMuX2RvY3VtZW50UmVuZGVyZXIgPSAkc2VydmljZUxvY2F0b3IucmVzb2x2ZSgnZG9jdW1lbnRSZW5kZXJlcicpO1xuXHR0aGlzLl9zdGF0ZVByb3ZpZGVyID0gJHNlcnZpY2VMb2NhdG9yLnJlc29sdmUoJ3N0YXRlUHJvdmlkZXInKTtcblx0dGhpcy5fY29udGV4dEZhY3RvcnkgPSAkc2VydmljZUxvY2F0b3IucmVzb2x2ZSgnY29udGV4dEZhY3RvcnknKTtcblxuXHR0aGlzLl9pc0hpc3RvcnlTdXBwb3J0ZWQgPSB0aGlzLl93aW5kb3cuaGlzdG9yeSAmJlxuXHRcdHRoaXMuX3dpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uO1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0Ly8gYWRkIGV2ZW50IGhhbmRsZXJzXG5cdHNlbGYuX3dyYXBEb2N1bWVudCgpO1xuXG5cdC8vIHNldCBpbml0aWFsIHN0YXRlIGZyb20gY3VycmVudCBVUklcblx0dGhpcy5fY2hhbmdlU3RhdGUobmV3IFVSSSh0aGlzLl93aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKSkpXG5cdFx0LmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdHNlbGYuX2hhbmRsZUVycm9yKHJlYXNvbik7XG5cdFx0fSk7XG59XG5cbi8qKlxuICogQ3VycmVudCBpbml0aWFsaXphdGlvbiBmbGFnLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5SZXF1ZXN0Um91dGVyLnByb3RvdHlwZS5faXNTdGF0ZUluaXRpYWxpemVkID0gZmFsc2U7XG5cbi8qKlxuICogQ3VycmVudCByZWZlcnJlci5cbiAqIEB0eXBlIHtVUkl9XG4gKiBAcHJpdmF0ZVxuICovXG5SZXF1ZXN0Um91dGVyLnByb3RvdHlwZS5fcmVmZXJyZXIgPSAnJztcblxuLyoqXG4gKiBDdXJyZW50IGxvY2F0aW9uLlxuICogQHR5cGUge1VSSX1cbiAqIEBwcml2YXRlXG4gKi9cblJlcXVlc3RSb3V0ZXIucHJvdG90eXBlLl9sb2NhdGlvbiA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBldmVudCBidXMuXG4gKiBAdHlwZSB7RXZlbnRFbWl0dGVyfVxuICogQHByaXZhdGVcbiAqL1xuUmVxdWVzdFJvdXRlci5wcm90b3R5cGUuX2V2ZW50QnVzID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGNvbnRleHQgZmFjdG9yeS5cbiAqIEB0eXBlIHtDb250ZXh0RmFjdG9yeX1cbiAqIEBwcml2YXRlXG4gKi9cblJlcXVlc3RSb3V0ZXIucHJvdG90eXBlLl9jb250ZXh0RmFjdG9yeSA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBzdGF0ZSBwcm92aWRlci5cbiAqIEB0eXBlIHtTdGF0ZVByb3ZpZGVyfVxuICogQHByaXZhdGVcbiAqL1xuUmVxdWVzdFJvdXRlci5wcm90b3R5cGUuX3N0YXRlUHJvdmlkZXIgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgZG9jdW1lbnQgcmVuZGVyZXIuXG4gKiBAdHlwZSB7RG9jdW1lbnRSZW5kZXJlcn1cbiAqIEBwcml2YXRlXG4gKi9cblJlcXVlc3RSb3V0ZXIucHJvdG90eXBlLl9kb2N1bWVudFJlbmRlcmVyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGJyb3dzZXIgd2luZG93LlxuICogQHR5cGUge1dpbmRvd31cbiAqIEBwcml2YXRlXG4gKi9cblJlcXVlc3RSb3V0ZXIucHJvdG90eXBlLl93aW5kb3cgPSBudWxsO1xuXG4vKipcbiAqIFRydWUgaWYgY3VycmVudCBicm93c2VyIHN1cHBvcnRzIGhpc3RvcnkgQVBJLlxuICogQHR5cGUge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovXG5SZXF1ZXN0Um91dGVyLnByb3RvdHlwZS5faXNIaXN0b3J5U3VwcG9ydGVkID0gZmFsc2U7XG5cbi8qKlxuICogUm91dGVzIGJyb3dzZXIgcmVuZGVyIHJlcXVlc3QuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSBmb3Igbm90aGluZy5cbiAqL1xuUmVxdWVzdFJvdXRlci5wcm90b3R5cGUucm91dGUgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpcztcblx0Ly8gYmVjYXVzZSBub3cgbG9jYXRpb24gd2FzIG5vdCBjaGFuZ2UgeWV0IGFuZFxuXHQvLyBkaWZmZXJlbnQgYnJvd3NlcnMgaGFuZGxlIGBwb3BzdGF0ZWAgZGlmZmVyZW50bHlcblx0Ly8gd2UgbmVlZCB0byBkbyByb3V0ZSBpbiBuZXh0IGl0ZXJhdGlvbiBvZiBldmVudCBsb29wXG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXHRcdC50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBuZXdMb2NhdGlvbiA9IG5ldyBVUkkoc2VsZi5fd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkpLFxuXHRcdFx0XHRuZXdBdXRob3JpdHkgPSBuZXdMb2NhdGlvbi5hdXRob3JpdHkgP1xuXHRcdFx0XHRcdG5ld0xvY2F0aW9uLmF1dGhvcml0eS50b1N0cmluZygpIDogbnVsbCxcblx0XHRcdFx0Y3VycmVudEF1dGhvcml0eSA9IHNlbGYuX2xvY2F0aW9uLmF1dGhvcml0eSA/XG5cdFx0XHRcdFx0c2VsZi5fbG9jYXRpb24uYXV0aG9yaXR5LnRvU3RyaW5nKCkgOiBudWxsO1xuXG5cdFx0XHRpZiAobmV3TG9jYXRpb24uc2NoZW1lICE9PSBzZWxmLl9sb2NhdGlvbi5zY2hlbWUgfHxcblx0XHRcdFx0bmV3QXV0aG9yaXR5ICE9PSBjdXJyZW50QXV0aG9yaXR5KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gaWYgb25seSBVUkkgZnJhZ21lbnQgaXMgY2hhbmdlZFxuXHRcdFx0dmFyIG5ld1F1ZXJ5ID0gbmV3TG9jYXRpb24ucXVlcnkgP1xuXHRcdFx0XHRcdG5ld0xvY2F0aW9uLnF1ZXJ5LnRvU3RyaW5nKCkgOiBudWxsLFxuXHRcdFx0XHRjdXJyZW50UXVlcnkgPSBzZWxmLl9sb2NhdGlvbi5xdWVyeSA/XG5cdFx0XHRcdFx0c2VsZi5fbG9jYXRpb24ucXVlcnkudG9TdHJpbmcoKSA6IG51bGw7XG5cdFx0XHRpZiAobmV3TG9jYXRpb24ucGF0aCA9PT0gc2VsZi5fbG9jYXRpb24ucGF0aCAmJlxuXHRcdFx0XHRuZXdRdWVyeSA9PT0gY3VycmVudFF1ZXJ5KSB7XG5cdFx0XHRcdHNlbGYuX2xvY2F0aW9uID0gbmV3TG9jYXRpb247XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBzZWxmLl9jaGFuZ2VTdGF0ZShuZXdMb2NhdGlvbik7XG5cdFx0fSk7XG59O1xuXG4vKipcbiAqIFNldHMgYXBwbGljYXRpb24gc3RhdGUgdG8gc3BlY2lmaWVkIFVSSS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvblN0cmluZyBVUkkgdG8gZ28uXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSBmb3Igbm90aGluZy5cbiAqL1xuUmVxdWVzdFJvdXRlci5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiAobG9jYXRpb25TdHJpbmcpIHtcblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0XHQudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgbG9jYXRpb24gPSBuZXcgVVJJKGxvY2F0aW9uU3RyaW5nKTtcblx0XHRcdGxvY2F0aW9uID0gbG9jYXRpb24ucmVzb2x2ZVJlbGF0aXZlKHNlbGYuX2xvY2F0aW9uKTtcblx0XHRcdGxvY2F0aW9uU3RyaW5nID0gbG9jYXRpb24udG9TdHJpbmcoKTtcblxuXHRcdFx0dmFyIGN1cnJlbnRBdXRob3JpdHkgPSBzZWxmLl9sb2NhdGlvbi5hdXRob3JpdHkgP1xuXHRcdFx0XHRcdHNlbGYuX2xvY2F0aW9uLmF1dGhvcml0eS50b1N0cmluZygpIDogbnVsbCxcblx0XHRcdFx0bmV3QXV0aG9yaXR5ID0gbG9jYXRpb24uYXV0aG9yaXR5ID9cblx0XHRcdFx0XHRsb2NhdGlvbi5hdXRob3JpdHkudG9TdHJpbmcoKSA6IG51bGw7XG5cblx0XHRcdC8vIHdlIG11c3QgY2hlY2sgaWYgdGhpcyBpcyBhbiBleHRlcm5hbCBsaW5rIGJlZm9yZSBtYXAgVVJJXG5cdFx0XHQvLyB0byBpbnRlcm5hbCBhcHBsaWNhdGlvbiBzdGF0ZVxuXHRcdFx0aWYgKCFzZWxmLl9pc0hpc3RvcnlTdXBwb3J0ZWQgfHxcblx0XHRcdFx0bG9jYXRpb24uc2NoZW1lICE9PSBzZWxmLl9sb2NhdGlvbi5zY2hlbWUgfHxcblx0XHRcdFx0bmV3QXV0aG9yaXR5ICE9PSBjdXJyZW50QXV0aG9yaXR5KSB7XG5cdFx0XHRcdHNlbGYuX3dpbmRvdy5sb2NhdGlvbi5hc3NpZ24obG9jYXRpb25TdHJpbmcpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzdGF0ZSA9IHNlbGYuX3N0YXRlUHJvdmlkZXIuZ2V0U3RhdGVCeVVyaShsb2NhdGlvbik7XG5cdFx0XHRpZiAoIXN0YXRlKSB7XG5cdFx0XHRcdHNlbGYuX3dpbmRvdy5sb2NhdGlvbi5hc3NpZ24obG9jYXRpb25TdHJpbmcpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHNlbGYuX3dpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShzdGF0ZSwgJycsIGxvY2F0aW9uU3RyaW5nKTtcblx0XHRcdHJldHVybiBzZWxmLnJvdXRlKCk7XG5cdFx0fSk7XG59O1xuXG4vKipcbiAqIENoYW5nZXMgY3VycmVudCBhcHBsaWNhdGlvbiBzdGF0ZSB3aXRoIG5ldyBsb2NhdGlvbi5cbiAqIEBwYXJhbSB7VVJJfSBuZXdMb2NhdGlvbiBOZXcgbG9jYXRpb24uXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSBmb3Igbm90aGluZy5cbiAqIEBwcml2YXRlXG4gKi9cblJlcXVlc3RSb3V0ZXIucHJvdG90eXBlLl9jaGFuZ2VTdGF0ZSA9IGZ1bmN0aW9uIChuZXdMb2NhdGlvbikge1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuXHRcdC50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuX2xvY2F0aW9uID0gbmV3TG9jYXRpb247XG5cdFx0XHR2YXIgc3RhdGUgPSBzZWxmLl9zdGF0ZVByb3ZpZGVyLmdldFN0YXRlQnlVcmkobmV3TG9jYXRpb24pLFxuXHRcdFx0XHRyb3V0aW5nQ29udGV4dCA9IHNlbGYuX2NvbnRleHRGYWN0b3J5LmNyZWF0ZSh7XG5cdFx0XHRcdFx0cmVmZXJyZXI6IHNlbGYuX3JlZmVycmVyIHx8IHNlbGYuX3dpbmRvdy5kb2N1bWVudC5yZWZlcnJlcixcblx0XHRcdFx0XHRsb2NhdGlvbjogc2VsZi5fbG9jYXRpb24sXG5cdFx0XHRcdFx0dXNlckFnZW50OiBzZWxmLl93aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudFxuXHRcdFx0XHR9KTtcblxuXHRcdFx0aWYgKCFzZWxmLl9pc1N0YXRlSW5pdGlhbGl6ZWQpIHtcblx0XHRcdFx0c2VsZi5faXNTdGF0ZUluaXRpYWxpemVkID0gdHJ1ZTtcblx0XHRcdFx0cmV0dXJuIHNlbGYuX2RvY3VtZW50UmVuZGVyZXIuaW5pdFdpdGhTdGF0ZShcblx0XHRcdFx0XHRzdGF0ZSwgcm91dGluZ0NvbnRleHRcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHN0YXRlID09PSBudWxsKSB7XG5cdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2VsZi5fZG9jdW1lbnRSZW5kZXJlclxuXHRcdFx0XHQucmVuZGVyKHN0YXRlLCByb3V0aW5nQ29udGV4dCk7XG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRzZWxmLl9yZWZlcnJlciA9IHNlbGYuX2xvY2F0aW9uO1xuXHRcdH0pO1xufTtcblxuLyoqXG4gKiBXcmFwcyBkb2N1bWVudCB3aXRoIHJlcXVpcmVkIGV2ZW50cyB0byByb3V0ZSByZXF1ZXN0cy5cbiAqIEBwcml2YXRlXG4gKi9cblJlcXVlc3RSb3V0ZXIucHJvdG90eXBlLl93cmFwRG9jdW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBzZWxmID0gdGhpcztcblxuXHRpZiAoIXRoaXMuX2lzSGlzdG9yeVN1cHBvcnRlZCkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHRoaXMuX3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZ1bmN0aW9uICgpIHtcblx0XHRzZWxmLnJvdXRlKCkuY2F0Y2goc2VsZi5faGFuZGxlRXJyb3IuYmluZChzZWxmKSk7XG5cdH0pO1xuXG5cdHRoaXMuX3dpbmRvdy5kb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdFx0aWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKGV2ZW50LnRhcmdldC50YWdOYW1lID09PSBBX1RBR19OQU1FKSB7XG5cdFx0XHRzZWxmLl9saW5rQ2xpY2tIYW5kbGVyKGV2ZW50LCBldmVudC50YXJnZXQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgbGluayA9IGNsb3Nlc3RMaW5rKGV2ZW50LnRhcmdldCk7XG5cdFx0XHRpZiAoIWxpbmspIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0c2VsZi5fbGlua0NsaWNrSGFuZGxlcihldmVudCwgbGluayk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbi8qKlxuICogSGFuZGxlcyBsaW5rIGNsaWNrIG9uIHRoZSBwYWdlLlxuICogQHBhcmFtIHtFdmVudH0gZXZlbnQgRXZlbnQtcmVsYXRlZCBvYmplY3QuXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgTGluayBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuUmVxdWVzdFJvdXRlci5wcm90b3R5cGUuX2xpbmtDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQsIGVsZW1lbnQpIHtcblx0dmFyIHRhcmdldEF0dHJpYnV0ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFRBUkdFVF9BVFRSSUJVVEVfTkFNRSk7XG5cdGlmICh0YXJnZXRBdHRyaWJ1dGUpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBpZiBtaWRkbGUgbW91c2UgYnV0dG9uIHdhcyBjbGlja2VkXG5cdGlmIChldmVudC5idXR0b24gIT09IE1PVVNFX1BSSU1BUllfS0VZIHx8XG5cdFx0ZXZlbnQuY3RybEtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuc2hpZnRLZXkpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHR2YXIgbG9jYXRpb25TdHJpbmcgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShIUkVGX0FUVFJJQlVURV9OQU1FKTtcblx0aWYgKCFsb2NhdGlvblN0cmluZykge1xuXHRcdHJldHVybjtcblx0fVxuXHRpZiAobG9jYXRpb25TdHJpbmdbMF0gPT09ICcjJykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdHRoaXMuZ28obG9jYXRpb25TdHJpbmcpXG5cdFx0LmNhdGNoKHRoaXMuX2hhbmRsZUVycm9yLmJpbmQodGhpcykpO1xufTtcblxuLyoqXG4gKiBIYW5kbGVzIGFsbCBlcnJvcnMuXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBFcnJvciB0byBoYW5kbGUuXG4gKiBAcHJpdmF0ZVxuICovXG5SZXF1ZXN0Um91dGVyLnByb3RvdHlwZS5faGFuZGxlRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcblx0dGhpcy5fZXZlbnRCdXMuZW1pdCgnZXJyb3InLCBlcnJvcik7XG59O1xuXG4vKipcbiAqIEZpbmRzIHRoZSBjbG9zZXN0IGFzY2VuZGluZyBcIkFcIiBlbGVtZW50IG5vZGUuXG4gKiBAcGFyYW0ge05vZGV9IGVsZW1lbnQgRE9NIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7Tm9kZXxudWxsfSBUaGUgY2xvc2VzdCBcIkFcIiBlbGVtZW50IG9yIG51bGwuXG4gKi9cbmZ1bmN0aW9uIGNsb3Nlc3RMaW5rKGVsZW1lbnQpIHtcblx0d2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlTmFtZSAhPT0gQV9UQUdfTkFNRSAmJlxuXHRcdGVsZW1lbnQubm9kZU5hbWUgIT09IEJPRFlfVEFHX05BTUUpIHtcblx0XHRlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXHR9XG5cdHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZU5hbWUgPT09IEFfVEFHX05BTUUgPyBlbGVtZW50IDogbnVsbDtcbn0iLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8qKlxuXHQgKiBHZXRzIHRoZSBoaWdoIHJlc29sdXRpb24gdGltZSBvciB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuXG5cdCAqIHByZXZpb3VzIGFuZCBjdXJyZW50IHRpbWUuXG5cdCAqIEBwYXJhbSB7QXJyYXk/fSBQcmV2aW91cyBoaWdoIHJlc29sdXRpb24gdGltZXN0YW1wLlxuXHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBoaWdoIHJlc29sdXRpb24gdGltZS5cblx0ICovXG5cdGdldDogcmVxdWlyZSgnYnJvd3Nlci1wcm9jZXNzLWhydGltZScpLFxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGhpZ2ggcmVzb2x1dGlvbiB0aW1lc3RhbXAgdG8gdGV4dCBtZXNzYWdlLlxuXHQgKiBAcGFyYW0ge0FycmF5fVxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSBUaW1lIG1lc3NhZ2UuXG5cdCAqL1xuXHR0b01lc3NhZ2U6IHJlcXVpcmUoJ3ByZXR0eS1ocnRpbWUnKSxcblx0LyoqXG5cdCAqIENvbnZlcnRzIGhpZ2ggcmVzb2x1dGlvbiB0aW1lIHRvIG1pbGxpc2Vjb25kcyBudW1iZXIuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGhyVGltZSBIaWdoIHJlc29sdXRpb24gdGltZSB0dXBsZS5cblx0ICovXG5cdHRvTWlsbGlzZWNvbmRzOiBmdW5jdGlvbiAoaHJUaW1lKSB7XG5cdFx0cmV0dXJuIGhyVGltZVswXSAqIDFlMyArIE1hdGgucm91bmQoaHJUaW1lWzFdIC8gMWU2KTtcblx0fVxufTsiLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnRMb2FkZXI7XG5cbnZhciBtb2R1bGVIZWxwZXIgPSByZXF1aXJlKCcuLi8uLi9saWIvaGVscGVycy9tb2R1bGVIZWxwZXInKSxcblx0dXRpbCA9IHJlcXVpcmUoJ3V0aWwnKSxcblx0TG9hZGVyQmFzZSA9IHJlcXVpcmUoJy4uLy4uL2xpYi9iYXNlL0xvYWRlckJhc2UnKTtcblxudXRpbC5pbmhlcml0cyhDb21wb25lbnRMb2FkZXIsIExvYWRlckJhc2UpO1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBjb21wb25lbnQgbG9hZGVyLlxuICogQHBhcmFtIHtTZXJ2aWNlTG9jYXRvcn0gJHNlcnZpY2VMb2NhdG9yIExvY2F0b3IgdG8gcmVzb2x2ZSBkZXBlbmRlbmNpZXMuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIExvYWRlckJhc2VcbiAqL1xuZnVuY3Rpb24gQ29tcG9uZW50TG9hZGVyKCRzZXJ2aWNlTG9jYXRvcikge1xuXHR0aGlzLl9zZXJ2aWNlTG9jYXRvciA9ICRzZXJ2aWNlTG9jYXRvcjtcblx0dGhpcy5fZXZlbnRCdXMgPSAkc2VydmljZUxvY2F0b3IucmVzb2x2ZSgnZXZlbnRCdXMnKTtcblx0dGhpcy5fdGVtcGxhdGVQcm92aWRlciA9ICRzZXJ2aWNlTG9jYXRvci5yZXNvbHZlKCd0ZW1wbGF0ZVByb3ZpZGVyJyk7XG5cdExvYWRlckJhc2UuY2FsbCh0aGlzLCAkc2VydmljZUxvY2F0b3IucmVzb2x2ZUFsbCgnY29tcG9uZW50VHJhbnNmb3JtJykpO1xufVxuXG4vKipcbiAqIEN1cnJlbnQgZXZlbnQgYnVzLlxuICogQHR5cGUge0V2ZW50RW1pdHRlcn1cbiAqIEBwcml2YXRlXG4gKi9cbkNvbXBvbmVudExvYWRlci5wcm90b3R5cGUuX2V2ZW50QnVzID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IHNlcnZpY2UgbG9jYXRvci5cbiAqIEB0eXBlIHtTZXJ2aWNlTG9jYXRvcn1cbiAqIEBwcml2YXRlXG4gKi9cbkNvbXBvbmVudExvYWRlci5wcm90b3R5cGUuX3NlcnZpY2VMb2NhdG9yID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IHRlbXBsYXRlIHByb3ZpZGVyLlxuICogQHR5cGUge1RlbXBsYXRlUHJvdmlkZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5Db21wb25lbnRMb2FkZXIucHJvdG90eXBlLl90ZW1wbGF0ZVByb3ZpZGVyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IG1hcCBvZiBsb2FkZWQgY29tcG9uZW50cyBieSBuYW1lcy5cbiAqIEB0eXBlIHtPYmplY3R9IE1hcCBvZiBjb21wb25lbnRzIGJ5IG5hbWVzLlxuICogQHByaXZhdGVcbiAqL1xuQ29tcG9uZW50TG9hZGVyLnByb3RvdHlwZS5fbG9hZGVkQ29tcG9uZW50cyA9IG51bGw7XG5cbi8qKlxuICogTG9hZHMgY29tcG9uZW50cyB3aGVuIGl0IGlzIGluIGEgYnJvd3Nlci5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIGZvciBub3RoaW5nLlxuICovXG5Db21wb25lbnRMb2FkZXIucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdGlmICh0aGlzLl9sb2FkZWRDb21wb25lbnRzKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9sb2FkZWRDb21wb25lbnRzKTtcblx0fVxuXG5cdHRoaXMuX2xvYWRlZENvbXBvbmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIGNvbXBvbmVudHMgPSBzZWxmLl9zZXJ2aWNlTG9jYXRvci5yZXNvbHZlQWxsKCdjb21wb25lbnQnKSxcblx0XHRcdFx0Y29tcG9uZW50UHJvbWlzZXMgPSBbXTtcblxuXHRcdFx0Ly8gdGhlIGxpc3QgaXMgYSBzdGFjaywgd2Ugc2hvdWxkIHJldmVyc2UgaXRcblx0XHRcdGNvbXBvbmVudHMuZm9yRWFjaChmdW5jdGlvbiAoY29tcG9uZW50KSB7XG5cdFx0XHRcdGNvbXBvbmVudFByb21pc2VzLnVuc2hpZnQoXG5cdFx0XHRcdFx0c2VsZi5fcHJvY2Vzc0NvbXBvbmVudChjb21wb25lbnQpXG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBQcm9taXNlLmFsbChjb21wb25lbnRQcm9taXNlcyk7XG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbiAoY29tcG9uZW50cykge1xuXHRcdFx0Y29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChjb21wb25lbnQpIHtcblx0XHRcdFx0aWYgKCFjb21wb25lbnQgfHwgdHlwZW9mIChjb21wb25lbnQpICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZWxmLl9sb2FkZWRDb21wb25lbnRzW2NvbXBvbmVudC5uYW1lXSA9IGNvbXBvbmVudDtcblx0XHRcdH0pO1xuXHRcdFx0c2VsZi5fZXZlbnRCdXMuZW1pdCgnYWxsQ29tcG9uZW50c0xvYWRlZCcsIGNvbXBvbmVudHMpO1xuXHRcdFx0cmV0dXJuIHNlbGYuX2xvYWRlZENvbXBvbmVudHM7XG5cdFx0fSk7XG59O1xuXG4vKipcbiAqIFByb2Nlc3NlcyBjb21wb25lbnQgYW5kIGFwcGx5IHJlcXVpcmVkIG9wZXJhdGlvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gY29tcG9uZW50RGV0YWlscyBMb2FkZWQgY29tcG9uZW50IGRldGFpbHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb21wb25lbnQgb2JqZWN0LlxuICogQHByaXZhdGVcbiAqL1xuQ29tcG9uZW50TG9hZGVyLnByb3RvdHlwZS5fcHJvY2Vzc0NvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnREZXRhaWxzKSB7XG5cdHZhciBzZWxmID0gdGhpcyxcblx0XHRjb21wb25lbnQgPSBPYmplY3QuY3JlYXRlKGNvbXBvbmVudERldGFpbHMpO1xuXG5cdHJldHVybiB0aGlzLl9hcHBseVRyYW5zZm9ybXMoY29tcG9uZW50KVxuXHRcdC50aGVuKGZ1bmN0aW9uICh0cmFuc2Zvcm1lZCkge1xuXHRcdFx0Y29tcG9uZW50ID0gdHJhbnNmb3JtZWQ7XG5cdFx0XHRzZWxmLl90ZW1wbGF0ZVByb3ZpZGVyLnJlZ2lzdGVyQ29tcGlsZWQoXG5cdFx0XHRcdGNvbXBvbmVudC5uYW1lLCBjb21wb25lbnQudGVtcGxhdGVTb3VyY2Vcblx0XHRcdCk7XG5cdFx0XHRjb21wb25lbnQudGVtcGxhdGUgPSB7XG5cdFx0XHRcdHJlbmRlcjogZnVuY3Rpb24gKGRhdGFDb250ZXh0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHNlbGYuX3RlbXBsYXRlUHJvdmlkZXIucmVuZGVyKFxuXHRcdFx0XHRcdFx0Y29tcG9uZW50Lm5hbWUsIGRhdGFDb250ZXh0XG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGlmICh0eXBlb2YgKGNvbXBvbmVudC5lcnJvclRlbXBsYXRlU291cmNlKSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0dmFyIGVycm9yVGVtcGxhdGVOYW1lID0gbW9kdWxlSGVscGVyLmdldE5hbWVGb3JFcnJvclRlbXBsYXRlKFxuXHRcdFx0XHRcdGNvbXBvbmVudC5uYW1lXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHNlbGYuX3RlbXBsYXRlUHJvdmlkZXIucmVnaXN0ZXJDb21waWxlZChcblx0XHRcdFx0XHRlcnJvclRlbXBsYXRlTmFtZSwgY29tcG9uZW50LmVycm9yVGVtcGxhdGVTb3VyY2Vcblx0XHRcdFx0KTtcblx0XHRcdFx0Y29tcG9uZW50LmVycm9yVGVtcGxhdGUgPSB7XG5cdFx0XHRcdFx0cmVuZGVyOiBmdW5jdGlvbiAoZGF0YUNvbnRleHQpIHtcblx0XHRcdFx0XHRcdHJldHVybiBzZWxmLl90ZW1wbGF0ZVByb3ZpZGVyLnJlbmRlcihcblx0XHRcdFx0XHRcdFx0ZXJyb3JUZW1wbGF0ZU5hbWUsIGRhdGFDb250ZXh0XG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ2NvbXBvbmVudExvYWRlZCcsIGNvbXBvbmVudCk7XG5cdFx0XHRyZXR1cm4gY29tcG9uZW50O1xuXHRcdH0pXG5cdFx0LmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ2Vycm9yJywgcmVhc29uKTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0pO1xufTtcblxuLyoqXG4gKiBHZXRzIG1hcCBvZiBjb21wb25lbnRzIGJ5IG5hbWVzLlxuICogQHJldHVybnMge09iamVjdH0gTWFwIG9mIGNvbXBvbmVudHMgYnkgbmFtZXMuXG4gKi9cbkNvbXBvbmVudExvYWRlci5wcm90b3R5cGUuZ2V0Q29tcG9uZW50c0J5TmFtZXMgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiB0aGlzLl9sb2FkZWRDb21wb25lbnRzIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG59OyIsIi8qXG4gKiBjYXRiZXJyeVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNSBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5J3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeSB0aGF0IGFyZSBub3QgZXh0ZXJuYWxseVxuICogbWFpbnRhaW5lZCBsaWJyYXJpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0b3JlTG9hZGVyO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKSxcblx0TG9hZGVyQmFzZSA9IHJlcXVpcmUoJy4uLy4uL2xpYi9iYXNlL0xvYWRlckJhc2UnKTtcblxudXRpbC5pbmhlcml0cyhTdG9yZUxvYWRlciwgTG9hZGVyQmFzZSk7XG5cbi8qKlxuICogQ3JlYXRlcyBpbnN0YW5jZSBvZiB0aGUgc3RvcmUgbG9hZGVyLlxuICogQHBhcmFtIHtTZXJ2aWNlTG9jYXRvcn0gJHNlcnZpY2VMb2NhdG9yIExvY2F0b3IgdG8gcmVzb2x2ZSBzdG9yZXMuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIExvYWRlckJhc2VcbiAqL1xuZnVuY3Rpb24gU3RvcmVMb2FkZXIoJHNlcnZpY2VMb2NhdG9yKSB7XG5cdHRoaXMuX3NlcnZpY2VMb2NhdG9yID0gJHNlcnZpY2VMb2NhdG9yO1xuXHR0aGlzLl9ldmVudEJ1cyA9ICRzZXJ2aWNlTG9jYXRvci5yZXNvbHZlKCdldmVudEJ1cycpO1xuXHRMb2FkZXJCYXNlLmNhbGwodGhpcywgJHNlcnZpY2VMb2NhdG9yLnJlc29sdmVBbGwoJ3N0b3JlVHJhbnNmb3JtJykpO1xufVxuXG4vKipcbiAqIEN1cnJlbnQgZXZlbnQgYnVzLlxuICogQHR5cGUge0V2ZW50RW1pdHRlcn1cbiAqIEBwcml2YXRlXG4gKi9cblN0b3JlTG9hZGVyLnByb3RvdHlwZS5fZXZlbnRCdXMgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgc2VydmljZSBsb2NhdG9yLlxuICogQHR5cGUge1NlcnZpY2VMb2NhdG9yfVxuICogQHByaXZhdGVcbiAqL1xuU3RvcmVMb2FkZXIucHJvdG90eXBlLl9zZXJ2aWNlTG9jYXRvciA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBzZXQgb2YgbG9hZGVkIHN0b3Jlcy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5TdG9yZUxvYWRlci5wcm90b3R5cGUuX2xvYWRlZFN0b3JlcyA9IG51bGw7XG5cbi8qKlxuICogTG9hZHMgYWxsIHN0b3JlcyB3aGVuIGl0IGlzIGluIGEgYnJvd3Nlci5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIGZvciBub3RoaW5nLlxuICovXG5TdG9yZUxvYWRlci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKHRoaXMuX2xvYWRlZFN0b3Jlcykge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fbG9hZGVkU3RvcmVzKTtcblx0fVxuXG5cdHRoaXMuX2xvYWRlZFN0b3JlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdHZhciBzZWxmID0gdGhpcztcblxuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0XHQudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgc3RvcmVzID0gc2VsZi5fc2VydmljZUxvY2F0b3IucmVzb2x2ZUFsbCgnc3RvcmUnKSxcblx0XHRcdFx0c3RvcmVQcm9taXNlcyA9IFtdO1xuXG5cdFx0XHQvLyB0aGUgbGlzdCBpcyBhIHN0YWNrLCB3ZSBzaG91bGQgcmV2ZXJzZSBpdFxuXHRcdFx0c3RvcmVzLmZvckVhY2goZnVuY3Rpb24gKHN0b3JlKSB7XG5cdFx0XHRcdHN0b3JlUHJvbWlzZXMudW5zaGlmdChcblx0XHRcdFx0XHRzZWxmLl9nZXRTdG9yZShzdG9yZSlcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoc3RvcmVQcm9taXNlcyk7XG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbiAoc3RvcmVzKSB7XG5cdFx0XHRzdG9yZXMuZm9yRWFjaChmdW5jdGlvbiAoc3RvcmUpIHtcblx0XHRcdFx0aWYgKCFzdG9yZSB8fCB0eXBlb2YgKHN0b3JlKSAhPT0gJ29iamVjdCcpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VsZi5fbG9hZGVkU3RvcmVzW3N0b3JlLm5hbWVdID0gc3RvcmU7XG5cdFx0XHR9KTtcblx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ2FsbFN0b3Jlc0xvYWRlZCcsIHNlbGYuX2xvYWRlZFN0b3Jlcyk7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHNlbGYuX2xvYWRlZFN0b3Jlcyk7XG5cdFx0fSk7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIHN0b3JlIGZyb20gc3RvcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdG9yZURldGFpbHMgU3RvcmUgZGV0YWlscy5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFByb21pc2UgZm9yIHN0b3JlLlxuICogQHByaXZhdGVcbiAqL1xuU3RvcmVMb2FkZXIucHJvdG90eXBlLl9nZXRTdG9yZSA9IGZ1bmN0aW9uIChzdG9yZURldGFpbHMpIHtcblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRyZXR1cm4gdGhpcy5fYXBwbHlUcmFuc2Zvcm1zKHN0b3JlRGV0YWlscylcblx0XHQudGhlbihmdW5jdGlvbiAodHJhbnNmb3JtZWQpIHtcblx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ3N0b3JlTG9hZGVkJywgdHJhbnNmb3JtZWQpO1xuXHRcdFx0cmV0dXJuIHRyYW5zZm9ybWVkO1xuXHRcdH0pXG5cdFx0LmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ2Vycm9yJywgcmVhc29uKTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0pO1xufTtcblxuLyoqXG4gKiBHZXRzIHN0b3JlcyBtYXAgYnkgbmFtZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBNYXAgb2Ygc3RvcmVzIGJ5IG5hbWVzLlxuICovXG5TdG9yZUxvYWRlci5wcm90b3R5cGUuZ2V0U3RvcmVzQnlOYW1lcyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuX2xvYWRlZFN0b3JlcyB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xufTsiLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBNb2R1bGVBcGlQcm92aWRlcjtcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyksXG5cdHByb3BlcnR5SGVscGVyID0gcmVxdWlyZSgnLi4vLi4vbGliL2hlbHBlcnMvcHJvcGVydHlIZWxwZXInKSxcblx0TW9kdWxlQXBpUHJvdmlkZXJCYXNlID0gcmVxdWlyZSgnLi4vLi4vbGliL2Jhc2UvTW9kdWxlQXBpUHJvdmlkZXJCYXNlJyk7XG5cbnV0aWwuaW5oZXJpdHMoTW9kdWxlQXBpUHJvdmlkZXIsIE1vZHVsZUFwaVByb3ZpZGVyQmFzZSk7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIG1vZHVsZSBBUEkgcHJvdmlkZXIuXG4gKiBAcGFyYW0ge1NlcnZpY2VMb2NhdG9yfSAkc2VydmljZUxvY2F0b3IgU2VydmljZSBsb2NhdG9yXG4gKiB0byByZXNvbHZlIGRlcGVuZGVuY2llcy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgTW9kdWxlQXBpUHJvdmlkZXJCYXNlXG4gKi9cbmZ1bmN0aW9uIE1vZHVsZUFwaVByb3ZpZGVyKCRzZXJ2aWNlTG9jYXRvcikge1xuXHRNb2R1bGVBcGlQcm92aWRlckJhc2UuY2FsbCh0aGlzLCAkc2VydmljZUxvY2F0b3IpO1xuXHRwcm9wZXJ0eUhlbHBlci5kZWZpbmVSZWFkT25seSh0aGlzLCAnaXNCcm93c2VyJywgdHJ1ZSk7XG5cdHByb3BlcnR5SGVscGVyLmRlZmluZVJlYWRPbmx5KHRoaXMsICdpc1NlcnZlcicsIGZhbHNlKTtcbn1cblxuLyoqXG4gKiBSZWxvYWRzIHRoZSBwYWdlIGZvciBoYW5kbGluZyBcIm5vdCBmb3VuZFwiIGVycm9yLlxuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2UgZm9yIG5vdGhpbmcuXG4gKi9cbk1vZHVsZUFwaVByb3ZpZGVyLnByb3RvdHlwZS5ub3RGb3VuZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHdpbmRvdyA9IHRoaXMubG9jYXRvci5yZXNvbHZlKCd3aW5kb3cnKTtcblx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59O1xuXG4vKipcbiAqIFJlZGlyZWN0cyBjdXJyZW50IHBhZ2UgdG8gc3BlY2lmaWVkIFVSSS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmlTdHJpbmcgVVJJIHRvIHJlZGlyZWN0LlxuICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2UgZm9yIG5vdGhpbmcuXG4gKi9cbk1vZHVsZUFwaVByb3ZpZGVyLnByb3RvdHlwZS5yZWRpcmVjdCA9IGZ1bmN0aW9uICh1cmlTdHJpbmcpIHtcblx0dmFyIHJlcXVlc3RSb3V0ZXIgPSB0aGlzLmxvY2F0b3IucmVzb2x2ZSgncmVxdWVzdFJvdXRlcicpO1xuXHRyZXR1cm4gcmVxdWVzdFJvdXRlci5nbyh1cmlTdHJpbmcpO1xufTtcblxuLyoqXG4gKiBDbGVhcnMgY3VycmVudCBsb2NhdGlvbiBVUkkncyBmcmFnbWVudC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIGZvciBub3RoaW5nLlxuICovXG5Nb2R1bGVBcGlQcm92aWRlci5wcm90b3R5cGUuY2xlYXJGcmFnbWVudCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHdpbmRvdyA9IHRoaXMubG9jYXRvci5yZXNvbHZlKCd3aW5kb3cnKSxcblx0XHRwb3NpdGlvbiA9IHdpbmRvdy5kb2N1bWVudC5ib2R5LnNjcm9sbFRvcDtcblx0d2luZG93LmxvY2F0aW9uLmhhc2ggPSAnJztcblx0d2luZG93LmRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gcG9zaXRpb247XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn07IiwiLypcbiAqIGNhdGJlcnJ5XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IERlbmlzIFJlY2hrdW5vdiBhbmQgcHJvamVjdCBjb250cmlidXRvcnMuXG4gKlxuICogY2F0YmVycnkncyBsaWNlbnNlIGZvbGxvd3M6XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sXG4gKiBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLFxuICogcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAqIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKlxuICogVGhpcyBsaWNlbnNlIGFwcGxpZXMgdG8gYWxsIHBhcnRzIG9mIGNhdGJlcnJ5IHRoYXQgYXJlIG5vdCBleHRlcm5hbGx5XG4gKiBtYWludGFpbmVkIGxpYnJhcmllcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvQm9vdHN0cmFwcGVyJyk7XG4iLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBDb250ZXh0RmFjdG9yeTtcblxudmFyIHByb3BlcnR5SGVscGVyID0gcmVxdWlyZSgnLi9oZWxwZXJzL3Byb3BlcnR5SGVscGVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIGNvbnRleHQgZmFjdG9yeS5cbiAqIEBwYXJhbSB7U2VydmljZUxvY2F0b3J9ICRzZXJ2aWNlTG9jYXRvciBMb2NhdG9yIHRvIHJlc29sdmUgZGVwZW5kZW5jaWVzLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIENvbnRleHRGYWN0b3J5KCRzZXJ2aWNlTG9jYXRvcikge1xuXHR0aGlzLl9zZXJ2aWNlTG9jYXRvciA9ICRzZXJ2aWNlTG9jYXRvcjtcbn1cblxuLyoqXG4gKiBDdXJyZW50IHNlcnZpY2UgbG9jYXRvci5cbiAqIEB0eXBlIHtTZXJ2aWNlTG9jYXRvcn1cbiAqIEBwcml2YXRlXG4gKi9cbkNvbnRleHRGYWN0b3J5LnByb3RvdHlwZS5fc2VydmljZUxvY2F0b3IgPSBudWxsO1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGNvbnRleHQgZm9yIG1vZHVsZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gYWRkaXRpb25hbCBBZGRpdGlvbmFsIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0ge1VSSX0gYWRkaXRpb25hbC5yZWZlcnJlciBDdXJyZW50IHJlZmVycmVyLlxuICogQHBhcmFtIHtVUkl9IGFkZGl0aW9uYWwubG9jYXRpb24gQ3VycmVudCBsb2NhdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhZGRpdGlvbmFsLnVzZXJBZ2VudCBDdXJyZW50IHVzZXIgYWdlbnQuXG4gKi9cbkNvbnRleHRGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoYWRkaXRpb25hbCkge1xuXHR2YXIgYXBpUHJvdmlkZXIgPSB0aGlzLl9zZXJ2aWNlTG9jYXRvci5yZXNvbHZlKCdtb2R1bGVBcGlQcm92aWRlcicpLFxuXHRcdGNvbnRleHQgPSBPYmplY3QuY3JlYXRlKGFwaVByb3ZpZGVyKTtcblx0T2JqZWN0LmtleXMoYWRkaXRpb25hbClcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRwcm9wZXJ0eUhlbHBlci5kZWZpbmVSZWFkT25seShjb250ZXh0LCBrZXksIGFkZGl0aW9uYWxba2V5XSk7XG5cdFx0fSk7XG5cdHJldHVybiBjb250ZXh0O1xufTsiLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBTZXJpYWxXcmFwcGVyO1xuXG52YXIgZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbnZhciBFUlJPUl9OT19TVUNIX01FVEhPRCA9ICdUaGVyZSBpcyBubyBzdWNoIHJlZ2lzdGVyZWQgbWV0aG9kJztcblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiB0aGUgc2VyaWFsIHdyYXBwZXIgZm9yIHByb21pc2VzLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFNlcmlhbFdyYXBwZXIoKSB7XG5cdHRoaXMuX2VtaXR0ZXIgPSBuZXcgZXZlbnRzLkV2ZW50RW1pdHRlcigpO1xuXHR0aGlzLl9lbWl0dGVyLnNldE1heExpc3RlbmVycygwKTtcblx0dGhpcy5fdG9JbnZva2UgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHR0aGlzLl9pblByb2dyZXNzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuLyoqXG4gKiBDdXJyZW50IGV2ZW50IGVtaXR0ZXIuXG4gKiBAdHlwZSB7RXZlbnRFbWl0dGVyfVxuICogQHByaXZhdGVcbiAqL1xuU2VyaWFsV3JhcHBlci5wcm90b3R5cGUuX2VtaXR0ZXIgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgc2V0IG9mIG5hbWVkIG1ldGhvZHMgdG8gaW52b2tlLlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblNlcmlhbFdyYXBwZXIucHJvdG90eXBlLl90b0ludm9rZSA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBzZXQgb2YgZmxhZ3MgaWYgdGhlIG1ldGhvZCBpcyBpbiBwcm9ncmVzcy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5TZXJpYWxXcmFwcGVyLnByb3RvdHlwZS5faW5Qcm9ncmVzcyA9IG51bGw7XG5cbi8qKlxuICogQWRkcyBtZXRob2QgdG8gdGhlIHNldC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE1ldGhvZCBuYW1lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdG9JbnZva2UgRnVuY3Rpb24gdGhhdCByZXR1cm5zIHByb21pc2UuXG4gKi9cblNlcmlhbFdyYXBwZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChuYW1lLCB0b0ludm9rZSkge1xuXHR0aGlzLl90b0ludm9rZVtuYW1lXSA9IHRvSW52b2tlO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgbWV0aG9kIHdpdGggc3VjaCBuYW1lIHdhcyByZWdpc3RlcmVkIHRvIHRoZSBzZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIG1ldGhvZC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIG1ldGhvZCBuYW1lIGlzIHJlZ2lzdGVyZWQuXG4gKi9cblNlcmlhbFdyYXBwZXIucHJvdG90eXBlLmlzUmVnaXN0ZXJlZCA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdHJldHVybiB0eXBlb2YgKHRoaXMuX3RvSW52b2tlW25hbWVdKSA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbi8qKlxuICogSW52b2tlcyBtZXRob2Qgd2l0aG91dCBjb25jdXJyZW5jeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE1ldGhvZCBuYW1lLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gUHJvbWlzZSBmb3IgcmVzdWx0LlxuICovXG5TZXJpYWxXcmFwcGVyLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbiAobmFtZSkge1xuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0aWYgKCF0aGlzLmlzUmVnaXN0ZXJlZChuYW1lKSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoRVJST1JfTk9fU1VDSF9NRVRIT0QpKTtcblx0fVxuXG5cdGlmICh0aGlzLl9pblByb2dyZXNzW25hbWVdKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChmdWxmaWxsLCByZWplY3QpIHtcblx0XHRcdHNlbGYuX2VtaXR0ZXIub25jZShuYW1lLCBmdWxmaWxsKTtcblx0XHRcdHNlbGYuX2VtaXR0ZXIub25jZShuYW1lICsgJy0tZXJyb3InLCByZWplY3QpO1xuXHRcdH0pO1xuXHR9XG5cblx0dGhpcy5faW5Qcm9ncmVzc1tuYW1lXSA9IHRydWU7XG5cdHRoaXMuX3RvSW52b2tlW25hbWVdKClcblx0XHQudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0XHRzZWxmLl9lbWl0dGVyLmVtaXQobmFtZSwgcmVzdWx0KTtcblx0XHRcdHNlbGYuX2luUHJvZ3Jlc3NbbmFtZV0gPSBudWxsO1xuXHRcdH0pXG5cdFx0LmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHtcblx0XHRcdHNlbGYuX2VtaXR0ZXIuZW1pdChuYW1lICsgJy0tZXJyb3InLCByZWFzb24pO1xuXHRcdFx0c2VsZi5faW5Qcm9ncmVzc1tuYW1lXSA9IG51bGw7XG5cdFx0fSk7XG5cblx0cmV0dXJuIHRoaXMuaW52b2tlKG5hbWUpO1xufTsiLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdG9yZURpc3BhdGNoZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpLFxuXHRTZXJpYWxXcmFwcGVyID0gcmVxdWlyZSgnLi9TZXJpYWxXcmFwcGVyJyksXG5cdG1vZHVsZUhlbHBlciA9IHJlcXVpcmUoJy4vaGVscGVycy9tb2R1bGVIZWxwZXInKTtcblxudmFyIEVSUk9SX1NUT1JFX05PVF9GT1VORCA9ICdTdG9yZSBcIiVzXCIgbm90IGZvdW5kJyxcblx0RVJST1JfU1RBVEUgPSAnU3RhdGUgc2hvdWxkIGJlIHNldCBiZWZvcmUgYW55IHJlcXVlc3QnLFxuXHRERUZBVUxUX0xJRkVUSU1FID0gNjAwMDA7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2Ygc3RvcmUgZGlzcGF0Y2hlci5cbiAqIEBwYXJhbSB7U2VydmljZUxvY2F0b3J9ICRzZXJ2aWNlTG9jYXRvciBMb2NhdG9yIHRvIHJlc29sdmUgZGVwZW5kZW5jaWVzLlxuICogQHBhcmFtIHtTdG9yZUxvYWRlcn0gJHN0b3JlTG9hZGVyIFN0b3JlIGxvYWRlciB0byBsb2FkIHN0b3Jlcy5cbiAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSAkZXZlbnRCdXMgRXZlbnQgYnVzIHRvIGVtaXQgZXZlbnRzLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFN0b3JlRGlzcGF0Y2hlcigkc2VydmljZUxvY2F0b3IsICRzdG9yZUxvYWRlciwgJGV2ZW50QnVzKSB7XG5cdHRoaXMuX3NlcnZpY2VMb2NhdG9yID0gJHNlcnZpY2VMb2NhdG9yO1xuXHR0aGlzLl9zdG9yZUxvYWRlciA9ICRzdG9yZUxvYWRlcjtcblx0dGhpcy5fZXZlbnRCdXMgPSAkZXZlbnRCdXM7XG5cdHRoaXMuX3N0b3JlSW5zdGFuY2VzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0dGhpcy5fbGFzdERhdGEgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHR0aGlzLl9kZXBlbmRhbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0dGhpcy5fc2VyaWFsV3JhcHBlciA9IG5ldyBTZXJpYWxXcmFwcGVyKCk7XG59XG5cbi8qKlxuICogQ3VycmVudCBzZXJ2aWNlIGxvY2F0b3IuXG4gKiBAdHlwZSB7U2VydmljZUxvY2F0b3J9XG4gKiBAcHJpdmF0ZVxuICovXG5TdG9yZURpc3BhdGNoZXIucHJvdG90eXBlLl9zZXJ2aWNlTG9jYXRvciA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBldmVudCBidXMuXG4gKiBAdHlwZSB7RXZlbnRFbWl0dGVyfVxuICogQHByaXZhdGVcbiAqL1xuU3RvcmVEaXNwYXRjaGVyLnByb3RvdHlwZS5fZXZlbnRCdXMgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgc3RvcmUgbG9hZGVyLlxuICogQHR5cGUge1N0b3JlTG9hZGVyfVxuICogQHByaXZhdGVcbiAqL1xuU3RvcmVEaXNwYXRjaGVyLnByb3RvdHlwZS5fc3RvcmVMb2FkZXIgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgbWFwIG9mIGFsbCBzdG9yZSBpbnN0YW5jZXMuXG4gKiBAdHlwZSB7bnVsbH1cbiAqIEBwcml2YXRlXG4gKi9cblN0b3JlRGlzcGF0Y2hlci5wcm90b3R5cGUuX3N0b3JlSW5zdGFuY2VzID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IG1hcCBvZiBsYXN0IGRhdGEgZm9yIGVhY2ggc3RvcmUuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuU3RvcmVEaXNwYXRjaGVyLnByb3RvdHlwZS5fbGFzdERhdGEgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgbWFwIG9mIGxhc3Qgc3RhdGUgb2Ygc3RvcmUgZGlzcGF0Y2hlci5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5TdG9yZURpc3BhdGNoZXIucHJvdG90eXBlLl9sYXN0U3RhdGUgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgc2VyaWFsIHdyYXBwZXIuXG4gKiBAdHlwZSB7U2VyaWFsV3JhcHBlcn1cbiAqIEBwcml2YXRlXG4gKi9cblN0b3JlRGlzcGF0Y2hlci5wcm90b3R5cGUuX3NlcmlhbFdyYXBwZXIgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgYmFzaWMgY29udGV4dCBmb3IgYWxsIHN0b3JlIGNvbnRleHRzLlxuICogQHR5cGUge09iamVjdH1cbiAqIEBwcml2YXRlXG4gKi9cblN0b3JlRGlzcGF0Y2hlci5wcm90b3R5cGUuX2N1cnJlbnRCYXNpY0NvbnRleHQgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgc2V0IG9mIHN0b3JlIGRlcGVuZGVuY3kgZ3JhcGguXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xuU3RvcmVEaXNwYXRjaGVyLnByb3RvdHlwZS5fZGVwZW5kYW50cyA9IG51bGw7XG5cbi8qKlxuICogR2V0cyBzdG9yZSBkYXRhIGFuZCBjcmVhdGVzIHN0b3JlIGluc3RhbmNlIGlmIHJlcXVpcmVkLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0b3JlTmFtZSBOYW1lIG9mIHN0b3JlLlxuICogQHJldHVybnMge09iamVjdH0gU3RvcmUncyBkYXRhLlxuICovXG5TdG9yZURpc3BhdGNoZXIucHJvdG90eXBlLmdldFN0b3JlRGF0YSA9IGZ1bmN0aW9uIChzdG9yZU5hbWUpIHtcblx0aWYgKCF0aGlzLl9sYXN0U3RhdGUpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKEVSUk9SX1NUQVRFKSk7XG5cdH1cblx0aWYgKHR5cGVvZiAoc3RvcmVOYW1lKSAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuXHR9XG5cdGlmIChzdG9yZU5hbWUgaW4gdGhpcy5fbGFzdERhdGEpIHtcblx0XHR2YXIgZXhpc3RUaW1lID0gRGF0ZS5ub3coKSAtIHRoaXMuX2xhc3REYXRhW3N0b3JlTmFtZV0uY3JlYXRlZEF0O1xuXHRcdGlmIChleGlzdFRpbWUgPD0gdGhpcy5fbGFzdERhdGFbc3RvcmVOYW1lXS5saWZldGltZSkge1xuXHRcdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9sYXN0RGF0YVtzdG9yZU5hbWVdLmRhdGEpO1xuXHRcdH1cblx0XHRkZWxldGUgdGhpcy5fbGFzdERhdGFbc3RvcmVOYW1lXTtcblx0fVxuXHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0bGlmZXRpbWUgPSBERUZBVUxUX0xJRkVUSU1FO1xuXHRzZWxmLl9ldmVudEJ1cy5lbWl0KCdzdG9yZURhdGFMb2FkJywge1xuXHRcdG5hbWU6IHN0b3JlTmFtZVxuXHR9KTtcblx0dmFyIHN0b3JlID0gdGhpcy5nZXRTdG9yZShzdG9yZU5hbWUpO1xuXHRpZiAoIXN0b3JlKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcblx0XHRcdFx0dXRpbC5mb3JtYXQoRVJST1JfU1RPUkVfTk9UX0ZPVU5ELCBzdG9yZU5hbWUpKVxuXHRcdCk7XG5cdH1cblx0aWYgKHR5cGVvZiAoc3RvcmUuJGxpZmV0aW1lKSA9PT0gJ251bWJlcicpIHtcblx0XHRsaWZldGltZSA9IHN0b3JlLiRsaWZldGltZTtcblx0fVxuXHRyZXR1cm4gc2VsZi5fc2VyaWFsV3JhcHBlci5pbnZva2Uoc3RvcmVOYW1lKVxuXHRcdC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRzZWxmLl9sYXN0RGF0YVtzdG9yZU5hbWVdID0ge1xuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRsaWZldGltZTogbGlmZXRpbWUsXG5cdFx0XHRcdGNyZWF0ZWRBdDogRGF0ZS5ub3coKVxuXHRcdFx0fTtcblx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ3N0b3JlRGF0YUxvYWRlZCcsIHtcblx0XHRcdFx0bmFtZTogc3RvcmVOYW1lLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRsaWZldGltZTogbGlmZXRpbWVcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fSk7XG59O1xuXG4vKipcbiAqIFNlbmRzIGFjdGlvbiB0byBzcGVjaWZpZWQgc3RvcmUgYW5kIHJlc29sdmVzIHByb21pc2VzIGluIHNlcmlhbCBtb2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0b3JlTmFtZSBOYW1lIG9mIHRoZSBzdG9yZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb25OYW1lIE5hbWUgb2YgdGhlIGFjdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzIEFjdGlvbiBhcmd1bWVudHMuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTwqPn0gUHJvbWlzZSBmb3IgYWN0aW9uIGhhbmRsaW5nIHJlc3VsdC5cbiAqL1xuU3RvcmVEaXNwYXRjaGVyLnByb3RvdHlwZS5zZW5kQWN0aW9uID0gZnVuY3Rpb24gKHN0b3JlTmFtZSwgYWN0aW9uTmFtZSwgYXJncykge1xuXHRpZiAoIXRoaXMuX2xhc3RTdGF0ZSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoRVJST1JfU1RBVEUpKTtcblx0fVxuXHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0YWN0aW9uRGV0YWlscyA9IHtcblx0XHRcdHN0b3JlTmFtZTogc3RvcmVOYW1lLFxuXHRcdFx0YWN0aW9uTmFtZTogYWN0aW9uTmFtZSxcblx0XHRcdGFyZ3M6IGFyZ3Ncblx0XHR9O1xuXHR0aGlzLl9ldmVudEJ1cy5lbWl0KCdhY3Rpb25TZW5kJywgYWN0aW9uRGV0YWlscyk7XG5cdHZhciBzdG9yZSA9IHRoaXMuZ2V0U3RvcmUoc3RvcmVOYW1lKTtcblx0aWYgKCFzdG9yZSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXG5cdFx0XHR1dGlsLmZvcm1hdChFUlJPUl9TVE9SRV9OT1RfRk9VTkQsIHN0b3JlTmFtZSkpXG5cdFx0KTtcblx0fVxuXHR2YXIgaGFuZGxlTWV0aG9kID0gbW9kdWxlSGVscGVyLmdldE1ldGhvZFRvSW52b2tlKFxuXHRcdHN0b3JlLCAnaGFuZGxlJywgYWN0aW9uTmFtZVxuXHQpO1xuXHRyZXR1cm4gbW9kdWxlSGVscGVyLmdldFNhZmVQcm9taXNlKGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gaGFuZGxlTWV0aG9kKGFyZ3MpO1xuXHR9KVxuXHRcdC50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRcdHNlbGYuX2V2ZW50QnVzLmVtaXQoJ2FjdGlvblNlbnQnLCBhY3Rpb25EZXRhaWxzKTtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSk7XG59O1xuXG4vKipcbiAqIFNlbmRzIGFjdGlvbiB0byBldmVyeSBzdG9yZSB0aGF0IGhhcyBoYW5kbGUgbWV0aG9kIGZvciBzdWNoIGFjdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb25OYW1lIE5hbWUgb2YgdGhlIGFjdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmcgQWN0aW9uIGFyZ3VtZW50cy5cbiAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5PCo+Pn0gUHJvbWlzZSBmb3IgdGhlIGFjdGlvbiBoYW5kbGluZyByZXN1bHQuXG4gKi9cblN0b3JlRGlzcGF0Y2hlci5wcm90b3R5cGUuc2VuZEJyb2FkY2FzdEFjdGlvbiA9IGZ1bmN0aW9uIChhY3Rpb25OYW1lLCBhcmcpIHtcblx0dmFyIHByb21pc2VzID0gW10sXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0c3RvcmVzQnlOYW1lcyA9IHRoaXMuX3N0b3JlTG9hZGVyLmdldFN0b3Jlc0J5TmFtZXMoKSxcblx0XHRtZXRob2ROYW1lID0gbW9kdWxlSGVscGVyLmdldENhbWVsQ2FzZU5hbWUoJ2hhbmRsZScsIGFjdGlvbk5hbWUpO1xuXHRPYmplY3Qua2V5cyhzdG9yZXNCeU5hbWVzKVxuXHRcdC5mb3JFYWNoKGZ1bmN0aW9uIChzdG9yZU5hbWUpIHtcblx0XHRcdHZhciBzdG9yZSA9IHN0b3Jlc0J5TmFtZXNbc3RvcmVOYW1lXSxcblx0XHRcdFx0cHJvdG9NZXRob2QgPSBzdG9yZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV07XG5cdFx0XHRpZiAodHlwZW9mIChwcm90b01ldGhvZCkgIT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHNlbmRBY3Rpb25Qcm9taXNlID0gc2VsZi5zZW5kQWN0aW9uKFxuXHRcdFx0XHRzdG9yZS5uYW1lLCBhY3Rpb25OYW1lLCBhcmdcblx0XHRcdCk7XG5cdFx0XHRwcm9taXNlcy5wdXNoKHNlbmRBY3Rpb25Qcm9taXNlKTtcblx0XHR9KTtcblx0cmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5cbi8qKlxuICogU2V0cyBuZXcgc3RhdGUgdG8gc3RvcmUgZGlzcGF0Y2hlciBhbmQgaW52b2tlcyBcImNoYW5nZWRcIiBtZXRob2QgZm9yIGFsbFxuICogc3RvcmVzIHdoaWNoIHN0YXRlIGhhdmUgYmVlbiBjaGFuZ2VkLlxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnMgTWFwIG9mIG5ldyBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIHtPYmplY3R9IGJhc2ljQ29udGV4dCBCYXNpYyBjb250ZXh0IGZvciBhbGwgc3RvcmVzLlxuICogQHJldHVybnMge0FycmF5PHN0cmluZz59IE5hbWVzIG9mIHN0b3JlcyB0aGF0IGhhdmUgYmVlbiBjaGFuZ2VkLlxuICovXG5TdG9yZURpc3BhdGNoZXIucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHBhcmFtZXRlcnMsIGJhc2ljQ29udGV4dCkge1xuXHRwYXJhbWV0ZXJzID0gcGFyYW1ldGVycyB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRpZiAoIXRoaXMuX2xhc3RTdGF0ZSkge1xuXHRcdHRoaXMuX2N1cnJlbnRCYXNpY0NvbnRleHQgPSBiYXNpY0NvbnRleHQ7XG5cdFx0dGhpcy5fbGFzdFN0YXRlID0gcGFyYW1ldGVycztcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHQvLyBzb21lIHN0b3JlJ3MgcGFyYW1ldGVycyBjYW4gYmUgcmVtb3ZlZCBzaW5jZSBsYXN0IHRpbWVcblx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdGNoYW5nZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdE9iamVjdC5rZXlzKHRoaXMuX2xhc3RTdGF0ZSlcblx0XHQuZmlsdGVyKGZ1bmN0aW9uIChzdG9yZU5hbWUpIHtcblx0XHRcdHJldHVybiAhKHN0b3JlTmFtZSBpbiBwYXJhbWV0ZXJzKTtcblx0XHR9KVxuXHRcdC5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHRjaGFuZ2VkW25hbWVdID0gdHJ1ZTtcblx0XHR9KTtcblxuXHRPYmplY3Qua2V5cyhwYXJhbWV0ZXJzKVxuXHRcdC5mb3JFYWNoKGZ1bmN0aW9uIChzdG9yZU5hbWUpIHtcblx0XHRcdC8vIG5ldyBwYXJhbWV0ZXJzIHdlcmUgc2V0IGZvciBzdG9yZVxuXHRcdFx0aWYgKCEoc3RvcmVOYW1lIGluIHNlbGYuX2xhc3RTdGF0ZSkpIHtcblx0XHRcdFx0Y2hhbmdlZFtzdG9yZU5hbWVdID0gdHJ1ZTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBuZXcgYW5kIGxhc3QgcGFyYW1ldGVycyBoYXMgZGlmZmVyZW50IHZhbHVlc1xuXHRcdFx0dmFyIGxhc3RQYXJhbWV0ZXJOYW1lcyA9XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoc2VsZi5fbGFzdFN0YXRlW3N0b3JlTmFtZV0pLFxuXHRcdFx0XHRjdXJyZW50UGFyYW1ldGVyTmFtZXMgPVxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKHBhcmFtZXRlcnNbc3RvcmVOYW1lXSk7XG5cblx0XHRcdGlmIChjdXJyZW50UGFyYW1ldGVyTmFtZXMubGVuZ3RoICE9PVxuXHRcdFx0XHRsYXN0UGFyYW1ldGVyTmFtZXMubGVuZ3RoKSB7XG5cdFx0XHRcdGNoYW5nZWRbc3RvcmVOYW1lXSA9IHRydWU7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y3VycmVudFBhcmFtZXRlck5hbWVzLmV2ZXJ5KGZ1bmN0aW9uIChwYXJhbWV0ZXJOYW1lKSB7XG5cdFx0XHRcdGlmIChwYXJhbWV0ZXJzW3N0b3JlTmFtZV1bcGFyYW1ldGVyTmFtZV0gIT09XG5cdFx0XHRcdFx0c2VsZi5fbGFzdFN0YXRlW3N0b3JlTmFtZV1bcGFyYW1ldGVyTmFtZV0pIHtcblx0XHRcdFx0XHRjaGFuZ2VkW3N0b3JlTmFtZV0gPSB0cnVlO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdHRoaXMuX2xhc3RTdGF0ZSA9IHBhcmFtZXRlcnM7XG5cdGlmICh0aGlzLl9jdXJyZW50QmFzaWNDb250ZXh0ICE9PSBiYXNpY0NvbnRleHQpIHtcblx0XHR0aGlzLl9jdXJyZW50QmFzaWNDb250ZXh0ID0gYmFzaWNDb250ZXh0O1xuXHRcdE9iamVjdC5rZXlzKHRoaXMuX3N0b3JlSW5zdGFuY2VzKVxuXHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKHN0b3JlTmFtZSkge1xuXHRcdFx0XHRzZWxmLl9zdG9yZUluc3RhbmNlc1tzdG9yZU5hbWVdLiRjb250ZXh0ID1cblx0XHRcdFx0XHRzZWxmLl9nZXRTdG9yZUNvbnRleHQoc3RvcmVOYW1lKTtcblx0XHRcdH0pO1xuXHR9XG5cblx0dmFyIGNoYW5nZWRTdG9yZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0T2JqZWN0LmtleXMoY2hhbmdlZClcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAoc3RvcmVOYW1lKSB7XG5cdFx0XHR2YXIgc3RvcmUgPSBzZWxmLmdldFN0b3JlKHN0b3JlTmFtZSk7XG5cdFx0XHRpZiAoIXN0b3JlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHN0b3JlLiRjb250ZXh0LmNoYW5nZWQoKVxuXHRcdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0XHRcdGNoYW5nZWRTdG9yZU5hbWVzW25hbWVdID0gdHJ1ZTtcblx0XHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0dGhpcy5fZXZlbnRCdXMuZW1pdCgnc3RhdGVDaGFuZ2VkJywge1xuXHRcdG9sZFN0YXRlOiB0aGlzLl9sYXN0U3RhdGUsXG5cdFx0bmV3U3RhdGU6IHBhcmFtZXRlcnNcblx0fSk7XG5cdHJldHVybiBPYmplY3Qua2V5cyhjaGFuZ2VkU3RvcmVOYW1lcyk7XG59O1xuXG4vKipcbiAqIEdldHMgY29udGV4dCBmb3Igc3RvcmUgdXNpbmcgY29tcG9uZW50J3MgY29udGV4dCBhcyBhIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yZU5hbWUgTmFtZSBvZiBzdG9yZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFN0b3JlIGNvbnRleHQuXG4gKiBAcHJpdmF0ZVxuICovXG5TdG9yZURpc3BhdGNoZXIucHJvdG90eXBlLl9nZXRTdG9yZUNvbnRleHQgPSBmdW5jdGlvbiAoc3RvcmVOYW1lKSB7XG5cdHZhciBzZWxmID0gdGhpcyxcblx0XHRzdG9yZUNvbnRleHQgPSBPYmplY3QuY3JlYXRlKHRoaXMuX2N1cnJlbnRCYXNpY0NvbnRleHQpO1xuXHRzdG9yZUNvbnRleHQubmFtZSA9IHN0b3JlTmFtZTtcblx0c3RvcmVDb250ZXh0LnN0YXRlID0gdGhpcy5fbGFzdFN0YXRlW3N0b3JlTmFtZV0gfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0c3RvcmVDb250ZXh0LmNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHdhbGtlZCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG5cdFx0XHRjdXJyZW50LFxuXHRcdFx0dG9DaGFuZ2UgPSBbc3RvcmVOYW1lXTtcblxuXHRcdHdoaWxlICh0b0NoYW5nZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRjdXJyZW50ID0gdG9DaGFuZ2Uuc2hpZnQoKTtcblx0XHRcdGlmIChjdXJyZW50IGluIHdhbGtlZCkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHRcdHdhbGtlZFtjdXJyZW50XSA9IHRydWU7XG5cdFx0XHRpZiAoY3VycmVudCBpbiBzZWxmLl9kZXBlbmRhbnRzKSB7XG5cdFx0XHRcdHRvQ2hhbmdlID0gdG9DaGFuZ2UuY29uY2F0KFxuXHRcdFx0XHRcdE9iamVjdC5rZXlzKHNlbGYuX2RlcGVuZGFudHNbY3VycmVudF0pXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRkZWxldGUgc2VsZi5fbGFzdERhdGFbY3VycmVudF07XG5cdFx0XHRzZWxmLl9ldmVudEJ1cy5lbWl0KCdzdG9yZUNoYW5nZWQnLCBjdXJyZW50KTtcblx0XHR9XG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKHdhbGtlZCk7XG5cdH07XG5cdHN0b3JlQ29udGV4dC5nZXRTdG9yZURhdGEgPSBmdW5jdGlvbiAoc291cmNlU3RvcmVOYW1lKSB7XG5cdFx0aWYgKHNvdXJjZVN0b3JlTmFtZSA9PT0gc3RvcmVOYW1lKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuXHRcdH1cblx0XHRyZXR1cm4gc2VsZi5nZXRTdG9yZURhdGEoc291cmNlU3RvcmVOYW1lKTtcblx0fTtcblx0c3RvcmVDb250ZXh0LnNldERlcGVuZGVuY3kgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRcdGlmICghKG5hbWUgaW4gc2VsZi5fZGVwZW5kYW50cykpIHtcblx0XHRcdHNlbGYuX2RlcGVuZGFudHNbbmFtZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRcdH1cblx0XHRzZWxmLl9kZXBlbmRhbnRzW25hbWVdW3N0b3JlTmFtZV0gPSB0cnVlO1xuXHR9O1xuXHRzdG9yZUNvbnRleHQudW5zZXREZXBlbmRlbmN5ID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRpZiAoIShuYW1lIGluIHNlbGYuX2RlcGVuZGFudHMpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGRlbGV0ZSBzZWxmLl9kZXBlbmRhbnRzW25hbWVdW3N0b3JlTmFtZV07XG5cdH07XG5cdHN0b3JlQ29udGV4dC5zZW5kQWN0aW9uID0gZnVuY3Rpb24gKHN0b3JlTmFtZSwgbmFtZSwgYXJncykge1xuXHRcdHJldHVybiBzZWxmLnNlbmRBY3Rpb24oc3RvcmVOYW1lLCBuYW1lLCBhcmdzKTtcblx0fTtcblx0c3RvcmVDb250ZXh0LnNlbmRCcm9hZGNhc3RBY3Rpb24gPSBmdW5jdGlvbiAobmFtZSwgYXJncykge1xuXHRcdHJldHVybiBzZWxmLnNlbmRCcm9hZGNhc3RBY3Rpb24obmFtZSwgYXJncyk7XG5cdH07XG5cblx0cmV0dXJuIHN0b3JlQ29udGV4dDtcbn07XG5cbi8qKlxuICogR2V0cyBzdG9yZSBpbnN0YW5jZSBhbmQgY3JlYXRlcyBpdCBpZiByZXF1aXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdG9yZU5hbWUgTmFtZSBvZiBzdG9yZS5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFByb21pc2UgZm9yIHN0b3JlLlxuICovXG5TdG9yZURpc3BhdGNoZXIucHJvdG90eXBlLmdldFN0b3JlID0gZnVuY3Rpb24gKHN0b3JlTmFtZSkge1xuXHRpZiAoIXN0b3JlTmFtZSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHZhciBzdG9yZSA9IHRoaXMuX3N0b3JlSW5zdGFuY2VzW3N0b3JlTmFtZV07XG5cdGlmIChzdG9yZSkge1xuXHRcdHJldHVybiBzdG9yZTtcblx0fVxuXHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0dmFyIHN0b3JlcyA9IHNlbGYuX3N0b3JlTG9hZGVyLmdldFN0b3Jlc0J5TmFtZXMoKSxcblx0XHRjb25maWcgPSBzZWxmLl9zZXJ2aWNlTG9jYXRvci5yZXNvbHZlKCdjb25maWcnKTtcblx0aWYgKCEoc3RvcmVOYW1lIGluIHN0b3JlcykpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdHZhciBjb25zdHJ1Y3RvciA9IHN0b3Jlc1tzdG9yZU5hbWVdLmNvbnN0cnVjdG9yO1xuXHRjb25zdHJ1Y3Rvci5wcm90b3R5cGUuJGNvbnRleHQgPSBzZWxmLl9nZXRTdG9yZUNvbnRleHQoc3RvcmVOYW1lKTtcblx0c2VsZi5fc3RvcmVJbnN0YW5jZXNbc3RvcmVOYW1lXSA9IHNlbGYuX3NlcnZpY2VMb2NhdG9yXG5cdFx0LnJlc29sdmVJbnN0YW5jZShjb25zdHJ1Y3RvciwgY29uZmlnKTtcblx0c2VsZi5fc3RvcmVJbnN0YW5jZXNbc3RvcmVOYW1lXS4kY29udGV4dCA9IGNvbnN0cnVjdG9yLnByb3RvdHlwZS4kY29udGV4dDtcblxuXHRzZWxmLl9zZXJpYWxXcmFwcGVyLmFkZChzdG9yZU5hbWUsIGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgbG9hZE1ldGhvZCA9IG1vZHVsZUhlbHBlci5nZXRNZXRob2RUb0ludm9rZShcblx0XHRcdHNlbGYuX3N0b3JlSW5zdGFuY2VzW3N0b3JlTmFtZV0sICdsb2FkJ1xuXHRcdCk7XG5cdFx0cmV0dXJuIG1vZHVsZUhlbHBlci5nZXRTYWZlUHJvbWlzZShsb2FkTWV0aG9kKTtcblx0fSk7XG5cdHJldHVybiBzZWxmLl9zdG9yZUluc3RhbmNlc1tzdG9yZU5hbWVdO1xufTsiLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBCb290c3RyYXBwZXJCYXNlO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKSxcblx0bW9kdWxlSGVscGVyID0gcmVxdWlyZSgnLi4vaGVscGVycy9tb2R1bGVIZWxwZXInKSxcblx0aHJUaW1lSGVscGVyID0gcmVxdWlyZSgnLi4vaGVscGVycy9oclRpbWVIZWxwZXInKSxcblx0dWhyID0gcmVxdWlyZSgnY2F0YmVycnktdWhyJyksXG5cdFByb21pc2UgPSByZXF1aXJlKCdwcm9taXNlJyksXG5cdFN0YXRlUHJvdmlkZXIgPSByZXF1aXJlKCcuLi9wcm92aWRlcnMvU3RhdGVQcm92aWRlcicpLFxuXHRTdG9yZUxvYWRlciA9IHJlcXVpcmUoJy4uL2xvYWRlcnMvU3RvcmVMb2FkZXInKSxcblx0Q29tcG9uZW50TG9hZGVyID0gcmVxdWlyZSgnLi4vbG9hZGVycy9Db21wb25lbnRMb2FkZXInKSxcblx0RG9jdW1lbnRSZW5kZXJlciA9IHJlcXVpcmUoJy4uL0RvY3VtZW50UmVuZGVyZXInKSxcblx0UmVxdWVzdFJvdXRlciA9IHJlcXVpcmUoJy4uL1JlcXVlc3RSb3V0ZXInKSxcblx0TW9kdWxlQXBpUHJvdmlkZXJCYXNlID0gcmVxdWlyZSgnLi4vYmFzZS9Nb2R1bGVBcGlQcm92aWRlckJhc2UnKSxcblx0Q29udGV4dEZhY3RvcnkgPSByZXF1aXJlKCcuLi9Db250ZXh0RmFjdG9yeScpLFxuXHRFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbnZhciBJTkZPX0NPTVBPTkVOVF9MT0FERUQgPSAnQ29tcG9uZW50IFwiJXNcIiBsb2FkZWQnLFxuXHRJTkZPX1NUT1JFX0xPQURFRCA9ICdTdG9yZSBcIiVzXCIgbG9hZGVkJyxcblx0SU5GT19BTExfU1RPUkVTX0xPQURFRCA9ICdBbGwgc3RvcmVzIGxvYWRlZCcsXG5cdElORk9fQUxMX0NPTVBPTkVOVFNfTE9BREVEID0gJ0FsbCBjb21wb25lbnRzIGxvYWRlZCcsXG5cdERFQlVHX0RPQ1VNRU5UX1JFTkRFUkVEID0gJ0RvY3VtZW50IHJlbmRlcmVkIGZvciBVUkkgJXMnLFxuXHRERUJVR19SRU5ERVJfQ09NUE9ORU5UID0gJ0NvbXBvbmVudCBcIiVzJXNcIiBpcyBiZWluZyByZW5kZXJlZC4uLicsXG5cdERFQlVHX0NPTVBPTkVOVF9SRU5ERVJFRCA9ICdDb21wb25lbnQgXCIlcyVzXCIgcmVuZGVyZWQlcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgYmFzZSBDYXRiZXJyeSBib290c3RyYXBwZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYXRiZXJyeUNvbnN0cnVjdG9yIENvbnN0cnVjdG9yXG4gKiBvZiB0aGUgQ2F0YmVycnkncyBtYWluIG1vZHVsZS5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBCb290c3RyYXBwZXJCYXNlKGNhdGJlcnJ5Q29uc3RydWN0b3IpIHtcblx0dGhpcy5fY2F0YmVycnlDb25zdHJ1Y3RvciA9IGNhdGJlcnJ5Q29uc3RydWN0b3I7XG59XG5cbi8qKlxuICogQ3VycmVudCBjb25zdHJ1Y3RvciBvZiB0aGUgQ2F0YmVycnkncyBtYWluIG1vZHVsZS5cbiAqIEB0eXBlIHtGdW5jdGlvbn1cbiAqIEBwcml2YXRlXG4gKi9cbkJvb3RzdHJhcHBlckJhc2UucHJvdG90eXBlLl9jYXRiZXJyeUNvbnN0cnVjdG9yID0gbnVsbDtcblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBmdWxsLWNvbmZpZ3VyZWQgaW5zdGFuY2Ugb2YgdGhlIENhdGJlcnJ5IGFwcGxpY2F0aW9uLlxuICogQHBhcmFtIHtPYmplY3Q/fSBjb25maWdPYmplY3QgQ29uZmlndXJhdGlvbiBvYmplY3QuXG4gKiBAcmV0dXJucyB7Q2F0YmVycnl9IENhdGJlcnJ5IGFwcGxpY2F0aW9uIGluc3RhbmNlLlxuICovXG5Cb290c3RyYXBwZXJCYXNlLnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoY29uZmlnT2JqZWN0KSB7XG5cdHZhciBjdXJyZW50Q29uZmlnID0gY29uZmlnT2JqZWN0IHx8IHt9LFxuXHRcdGNhdGJlcnJ5ID0gbmV3IHRoaXMuX2NhdGJlcnJ5Q29uc3RydWN0b3IoKTtcblxuXHR0aGlzLmNvbmZpZ3VyZShjdXJyZW50Q29uZmlnLCBjYXRiZXJyeS5sb2NhdG9yKTtcblx0Y2F0YmVycnkuZXZlbnRzID0gY2F0YmVycnkubG9jYXRvci5yZXNvbHZlSW5zdGFuY2UoTW9kdWxlQXBpUHJvdmlkZXJCYXNlKTtcblx0cmV0dXJuIGNhdGJlcnJ5O1xufTtcblxuLyoqXG4gKiBDb25maWd1cmVzIGxvY2F0b3Igd2l0aCBhbGwgcmVxdWlyZWQgdHlwZSByZWdpc3RyYXRpb25zLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZ09iamVjdCBDb25maWd1cmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7U2VydmljZUxvY2F0b3J9IGxvY2F0b3IgU2VydmljZSBsb2NhdG9yIHRvIGNvbmZpZ3VyZS5cbiAqL1xuQm9vdHN0cmFwcGVyQmFzZS5wcm90b3R5cGUuY29uZmlndXJlID0gZnVuY3Rpb24gKGNvbmZpZ09iamVjdCwgbG9jYXRvcikge1xuXHR2YXIgZXZlbnRCdXMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cdGV2ZW50QnVzLnNldE1heExpc3RlbmVycygwKTtcblx0bG9jYXRvci5yZWdpc3Rlckluc3RhbmNlKCdwcm9taXNlJywgUHJvbWlzZSk7XG5cdGxvY2F0b3IucmVnaXN0ZXJJbnN0YW5jZSgnZXZlbnRCdXMnLCBldmVudEJ1cyk7XG5cdGxvY2F0b3IucmVnaXN0ZXJJbnN0YW5jZSgnY29uZmlnJywgY29uZmlnT2JqZWN0KTtcblx0bG9jYXRvci5yZWdpc3Rlcignc3RhdGVQcm92aWRlcicsIFN0YXRlUHJvdmlkZXIsIGNvbmZpZ09iamVjdCwgdHJ1ZSk7XG5cdGxvY2F0b3IucmVnaXN0ZXIoJ2NvbnRleHRGYWN0b3J5JywgQ29udGV4dEZhY3RvcnksIGNvbmZpZ09iamVjdCwgdHJ1ZSk7XG5cdGxvY2F0b3IucmVnaXN0ZXIoJ3N0b3JlTG9hZGVyJywgU3RvcmVMb2FkZXIsIGNvbmZpZ09iamVjdCwgdHJ1ZSk7XG5cdGxvY2F0b3IucmVnaXN0ZXIoJ2NvbXBvbmVudExvYWRlcicsIENvbXBvbmVudExvYWRlciwgY29uZmlnT2JqZWN0LCB0cnVlKTtcblx0bG9jYXRvci5yZWdpc3RlcignZG9jdW1lbnRSZW5kZXJlcicsIERvY3VtZW50UmVuZGVyZXIsIGNvbmZpZ09iamVjdCwgdHJ1ZSk7XG5cdGxvY2F0b3IucmVnaXN0ZXIoJ3JlcXVlc3RSb3V0ZXInLCBSZXF1ZXN0Um91dGVyLCBjb25maWdPYmplY3QsIHRydWUpO1xuXG5cdHVoci5yZWdpc3Rlcihsb2NhdG9yKTtcbn07XG5cbi8qKlxuICogV3JhcHMgZXZlbnQgYnVzIHdpdGggbG9nIG1lc3NhZ2VzLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBBcHBsaWNhdGlvbiBjb25maWcuXG4gKiBAcGFyYW0ge0V2ZW50RW1pdHRlcn0gZXZlbnRCdXMgRXZlbnQgZW1pdHRlciB0aGF0IGltcGxlbWVudHMgZXZlbnQgYnVzLlxuICogQHBhcmFtIHtMb2dnZXJ9IGxvZ2dlciBMb2dnZXIgdG8gd3JpdGUgbWVzc2FnZXMuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbkJvb3RzdHJhcHBlckJhc2UucHJvdG90eXBlLl93cmFwRXZlbnRzV2l0aExvZ2dlciA9XG5cdGZ1bmN0aW9uIChjb25maWcsIGV2ZW50QnVzLCBsb2dnZXIpIHtcblx0XHR2YXIgaXNSZWxlYXNlID0gQm9vbGVhbihjb25maWcuaXNSZWxlYXNlKTtcblx0XHRldmVudEJ1c1xuXHRcdFx0Lm9uKCdjb21wb25lbnRMb2FkZWQnLCBmdW5jdGlvbiAoYXJncykge1xuXHRcdFx0XHRsb2dnZXIuaW5mbyh1dGlsLmZvcm1hdChJTkZPX0NPTVBPTkVOVF9MT0FERUQsIGFyZ3MubmFtZSkpO1xuXHRcdFx0fSlcblx0XHRcdC5vbignc3RvcmVMb2FkZWQnLCBmdW5jdGlvbiAoYXJncykge1xuXHRcdFx0XHRsb2dnZXIuaW5mbyh1dGlsLmZvcm1hdChJTkZPX1NUT1JFX0xPQURFRCwgYXJncy5uYW1lKSk7XG5cdFx0XHR9KVxuXHRcdFx0Lm9uKCdhbGxTdG9yZXNMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGxvZ2dlci5pbmZvKElORk9fQUxMX1NUT1JFU19MT0FERUQpO1xuXHRcdFx0fSlcblx0XHRcdC5vbignYWxsQ29tcG9uZW50c0xvYWRlZCcsIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0bG9nZ2VyLmluZm8oSU5GT19BTExfQ09NUE9ORU5UU19MT0FERUQpO1xuXHRcdFx0fSlcblx0XHRcdC5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyb3IpIHtcblx0XHRcdFx0bG9nZ2VyLmVycm9yKGVycm9yKTtcblx0XHRcdH0pO1xuXG5cdFx0aWYgKGlzUmVsZWFzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRldmVudEJ1c1xuXHRcdFx0Lm9uKCdjb21wb25lbnRSZW5kZXInLCBmdW5jdGlvbiAoYXJncykge1xuXHRcdFx0XHR2YXIgaWQgPSBhcmdzLmNvbnRleHQuYXR0cmlidXRlc1ttb2R1bGVIZWxwZXIuQVRUUklCVVRFX0lEXTtcblx0XHRcdFx0bG9nZ2VyLmRlYnVnKHV0aWwuZm9ybWF0KERFQlVHX1JFTkRFUl9DT01QT05FTlQsXG5cdFx0XHRcdFx0bW9kdWxlSGVscGVyLmdldFRhZ05hbWVGb3JDb21wb25lbnROYW1lKGFyZ3MubmFtZSksXG5cdFx0XHRcdFx0aWQgPyAnIycgKyBpZCA6ICcnXG5cdFx0XHRcdCkpO1xuXHRcdFx0fSlcblx0XHRcdC5vbignY29tcG9uZW50UmVuZGVyZWQnLCBmdW5jdGlvbiAoYXJncykge1xuXHRcdFx0XHR2YXIgaWQgPSBhcmdzLmNvbnRleHQuYXR0cmlidXRlc1ttb2R1bGVIZWxwZXIuQVRUUklCVVRFX0lEXTtcblx0XHRcdFx0bG9nZ2VyLmRlYnVnKHV0aWwuZm9ybWF0KFxuXHRcdFx0XHRcdERFQlVHX0NPTVBPTkVOVF9SRU5ERVJFRCxcblx0XHRcdFx0XHRtb2R1bGVIZWxwZXIuZ2V0VGFnTmFtZUZvckNvbXBvbmVudE5hbWUoYXJncy5uYW1lKSxcblx0XHRcdFx0XHRpZCA/ICcjJyArIGlkIDogJycsXG5cdFx0XHRcdFx0dXRpbC5pc0FycmF5KGFyZ3MuaHJUaW1lKSA/XG5cdFx0XHRcdFx0XHQnICgnICsgaHJUaW1lSGVscGVyLnRvTWVzc2FnZShhcmdzLmhyVGltZSkgKyAnKScgOiAnJ1xuXHRcdFx0XHQpKTtcblx0XHRcdH0pXG5cdFx0XHQub24oJ2RvY3VtZW50UmVuZGVyZWQnLCBmdW5jdGlvbiAoYXJncykge1xuXHRcdFx0XHRsb2dnZXIuZGVidWcodXRpbC5mb3JtYXQoXG5cdFx0XHRcdFx0REVCVUdfRE9DVU1FTlRfUkVOREVSRUQsIGFyZ3MubG9jYXRpb24udG9TdHJpbmcoKVxuXHRcdFx0XHQpKTtcblx0XHRcdH0pO1xuXHR9OyIsIi8qXG4gKiBjYXRiZXJyeVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5J3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeSB0aGF0IGFyZSBub3QgZXh0ZXJuYWxseVxuICogbWFpbnRhaW5lZCBsaWJyYXJpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhdGJlcnJ5QmFzZTtcblxudmFyIFNlcnZpY2VMb2NhdG9yID0gcmVxdWlyZSgnY2F0YmVycnktbG9jYXRvcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBiYXNpYyBDYXRiZXJyeSBhcHBsaWNhdGlvbiBtb2R1bGUuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQ2F0YmVycnlCYXNlKCkge1xuXHR0aGlzLmxvY2F0b3IgPSBuZXcgU2VydmljZUxvY2F0b3IoKTtcblx0dGhpcy5sb2NhdG9yLnJlZ2lzdGVySW5zdGFuY2UoJ3NlcnZpY2VMb2NhdG9yJywgdGhpcy5sb2NhdG9yKTtcblx0dGhpcy5sb2NhdG9yLnJlZ2lzdGVySW5zdGFuY2UoJ2NhdGJlcnJ5JywgdGhpcyk7XG59XG5cbi8qKlxuICogQ3VycmVudCB2ZXJzaW9uIG9mIGNhdGJlcnJ5LlxuICovXG5DYXRiZXJyeUJhc2UucHJvdG90eXBlLnZlcnNpb24gPSAnNy4wLjMnO1xuXG4vKipcbiAqIEN1cnJlbnQgb2JqZWN0IHdpdGggZXZlbnRzLlxuICogQHR5cGUge01vZHVsZUFwaVByb3ZpZGVyfVxuICovXG5DYXRiZXJyeUJhc2UucHJvdG90eXBlLmV2ZW50cyA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBzZXJ2aWNlIGxvY2F0b3IuXG4gKiBAdHlwZSB7U2VydmljZUxvY2F0b3J9XG4gKi9cbkNhdGJlcnJ5QmFzZS5wcm90b3R5cGUubG9jYXRvciA9IG51bGw7IiwiLypcbiAqIGNhdGJlcnJ5XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IERlbmlzIFJlY2hrdW5vdiBhbmQgcHJvamVjdCBjb250cmlidXRvcnMuXG4gKlxuICogY2F0YmVycnkncyBsaWNlbnNlIGZvbGxvd3M6XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sXG4gKiBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLFxuICogcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAqIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKlxuICogVGhpcyBsaWNlbnNlIGFwcGxpZXMgdG8gYWxsIHBhcnRzIG9mIGNhdGJlcnJ5IHRoYXQgYXJlIG5vdCBleHRlcm5hbGx5XG4gKiBtYWludGFpbmVkIGxpYnJhcmllcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29va2llV3JhcHBlckJhc2U7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBiYXNpYyBjb29raWUgd3JhcHBlci5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBDb29raWVXcmFwcGVyQmFzZSgpIHtcbn1cblxuLyoqXG4gKiBHZXRzIG1hcCBvZiBjb29raWUgdmFsdWVzIGJ5IG5hbWUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBDb29raWVzIG1hcCBieSBuYW1lcy5cbiAqL1xuQ29va2llV3JhcHBlckJhc2UucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHN0cmluZyA9IHRoaXMuZ2V0Q29va2llU3RyaW5nKCk7XG5cdHJldHVybiB0aGlzLl9wYXJzZUNvb2tpZVN0cmluZyhzdHJpbmcpO1xufTtcblxuLyoqXG4gKiBHZXRzIGNvb2tpZSB2YWx1ZSBieSBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ29va2llIG5hbWUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBDb29raWUgdmFsdWUuXG4gKi9cbkNvb2tpZVdyYXBwZXJCYXNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRpZiAodHlwZW9mIChuYW1lKSAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRyZXR1cm4gdGhpcy5nZXRBbGwoKVtuYW1lXSB8fCAnJztcbn07XG5cbi8qKlxuICogUGFyc2VzIGNvb2tpZSBzdHJpbmcgaW50byBtYXAgb2YgY29va2llIGtleS92YWx1ZSBwYWlycy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgQ29va2llIHN0cmluZy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IE9iamVjdCB3aXRoIGNvb2tpZSB2YWx1ZXMgYnkga2V5cy5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuQ29va2llV3JhcHBlckJhc2UucHJvdG90eXBlLl9wYXJzZUNvb2tpZVN0cmluZyA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcblx0dmFyIGNvb2tpZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0aWYgKHR5cGVvZiAoc3RyaW5nKSAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gY29va2llO1xuXHR9XG5cdHN0cmluZ1xuXHRcdC5zcGxpdCgvOyAqLylcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAoY29va2llUGFpcikge1xuXHRcdFx0dmFyIGVxdWFsc0luZGV4ID0gY29va2llUGFpci5pbmRleE9mKCc9Jyk7XG5cdFx0XHRpZiAoZXF1YWxzSW5kZXggPCAwKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGtleSA9IGNvb2tpZVBhaXIuc3Vic3RyKDAsIGVxdWFsc0luZGV4KS50cmltKCksXG5cdFx0XHRcdHZhbHVlID0gY29va2llUGFpci5zdWJzdHIoXG5cdFx0XHRcdFx0ZXF1YWxzSW5kZXggKyAxLCBjb29raWVQYWlyLmxlbmd0aFxuXHRcdFx0XHQpLnRyaW0oKTtcblxuXHRcdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKTtcblx0XHRcdGNvb2tpZVtrZXldID0gdmFsdWU7XG5cdFx0fSk7XG5cblx0cmV0dXJuIGNvb2tpZTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgY29va2llIHNldHVwIG9iamVjdCB0byBjb29raWUgc3RyaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IGNvb2tpZVNldHVwIENvb2tpZSBzZXR1cCBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29va2llU2V0dXAua2V5IENvb2tpZSBrZXkuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29va2llU2V0dXAudmFsdWUgQ29va2llIHZhbHVlLlxuICogQHBhcmFtIHtudW1iZXI/fSBjb29raWVTZXR1cC5tYXhBZ2UgTWF4IGNvb2tpZSBhZ2UgaW4gc2Vjb25kcy5cbiAqIEBwYXJhbSB7RGF0ZT99IGNvb2tpZVNldHVwLmV4cGlyZXMgRXhwaXJlIGRhdGUuXG4gKiBAcGFyYW0ge3N0cmluZz99IGNvb2tpZVNldHVwLnBhdGggVVJJIHBhdGggZm9yIGNvb2tpZS5cbiAqIEBwYXJhbSB7c3RyaW5nP30gY29va2llU2V0dXAuZG9tYWluIENvb2tpZSBkb21haW4uXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBjb29raWVTZXR1cC5zZWN1cmUgSXMgY29va2llIHNlY3VyZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBjb29raWVTZXR1cC5odHRwT25seSBJcyBjb29raWUgSFRUUCBvbmx5LlxuICogQHJldHVybnMge3N0cmluZ30gQ29va2llIHN0cmluZy5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuQ29va2llV3JhcHBlckJhc2UucHJvdG90eXBlLl9jb252ZXJ0VG9Db29raWVTZXR1cCA9IGZ1bmN0aW9uIChjb29raWVTZXR1cCkge1xuXHRpZiAodHlwZW9mIChjb29raWVTZXR1cC5rZXkpICE9PSAnc3RyaW5nJyB8fFxuXHRcdHR5cGVvZiAoY29va2llU2V0dXAudmFsdWUpICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBFcnJvcignV3Jvbmcga2V5IG9yIHZhbHVlJyk7XG5cdH1cblxuXHR2YXIgY29va2llID0gY29va2llU2V0dXAua2V5ICsgJz0nICsgY29va2llU2V0dXAudmFsdWU7XG5cblx0Ly8gaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjI2NSNzZWN0aW9uLTQuMS4xXG5cdGlmICh0eXBlb2YgKGNvb2tpZVNldHVwLm1heEFnZSkgPT09ICdudW1iZXInKSB7XG5cdFx0Y29va2llICs9ICc7IE1heC1BZ2U9JyArIGNvb2tpZVNldHVwLm1heEFnZS50b0ZpeGVkKCk7XG5cdFx0aWYgKCFjb29raWVTZXR1cC5leHBpcmVzKSB7XG5cdFx0XHQvLyBieSBkZWZhdWx0IGV4cGlyZSBkYXRlID0gY3VycmVudCBkYXRlICsgbWF4LWFnZSBpbiBzZWNvbmRzXG5cdFx0XHRjb29raWVTZXR1cC5leHBpcmVzID0gbmV3IERhdGUoRGF0ZS5ub3coKSArXG5cdFx0XHRcdGNvb2tpZVNldHVwLm1heEFnZSAqIDEwMDApO1xuXHRcdH1cblx0fVxuXHRpZiAoY29va2llU2V0dXAuZXhwaXJlcyBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRjb29raWUgKz0gJzsgRXhwaXJlcz0nICsgY29va2llU2V0dXAuZXhwaXJlcy50b1VUQ1N0cmluZygpO1xuXHR9XG5cdGlmICh0eXBlb2YgKGNvb2tpZVNldHVwLnBhdGgpID09PSAnc3RyaW5nJykge1xuXHRcdGNvb2tpZSArPSAnOyBQYXRoPScgKyBjb29raWVTZXR1cC5wYXRoO1xuXHR9XG5cdGlmICh0eXBlb2YgKGNvb2tpZVNldHVwLmRvbWFpbikgPT09ICdzdHJpbmcnKSB7XG5cdFx0Y29va2llICs9ICc7IERvbWFpbj0nICsgY29va2llU2V0dXAuZG9tYWluO1xuXHR9XG5cdGlmICh0eXBlb2YgKGNvb2tpZVNldHVwLnNlY3VyZSkgPT09ICdib29sZWFuJyAmJlxuXHRcdGNvb2tpZVNldHVwLnNlY3VyZSkge1xuXHRcdGNvb2tpZSArPSAnOyBTZWN1cmUnO1xuXHR9XG5cdGlmICh0eXBlb2YgKGNvb2tpZVNldHVwLmh0dHBPbmx5KSA9PT0gJ2Jvb2xlYW4nICYmXG5cdFx0Y29va2llU2V0dXAuaHR0cE9ubHkpIHtcblx0XHRjb29raWUgKz0gJzsgSHR0cE9ubHknO1xuXHR9XG5cblx0cmV0dXJuIGNvb2tpZTtcbn07IiwiLypcbiAqIGNhdGJlcnJ5XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1IERlbmlzIFJlY2hrdW5vdiBhbmQgcHJvamVjdCBjb250cmlidXRvcnMuXG4gKlxuICogY2F0YmVycnkncyBsaWNlbnNlIGZvbGxvd3M6XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sXG4gKiBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLFxuICogcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAqIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKlxuICogVGhpcyBsaWNlbnNlIGFwcGxpZXMgdG8gYWxsIHBhcnRzIG9mIGNhdGJlcnJ5IHRoYXQgYXJlIG5vdCBleHRlcm5hbGx5XG4gKiBtYWludGFpbmVkIGxpYnJhcmllcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gRG9jdW1lbnRSZW5kZXJlckJhc2U7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdGhlIGJhc2ljIGRvY3VtZW50IHJlbmRlcmVyLlxuICogQHBhcmFtIHtTZXJ2aWNlTG9jYXRvcn0gJHNlcnZpY2VMb2NhdG9yIExvY2F0b3IgdG8gcmVzb2x2ZSBkZXBlbmRlbmNpZXMuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gRG9jdW1lbnRSZW5kZXJlckJhc2UoJHNlcnZpY2VMb2NhdG9yKSB7XG5cdHZhciBzZWxmID0gdGhpcztcblx0dGhpcy5fc2VydmljZUxvY2F0b3IgPSAkc2VydmljZUxvY2F0b3I7XG5cdHRoaXMuX2NvbnRleHRGYWN0b3J5ID0gJHNlcnZpY2VMb2NhdG9yLnJlc29sdmUoJ2NvbnRleHRGYWN0b3J5Jyk7XG5cdHRoaXMuX2NvbXBvbmVudExvYWRlciA9ICRzZXJ2aWNlTG9jYXRvci5yZXNvbHZlKCdjb21wb25lbnRMb2FkZXInKTtcblx0dGhpcy5fZXZlbnRCdXMgPSAkc2VydmljZUxvY2F0b3IucmVzb2x2ZSgnZXZlbnRCdXMnKTtcblxuXHR2YXIgc3RvcmVMb2FkZXIgPSAkc2VydmljZUxvY2F0b3IucmVzb2x2ZSgnc3RvcmVMb2FkZXInKTtcblx0dGhpcy5fbG9hZGluZyA9IFByb21pc2UuYWxsKFtcblx0XHR0aGlzLl9jb21wb25lbnRMb2FkZXIubG9hZCgpLFxuXHRcdHN0b3JlTG9hZGVyLmxvYWQoKVxuXHRdKVxuXHRcdC50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHNlbGYuX2xvYWRpbmcgPSBudWxsO1xuXHRcdFx0c2VsZi5fZXZlbnRCdXMuZW1pdCgncmVhZHknKTtcblx0XHR9KVxuXHRcdC5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7XG5cdFx0XHRzZWxmLl9ldmVudEJ1cy5lbWl0KCdlcnJvcicsIHJlYXNvbik7XG5cdFx0fSk7XG59XG5cbi8qKlxuICogQ3VycmVudCBzZXJ2aWNlIGxvY2F0b3IuXG4gKiBAdHlwZSB7U2VydmljZUxvY2F0b3J9XG4gKiBAcHJvdGVjdGVkXG4gKi9cbkRvY3VtZW50UmVuZGVyZXJCYXNlLnByb3RvdHlwZS5fc2VydmljZUxvY2F0b3IgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgY29tcG9uZW50IGxvYWRlci5cbiAqIEB0eXBlIHtDb21wb25lbnRMb2FkZXJ9XG4gKiBAcHJvdGVjdGVkXG4gKi9cbkRvY3VtZW50UmVuZGVyZXJCYXNlLnByb3RvdHlwZS5fY29tcG9uZW50TG9hZGVyID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IG1vZHVsZSBsb2FkaW5nIHByb21pc2UuXG4gKiBAdHlwZSB7UHJvbWlzZX1cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuRG9jdW1lbnRSZW5kZXJlckJhc2UucHJvdG90eXBlLl9sb2FkaW5nID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGNvbnRleHQgZmFjdG9yeS5cbiAqIEB0eXBlIHtDb250ZXh0RmFjdG9yeX1cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuRG9jdW1lbnRSZW5kZXJlckJhc2UucHJvdG90eXBlLl9jb250ZXh0RmFjdG9yeSA9IG51bGw7XG5cbi8qKlxuICogR2V0cyBwcm9taXNlIGZvciByZWFkeSBzdGF0ZSB3aGVuIGl0IHdpbGwgYmUgYWJsZSBoYW5kbGUgcmVxdWVzdHMuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSBmb3Igbm90aGluZy5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuRG9jdW1lbnRSZW5kZXJlckJhc2UucHJvdG90eXBlLl9nZXRQcm9taXNlRm9yUmVhZHlTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHRoaXMuX2xvYWRpbmcgP1xuXHRcdHRoaXMuX2xvYWRpbmcgOlxuXHRcdFByb21pc2UucmVzb2x2ZSgpO1xufTsiLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBMb2FkZXJCYXNlO1xuXG4vKipcbiAqIENyZWF0ZSBiYXNpYyBpbXBsZW1lbnRhdGlvbiBvZiBhIG1vZHVsZSBsb2FkZXIuXG4gKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm1zIEFycmF5IG9mIG1vZHVsZSB0cmFuc2Zvcm1hdGlvbnMuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTG9hZGVyQmFzZSh0cmFuc2Zvcm1zKSB7XG5cdHRoaXMuX3RyYW5zZm9ybXMgPSB0cmFuc2Zvcm1zO1xufVxuXG4vKipcbiAqIEN1cnJlbnQgbGlzdCBvZiBjb21wb25lbnQgdHJhbnNmb3Jtcy5cbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBwcml2YXRlXG4gKi9cbkxvYWRlckJhc2UucHJvdG90eXBlLl90cmFuc2Zvcm1zID0gbnVsbDtcblxuLyoqXG4gKiBBcHBsaWVzIGFsbCB0cmFuc2Zvcm1hdGlvbnMgcmVnaXN0ZXJlZCBpbiBTZXJ2aWNlIExvY2F0b3IuXG4gKiBAcGFyYW0ge09iamVjdH0gbW9kdWxlIExvYWRlZCBtb2R1bGUuXG4gKiBAcGFyYW0ge251bWJlcj99IGluZGV4IFRyYW5zZm9ybWF0aW9uIGluZGV4IGluIGEgbGlzdC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFRyYW5zZm9ybWVkIG1vZHVsZS5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuTG9hZGVyQmFzZS5wcm90b3R5cGUuX2FwcGx5VHJhbnNmb3JtcyA9IGZ1bmN0aW9uIChtb2R1bGUsIGluZGV4KSB7XG5cdGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0Ly8gdGhlIGxpc3QgaXMgYSBzdGFjaywgd2Ugc2hvdWxkIHJldmVyc2UgaXRcblx0XHRpbmRleCA9IHRoaXMuX3RyYW5zZm9ybXMubGVuZ3RoIC0gMTtcblx0fVxuXG5cdGlmIChpbmRleCA8IDApIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZSk7XG5cdH1cblxuXHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0dHJhbnNmb3JtYXRpb24gPSB0aGlzLl90cmFuc2Zvcm1zW2luZGV4XTtcblxuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcblx0XHQudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gdHJhbnNmb3JtYXRpb24udHJhbnNmb3JtKG1vZHVsZSk7XG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbiAodHJhbnNmb3JtZWRNb2R1bGUpIHtcblx0XHRcdHJldHVybiBzZWxmLl9hcHBseVRyYW5zZm9ybXModHJhbnNmb3JtZWRNb2R1bGUsIGluZGV4IC0gMSk7XG5cdFx0fSk7XG59OyIsIi8qXG4gKiBjYXRiZXJyeVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5J3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeSB0aGF0IGFyZSBub3QgZXh0ZXJuYWxseVxuICogbWFpbnRhaW5lZCBsaWJyYXJpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vZHVsZUFwaVByb3ZpZGVyQmFzZTtcblxudmFyIEVSUk9SX0VWRU5UX05BTUUgPSAnRXZlbnQgbmFtZSBzaG91bGQgYmUgYSBzdHJpbmcnLFxuXHRFUlJPUl9FVkVOVF9IQU5ETEVSID0gJ0V2ZW50IGhhbmRsZXIgc2hvdWxkIGJlIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHRoZSBiYXNpYyBBUEkgcHJvdmlkZXIuXG4gKiBAcGFyYW0ge1NlcnZpY2VMb2NhdG9yfSAkc2VydmljZUxvY2F0b3IgU2VydmljZSBsb2NhdG9yXG4gKiB0byByZXNvbHZlIGRlcGVuZGVuY2llcy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBNb2R1bGVBcGlQcm92aWRlckJhc2UoJHNlcnZpY2VMb2NhdG9yKSB7XG5cdHRoaXMubG9jYXRvciA9ICRzZXJ2aWNlTG9jYXRvcjtcblx0dGhpcy5jb29raWUgPSAkc2VydmljZUxvY2F0b3IucmVzb2x2ZSgnY29va2llV3JhcHBlcicpO1xuXHR0aGlzLl9ldmVudEJ1cyA9ICRzZXJ2aWNlTG9jYXRvci5yZXNvbHZlKCdldmVudEJ1cycpO1xufVxuXG4vKipcbiAqIEN1cnJlbnQgY29va2llIHByb3ZpZGVyLlxuICogQHR5cGUge0Nvb2tpZVdyYXBwZXJ9XG4gKi9cbk1vZHVsZUFwaVByb3ZpZGVyQmFzZS5wcm90b3R5cGUuY29va2llID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IHNlcnZpY2UgbG9jYXRvci5cbiAqIEB0eXBlIHtTZXJ2aWNlTG9jYXRvcn1cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuTW9kdWxlQXBpUHJvdmlkZXJCYXNlLnByb3RvdHlwZS5sb2NhdG9yID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IGV2ZW50IGJ1cy5cbiAqIEB0eXBlIHtFdmVudEVtaXR0ZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5Nb2R1bGVBcGlQcm92aWRlckJhc2UucHJvdG90eXBlLl9ldmVudEJ1cyA9IG51bGw7XG5cbi8qKlxuICogU3Vic2NyaWJlcyBvbiB0aGUgc3BlY2lmaWVkIGV2ZW50IGluIENhdGJlcnJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSBOYW1lIG9mIHRoZSBldmVudC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgRXZlbnQgaGFuZGxlci5cbiAqIEByZXR1cm5zIHtNb2R1bGVBcGlQcm92aWRlckJhc2V9IFRoaXMgb2JqZWN0IGZvciBjaGFpbmluZy5cbiAqL1xuTW9kdWxlQXBpUHJvdmlkZXJCYXNlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGhhbmRsZXIpIHtcblx0Y2hlY2tFdmVudE5hbWVBbmRIYW5kbGVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG5cdHRoaXMuX2V2ZW50QnVzLm9uKGV2ZW50TmFtZSwgaGFuZGxlcik7XG5cdHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVzIG9uIHRoZSBzcGVjaWZpZWQgZXZlbnQgaW4gQ2F0YmVycnkgdG8gaGFuZGxlIG9uY2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBFdmVudCBoYW5kbGVyLlxuICogQHJldHVybnMge01vZHVsZUFwaVByb3ZpZGVyQmFzZX0gVGhpcyBvYmplY3QgZm9yIGNoYWluaW5nLlxuICovXG5Nb2R1bGVBcGlQcm92aWRlckJhc2UucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiAoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG5cdGNoZWNrRXZlbnROYW1lQW5kSGFuZGxlcihldmVudE5hbWUsIGhhbmRsZXIpO1xuXHR0aGlzLl9ldmVudEJ1cy5vbmNlKGV2ZW50TmFtZSwgaGFuZGxlcik7XG5cdHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgaGFuZGxlciBmcm9tIHRoZSBzcGVjaWZpZWQgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIE5hbWUgb2YgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBFdmVudCBoYW5kbGVyLlxuICogQHJldHVybnMge01vZHVsZUFwaVByb3ZpZGVyQmFzZX0gVGhpcyBvYmplY3QgZm9yIGNoYWluaW5nLlxuICovXG5Nb2R1bGVBcGlQcm92aWRlckJhc2UucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuXHRjaGVja0V2ZW50TmFtZUFuZEhhbmRsZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcblx0dGhpcy5fZXZlbnRCdXMucmVtb3ZlTGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyKTtcblx0cmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGhhbmRsZXJzIGZyb20gdGhlIHNwZWNpZmllZCBldmVudCBpbiBDYXRiZXJyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgTmFtZSBvZiB0aGUgZXZlbnQuXG4gKiBAcmV0dXJucyB7TW9kdWxlQXBpUHJvdmlkZXJCYXNlfSBUaGlzIG9iamVjdCBmb3IgY2hhaW5pbmcuXG4gKi9cbk1vZHVsZUFwaVByb3ZpZGVyQmFzZS5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuXHRjaGVja0V2ZW50TmFtZUFuZEhhbmRsZXIoZXZlbnROYW1lLCBkdW1teSk7XG5cdHRoaXMuX2V2ZW50QnVzLnJlbW92ZUFsbExpc3RlbmVycyhldmVudE5hbWUpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2hlY2tzIGlmIGV2ZW50IG5hbWUgaXMgYSBzdHJpbmcgYW5kIGhhbmRsZXIgaXMgYSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gZXZlbnROYW1lIE5hbWUgb2YgdGhlIGV2ZW50IHRvIGNoZWNrLlxuICogQHBhcmFtIHsqfSBoYW5kbGVyIFRoZSBldmVudCBoYW5kbGVyIHRvIGNoZWNrLlxuICovXG5mdW5jdGlvbiBjaGVja0V2ZW50TmFtZUFuZEhhbmRsZXIoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG5cdGlmICh0eXBlb2YgKGV2ZW50TmFtZSkgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKEVSUk9SX0VWRU5UX05BTUUpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiAoaGFuZGxlcikgIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoRVJST1JfRVZFTlRfSEFORExFUik7XG5cdH1cbn1cblxuLyoqXG4gKiBEb2VzIG5vdGhpbmcuIEl0IGlzIHVzZWQgYXMgYSBkZWZhdWx0IGNhbGxiYWNrLlxuICovXG5mdW5jdGlvbiBkdW1teSgpIHt9XG4iLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbnZhciBUSVRMRSA9ICdDYXRiZXJyeUA3LjAuMyAoJyArXG5cdFx0JzxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvaXNzdWVzXCIgJyArXG5cdFx0J3RhcmdldD1cIl9ibGFua1wiPicgK1xuXHRcdCdyZXBvcnQgYW4gaXNzdWUnICtcblx0XHQnPC9hPicgK1xuXHRcdCcpJyxcblx0QU1QID0gLyYvZyxcblx0TFQgPSAvPC9nLFxuXHRHVCA9IC8+L2csXG5cdFFVT1QgPSAvXFxcIi9nLFxuXHRTSU5HTEVfUVVPVCA9IC9cXCcvZyxcblx0RVJST1JfTUVTU0FHRV9SRUdFWFAgPSAvXig/OltcXHckXSspOiAoPzouKylcXHI/XFxuL2ksXG5cdEVSUk9SX01FU1NBR0VfRk9STUFUID0gJzxzcGFuICcgK1xuXHRcdCdzdHlsZT1cImNvbG9yOiByZWQ7IGZvbnQtc2l6ZTogMTZwdDsgZm9udC13ZWlnaHQ6IGJvbGQ7XCI+JyArXG5cdFx0JyVzJXMnICtcblx0XHQnPC9zcGFuPicsXG5cdE5FV19MSU5FID0gL1xccj9cXG4vZztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8qKlxuXHQgKiBQcmludHMgZXJyb3Igd2l0aCBwcmV0dHkgZm9ybWF0dGluZy5cblx0ICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgRXJyb3IgdG8gcHJpbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB1c2VyQWdlbnQgVXNlciBhZ2VudCBpbmZvcm1hdGlvbi5cblx0ICogQHJldHVybnMge3N0cmluZ30gSFRNTCB3aXRoIGFsbCBpbmZvcm1hdGlvbiBhYm91dCBlcnJvci5cblx0ICovXG5cdHByZXR0eVByaW50OiBmdW5jdGlvbiAoZXJyb3IsIHVzZXJBZ2VudCkge1xuXHRcdGlmICghZXJyb3IgfHwgdHlwZW9mIChlcnJvcikgIT09ICdvYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHRcdHZhciBkYXRlU3RyaW5nID0gKG5ldyBEYXRlKCkpLnRvVVRDU3RyaW5nKCkgKyAnOzxici8+Jyxcblx0XHRcdHVzZXJBZ2VudFN0cmluZyA9ICh1c2VyQWdlbnQgPyAodXNlckFnZW50ICsgJzs8YnIvPicpIDogJycpLFxuXHRcdFx0bmFtZSA9ICh0eXBlb2YgKGVycm9yLm5hbWUpID09PSAnc3RyaW5nJyA/IGVycm9yLm5hbWUgKyAnOiAnIDogJycpLFxuXHRcdFx0bWVzc2FnZSA9IFN0cmluZyhlcnJvci5tZXNzYWdlIHx8ICcnKSxcblx0XHRcdHN0YWNrID0gU3RyaW5nKGVycm9yLnN0YWNrIHx8ICcnKS5yZXBsYWNlKEVSUk9SX01FU1NBR0VfUkVHRVhQLCAnJyksXG5cdFx0XHRmdWxsTWVzc2FnZSA9IHV0aWwuZm9ybWF0KFxuXHRcdFx0XHRFUlJPUl9NRVNTQUdFX0ZPUk1BVCwgZXNjYXBlKG5hbWUpLCBlc2NhcGUobWVzc2FnZSlcblx0XHRcdCk7XG5cblx0XHRyZXR1cm4gJzxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsgZm9udC1zaXplOiAxMnB0O1wiPicgK1xuXHRcdFx0ZGF0ZVN0cmluZyArXG5cdFx0XHR1c2VyQWdlbnRTdHJpbmcgK1xuXHRcdFx0VElUTEUgKyAnPGJyLz48YnIvPicgK1xuXHRcdFx0ZnVsbE1lc3NhZ2UgKyAnPGJyLz48YnIvPicgK1xuXHRcdFx0ZXNjYXBlKHN0YWNrKSArXG5cdFx0XHQnPC9kaXY+Jztcblx0fVxufTtcblxuLyoqXG4gKiBFc2NhcGVzIGVycm9yIHRleHQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgRXJyb3IgdGV4dC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IGVzY2FwZWQgYW5kIGZvcm1hdHRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZSh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWVcblx0XHQucmVwbGFjZShBTVAsICcmYW1wOycpXG5cdFx0LnJlcGxhY2UoTFQsICcmbHQ7Jylcblx0XHQucmVwbGFjZShHVCwgJyZndDsnKVxuXHRcdC5yZXBsYWNlKFFVT1QsICcmcXVvdDsnKVxuXHRcdC5yZXBsYWNlKFNJTkdMRV9RVU9ULCAnJiMzOTsnKVxuXHRcdC5yZXBsYWNlKE5FV19MSU5FLCAnPGJyLz4nKTtcbn0iLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlciA9IHtcblx0Q09NUE9ORU5UX1BSRUZJWDogJ2NhdC0nLFxuXHRDT01QT05FTlRfUFJFRklYX1JFR0VYUDogL15jYXQtL2ksXG5cdENPTVBPTkVOVF9FUlJPUl9URU1QTEFURV9QT1NURklYOiAnLS1lcnJvcicsXG5cdERPQ1VNRU5UX0NPTVBPTkVOVF9OQU1FOiAnZG9jdW1lbnQnLFxuXHRET0NVTUVOVF9FTEVNRU5UX05BTUU6ICdodG1sJyxcblx0SEVBRF9DT01QT05FTlRfTkFNRTogJ2hlYWQnLFxuXHRBVFRSSUJVVEVfSUQ6ICdpZCcsXG5cdEFUVFJJQlVURV9TVE9SRTogJ2NhdC1zdG9yZScsXG5cdERFRkFVTFRfTE9HSUNfRklMRU5BTUU6ICdpbmRleC5qcycsXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgbmFtZSBmb3IgZXJyb3IgdGVtcGxhdGUgb2YgY29tcG9uZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBuYW1lIG9mIGNvbXBvbmVudC5cblx0ICogQHJldHVybnMge3N0cmluZ30gTmFtZSBvZiBlcnJvciB0ZW1wbGF0ZSBvZiB0aGUgY29tcG9uZW50LlxuXHQgKi9cblx0Z2V0TmFtZUZvckVycm9yVGVtcGxhdGU6IGZ1bmN0aW9uIChjb21wb25lbnROYW1lKSB7XG5cdFx0aWYgKHR5cGVvZiAoY29tcG9uZW50TmFtZSkgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHRcdHJldHVybiBjb21wb25lbnROYW1lICsgaGVscGVyLkNPTVBPTkVOVF9FUlJPUl9URU1QTEFURV9QT1NURklYO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBEZXRlcm1pbmVzIGlmIHNwZWNpZmllZCBjb21wb25lbnQgbmFtZSBpcyB0aGUgXCJkb2N1bWVudFwiIGNvbXBvbmVudCBuYW1lLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQuXG5cdCAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHNwZWNpZmllZCBjb21wb25lbnQgaXMgdGhlIFwiZG9jdW1lbnRcIiBjb21wb25lbnQuXG5cdCAqL1xuXHRpc0RvY3VtZW50Q29tcG9uZW50OiBmdW5jdGlvbiAoY29tcG9uZW50TmFtZSkge1xuXHRcdHJldHVybiBjb21wb25lbnROYW1lLnRvTG93ZXJDYXNlKCkgPT09IGhlbHBlci5ET0NVTUVOVF9DT01QT05FTlRfTkFNRTtcblx0fSxcblx0LyoqXG5cdCAqIERldGVybWluZXMgaWYgc3BlY2lmaWVkIGNvbXBvbmVudCBuYW1lIGlzIHRoZSBcImhlYWRcIiBjb21wb25lbnQgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IGNvbXBvbmVudE5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50LlxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBzcGVjaWZpZWQgY29tcG9uZW50IGlzIHRoZSBcImhlYWRcIiBjb21wb25lbnQuXG5cdCAqL1xuXHRpc0hlYWRDb21wb25lbnQ6IGZ1bmN0aW9uIChjb21wb25lbnROYW1lKSB7XG5cdFx0cmV0dXJuIGNvbXBvbmVudE5hbWUudG9Mb3dlckNhc2UoKSA9PT0gaGVscGVyLkhFQURfQ09NUE9ORU5UX05BTUU7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEdldHMgdGhlIG9yaWdpbmFsIGNvbXBvbmVudCBuYW1lIHdpdGhvdXQgcHJlZml4LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZnVsbENvbXBvbmVudE5hbWUgRnVsbCBjb21wb25lbnQgbmFtZSAodGFnIG5hbWUpLlxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgb3JpZ2luYWwgY29tcG9uZW50IG5hbWUgd2l0aG91dCBwcmVmaXguXG5cdCAqL1xuXHRnZXRPcmlnaW5hbENvbXBvbmVudE5hbWU6IGZ1bmN0aW9uIChmdWxsQ29tcG9uZW50TmFtZSkge1xuXHRcdGlmICh0eXBlb2YgKGZ1bGxDb21wb25lbnROYW1lKSAhPT0gJ3N0cmluZycpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cdFx0ZnVsbENvbXBvbmVudE5hbWUgPSBmdWxsQ29tcG9uZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdGlmIChmdWxsQ29tcG9uZW50TmFtZSA9PT0gaGVscGVyLkhFQURfQ09NUE9ORU5UX05BTUUpIHtcblx0XHRcdHJldHVybiBmdWxsQ29tcG9uZW50TmFtZTtcblx0XHR9XG5cdFx0aWYgKGZ1bGxDb21wb25lbnROYW1lID09PSBoZWxwZXIuRE9DVU1FTlRfQ09NUE9ORU5UX05BTUUgfHxcblx0XHRcdGZ1bGxDb21wb25lbnROYW1lID09PSBoZWxwZXIuRE9DVU1FTlRfRUxFTUVOVF9OQU1FKSB7XG5cdFx0XHRyZXR1cm4gaGVscGVyLkRPQ1VNRU5UX0NPTVBPTkVOVF9OQU1FO1xuXHRcdH1cblx0XHRyZXR1cm4gZnVsbENvbXBvbmVudE5hbWUucmVwbGFjZShoZWxwZXIuQ09NUE9ORU5UX1BSRUZJWF9SRUdFWFAsICcnKTtcblx0fSxcblxuXHQvKipcblx0ICogR2V0cyB2YWxpZCB0YWcgbmFtZSBmb3IgY29tcG9uZW50LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQuXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IE5hbWUgb2YgdGhlIHRhZy5cblx0ICovXG5cdGdldFRhZ05hbWVGb3JDb21wb25lbnROYW1lOiBmdW5jdGlvbiAoY29tcG9uZW50TmFtZSkge1xuXHRcdGlmICh0eXBlb2YgKGNvbXBvbmVudE5hbWUpICE9PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0XHR2YXIgdXBwZXJDb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpO1xuXHRcdGlmIChjb21wb25lbnROYW1lID09PSBoZWxwZXIuSEVBRF9DT01QT05FTlRfTkFNRSkge1xuXHRcdFx0cmV0dXJuIHVwcGVyQ29tcG9uZW50TmFtZTtcblx0XHR9XG5cdFx0aWYgKGNvbXBvbmVudE5hbWUgPT09IGhlbHBlci5ET0NVTUVOVF9DT01QT05FTlRfTkFNRSkge1xuXHRcdFx0cmV0dXJuIGhlbHBlci5ET0NVTUVOVF9FTEVNRU5UX05BTUUudG9VcHBlckNhc2UoKTtcblx0XHR9XG5cdFx0cmV0dXJuIGhlbHBlci5DT01QT05FTlRfUFJFRklYLnRvVXBwZXJDYXNlKCkgKyB1cHBlckNvbXBvbmVudE5hbWU7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEdldHMgbWV0aG9kIG9mIHRoZSBtb2R1bGUgdGhhdCBjYW4gYmUgaW52b2tlZC5cblx0ICogQHBhcmFtIHtPYmplY3R9IG1vZHVsZSBNb2R1bGUgaW1wbGVtZW50YXRpb24uXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggTWV0aG9kIHByZWZpeCAoaS5lLiBoYW5kbGUpLlxuXHQgKiBAcGFyYW0ge3N0cmluZz99IG5hbWUgTmFtZSBvZiB0aGUgZW50aXR5IHRvIGludm9rZSBtZXRob2QgZm9yXG5cdCAqICh3aWxsIGJlIGNvbnZlcnRlZCB0byBjYW1lbCBjYXNpbmcpLlxuXHQgKiBAcmV0dXJucyB7RnVuY3Rpb259IE1ldGhvZCB0byBpbnZva2UuXG5cdCAqL1xuXHRnZXRNZXRob2RUb0ludm9rZTogZnVuY3Rpb24gKG1vZHVsZSwgcHJlZml4LCBuYW1lKSB7XG5cdFx0aWYgKCFtb2R1bGUgfHwgdHlwZW9mIChtb2R1bGUpICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRQcm9taXNlTWV0aG9kO1xuXHRcdH1cblx0XHR2YXIgbWV0aG9kTmFtZSA9IGhlbHBlci5nZXRDYW1lbENhc2VOYW1lKHByZWZpeCwgbmFtZSk7XG5cdFx0aWYgKHR5cGVvZiAobW9kdWxlW21ldGhvZE5hbWVdKSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0cmV0dXJuIG1vZHVsZVttZXRob2ROYW1lXS5iaW5kKG1vZHVsZSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgKG1vZHVsZVtwcmVmaXhdKSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0cmV0dXJuIG1vZHVsZVtwcmVmaXhdLmJpbmQobW9kdWxlLCBuYW1lKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmYXVsdFByb21pc2VNZXRob2Q7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEdldHMgbmFtZSBpbiBjYW1lbCBjYXNpbmcgZm9yIGV2ZXJ5dGhpbmcuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggUHJlZml4IGZvciB0aGUgbmFtZS5cblx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSB0byBjb252ZXJ0LlxuXHQgKi9cblx0Z2V0Q2FtZWxDYXNlTmFtZTogZnVuY3Rpb24gKHByZWZpeCwgbmFtZSkge1xuXHRcdGlmICghbmFtZSkge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0XHR2YXIgcGFydHMgPSBuYW1lLnNwbGl0KC9bXmEtejAtOV0vaSksXG5cdFx0XHRjYW1lbENhc2VOYW1lID0gU3RyaW5nKHByZWZpeCB8fCAnJyk7XG5cblx0XHRwYXJ0cy5mb3JFYWNoKGZ1bmN0aW9uIChwYXJ0KSB7XG5cdFx0XHRpZiAoIXBhcnQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBmaXJzdCBjaGFyYWN0ZXIgaW4gbWV0aG9kIG5hbWUgbXVzdCBiZSBpbiBsb3dlcmNhc2Vcblx0XHRcdGNhbWVsQ2FzZU5hbWUgKz0gY2FtZWxDYXNlTmFtZSA/XG5cdFx0XHRcdHBhcnRbMF0udG9VcHBlckNhc2UoKSA6XG5cdFx0XHRcdHBhcnRbMF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdGNhbWVsQ2FzZU5hbWUgKz0gcGFydC5zdWJzdHJpbmcoMSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gY2FtZWxDYXNlTmFtZTtcblx0fSxcblxuXHQvKipcblx0ICogR2V0cyBzYWZlIHByb21pc2UgcmVzb2x2ZWQgZnJvbSBhY3Rpb24uXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGFjdGlvbiBBY3Rpb24gdG8gd3JhcCB3aXRoIHNhZmUgcHJvbWlzZS5cblx0ICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2UgZm9yIGRvbmUgYWN0aW9uLlxuXHQgKi9cblx0Z2V0U2FmZVByb21pc2U6IGZ1bmN0aW9uIChhY3Rpb24pIHtcblx0XHR2YXIgcmVzdWx0O1xuXHRcdHRyeSB7XG5cdFx0XHRyZXN1bHQgPSBhY3Rpb24oKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG5cdFx0fVxuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBoZWxwZXI7XG5cbi8qKlxuICogSnVzdCByZXR1cm5zIHJlc29sdmVkIHByb21pc2UuXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSBmb3Igbm90aGluZy5cbiAqL1xuZnVuY3Rpb24gZGVmYXVsdFByb21pc2VNZXRob2QoKSB7XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn0iLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8qKlxuXHQgKiBEZWZpbmVzIHJlYWQtb25seSBwcm9wZXJ0eS5cblx0ICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gZGVmaW5lIHByb3BlcnR5IGluLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBwcm9wZXJ0eS5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSBQcm9wZXJ0eSB2YWx1ZS5cblx0ICovXG5cdGRlZmluZVJlYWRPbmx5OiBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCB2YWx1ZSkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcblx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH0pO1xuXHR9XG59OyIsIi8qXG4gKiBjYXRiZXJyeVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5J3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeSB0aGF0IGFyZSBub3QgZXh0ZXJuYWxseVxuICogbWFpbnRhaW5lZCBsaWJyYXJpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKSxcblx0VVJJID0gcmVxdWlyZSgnY2F0YmVycnktdXJpJykuVVJJO1xuXG52YXIgVVJJX1BBVEhfUkVQTEFDRU1FTlRfUkVHX0VYUF9TT1VSQ0UgPSAnKFteXFxcXC9cXFxcXFxcXF0qKScsXG5cdFVSSV9RVUVSWV9SRVBMQUNFTUVOVF9SRUdfRVhQX1NPVVJDRSA9ICcoW14mPz1dKiknO1xuXG52YXIgUEFUSF9FTkRfU0xBU0hfUkVHX0VYUCA9IC8oLispXFwvKCR8XFw/fCMpLyxcblx0RVhQUkVTU0lPTl9FU0NBUEVfUkVHX0VYUCA9IC9bXFwtXFxbXFxdXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZyxcblx0SURFTlRJRklFUl9SRUdfRVhQX1NPVVJDRSA9ICdbJEEtWl9dW1xcXFxkQS1aXyRdKicsXG5cdFNUT1JFX0xJU1RfUkVHX0VYUF9TT1VSQ0UgPSAnKD86KD86XFxcXFxcXFxbWyBdKicgK1xuXHRcdCdbXlxcXFxbXFxcXF0sXSsnICtcblx0XHQnKFsgXSosWyBdKicgK1xuXHRcdCdbXlxcXFxbXFxcXF0sXSsnICtcblx0XHQnKSpbIF0qXFxcXFxcXFxdKXwoPzpcXFxcXFxcXFtbIF0qXFxcXFxcXFxdKSk/Jyxcblx0UEFSQU1FVEVSX1JFR19FWFAgPSBuZXcgUmVnRXhwKFxuXHRcdFx0JzonICtcblx0XHRcdElERU5USUZJRVJfUkVHX0VYUF9TT1VSQ0UgK1xuXHRcdFx0U1RPUkVfTElTVF9SRUdfRVhQX1NPVVJDRSwgJ2dpJyksXG5cdFNMQVNIRURfQlJBQ0tFVFNfUkVHX0VYUCA9IC9cXFxcXFxbfFxcXFxcXF0vLFxuXHRTVE9SRV9MSVNUX1NFUEFSQVRPUiA9ICcsJztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8qKlxuXHQgKiBSZW1vdmVzIHNsYXNoIGZyb20gdGhlIGVuZCBvZiBVUkkgcGF0aC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHVyaVBhdGggVVJJIHBhdGggdG8gcHJvY2Vzcy5cblx0ICogQHJldHVybnMge3N0cmluZ30gVVJJIHdpdGhvdXQgZW5kIHNsYXNoLlxuXHQgKi9cblx0cmVtb3ZlRW5kU2xhc2g6IGZ1bmN0aW9uICh1cmlQYXRoKSB7XG5cdFx0aWYgKCF1cmlQYXRoIHx8IHR5cGVvZiAodXJpUGF0aCkgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHRcdGlmICh1cmlQYXRoID09PSAnLycpIHtcblx0XHRcdHJldHVybiB1cmlQYXRoO1xuXHRcdH1cblx0XHRyZXR1cm4gdXJpUGF0aC5yZXBsYWNlKFBBVEhfRU5EX1NMQVNIX1JFR19FWFAsICckMSQyJyk7XG5cdH0sXG5cdC8qKlxuXHQgKiBHZXRzIFVSSSBtYXBwZXIgZnJvbSB0aGUgcm91dGUgZXhwcmVzc2lvbiBsaWtlXG5cdCAqIC9zb21lLzppZFtzdG9yZTEsIHN0b3JlMiwgc3RvcmUzXS9kZXRhaWxzP2ZpbHRlcj06ZmlsdGVyW3N0b3JlM10uXG5cdCAqIEBwYXJhbSB7VVJJfSByb3V0ZVVyaSBFeHByZXNzaW9uIHRoYXQgZGVmaW5lcyByb3V0ZS5cblx0ICogQHJldHVybnMge3tleHByZXNzaW9uOiBSZWdFeHAsIG1hcDogRnVuY3Rpb259P30gVVJJIG1hcHBlciBvYmplY3QuXG5cdCAqIFVSSSBtYXBwZXIgb2JqZWN0LlxuXHQgKi9cblx0Y29tcGlsZVJvdXRlOiBmdW5jdGlvbiAocm91dGVVcmkpIHtcblx0XHRpZiAoIXJvdXRlVXJpKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHQvLyBlc2NhcGUgcmVndWxhciBleHByZXNzaW9uIGNoYXJhY3RlcnNcblx0XHR2YXIgZXNjYXBlZCA9IHJvdXRlVXJpLnBhdGgucmVwbGFjZShcblx0XHRcdEVYUFJFU1NJT05fRVNDQVBFX1JFR19FWFAsICdcXFxcJCYnXG5cdFx0KTtcblxuXHRcdC8vIGdldCBhbGwgb2NjdXJyZW5jZXMgb2Ygcm91dGluZyBwYXJhbWV0ZXJzIGluIFVSSSBwYXRoXG5cdFx0dmFyIHJlZ0V4cFNvdXJjZSA9ICdeJyArIGVzY2FwZWQucmVwbGFjZShcblx0XHRcdFx0XHRQQVJBTUVURVJfUkVHX0VYUCxcblx0XHRcdFx0XHRVUklfUEFUSF9SRVBMQUNFTUVOVF9SRUdfRVhQX1NPVVJDRSkgKyAnJCcsXG5cdFx0XHRleHByZXNzaW9uID0gbmV3IFJlZ0V4cChyZWdFeHBTb3VyY2UsICdpJyksXG5cdFx0XHRxdWVyeU1hcHBlcixcblx0XHRcdHBhdGhNYXBwZXIsXG5cdFx0XHRwYXRoUGFyYW1ldGVyTWF0Y2hlcyA9IGVzY2FwZWQubWF0Y2goXG5cdFx0XHRcdFBBUkFNRVRFUl9SRUdfRVhQXG5cdFx0XHQpLFxuXHRcdFx0cGF0aFBhcmFtZXRlcnMgPSBwYXRoUGFyYW1ldGVyTWF0Y2hlcyA/XG5cdFx0XHRcdHBhdGhQYXJhbWV0ZXJNYXRjaGVzLm1hcChnZXRQYXJhbWV0ZXJEZXNjcmlwdG9yKSA6IG51bGw7XG5cblx0XHRpZiAocGF0aFBhcmFtZXRlcnMpIHtcblx0XHRcdHBhdGhNYXBwZXIgPSBjcmVhdGVVcmlQYXRoTWFwcGVyKGV4cHJlc3Npb24sIHBhdGhQYXJhbWV0ZXJzKTtcblx0XHR9XG5cblx0XHRpZiAocm91dGVVcmkucXVlcnkpIHtcblx0XHRcdHZhciBxdWVyeVBhcmFtZXRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRcdFx0T2JqZWN0LmtleXMocm91dGVVcmkucXVlcnkudmFsdWVzKVxuXHRcdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0XHRcdC8vIGFycmF5cyBpbiByb3V0aW5nIGRlZmluaXRpb25zIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0XHRcdFx0aWYgKHV0aWwuaXNBcnJheShyb3V0ZVVyaS5xdWVyeS52YWx1ZXNbbmFtZV0pKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gZXNjYXBlIHJlZ3VsYXIgZXhwcmVzc2lvbiBjaGFyYWN0ZXJzXG5cdFx0XHRcdFx0dmFyIGVzY2FwZWQgPSByb3V0ZVVyaS5xdWVyeS52YWx1ZXNbbmFtZV0ucmVwbGFjZShcblx0XHRcdFx0XHRcdEVYUFJFU1NJT05fRVNDQVBFX1JFR19FWFAsICdcXFxcJCYnXG5cdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdC8vIGdldCBhbGwgb2NjdXJyZW5jZXMgb2Ygcm91dGluZyBwYXJhbWV0ZXJzIGluIFVSSSBwYXRoXG5cdFx0XHRcdFx0dmFyIHJlZ0V4cFNvdXJjZSA9ICdeJyArIGVzY2FwZWQucmVwbGFjZShcblx0XHRcdFx0XHRcdFx0UEFSQU1FVEVSX1JFR19FWFAsXG5cdFx0XHRcdFx0XHRcdFVSSV9RVUVSWV9SRVBMQUNFTUVOVF9SRUdfRVhQX1NPVVJDRSkgKyAnJCc7XG5cdFx0XHRcdFx0dmFyIHF1ZXJ5UGFyYW1ldGVyTWF0Y2hlcyA9IGVzY2FwZWQubWF0Y2goXG5cdFx0XHRcdFx0XHRcdFBBUkFNRVRFUl9SRUdfRVhQXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGlmICghcXVlcnlQYXJhbWV0ZXJNYXRjaGVzIHx8XG5cdFx0XHRcdFx0XHRxdWVyeVBhcmFtZXRlck1hdGNoZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIHBhcmFtZXRlciA9IGdldFBhcmFtZXRlckRlc2NyaXB0b3IoXG5cdFx0XHRcdFx0XHRxdWVyeVBhcmFtZXRlck1hdGNoZXNbcXVlcnlQYXJhbWV0ZXJNYXRjaGVzLmxlbmd0aCAtIDFdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR2YXIgZXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAocmVnRXhwU291cmNlLCAnaScpO1xuXHRcdFx0XHRcdHBhcmFtZXRlci5tYXAgPSBjcmVhdGVVcmlRdWVyeVZhbHVlTWFwcGVyKGV4cHJlc3Npb24pO1xuXHRcdFx0XHRcdHF1ZXJ5UGFyYW1ldGVyc1tuYW1lXSA9IHBhcmFtZXRlcjtcblx0XHRcdFx0fSk7XG5cdFx0XHRxdWVyeU1hcHBlciA9IGNyZWF0ZVVyaVF1ZXJ5TWFwcGVyKHF1ZXJ5UGFyYW1ldGVycyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4cHJlc3Npb246IGV4cHJlc3Npb24sXG5cdFx0XHRtYXA6IGZ1bmN0aW9uICh1cmkpIHtcblx0XHRcdFx0dmFyIHN0YXRlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0XHRcdFx0aWYgKHBhdGhNYXBwZXIpIHtcblx0XHRcdFx0XHRwYXRoTWFwcGVyKHVyaS5wYXRoLCBzdGF0ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocXVlcnlNYXBwZXIgJiYgdXJpLnF1ZXJ5KSB7XG5cdFx0XHRcdFx0cXVlcnlNYXBwZXIodXJpLnF1ZXJ5LnZhbHVlcywgc3RhdGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgVVJJIHBhdGgtdG8tc3RhdGUgb2JqZWN0IG1hcHBlci5cbiAqIEBwYXJhbSB7UmVnRXhwfSBleHByZXNzaW9uIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBVUkkgcGF0aC5cbiAqIEBwYXJhbSB7QXJyYXl9IHBhcmFtZXRlcnMgTGlzdCBvZiBwYXJhbWV0ZXIgZGVzY3JpcHRvcnMuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFVSSSBtYXBwZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVVyaVBhdGhNYXBwZXIoZXhwcmVzc2lvbiwgcGFyYW1ldGVycykge1xuXHRyZXR1cm4gZnVuY3Rpb24gKHVyaVBhdGgsIHN0YXRlKSB7XG5cdFx0dmFyIG1hdGNoZXMgPSB1cmlQYXRoLm1hdGNoKGV4cHJlc3Npb24pO1xuXHRcdGlmICghbWF0Y2hlcyB8fCBtYXRjaGVzLmxlbmd0aCA8IDIpIHtcblx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHR9XG5cblx0XHQvLyBzdGFydCB3aXRoIHNlY29uZCBtYXRjaCBiZWNhdXNlIGZpcnN0IG1hdGNoIGlzIGFsd2F5c1xuXHRcdC8vIHRoZSB3aG9sZSBVUkkgcGF0aFxuXHRcdG1hdGNoZXMgPSBtYXRjaGVzLnNwbGljZSgxKTtcblxuXHRcdHBhcmFtZXRlcnMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW1ldGVyLCBpbmRleCkge1xuXHRcdFx0dmFyIHZhbHVlID0gbWF0Y2hlc1tpbmRleF07XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YWx1ZSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdC8vIG5vdGhpbmcgdG8gZG9cblx0XHRcdH1cblx0XHRcdHBhcmFtZXRlci5zdG9yZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHN0b3JlTmFtZSkge1xuXHRcdFx0XHRpZiAoIXN0YXRlW3N0b3JlTmFtZV0pIHtcblx0XHRcdFx0XHRzdGF0ZVtzdG9yZU5hbWVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdGF0ZVtzdG9yZU5hbWVdW3BhcmFtZXRlci5uYW1lXSA9IHZhbHVlO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgVVJJIHF1ZXJ5LXRvLXN0YXRlIG9iamVjdCBtYXBwZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1ldGVycyBMaXN0IG9mIHBvc3NpYmxlIHF1ZXJ5IHBhcmFtZXRlciBkZXNjcmlwdG9ycyBieVxuICogcXVlcnkgcGFyYW1ldGVyIG5hbWVzLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBVUkkgbWFwcGVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVVcmlRdWVyeU1hcHBlcihwYXJhbWV0ZXJzKSB7XG5cdHJldHVybiBmdW5jdGlvbiAocXVlcnlWYWx1ZXMsIHN0YXRlKSB7XG5cdFx0cXVlcnlWYWx1ZXMgPSBxdWVyeVZhbHVlcyB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdFx0T2JqZWN0LmtleXMocXVlcnlWYWx1ZXMpXG5cdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAocXVlcnlLZXkpIHtcblx0XHRcdFx0dmFyIHBhcmFtZXRlciA9IHBhcmFtZXRlcnNbcXVlcnlLZXldO1xuXHRcdFx0XHRpZiAoIXBhcmFtZXRlcikge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB2YWx1ZSA9IHV0aWwuaXNBcnJheShxdWVyeVZhbHVlc1txdWVyeUtleV0pID9cblx0XHRcdFx0XHRcdHF1ZXJ5VmFsdWVzW3F1ZXJ5S2V5XVxuXHRcdFx0XHRcdFx0XHQubWFwKHBhcmFtZXRlci5tYXApXG5cdFx0XHRcdFx0XHRcdC5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlICE9PSBudWxsO1xuXHRcdFx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0XHRwYXJhbWV0ZXIubWFwKHF1ZXJ5VmFsdWVzW3F1ZXJ5S2V5XSk7XG5cblx0XHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBhcmFtZXRlci5zdG9yZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHN0b3JlTmFtZSkge1xuXHRcdFx0XHRcdGlmICghc3RhdGVbc3RvcmVOYW1lXSkge1xuXHRcdFx0XHRcdFx0c3RhdGVbc3RvcmVOYW1lXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN0YXRlW3N0b3JlTmFtZV1bcGFyYW1ldGVyLm5hbWVdID0gdmFsdWU7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdH07XG59XG5cbi8qKlxuICogTWFwcyBxdWVyeSBwYXJhbWV0ZXIgdmFsdWUgdXNpbmcgdGhlIHBhcmFtZXRlcnMgZXhwcmVzc2lvbi5cbiAqIEBwYXJhbSB7UmVnRXhwfSBleHByZXNzaW9uIFJlZ3VsYXIgZXhwcmVzc2lvbiB0byBnZXQgcGFyYW1ldGVyIHZhbHVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBVUkkgcXVlcnkgc3RyaW5nIHBhcmFtZXRlciB2YWx1ZSBtYXBwZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVVyaVF1ZXJ5VmFsdWVNYXBwZXIoZXhwcmVzc2lvbikge1xuXHRyZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0dmFsdWUgPSB2YWx1ZVxuXHRcdFx0LnRvU3RyaW5nKClcblx0XHRcdC8vIHdlIGhhdmUgdG8gdGVtcG9yYXJ5IGVuY29kZSB0aGVzZSBjaGFyYWN0ZXJzIGZvciBub3QgYnJlYWtpbmdcblx0XHRcdC8vIGV4cHJlc3Npb24gcGFyc2luZywgYmVjYXVzZSBpdCdzIHRlcm1pbmF0ZWQgYnkgcXVlcnkgc2VwYXJhdG9yXG5cdFx0XHQucmVwbGFjZSgvPS9nLCAnJTNEJylcblx0XHRcdC5yZXBsYWNlKC9cXD8vZywgJyUzRicpXG5cdFx0XHQucmVwbGFjZSgvJi9nLCAnJTI2Jyk7XG5cdFx0dmFyIG1hdGNoZXMgPSB2YWx1ZS5tYXRjaChleHByZXNzaW9uKTtcblx0XHRpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdC8vIHRoZSB2YWx1ZSBpcyB0aGUgc2Vjb25kIGl0ZW0sIHRoZSBmaXJzdCBpcyBhIHdob2xlIHN0cmluZ1xuXHRcdHZhciBtYXBwZWRWYWx1ZSA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcblx0XHR0cnkge1xuXHRcdFx0bWFwcGVkVmFsdWUgPSBkZWNvZGVVUklDb21wb25lbnQobWFwcGVkVmFsdWUpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdC8vIG5vdGhpbmcgdG8gZG9cblx0XHR9XG5cblx0XHRyZXR1cm4gbWFwcGVkVmFsdWU7XG5cdH07XG59XG5cbi8qKlxuICogR2V0cyBkZXNjcmlwdGlvbiBvZiBwYXJhbWV0ZXJzIGZyb20gaXRzIGV4cHJlc3Npb24uXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1ldGVyIFBhcmFtZXRlciBleHByZXNzaW9uLlxuICogQHJldHVybnMge3tuYW1lOiBzdHJpbmcsIHN0b3JlTmFtZXM6IEFycmF5fX0gUGFyYW1ldGVyIGRlc2NyaXB0b3IuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmFtZXRlckRlc2NyaXB0b3IocGFyYW1ldGVyKSB7XG5cdHZhciBwYXJ0cyA9IHBhcmFtZXRlci5zcGxpdChTTEFTSEVEX0JSQUNLRVRTX1JFR19FWFApO1xuXG5cdHJldHVybiB7XG5cdFx0bmFtZTogcGFydHNbMF1cblx0XHRcdC50cmltKClcblx0XHRcdC5zdWJzdHJpbmcoMSksXG5cdFx0c3RvcmVOYW1lczogKHBhcnRzWzFdID8gcGFydHNbMV0gOiAnJylcblx0XHRcdC5zcGxpdChTVE9SRV9MSVNUX1NFUEFSQVRPUilcblx0XHRcdC5tYXAoZnVuY3Rpb24gKHN0b3JlTmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gc3RvcmVOYW1lLnRyaW0oKTtcblx0XHRcdH0pXG5cdFx0XHQuZmlsdGVyKGZ1bmN0aW9uIChzdG9yZU5hbWUpIHtcblx0XHRcdFx0cmV0dXJuIHN0b3JlTmFtZS5sZW5ndGggPiAwO1xuXHRcdFx0fSlcblx0fTtcbn0iLCIvKlxuICogY2F0YmVycnlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdGF0ZVByb3ZpZGVyO1xuXG52YXIgcm91dGVIZWxwZXIgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcm91dGVIZWxwZXInKSxcblx0Y2F0YmVycnlVcmkgPSByZXF1aXJlKCdjYXRiZXJyeS11cmknKSxcblx0VVJJID0gY2F0YmVycnlVcmkuVVJJO1xuXG4vKipcbiAqIENyZWF0ZSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHN0YXRlIHByb3ZpZGVyLlxuICogQHBhcmFtIHtTZXJ2aWNlTG9jYXRvcn0gJHNlcnZpY2VMb2NhdG9yIFNlcnZpY2UgbG9jYXRvclxuICogdG8gcmVzb2x2ZSBVUkkgbWFwcGVycy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTdGF0ZVByb3ZpZGVyKCRzZXJ2aWNlTG9jYXRvcikge1xuXHR0aGlzLl91cmlNYXBwZXJzID0gZ2V0VXJpTWFwcGVycygkc2VydmljZUxvY2F0b3IpO1xufVxuXG4vKipcbiAqIEN1cnJlbnQgbGlzdCBvZiBVUkkgbWFwcGVycy5cbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBwcml2YXRlXG4gKi9cblN0YXRlUHJvdmlkZXIucHJvdG90eXBlLl91cmlNYXBwZXJzID0gbnVsbDtcblxuLyoqXG4gKiBHZXRzIHN0YXRlIGJ5IHNwZWNpZmllZCBsb2NhdGlvbiBVUkkuXG4gKiBAcGFyYW0ge1VSSX0gbG9jYXRpb24gVVJJIGxvY2F0aW9uLlxuICogQHJldHVybnMge09iamVjdD99IFN0YXRlIG9iamVjdC5cbiAqL1xuU3RhdGVQcm92aWRlci5wcm90b3R5cGUuZ2V0U3RhdGVCeVVyaSA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuXHRpZiAodGhpcy5fdXJpTWFwcGVycy5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGxvY2F0aW9uID0gbG9jYXRpb24uY2xvbmUoKTtcblxuXHRsb2NhdGlvbi5wYXRoID0gcm91dGVIZWxwZXIucmVtb3ZlRW5kU2xhc2gobG9jYXRpb24ucGF0aCk7XG5cdHZhciBzdGF0ZSA9IGdldFN0YXRlKHRoaXMuX3VyaU1hcHBlcnMsIGxvY2F0aW9uKTtcblxuXHRpZiAoIXN0YXRlKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBtYWtlIHN0YXRlIG9iamVjdCBpbW11dGFibGVcblx0T2JqZWN0LmtleXMoc3RhdGUpXG5cdFx0LmZvckVhY2goZnVuY3Rpb24gKHN0b3JlTmFtZSkge1xuXHRcdFx0T2JqZWN0LmZyZWV6ZShzdGF0ZVtzdG9yZU5hbWVdKTtcblx0XHR9KTtcblx0T2JqZWN0LmZyZWV6ZShzdGF0ZSk7XG5cblx0cmV0dXJuIHN0YXRlO1xufTtcblxuLyoqXG4gKiBHZXRzIGxpc3Qgb2YgVVJJIG1hcHBlcnMuXG4gKiBAcGFyYW0ge1NlcnZpY2VMb2NhdG9yfSBzZXJ2aWNlTG9jYXRvciBTZXJ2aWNlIGxvY2F0b3IgdG8gZ2V0IHJvdXRlXG4gKiBkZWZpbml0aW9ucy5cbiAqIEByZXR1cm5zIHtBcnJheX0gTGlzdCBvZiBVUkkgbWFwcGVycy5cbiAqL1xuZnVuY3Rpb24gZ2V0VXJpTWFwcGVycyhzZXJ2aWNlTG9jYXRvcikge1xuXHR2YXIgdXJpTWFwcGVycyA9IFtdO1xuXG5cdHNlcnZpY2VMb2NhdG9yLnJlc29sdmVBbGwoJ3JvdXRlRGVmaW5pdGlvbicpXG5cdFx0LmZvckVhY2goZnVuY3Rpb24gKHJvdXRlKSB7XG5cdFx0XHQvLyBqdXN0IGNvbG9uLXBhcmFtZXRyaXplZCBzdHJpbmdcblx0XHRcdGlmICh0eXBlb2YgKHJvdXRlKSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0dmFyIHJvdXRlVXJpID0gbmV3IFVSSShyb3V0ZSk7XG5cdFx0XHRcdHJvdXRlVXJpLnBhdGggPSByb3V0ZUhlbHBlci5yZW1vdmVFbmRTbGFzaChyb3V0ZVVyaS5wYXRoKTtcblx0XHRcdFx0dXJpTWFwcGVycy5wdXNoKHJvdXRlSGVscGVyLmNvbXBpbGVSb3V0ZShyb3V0ZVVyaSkpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIGV4dGVuZGVkIGNvbG9uLXBhcmFtZXRyaXplZCBtYXBwZXJcblx0XHRcdGlmICh0eXBlb2YgKHJvdXRlKSA9PT0gJ29iamVjdCcgJiZcblx0XHRcdFx0KHR5cGVvZiAocm91dGUuZXhwcmVzc2lvbikgPT09ICdzdHJpbmcnKSAmJlxuXHRcdFx0XHQocm91dGUubWFwIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XG5cdFx0XHRcdHZhciBtYXBwZXJVcmkgPSBuZXcgVVJJKHJvdXRlLmV4cHJlc3Npb24pO1xuXHRcdFx0XHRtYXBwZXJVcmkucGF0aCA9IHJvdXRlSGVscGVyLnJlbW92ZUVuZFNsYXNoKG1hcHBlclVyaS5wYXRoKTtcblx0XHRcdFx0dmFyIG1hcHBlciA9IHJvdXRlSGVscGVyLmNvbXBpbGVSb3V0ZShtYXBwZXJVcmkpO1xuXHRcdFx0XHR1cmlNYXBwZXJzLnB1c2goe1xuXHRcdFx0XHRcdGV4cHJlc3Npb246IG1hcHBlci5leHByZXNzaW9uLFxuXHRcdFx0XHRcdG1hcDogZnVuY3Rpb24gKHVyaSkge1xuXHRcdFx0XHRcdFx0dmFyIHN0YXRlID0gbWFwcGVyLm1hcCh1cmkpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJvdXRlLm1hcChzdGF0ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyByZWd1bGFyIGV4cHJlc3Npb24gbWFwcGVyXG5cdFx0XHRpZiAodHlwZW9mIChyb3V0ZSkgPT09ICdvYmplY3QnICYmXG5cdFx0XHRcdChyb3V0ZS5leHByZXNzaW9uIGluc3RhbmNlb2YgUmVnRXhwKSAmJlxuXHRcdFx0XHQocm91dGUubWFwIGluc3RhbmNlb2YgRnVuY3Rpb24pKSB7XG5cdFx0XHRcdHVyaU1hcHBlcnMucHVzaChyb3V0ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdHJldHVybiB1cmlNYXBwZXJzO1xufVxuXG4vKipcbiAqIEdldHMgc3RhdGUuXG4gKiBAcGFyYW0ge0FycmF5fSB1cmlNYXBwZXJzIExpc3Qgb2YgVVJJIG1hcHBlcnMuXG4gKiBAcGFyYW0ge1VSSX0gbG9jYXRpb24gVVJJIHRoYXQgZGVzY3JpYmVzIHRoZSBzdGF0ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0gVGhlIHN0YXRlIGZyb20gVVJJLlxuICovXG5mdW5jdGlvbiBnZXRTdGF0ZSh1cmlNYXBwZXJzLCBsb2NhdGlvbikge1xuXHR2YXIgc3RhdGUgPSBudWxsO1xuXG5cdHVyaU1hcHBlcnMuc29tZShmdW5jdGlvbiAobWFwcGVyKSB7XG5cdFx0aWYgKG1hcHBlci5leHByZXNzaW9uLnRlc3QobG9jYXRpb24ucGF0aCkpIHtcblx0XHRcdHN0YXRlID0gbWFwcGVyLm1hcChsb2NhdGlvbikgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0pO1xuXG5cdHJldHVybiBzdGF0ZTtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9IHByb2Nlc3MuaHJ0aW1lIHx8IGhydGltZVxuXG4vLyBwb2x5ZmlsIGZvciB3aW5kb3cucGVyZm9ybWFuY2Uubm93XG52YXIgcGVyZm9ybWFuY2UgPSBnbG9iYWwucGVyZm9ybWFuY2UgfHwge31cbnZhciBwZXJmb3JtYW5jZU5vdyA9XG4gIHBlcmZvcm1hbmNlLm5vdyAgICAgICAgfHxcbiAgcGVyZm9ybWFuY2UubW96Tm93ICAgICB8fFxuICBwZXJmb3JtYW5jZS5tc05vdyAgICAgIHx8XG4gIHBlcmZvcm1hbmNlLm9Ob3cgICAgICAgfHxcbiAgcGVyZm9ybWFuY2Uud2Via2l0Tm93ICB8fFxuICBmdW5jdGlvbigpeyByZXR1cm4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSB9XG5cbi8vIGdlbmVyYXRlIHRpbWVzdGFtcCBvciBkZWx0YVxuLy8gc2VlIGh0dHA6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc19wcm9jZXNzX2hydGltZVxuZnVuY3Rpb24gaHJ0aW1lKHByZXZpb3VzVGltZXN0YW1wKXtcbiAgdmFyIGNsb2NrdGltZSA9IHBlcmZvcm1hbmNlTm93LmNhbGwocGVyZm9ybWFuY2UpKjFlLTNcbiAgdmFyIHNlY29uZHMgPSBNYXRoLmZsb29yKGNsb2NrdGltZSlcbiAgdmFyIG5hbm9zZWNvbmRzID0gTWF0aC5mbG9vcigoY2xvY2t0aW1lJTEpKjFlOSlcbiAgaWYgKHByZXZpb3VzVGltZXN0YW1wKSB7XG4gICAgc2Vjb25kcyA9IHNlY29uZHMgLSBwcmV2aW91c1RpbWVzdGFtcFswXVxuICAgIG5hbm9zZWNvbmRzID0gbmFub3NlY29uZHMgLSBwcmV2aW91c1RpbWVzdGFtcFsxXVxuICAgIGlmIChuYW5vc2Vjb25kczwwKSB7XG4gICAgICBzZWNvbmRzLS1cbiAgICAgIG5hbm9zZWNvbmRzICs9IDFlOVxuICAgIH1cbiAgfVxuICByZXR1cm4gW3NlY29uZHMsbmFub3NlY29uZHNdXG59IiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgdGhpcy5fZXZlbnRzID0gdGhpcy5fZXZlbnRzIHx8IHt9O1xuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbihuKSB7XG4gIGlmICghaXNOdW1iZXIobikgfHwgbiA8IDAgfHwgaXNOYU4obikpXG4gICAgdGhyb3cgVHlwZUVycm9yKCduIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXInKTtcbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMpXG4gICAgdGhpcy5fZXZlbnRzID0ge307XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgIGlmICghdGhpcy5fZXZlbnRzLmVycm9yIHx8XG4gICAgICAgIChpc09iamVjdCh0aGlzLl9ldmVudHMuZXJyb3IpICYmICF0aGlzLl9ldmVudHMuZXJyb3IubGVuZ3RoKSkge1xuICAgICAgZXIgPSBhcmd1bWVudHNbMV07XG4gICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICAgIH1cbiAgICAgIHRocm93IFR5cGVFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudC4nKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVyID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuXG4gIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSlcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIC8vIGZhc3QgY2FzZXNcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgICBicmVhaztcbiAgICAgIC8vIHNsb3dlclxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xuICAgIGxlbiA9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG07XG5cbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuXG4gIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gIC8vIGFkZGluZyBpdCB0byB0aGUgbGlzdGVuZXJzLCBmaXJzdCBlbWl0IFwibmV3TGlzdGVuZXJcIi5cbiAgaWYgKHRoaXMuX2V2ZW50cy5uZXdMaXN0ZW5lcilcbiAgICB0aGlzLmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgaXNGdW5jdGlvbihsaXN0ZW5lci5saXN0ZW5lcikgP1xuICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgZWxzZSBpZiAoaXNPYmplY3QodGhpcy5fZXZlbnRzW3R5cGVdKSlcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICBlbHNlXG4gICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gW3RoaXMuX2V2ZW50c1t0eXBlXSwgbGlzdGVuZXJdO1xuXG4gIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7XG4gICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7XG4gICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gICAgfVxuXG4gICAgaWYgKG0gJiYgbSA+IDAgJiYgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCA+IG0pIHtcbiAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS53YXJuZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcignKG5vZGUpIHdhcm5pbmc6IHBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgJyArXG4gICAgICAgICAgICAgICAgICAgICdsZWFrIGRldGVjdGVkLiAlZCBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gaW5jcmVhc2UgbGltaXQuJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLmxlbmd0aCk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gbm90IHN1cHBvcnRlZCBpbiBJRSAxMFxuICAgICAgICBjb25zb2xlLnRyYWNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGcoKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcblxuICAgIGlmICghZmlyZWQpIHtcbiAgICAgIGZpcmVkID0gdHJ1ZTtcbiAgICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG5cbiAgZy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICB0aGlzLm9uKHR5cGUsIGcpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gZW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWRcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xuICB2YXIgbGlzdCwgcG9zaXRpb24sIGxlbmd0aCwgaTtcblxuICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKVxuICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXR1cm4gdGhpcztcblxuICBsaXN0ID0gdGhpcy5fZXZlbnRzW3R5cGVdO1xuICBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgcG9zaXRpb24gPSAtMTtcblxuICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHxcbiAgICAgIChpc0Z1bmN0aW9uKGxpc3QubGlzdGVuZXIpICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgaWYgKHRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBsaXN0ZW5lcik7XG5cbiAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkge1xuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fFxuICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICByZXR1cm4gdGhpcztcblxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGlzdC5sZW5ndGggPSAwO1xuICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGlzdC5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIGtleSwgbGlzdGVuZXJzO1xuXG4gIGlmICghdGhpcy5fZXZlbnRzKVxuICAgIHJldHVybiB0aGlzO1xuXG4gIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgaWYgKCF0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIGVsc2UgaWYgKHRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBmb3IgKGtleSBpbiB0aGlzLl9ldmVudHMpIHtcbiAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgdGhpcy5fZXZlbnRzID0ge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXJzKSkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTtcbiAgfSBlbHNlIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAvLyBMSUZPIG9yZGVyXG4gICAgd2hpbGUgKGxpc3RlbmVycy5sZW5ndGgpXG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICB9XG4gIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgdmFyIHJldDtcbiAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSlcbiAgICByZXQgPSBbXTtcbiAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKVxuICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dO1xuICBlbHNlXG4gICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7XG4gIHJldHVybiByZXQ7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0aGlzLl9ldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IHRoaXMuX2V2ZW50c1t0eXBlXTtcblxuICAgIGlmIChpc0Z1bmN0aW9uKGV2bGlzdGVuZXIpKVxuICAgICAgcmV0dXJuIDE7XG4gICAgZWxzZSBpZiAoZXZsaXN0ZW5lcilcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgfVxuICByZXR1cm4gMDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xufTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuIiwiaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IGN0b3IsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge31cbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvclxuICB9XG59XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNCdWZmZXIoYXJnKSB7XG4gIHJldHVybiBhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCdcbiAgICAmJiB0eXBlb2YgYXJnLmNvcHkgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLmZpbGwgPT09ICdmdW5jdGlvbidcbiAgICAmJiB0eXBlb2YgYXJnLnJlYWRVSW50OCA9PT0gJ2Z1bmN0aW9uJztcbn0iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxudmFyIGZvcm1hdFJlZ0V4cCA9IC8lW3NkaiVdL2c7XG5leHBvcnRzLmZvcm1hdCA9IGZ1bmN0aW9uKGYpIHtcbiAgaWYgKCFpc1N0cmluZyhmKSkge1xuICAgIHZhciBvYmplY3RzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG9iamVjdHMucHVzaChpbnNwZWN0KGFyZ3VtZW50c1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0cy5qb2luKCcgJyk7XG4gIH1cblxuICB2YXIgaSA9IDE7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgbGVuID0gYXJncy5sZW5ndGg7XG4gIHZhciBzdHIgPSBTdHJpbmcoZikucmVwbGFjZShmb3JtYXRSZWdFeHAsIGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAoeCA9PT0gJyUlJykgcmV0dXJuICclJztcbiAgICBpZiAoaSA+PSBsZW4pIHJldHVybiB4O1xuICAgIHN3aXRjaCAoeCkge1xuICAgICAgY2FzZSAnJXMnOiByZXR1cm4gU3RyaW5nKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclZCc6IHJldHVybiBOdW1iZXIoYXJnc1tpKytdKTtcbiAgICAgIGNhc2UgJyVqJzpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnc1tpKytdKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfSk7XG4gIGZvciAodmFyIHggPSBhcmdzW2ldOyBpIDwgbGVuOyB4ID0gYXJnc1srK2ldKSB7XG4gICAgaWYgKGlzTnVsbCh4KSB8fCAhaXNPYmplY3QoeCkpIHtcbiAgICAgIHN0ciArPSAnICcgKyB4O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gJyAnICsgaW5zcGVjdCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn07XG5cblxuLy8gTWFyayB0aGF0IGEgbWV0aG9kIHNob3VsZCBub3QgYmUgdXNlZC5cbi8vIFJldHVybnMgYSBtb2RpZmllZCBmdW5jdGlvbiB3aGljaCB3YXJucyBvbmNlIGJ5IGRlZmF1bHQuXG4vLyBJZiAtLW5vLWRlcHJlY2F0aW9uIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLlxuZXhwb3J0cy5kZXByZWNhdGUgPSBmdW5jdGlvbihmbiwgbXNnKSB7XG4gIC8vIEFsbG93IGZvciBkZXByZWNhdGluZyB0aGluZ3MgaW4gdGhlIHByb2Nlc3Mgb2Ygc3RhcnRpbmcgdXAuXG4gIGlmIChpc1VuZGVmaW5lZChnbG9iYWwucHJvY2VzcykpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXhwb3J0cy5kZXByZWNhdGUoZm4sIG1zZykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHByb2Nlc3Mubm9EZXByZWNhdGlvbiA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBmbjtcbiAgfVxuXG4gIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHtcbiAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgaWYgKHByb2Nlc3MudGhyb3dEZXByZWNhdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy50cmFjZURlcHJlY2F0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUudHJhY2UobXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgIH1cbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgcmV0dXJuIGRlcHJlY2F0ZWQ7XG59O1xuXG5cbnZhciBkZWJ1Z3MgPSB7fTtcbnZhciBkZWJ1Z0Vudmlyb247XG5leHBvcnRzLmRlYnVnbG9nID0gZnVuY3Rpb24oc2V0KSB7XG4gIGlmIChpc1VuZGVmaW5lZChkZWJ1Z0Vudmlyb24pKVxuICAgIGRlYnVnRW52aXJvbiA9IHByb2Nlc3MuZW52Lk5PREVfREVCVUcgfHwgJyc7XG4gIHNldCA9IHNldC50b1VwcGVyQ2FzZSgpO1xuICBpZiAoIWRlYnVnc1tzZXRdKSB7XG4gICAgaWYgKG5ldyBSZWdFeHAoJ1xcXFxiJyArIHNldCArICdcXFxcYicsICdpJykudGVzdChkZWJ1Z0Vudmlyb24pKSB7XG4gICAgICB2YXIgcGlkID0gcHJvY2Vzcy5waWQ7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbXNnID0gZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignJXMgJWQ6ICVzJywgc2V0LCBwaWQsIG1zZyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1Z3Nbc2V0XSA9IGZ1bmN0aW9uKCkge307XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWJ1Z3Nbc2V0XTtcbn07XG5cblxuLyoqXG4gKiBFY2hvcyB0aGUgdmFsdWUgb2YgYSB2YWx1ZS4gVHJ5cyB0byBwcmludCB0aGUgdmFsdWUgb3V0XG4gKiBpbiB0aGUgYmVzdCB3YXkgcG9zc2libGUgZ2l2ZW4gdGhlIGRpZmZlcmVudCB0eXBlcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIFRoZSBvYmplY3QgdG8gcHJpbnQgb3V0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgT3B0aW9uYWwgb3B0aW9ucyBvYmplY3QgdGhhdCBhbHRlcnMgdGhlIG91dHB1dC5cbiAqL1xuLyogbGVnYWN5OiBvYmosIHNob3dIaWRkZW4sIGRlcHRoLCBjb2xvcnMqL1xuZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIGV4cG9ydHMuX2V4dGVuZChjdHgsIG9wdHMpO1xuICB9XG4gIC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5zaG93SGlkZGVuKSkgY3R4LnNob3dIaWRkZW4gPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5kZXB0aCkpIGN0eC5kZXB0aCA9IDI7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguY29sb3JzKSkgY3R4LmNvbG9ycyA9IGZhbHNlO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmN1c3RvbUluc3BlY3QpKSBjdHguY3VzdG9tSW5zcGVjdCA9IHRydWU7XG4gIGlmIChjdHguY29sb3JzKSBjdHguc3R5bGl6ZSA9IHN0eWxpemVXaXRoQ29sb3I7XG4gIHJldHVybiBmb3JtYXRWYWx1ZShjdHgsIG9iaiwgY3R4LmRlcHRoKTtcbn1cbmV4cG9ydHMuaW5zcGVjdCA9IGluc3BlY3Q7XG5cblxuLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlI2dyYXBoaWNzXG5pbnNwZWN0LmNvbG9ycyA9IHtcbiAgJ2JvbGQnIDogWzEsIDIyXSxcbiAgJ2l0YWxpYycgOiBbMywgMjNdLFxuICAndW5kZXJsaW5lJyA6IFs0LCAyNF0sXG4gICdpbnZlcnNlJyA6IFs3LCAyN10sXG4gICd3aGl0ZScgOiBbMzcsIDM5XSxcbiAgJ2dyZXknIDogWzkwLCAzOV0sXG4gICdibGFjaycgOiBbMzAsIDM5XSxcbiAgJ2JsdWUnIDogWzM0LCAzOV0sXG4gICdjeWFuJyA6IFszNiwgMzldLFxuICAnZ3JlZW4nIDogWzMyLCAzOV0sXG4gICdtYWdlbnRhJyA6IFszNSwgMzldLFxuICAncmVkJyA6IFszMSwgMzldLFxuICAneWVsbG93JyA6IFszMywgMzldXG59O1xuXG4vLyBEb24ndCB1c2UgJ2JsdWUnIG5vdCB2aXNpYmxlIG9uIGNtZC5leGVcbmluc3BlY3Quc3R5bGVzID0ge1xuICAnc3BlY2lhbCc6ICdjeWFuJyxcbiAgJ251bWJlcic6ICd5ZWxsb3cnLFxuICAnYm9vbGVhbic6ICd5ZWxsb3cnLFxuICAndW5kZWZpbmVkJzogJ2dyZXknLFxuICAnbnVsbCc6ICdib2xkJyxcbiAgJ3N0cmluZyc6ICdncmVlbicsXG4gICdkYXRlJzogJ21hZ2VudGEnLFxuICAvLyBcIm5hbWVcIjogaW50ZW50aW9uYWxseSBub3Qgc3R5bGluZ1xuICAncmVnZXhwJzogJ3JlZCdcbn07XG5cblxuZnVuY3Rpb24gc3R5bGl6ZVdpdGhDb2xvcihzdHIsIHN0eWxlVHlwZSkge1xuICB2YXIgc3R5bGUgPSBpbnNwZWN0LnN0eWxlc1tzdHlsZVR5cGVdO1xuXG4gIGlmIChzdHlsZSkge1xuICAgIHJldHVybiAnXFx1MDAxYlsnICsgaW5zcGVjdC5jb2xvcnNbc3R5bGVdWzBdICsgJ20nICsgc3RyICtcbiAgICAgICAgICAgJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVsxXSArICdtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3R5bGl6ZU5vQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgcmV0dXJuIHN0cjtcbn1cblxuXG5mdW5jdGlvbiBhcnJheVRvSGFzaChhcnJheSkge1xuICB2YXIgaGFzaCA9IHt9O1xuXG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24odmFsLCBpZHgpIHtcbiAgICBoYXNoW3ZhbF0gPSB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gaGFzaDtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMpIHtcbiAgLy8gUHJvdmlkZSBhIGhvb2sgZm9yIHVzZXItc3BlY2lmaWVkIGluc3BlY3QgZnVuY3Rpb25zLlxuICAvLyBDaGVjayB0aGF0IHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGFuIGluc3BlY3QgZnVuY3Rpb24gb24gaXRcbiAgaWYgKGN0eC5jdXN0b21JbnNwZWN0ICYmXG4gICAgICB2YWx1ZSAmJlxuICAgICAgaXNGdW5jdGlvbih2YWx1ZS5pbnNwZWN0KSAmJlxuICAgICAgLy8gRmlsdGVyIG91dCB0aGUgdXRpbCBtb2R1bGUsIGl0J3MgaW5zcGVjdCBmdW5jdGlvbiBpcyBzcGVjaWFsXG4gICAgICB2YWx1ZS5pbnNwZWN0ICE9PSBleHBvcnRzLmluc3BlY3QgJiZcbiAgICAgIC8vIEFsc28gZmlsdGVyIG91dCBhbnkgcHJvdG90eXBlIG9iamVjdHMgdXNpbmcgdGhlIGNpcmN1bGFyIGNoZWNrLlxuICAgICAgISh2YWx1ZS5jb25zdHJ1Y3RvciAmJiB2YWx1ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgPT09IHZhbHVlKSkge1xuICAgIHZhciByZXQgPSB2YWx1ZS5pbnNwZWN0KHJlY3Vyc2VUaW1lcywgY3R4KTtcbiAgICBpZiAoIWlzU3RyaW5nKHJldCkpIHtcbiAgICAgIHJldCA9IGZvcm1hdFZhbHVlKGN0eCwgcmV0LCByZWN1cnNlVGltZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLy8gUHJpbWl0aXZlIHR5cGVzIGNhbm5vdCBoYXZlIHByb3BlcnRpZXNcbiAgdmFyIHByaW1pdGl2ZSA9IGZvcm1hdFByaW1pdGl2ZShjdHgsIHZhbHVlKTtcbiAgaWYgKHByaW1pdGl2ZSkge1xuICAgIHJldHVybiBwcmltaXRpdmU7XG4gIH1cblxuICAvLyBMb29rIHVwIHRoZSBrZXlzIG9mIHRoZSBvYmplY3QuXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICB2YXIgdmlzaWJsZUtleXMgPSBhcnJheVRvSGFzaChrZXlzKTtcblxuICBpZiAoY3R4LnNob3dIaWRkZW4pIHtcbiAgICBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpO1xuICB9XG5cbiAgLy8gSUUgZG9lc24ndCBtYWtlIGVycm9yIGZpZWxkcyBub24tZW51bWVyYWJsZVxuICAvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvZHd3NTJzYnQodj12cy45NCkuYXNweFxuICBpZiAoaXNFcnJvcih2YWx1ZSlcbiAgICAgICYmIChrZXlzLmluZGV4T2YoJ21lc3NhZ2UnKSA+PSAwIHx8IGtleXMuaW5kZXhPZignZGVzY3JpcHRpb24nKSA+PSAwKSkge1xuICAgIHJldHVybiBmb3JtYXRFcnJvcih2YWx1ZSk7XG4gIH1cblxuICAvLyBTb21lIHR5cGUgb2Ygb2JqZWN0IHdpdGhvdXQgcHJvcGVydGllcyBjYW4gYmUgc2hvcnRjdXR0ZWQuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgdmFyIG5hbWUgPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW0Z1bmN0aW9uJyArIG5hbWUgKyAnXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfVxuICAgIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdkYXRlJyk7XG4gICAgfVxuICAgIGlmIChpc0Vycm9yKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZSA9ICcnLCBhcnJheSA9IGZhbHNlLCBicmFjZXMgPSBbJ3snLCAnfSddO1xuXG4gIC8vIE1ha2UgQXJyYXkgc2F5IHRoYXQgdGhleSBhcmUgQXJyYXlcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgYXJyYXkgPSB0cnVlO1xuICAgIGJyYWNlcyA9IFsnWycsICddJ107XG4gIH1cblxuICAvLyBNYWtlIGZ1bmN0aW9ucyBzYXkgdGhhdCB0aGV5IGFyZSBmdW5jdGlvbnNcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgdmFyIG4gPSB2YWx1ZS5uYW1lID8gJzogJyArIHZhbHVlLm5hbWUgOiAnJztcbiAgICBiYXNlID0gJyBbRnVuY3Rpb24nICsgbiArICddJztcbiAgfVxuXG4gIC8vIE1ha2UgUmVnRXhwcyBzYXkgdGhhdCB0aGV5IGFyZSBSZWdFeHBzXG4gIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZGF0ZXMgd2l0aCBwcm9wZXJ0aWVzIGZpcnN0IHNheSB0aGUgZGF0ZVxuICBpZiAoaXNEYXRlKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBEYXRlLnByb3RvdHlwZS50b1VUQ1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgfVxuXG4gIC8vIE1ha2UgZXJyb3Igd2l0aCBtZXNzYWdlIGZpcnN0IHNheSB0aGUgZXJyb3JcbiAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCAmJiAoIWFycmF5IHx8IHZhbHVlLmxlbmd0aCA9PSAwKSkge1xuICAgIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgYnJhY2VzWzFdO1xuICB9XG5cbiAgaWYgKHJlY3Vyc2VUaW1lcyA8IDApIHtcbiAgICBpZiAoaXNSZWdFeHAodmFsdWUpKSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ3JlZ2V4cCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3R4LnN0eWxpemUoJ1tPYmplY3RdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cblxuICBjdHguc2Vlbi5wdXNoKHZhbHVlKTtcblxuICB2YXIgb3V0cHV0O1xuICBpZiAoYXJyYXkpIHtcbiAgICBvdXRwdXQgPSBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKTtcbiAgfSBlbHNlIHtcbiAgICBvdXRwdXQgPSBrZXlzLm1hcChmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXksIGFycmF5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGN0eC5zZWVuLnBvcCgpO1xuXG4gIHJldHVybiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSlcbiAgICByZXR1cm4gY3R4LnN0eWxpemUoJ3VuZGVmaW5lZCcsICd1bmRlZmluZWQnKTtcbiAgaWYgKGlzU3RyaW5nKHZhbHVlKSkge1xuICAgIHZhciBzaW1wbGUgPSAnXFwnJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKS5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKSArICdcXCcnO1xuICAgIHJldHVybiBjdHguc3R5bGl6ZShzaW1wbGUsICdzdHJpbmcnKTtcbiAgfVxuICBpZiAoaXNOdW1iZXIodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnbnVtYmVyJyk7XG4gIGlmIChpc0Jvb2xlYW4odmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnJyArIHZhbHVlLCAnYm9vbGVhbicpO1xuICAvLyBGb3Igc29tZSByZWFzb24gdHlwZW9mIG51bGwgaXMgXCJvYmplY3RcIiwgc28gc3BlY2lhbCBjYXNlIGhlcmUuXG4gIGlmIChpc051bGwodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgnbnVsbCcsICdudWxsJyk7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0RXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuICdbJyArIEVycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSArICddJztcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLCBrZXlzKSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkodmFsdWUsIFN0cmluZyhpKSkpIHtcbiAgICAgIG91dHB1dC5wdXNoKGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsXG4gICAgICAgICAgU3RyaW5nKGkpLCB0cnVlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKCcnKTtcbiAgICB9XG4gIH1cbiAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICgha2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBrZXksIHRydWUpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpIHtcbiAgdmFyIG5hbWUsIHN0ciwgZGVzYztcbiAgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodmFsdWUsIGtleSkgfHwgeyB2YWx1ZTogdmFsdWVba2V5XSB9O1xuICBpZiAoZGVzYy5nZXQpIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyL1NldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0dldHRlcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZGVzYy5zZXQpIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkodmlzaWJsZUtleXMsIGtleSkpIHtcbiAgICBuYW1lID0gJ1snICsga2V5ICsgJ10nO1xuICB9XG4gIGlmICghc3RyKSB7XG4gICAgaWYgKGN0eC5zZWVuLmluZGV4T2YoZGVzYy52YWx1ZSkgPCAwKSB7XG4gICAgICBpZiAoaXNOdWxsKHJlY3Vyc2VUaW1lcykpIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0ciA9IGZvcm1hdFZhbHVlKGN0eCwgZGVzYy52YWx1ZSwgcmVjdXJzZVRpbWVzIC0gMSk7XG4gICAgICB9XG4gICAgICBpZiAoc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgaWYgKGFycmF5KSB7XG4gICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICcgKyBsaW5lO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLnN1YnN0cigyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSAnXFxuJyArIHN0ci5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiAnICAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tDaXJjdWxhcl0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNVbmRlZmluZWQobmFtZSkpIHtcbiAgICBpZiAoYXJyYXkgJiYga2V5Lm1hdGNoKC9eXFxkKyQvKSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgbmFtZSA9IEpTT04uc3RyaW5naWZ5KCcnICsga2V5KTtcbiAgICBpZiAobmFtZS5tYXRjaCgvXlwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXCIkLykpIHtcbiAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigxLCBuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICduYW1lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKVxuICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oXlwifFwiJCkvZywgXCInXCIpO1xuICAgICAgbmFtZSA9IGN0eC5zdHlsaXplKG5hbWUsICdzdHJpbmcnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmFtZSArICc6ICcgKyBzdHI7XG59XG5cblxuZnVuY3Rpb24gcmVkdWNlVG9TaW5nbGVTdHJpbmcob3V0cHV0LCBiYXNlLCBicmFjZXMpIHtcbiAgdmFyIG51bUxpbmVzRXN0ID0gMDtcbiAgdmFyIGxlbmd0aCA9IG91dHB1dC5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgY3VyKSB7XG4gICAgbnVtTGluZXNFc3QrKztcbiAgICBpZiAoY3VyLmluZGV4T2YoJ1xcbicpID49IDApIG51bUxpbmVzRXN0Kys7XG4gICAgcmV0dXJuIHByZXYgKyBjdXIucmVwbGFjZSgvXFx1MDAxYlxcW1xcZFxcZD9tL2csICcnKS5sZW5ndGggKyAxO1xuICB9LCAwKTtcblxuICBpZiAobGVuZ3RoID4gNjApIHtcbiAgICByZXR1cm4gYnJhY2VzWzBdICtcbiAgICAgICAgICAgKGJhc2UgPT09ICcnID8gJycgOiBiYXNlICsgJ1xcbiAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIG91dHB1dC5qb2luKCcsXFxuICAnKSArXG4gICAgICAgICAgICcgJyArXG4gICAgICAgICAgIGJyYWNlc1sxXTtcbiAgfVxuXG4gIHJldHVybiBicmFjZXNbMF0gKyBiYXNlICsgJyAnICsgb3V0cHV0LmpvaW4oJywgJykgKyAnICcgKyBicmFjZXNbMV07XG59XG5cblxuLy8gTk9URTogVGhlc2UgdHlwZSBjaGVja2luZyBmdW5jdGlvbnMgaW50ZW50aW9uYWxseSBkb24ndCB1c2UgYGluc3RhbmNlb2ZgXG4vLyBiZWNhdXNlIGl0IGlzIGZyYWdpbGUgYW5kIGNhbiBiZSBlYXNpbHkgZmFrZWQgd2l0aCBgT2JqZWN0LmNyZWF0ZSgpYC5cbmZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcblxuZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5cbmZ1bmN0aW9uIGlzTnVsbChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNOdWxsID0gaXNOdWxsO1xuXG5mdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PSBudWxsO1xufVxuZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc051bWJlcihhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuXG5mdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1N5bWJvbChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnO1xufVxuZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuXG5mdW5jdGlvbiBpc1VuZGVmaW5lZChhcmcpIHtcbiAgcmV0dXJuIGFyZyA9PT0gdm9pZCAwO1xufVxuZXhwb3J0cy5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuXG5mdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5leHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuXG5mdW5jdGlvbiBpc0RhdGUoZCkge1xuICByZXR1cm4gaXNPYmplY3QoZCkgJiYgb2JqZWN0VG9TdHJpbmcoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cbmV4cG9ydHMuaXNEYXRlID0gaXNEYXRlO1xuXG5mdW5jdGlvbiBpc0Vycm9yKGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KGUpICYmXG4gICAgICAob2JqZWN0VG9TdHJpbmcoZSkgPT09ICdbb2JqZWN0IEVycm9yXScgfHwgZSBpbnN0YW5jZW9mIEVycm9yKTtcbn1cbmV4cG9ydHMuaXNFcnJvciA9IGlzRXJyb3I7XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcblxuZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7XG4gIHJldHVybiBhcmcgPT09IG51bGwgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7XG59XG5leHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7XG5cbmV4cG9ydHMuaXNCdWZmZXIgPSByZXF1aXJlKCcuL3N1cHBvcnQvaXNCdWZmZXInKTtcblxuZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pO1xufVxuXG5cbmZ1bmN0aW9uIHBhZChuKSB7XG4gIHJldHVybiBuIDwgMTAgPyAnMCcgKyBuLnRvU3RyaW5nKDEwKSA6IG4udG9TdHJpbmcoMTApO1xufVxuXG5cbnZhciBtb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJyxcbiAgICAgICAgICAgICAgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5cbi8vIDI2IEZlYiAxNjoxOTozNFxuZnVuY3Rpb24gdGltZXN0YW1wKCkge1xuICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gIHZhciB0aW1lID0gW3BhZChkLmdldEhvdXJzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRNaW51dGVzKCkpLFxuICAgICAgICAgICAgICBwYWQoZC5nZXRTZWNvbmRzKCkpXS5qb2luKCc6Jyk7XG4gIHJldHVybiBbZC5nZXREYXRlKCksIG1vbnRoc1tkLmdldE1vbnRoKCldLCB0aW1lXS5qb2luKCcgJyk7XG59XG5cblxuLy8gbG9nIGlzIGp1c3QgYSB0aGluIHdyYXBwZXIgdG8gY29uc29sZS5sb2cgdGhhdCBwcmVwZW5kcyBhIHRpbWVzdGFtcFxuZXhwb3J0cy5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2coJyVzIC0gJXMnLCB0aW1lc3RhbXAoKSwgZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cywgYXJndW1lbnRzKSk7XG59O1xuXG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyLlxuICpcbiAqIFRoZSBGdW5jdGlvbi5wcm90b3R5cGUuaW5oZXJpdHMgZnJvbSBsYW5nLmpzIHJld3JpdHRlbiBhcyBhIHN0YW5kYWxvbmVcbiAqIGZ1bmN0aW9uIChub3Qgb24gRnVuY3Rpb24ucHJvdG90eXBlKS4gTk9URTogSWYgdGhpcyBmaWxlIGlzIHRvIGJlIGxvYWRlZFxuICogZHVyaW5nIGJvb3RzdHJhcHBpbmcgdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZXdyaXR0ZW4gdXNpbmcgc29tZSBuYXRpdmVcbiAqIGZ1bmN0aW9ucyBhcyBwcm90b3R5cGUgc2V0dXAgdXNpbmcgbm9ybWFsIEphdmFTY3JpcHQgZG9lcyBub3Qgd29yayBhc1xuICogZXhwZWN0ZWQgZHVyaW5nIGJvb3RzdHJhcHBpbmcgKHNlZSBtaXJyb3IuanMgaW4gcjExNDkwMykuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB3aGljaCBuZWVkcyB0byBpbmhlcml0IHRoZVxuICogICAgIHByb3RvdHlwZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbiB0byBpbmhlcml0IHByb3RvdHlwZSBmcm9tLlxuICovXG5leHBvcnRzLmluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcblxuZXhwb3J0cy5fZXh0ZW5kID0gZnVuY3Rpb24ob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG4iLCIvKlxuICogY2F0YmVycnktbG9jYXRvclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5LWxvY2F0b3IncyBsaWNlbnNlIGZvbGxvd3M6XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sXG4gKiBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLFxuICogcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAqIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKlxuICogVGhpcyBsaWNlbnNlIGFwcGxpZXMgdG8gYWxsIHBhcnRzIG9mIGNhdGJlcnJ5LWxvY2F0b3IgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBDb25zdHJ1Y3RvclRva2VuaXplcjtcblxudmFyIFNUQVRFUyA9IHtcblx0SUxMRUdBTDogLTEsXG5cdE5POiAwLFxuXHRJREVOVElGSUVSOiAxLFxuXHRGVU5DVElPTjogMixcblx0UEFSRU5USEVTRVNfT1BFTjogMyxcblx0UEFSRU5USEVTRVNfQ0xPU0U6IDQsXG5cdENPTU1BOiA1LFxuXHRFTkQ6IDZcbn07XG5Db25zdHJ1Y3RvclRva2VuaXplci5TVEFURVMgPSBTVEFURVM7XG5cbnZhciBLRVlXT1JEUyA9IHtcblx0RlVOQ1RJT046ICdmdW5jdGlvbidcbn07XG5cbnZhciBXSElURVNQQUNFX1RFU1QgPSAvXlxccyQvLFxuXHRJREVOVElGSUVSX1RFU1QgPSAvXltcXCRcXHddJC87XG5cbmZ1bmN0aW9uIENvbnN0cnVjdG9yVG9rZW5pemVyKGNvbnN0cnVjdG9yU291cmNlKSB7XG5cdHRoaXMuX3NvdXJjZSA9IFN0cmluZyhjb25zdHJ1Y3RvclNvdXJjZSB8fCAnJyk7XG59XG5cbi8qKlxuICogQ3VycmVudCBzb3VyY2UgY29kZSBvZiBjb25zdHJ1Y3Rvci5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICovXG5Db25zdHJ1Y3RvclRva2VuaXplci5wcm90b3R5cGUuX3NvdXJjZSA9ICcnO1xuXG4vKipcbiAqIEN1cnJlbnQgaW5kZXggaW4gc291cmNlIGNvZGUuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuQ29uc3RydWN0b3JUb2tlbml6ZXIucHJvdG90eXBlLl9jdXJyZW50SW5kZXggPSAwO1xuXG4vKipcbiAqIEN1cnJlbnQgaW5kZXggaW4gc291cmNlIGNvZGUuXG4gKiBAdHlwZSB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuQ29uc3RydWN0b3JUb2tlbml6ZXIucHJvdG90eXBlLl9jdXJyZW50RW5kID0gMDtcblxuLyoqXG4gKiBDdXJyZW50IHN0YXRlLlxuICogQHR5cGUge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbkNvbnN0cnVjdG9yVG9rZW5pemVyLnByb3RvdHlwZS5fY3VycmVudFN0YXRlID0gU1RBVEVTLk5PO1xuXG4vKipcbiAqIEdldHMgbmV4dCB0b2tlbiBpbiBzb3VyY2UuXG4gKiBAcmV0dXJucyB7e3N0YXRlOiAobnVtYmVyKSwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXJ9fSBUb2tlbiBkZXNjcmlwdG9yLlxuICovXG5Db25zdHJ1Y3RvclRva2VuaXplci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKHRoaXMuX2N1cnJlbnRTdGF0ZSA9PT0gU1RBVEVTLklMTEVHQUwgfHxcblx0XHR0aGlzLl9jdXJyZW50U3RhdGUgPT09IFNUQVRFUy5FTkQpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhdGU6IHRoaXMuX2N1cnJlbnRTdGF0ZSxcblx0XHRcdHN0YXJ0OiB0aGlzLl9jdXJyZW50SW5kZXgsXG5cdFx0XHRlbmQ6IHRoaXMuX2N1cnJlbnRJbmRleCArIDFcblx0XHR9O1xuXHR9XG5cblx0dmFyIHN0YXJ0ID0gdGhpcy5fY3VycmVudEluZGV4LFxuXHRcdHN0YXRlID0gdGhpcy5fY3VycmVudFN0YXRlO1xuXG5cdHN3aXRjaCAodGhpcy5fY3VycmVudFN0YXRlKSB7XG5cdFx0Y2FzZSBTVEFURVMuUEFSRU5USEVTRVNfT1BFTjpcblx0XHRcdHRoaXMucGFyZW50aGVzZXNPcGVuU3RhdGUoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgU1RBVEVTLlBBUkVOVEhFU0VTX0NMT1NFOlxuXHRcdFx0dGhpcy5wYXJlbnRoZXNlc0Nsb3NlU3RhdGUoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgU1RBVEVTLklERU5USUZJRVI6XG5cdFx0XHR0aGlzLmlkZW50aWZpZXJTdGF0ZSgpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBTVEFURVMuQ09NTUE6XG5cdFx0XHR0aGlzLmNvbW1hU3RhdGUoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgU1RBVEVTLkZVTkNUSU9OOlxuXHRcdFx0dGhpcy5mdW5jdGlvblN0YXRlKCk7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhpcy5za2lwV2hpdGVzcGFjZSgpO1xuXHRcdFx0dmFyIGV4cGVjdGVkID0gdGhpcy5fc291cmNlLnN1YnN0cihcblx0XHRcdFx0dGhpcy5fY3VycmVudEluZGV4LCBLRVlXT1JEUy5GVU5DVElPTi5sZW5ndGhcblx0XHRcdCk7XG5cdFx0XHRpZiAoZXhwZWN0ZWQgPT09IEtFWVdPUkRTLkZVTkNUSU9OKSB7XG5cdFx0XHRcdHRoaXMuX2N1cnJlbnRTdGF0ZSA9IFNUQVRFUy5GVU5DVElPTjtcblx0XHRcdFx0cmV0dXJuIHRoaXMubmV4dCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZSA9IFNUQVRFUy5JTExFR0FMO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzdGF0ZTogc3RhdGUsXG5cdFx0c3RhcnQ6IHN0YXJ0LFxuXHRcdGVuZDogdGhpcy5fY3VycmVudEVuZFxuXHR9O1xufTtcblxuLyoqXG4gKiBTa2lwcyBhbGwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzLlxuICovXG5Db25zdHJ1Y3RvclRva2VuaXplci5wcm90b3R5cGUuc2tpcFdoaXRlc3BhY2UgPSBmdW5jdGlvbiAoKSB7XG5cdHdoaWxlIChcblx0XHR0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9zb3VyY2UubGVuZ3RoICYmXG5cdFx0V0hJVEVTUEFDRV9URVNULnRlc3QodGhpcy5fc291cmNlW3RoaXMuX2N1cnJlbnRJbmRleF0pKSB7XG5cdFx0dGhpcy5fY3VycmVudEluZGV4Kys7XG5cdH1cbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIFBBUkVOVEhFU0VTX09QRU4gc3RhdGUgb2YgbWFjaGluZS5cbiAqL1xuQ29uc3RydWN0b3JUb2tlbml6ZXIucHJvdG90eXBlLnBhcmVudGhlc2VzT3BlblN0YXRlID0gZnVuY3Rpb24gKCkge1xuXHR0aGlzLl9jdXJyZW50SW5kZXgrKztcblx0dGhpcy5fY3VycmVudEVuZCA9IHRoaXMuX2N1cnJlbnRJbmRleDtcblxuXHR0aGlzLnNraXBXaGl0ZXNwYWNlKCk7XG5cdGlmIChJREVOVElGSUVSX1RFU1QudGVzdCh0aGlzLl9zb3VyY2VbdGhpcy5fY3VycmVudEluZGV4XSkpIHtcblx0XHR0aGlzLl9jdXJyZW50U3RhdGUgPSBTVEFURVMuSURFTlRJRklFUjtcblx0fSBlbHNlIGlmICh0aGlzLl9zb3VyY2VbdGhpcy5fY3VycmVudEluZGV4XSA9PT0gJyknKSB7XG5cdFx0dGhpcy5fY3VycmVudFN0YXRlID0gU1RBVEVTLlBBUkVOVEhFU0VTX0NMT1NFO1xuXHR9IGVsc2Uge1xuXHRcdHRoaXMuX2N1cnJlbnRTdGF0ZSA9IFNUQVRFUy5JTExFR0FMO1xuXHR9XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyBQQVJFTlRIRVNFU19DTE9TRSBzdGF0ZSBvZiBtYWNoaW5lLlxuICovXG5Db25zdHJ1Y3RvclRva2VuaXplci5wcm90b3R5cGUucGFyZW50aGVzZXNDbG9zZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuXHR0aGlzLl9jdXJyZW50SW5kZXgrKztcblx0dGhpcy5fY3VycmVudEVuZCA9IHRoaXMuX2N1cnJlbnRJbmRleDtcblx0dGhpcy5fY3VycmVudFN0YXRlID0gU1RBVEVTLkVORDtcbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIEZVTkNUSU9OIHN0YXRlIG9mIG1hY2hpbmUuXG4gKi9cbkNvbnN0cnVjdG9yVG9rZW5pemVyLnByb3RvdHlwZS5mdW5jdGlvblN0YXRlID0gZnVuY3Rpb24gKCkge1xuXHR0aGlzLl9jdXJyZW50SW5kZXggKz0gS0VZV09SRFMuRlVOQ1RJT04ubGVuZ3RoO1xuXHR0aGlzLl9jdXJyZW50RW5kID0gdGhpcy5fY3VycmVudEluZGV4O1xuXG5cdHRoaXMuc2tpcFdoaXRlc3BhY2UoKTtcblxuXHRpZiAodGhpcy5fc291cmNlW3RoaXMuX2N1cnJlbnRJbmRleF0gPT09ICcoJykge1xuXHRcdHRoaXMuX2N1cnJlbnRTdGF0ZSA9IFNUQVRFUy5QQVJFTlRIRVNFU19PUEVOO1xuXHR9IGVsc2UgaWYgKElERU5USUZJRVJfVEVTVC50ZXN0KHRoaXMuX3NvdXJjZVt0aGlzLl9jdXJyZW50SW5kZXhdKSkge1xuXHRcdHRoaXMuX2N1cnJlbnRTdGF0ZSA9IFNUQVRFUy5JREVOVElGSUVSO1xuXHR9IGVsc2Uge1xuXHRcdHRoaXMuX2N1cnJlbnRTdGF0ZSA9IFNUQVRFUy5JTExFR0FMO1xuXHR9XG59O1xuXG4vKipcbiAqIERlc2NyaWJlcyBJREVOVElGSUVSIHN0YXRlIG9mIG1hY2hpbmUuXG4gKi9cbkNvbnN0cnVjdG9yVG9rZW5pemVyLnByb3RvdHlwZS5pZGVudGlmaWVyU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG5cdHdoaWxlIChcblx0XHR0aGlzLl9jdXJyZW50SW5kZXggPCB0aGlzLl9zb3VyY2UubGVuZ3RoICYmXG5cdFx0SURFTlRJRklFUl9URVNULnRlc3QodGhpcy5fc291cmNlW3RoaXMuX2N1cnJlbnRJbmRleF0pKSB7XG5cdFx0dGhpcy5fY3VycmVudEluZGV4Kys7XG5cdH1cblxuXHR0aGlzLl9jdXJyZW50RW5kID0gdGhpcy5fY3VycmVudEluZGV4O1xuXG5cdHRoaXMuc2tpcFdoaXRlc3BhY2UoKTtcblx0aWYgKHRoaXMuX3NvdXJjZVt0aGlzLl9jdXJyZW50SW5kZXhdID09PSAnKCcpIHtcblx0XHR0aGlzLl9jdXJyZW50U3RhdGUgPSBTVEFURVMuUEFSRU5USEVTRVNfT1BFTjtcblx0fSBlbHNlIGlmICh0aGlzLl9zb3VyY2VbdGhpcy5fY3VycmVudEluZGV4XSA9PT0gJyknKSB7XG5cdFx0dGhpcy5fY3VycmVudFN0YXRlID0gU1RBVEVTLlBBUkVOVEhFU0VTX0NMT1NFO1xuXHR9IGVsc2UgaWYgKHRoaXMuX3NvdXJjZVt0aGlzLl9jdXJyZW50SW5kZXhdID09PSAnLCcpIHtcblx0XHR0aGlzLl9jdXJyZW50U3RhdGUgPSBTVEFURVMuQ09NTUE7XG5cdH0gZWxzZSB7XG5cdFx0dGhpcy5fY3VycmVudFN0YXRlID0gU1RBVEVTLklMTEVHQUw7XG5cdH1cbn07XG5cbi8qKlxuICogRGVzY3JpYmVzIENPTU1BIHN0YXRlIG9mIG1hY2hpbmUuXG4gKi9cbkNvbnN0cnVjdG9yVG9rZW5pemVyLnByb3RvdHlwZS5jb21tYVN0YXRlID0gZnVuY3Rpb24gKCkge1xuXHR0aGlzLl9jdXJyZW50SW5kZXgrKztcblx0dGhpcy5fY3VycmVudEVuZCA9IHRoaXMuX2N1cnJlbnRJbmRleDtcblxuXHR0aGlzLnNraXBXaGl0ZXNwYWNlKCk7XG5cdGlmIChJREVOVElGSUVSX1RFU1QudGVzdCh0aGlzLl9zb3VyY2VbdGhpcy5fY3VycmVudEluZGV4XSkpIHtcblx0XHR0aGlzLl9jdXJyZW50U3RhdGUgPSBTVEFURVMuSURFTlRJRklFUjtcblx0XHRyZXR1cm47XG5cdH1cblx0dGhpcy5fY3VycmVudFN0YXRlID0gU1RBVEVTLklMTEVHQUw7XG59OyIsIi8qXG4gKiBjYXRiZXJyeS1sb2NhdG9yXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IERlbmlzIFJlY2hrdW5vdiBhbmQgcHJvamVjdCBjb250cmlidXRvcnMuXG4gKlxuICogY2F0YmVycnktbG9jYXRvcidzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnktbG9jYXRvciB0aGF0IGFyZSBub3QgZXh0ZXJuYWxseVxuICogbWFpbnRhaW5lZCBsaWJyYXJpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZpY2VMb2NhdG9yO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKSxcblx0Q29uc3RydWN0b3JUb2tlbml6ZXIgPSByZXF1aXJlKCcuL0NvbnN0cnVjdG9yVG9rZW5pemVyJyk7XG5cbnZhciBERVBFTkRFTkNZX1JFR0VYUCA9IC9eXFwkXFx3Ky8sXG5cdEVSUk9SX0NPTlNUUlVDVE9SX1NIT1VMRF9CRV9GVU5DVElPTiA9ICdDb25zdHJ1Y3RvciBzaG91bGQgYmUgYSBmdW5jdGlvbicsXG5cdEVSUk9SX1RZUEVfTk9UX1JFR0lTVEVSRUQgPSAnVHlwZSBcIiVzXCIgbm90IHJlZ2lzdGVyZWQnLFxuXHRFUlJPUl9UWVBFX1NIT1VMRF9CRV9TVFJJTkcgPSAnVHlwZSBuYW1lIFwiJXNcIiBzaG91bGQgYmUgYSBzdHJpbmcnO1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIHNlcnZpY2UgbG9jYXRvci5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTZXJ2aWNlTG9jYXRvcigpIHtcblx0dGhpcy5fcmVnaXN0cmF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbi8qKlxuICogQ3VycmVudCB0eXBlIHJlZ2lzdHJhdGlvbnMuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByb3RlY3RlZFxuICovXG5TZXJ2aWNlTG9jYXRvci5wcm90b3R5cGUuX3JlZ2lzdHJhdGlvbnMgPSBudWxsO1xuXG4vKipcbiAqIFJlZ2lzdGVycyBuZXcgdHlwZSBpbiBzZXJ2aWNlIGxvY2F0b3IuXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG5hbWUsIHdoaWNoIHdpbGwgYmUgYWxpYXMgaW4gb3RoZXIgY29uc3RydWN0b3JzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ29uc3RydWN0b3Igd2hpY2hcbiAqIGluaXRpYWxpemVzIGluc3RhbmNlIG9mIHNwZWNpZmllZCB0eXBlLlxuICogQHBhcmFtIHtPYmplY3Q/fSBwYXJhbWV0ZXJzIFNldCBvZiBuYW1lZCBwYXJhbWV0ZXJzXG4gKiB3aGljaCB3aWxsIGJlIGFsc28gaW5qZWN0ZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBpc1NpbmdsZXRvbiBJZiB0cnVlIGV2ZXJ5IHJlc29sdmUgd2lsbCByZXR1cm5cbiAqIHRoZSBzYW1lIGluc3RhbmNlLlxuICovXG5TZXJ2aWNlTG9jYXRvci5wcm90b3R5cGUucmVnaXN0ZXIgPVxuXHRmdW5jdGlvbiAodHlwZSwgY29uc3RydWN0b3IsIHBhcmFtZXRlcnMsIGlzU2luZ2xldG9uKSB7XG5cdFx0dGhyb3dJZk5vdEZ1bmN0aW9uKGNvbnN0cnVjdG9yKTtcblx0XHR0aHJvd0lmTm90U3RyaW5nKHR5cGUpO1xuXG5cdFx0aW5pdGlhbGl6ZVJlZ2lzdHJhdGlvbih0eXBlLCB0aGlzKTtcblx0XHR2YXIgcGFyYW1ldGVyTmFtZXMgPSBnZXRQYXJhbWV0ZXJOYW1lcyhjb25zdHJ1Y3Rvcik7XG5cblx0XHR0aGlzLl9yZWdpc3RyYXRpb25zW3R5cGVdLnVuc2hpZnQoe1xuXHRcdFx0Y29uc3RydWN0b3I6IGNvbnN0cnVjdG9yLFxuXHRcdFx0cGFyYW1ldGVyczogcGFyYW1ldGVycyB8fCB7fSxcblx0XHRcdHBhcmFtZXRlck5hbWVzOiBwYXJhbWV0ZXJOYW1lcyxcblx0XHRcdGlzU2luZ2xldG9uOiBCb29sZWFuKGlzU2luZ2xldG9uKSxcblx0XHRcdHNpbmdsZUluc3RhbmNlOiBudWxsXG5cdFx0fSk7XG5cdH07XG5cbi8qKlxuICogUmVnaXN0ZXJzIHNpbmdsZSBpbnN0YW5jZSBmb3Igc3BlY2lmaWVkIHR5cGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG5hbWUuXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2UgSW5zdGFuY2UgdG8gcmVnaXN0ZXIuXG4gKi9cblNlcnZpY2VMb2NhdG9yLnByb3RvdHlwZS5yZWdpc3Rlckluc3RhbmNlID0gZnVuY3Rpb24gKHR5cGUsIGluc3RhbmNlKSB7XG5cdHRocm93SWZOb3RTdHJpbmcodHlwZSk7XG5cdGluaXRpYWxpemVSZWdpc3RyYXRpb24odHlwZSwgdGhpcyk7XG5cblx0dGhpcy5fcmVnaXN0cmF0aW9uc1t0eXBlXS51bnNoaWZ0KHtcblx0XHRjb25zdHJ1Y3RvcjogaW5zdGFuY2UuY29uc3RydWN0b3IsXG5cdFx0cGFyYW1ldGVyczoge30sXG5cdFx0cGFyYW1ldGVyTmFtZXM6IFtdLFxuXHRcdGlzU2luZ2xldG9uOiB0cnVlLFxuXHRcdHNpbmdsZUluc3RhbmNlOiBpbnN0YW5jZVxuXHR9KTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgbGFzdCByZWdpc3RlcmVkIGltcGxlbWVudGF0aW9uIGJ5IHR5cGUgbmFtZVxuICogaW5jbHVkaW5nIGFsbCBpdHMgZGVwZW5kZW5jaWVzIHJlY3Vyc2l2ZWx5LlxuICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVHlwZSBuYW1lLlxuICogQHJldHVybnMge09iamVjdH0gSW5zdGFuY2Ugb2Ygc3BlY2lmaWVkIHR5cGUuXG4gKi9cblNlcnZpY2VMb2NhdG9yLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gKHR5cGUpIHtcblx0dGhyb3dJZk5vdFN0cmluZyh0eXBlKTtcblx0dGhyb3dJZk5vVHlwZSh0aGlzLl9yZWdpc3RyYXRpb25zLCB0eXBlKTtcblx0dmFyIGZpcnN0UmVnaXN0cmF0aW9uID0gdGhpcy5fcmVnaXN0cmF0aW9uc1t0eXBlXVswXTtcblx0cmV0dXJuIGNyZWF0ZUluc3RhbmNlKGZpcnN0UmVnaXN0cmF0aW9uLCB0aGlzKTtcbn07XG5cbi8qKlxuICogUmVzb2x2ZXMgYWxsIHJlZ2lzdGVyZWQgaW1wbGVtZW50YXRpb25zIGJ5IHR5cGUgbmFtZVxuICogaW5jbHVkaW5nIGFsbCBkZXBlbmRlbmNpZXMgcmVjdXJzaXZlbHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG5hbWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IEFycmF5IG9mIGluc3RhbmNlcyBzcGVjaWZpZWQgdHlwZS5cbiAqL1xuU2VydmljZUxvY2F0b3IucHJvdG90eXBlLnJlc29sdmVBbGwgPSBmdW5jdGlvbiAodHlwZSkge1xuXHR0aHJvd0lmTm90U3RyaW5nKHR5cGUpO1xuXHR0cnkge1xuXHRcdHRocm93SWZOb1R5cGUodGhpcy5fcmVnaXN0cmF0aW9ucywgdHlwZSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0cmV0dXJuIHRoaXMuX3JlZ2lzdHJhdGlvbnNbdHlwZV0ubWFwKGZ1bmN0aW9uIChyZWdpc3RyYXRpb24pIHtcblx0XHRyZXR1cm4gY3JlYXRlSW5zdGFuY2UocmVnaXN0cmF0aW9uLCB0aGlzKTtcblx0fSwgdGhpcyk7XG59O1xuXG4vKipcbiAqIFJlc29sdmVzIGluc3RhbmNlIG9mIHNwZWNpZmllZCBjb25zdHJ1Y3RvciBpbmNsdWRpbmcgZGVwZW5kZW5jaWVzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ29uc3RydWN0b3IgZm9yIGluc3RhbmNlIGNyZWF0aW9uLlxuICogQHBhcmFtIHtPYmplY3Q/fSBwYXJhbWV0ZXJzIFNldCBvZiBpdHMgcGFyYW1ldGVycyB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBJbnN0YW5jZSBvZiBzcGVjaWZpZWQgY29uc3RydWN0b3IuXG4gKi9cblNlcnZpY2VMb2NhdG9yLnByb3RvdHlwZS5yZXNvbHZlSW5zdGFuY2UgPSBmdW5jdGlvbiAoY29uc3RydWN0b3IsIHBhcmFtZXRlcnMpIHtcblx0cmV0dXJuIGNyZWF0ZUluc3RhbmNlKHtcblx0XHRjb25zdHJ1Y3RvcjogY29uc3RydWN0b3IsXG5cdFx0cGFyYW1ldGVyczogcGFyYW1ldGVycyB8fCB7fSxcblx0XHRwYXJhbWV0ZXJOYW1lczogZ2V0UGFyYW1ldGVyTmFtZXMoY29uc3RydWN0b3IpLFxuXHRcdGlzU2luZ2xldG9uOiBmYWxzZSxcblx0XHRzaW5nbGVJbnN0YW5jZTogbnVsbFxuXHR9LCB0aGlzKTtcbn07XG5cbi8qKlxuICogVW5yZWdpc3RlcnMgYWxsIHJlZ2lzdHJhdGlvbnMgb2Ygc3BlY2lmaWVkIHR5cGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG5hbWUuXG4gKi9cblNlcnZpY2VMb2NhdG9yLnByb3RvdHlwZS51bnJlZ2lzdGVyID0gZnVuY3Rpb24gKHR5cGUpIHtcblx0dGhyb3dJZk5vdFN0cmluZyh0eXBlKTtcblx0ZGVsZXRlIHRoaXMuX3JlZ2lzdHJhdGlvbnNbdHlwZV07XG59O1xuXG4vKipcbiAqIEluaXRpYWxpemVzIHJlZ2lzdHJhdGlvbiBhcnJheSBmb3Igc3BlY2lmaWVkIHR5cGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG5hbWUuXG4gKiBAcGFyYW0ge1NlcnZpY2VMb2NhdG9yfSBjb250ZXh0IENvbnRleHQgb2YgZXhlY3V0aW9uLlxuICovXG5mdW5jdGlvbiBpbml0aWFsaXplUmVnaXN0cmF0aW9uKHR5cGUsIGNvbnRleHQpIHtcblx0aWYgKCEodHlwZSBpbiBjb250ZXh0Ll9yZWdpc3RyYXRpb25zKSkge1xuXHRcdGNvbnRleHQuX3JlZ2lzdHJhdGlvbnNbdHlwZV0gPSBbXTtcblx0fVxufVxuXG4vKipcbiAqIFRocm93cyBlcnJvciBpZiBzcGVjaWZpZWQgcmVnaXN0cmF0aW9uIGlzIG5vdCBmb3VuZC5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdpc3RyYXRpb25zIEN1cnJlbnQgcmVnaXN0cmF0aW9ucyBzZXQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIHRvIGNoZWNrLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmTm9UeXBlKHJlZ2lzdHJhdGlvbnMsIHR5cGUpIHtcblx0aWYgKCEodHlwZSBpbiByZWdpc3RyYXRpb25zKSB8fCByZWdpc3RyYXRpb25zW3R5cGVdLmxlbmd0aCA9PT0gMCkge1xuXHRcdHRocm93IG5ldyBFcnJvcih1dGlsLmZvcm1hdChFUlJPUl9UWVBFX05PVF9SRUdJU1RFUkVELCB0eXBlKSk7XG5cdH1cbn1cblxuLyoqXG4gKiBUaHJvd3MgZXJyb3IgaWYgc3BlY2lmaWVkIGNvbnN0cnVjdG9yIGlzIG5vdCBhIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29uc3RydWN0b3IgQ29uc3RydWN0b3IgdG8gY2hlY2suXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZOb3RGdW5jdGlvbihjb25zdHJ1Y3Rvcikge1xuXHRpZiAoY29uc3RydWN0b3IgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcihFUlJPUl9DT05TVFJVQ1RPUl9TSE9VTERfQkVfRlVOQ1RJT04pO1xufVxuXG4vKipcbiAqIFRocm93cyBlcnJvciBpZiBzcGVjaWZpZWQgdHlwZSBuYW1lIGlzIG5vdCBhIHN0cmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFR5cGUgbmFtZSB0byBjaGVjay5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZk5vdFN0cmluZyh0eXBlKSB7XG5cdGlmICh0eXBlb2YgKHR5cGUpID09PSAnc3RyaW5nJykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcih1dGlsLmZvcm1hdChFUlJPUl9UWVBFX1NIT1VMRF9CRV9TVFJJTkcsIHR5cGUpKTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGluc3RhbmNlIG9mIHR5cGUgc3BlY2lmaWVkIGFuZCBwYXJhbWV0ZXJzIGluIHJlZ2lzdHJhdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdpc3RyYXRpb24gU3BlY2lmaWVkIHJlZ2lzdHJhdGlvbiBvZiB0eXBlLlxuICogQHBhcmFtIHtTZXJ2aWNlTG9jYXRvcn0gY29udGV4dCBDb250ZXh0IG9mIGV4ZWN1dGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IEluc3RhbmNlIG9mIHR5cGUgc3BlY2lmaWVkIGluIHJlZ2lzdHJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UocmVnaXN0cmF0aW9uLCBjb250ZXh0KSB7XG5cdGlmIChyZWdpc3RyYXRpb24uaXNTaW5nbGV0b24gJiYgcmVnaXN0cmF0aW9uLnNpbmdsZUluc3RhbmNlICE9PSBudWxsKSB7XG5cdFx0cmV0dXJuIHJlZ2lzdHJhdGlvbi5zaW5nbGVJbnN0YW5jZTtcblx0fVxuXG5cdHZhciBpbnN0YW5jZVBhcmFtZXRlcnMgPSBnZXRQYXJhbWV0ZXJzKHJlZ2lzdHJhdGlvbiwgY29udGV4dCksXG5cdFx0aW5zdGFuY2UgPSBPYmplY3QuY3JlYXRlKHJlZ2lzdHJhdGlvbi5jb25zdHJ1Y3Rvci5wcm90b3R5cGUpO1xuXHRyZWdpc3RyYXRpb24uY29uc3RydWN0b3IuYXBwbHkoaW5zdGFuY2UsIGluc3RhbmNlUGFyYW1ldGVycyk7XG5cblx0aWYgKHJlZ2lzdHJhdGlvbi5pc1NpbmdsZXRvbikge1xuXHRcdHJlZ2lzdHJhdGlvbi5zaW5nbGVJbnN0YW5jZSA9IGluc3RhbmNlO1xuXHR9XG5cblx0cmV0dXJuIGluc3RhbmNlO1xufVxuXG4vKipcbiAqIEdldHMgY29uc3RydWN0b3IgcGFyYW1ldGVycyBzcGVjaWZpZWQgaW4gdHlwZSBjb25zdHJ1Y3Rvci5cbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdpc3RyYXRpb24gVHlwZSByZWdpc3RyYXRpb24uXG4gKiBAcGFyYW0ge1NlcnZpY2VMb2NhdG9yfSBjb250ZXh0IENvbnRleHQgb2YgZXhlY3V0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiByZXNvbHZlZCBkZXBlbmRlbmNpZXMgdG8gaW5qZWN0LlxuICovXG5mdW5jdGlvbiBnZXRQYXJhbWV0ZXJzKHJlZ2lzdHJhdGlvbiwgY29udGV4dCkge1xuXHRyZXR1cm4gcmVnaXN0cmF0aW9uLnBhcmFtZXRlck5hbWVzLm1hcChmdW5jdGlvbiAocGFyYW1ldGVyTmFtZSkge1xuXHRcdHZhciBkZXBlbmRlbmN5TmFtZSA9IGdldERlcGVuZGVuY3lOYW1lKHBhcmFtZXRlck5hbWUpO1xuXHRcdHJldHVybiBkZXBlbmRlbmN5TmFtZSA9PT0gbnVsbCA/XG5cdFx0XHRyZWdpc3RyYXRpb24ucGFyYW1ldGVyc1twYXJhbWV0ZXJOYW1lXSA6XG5cdFx0XHR0aGlzLnJlc29sdmUoZGVwZW5kZW5jeU5hbWUpO1xuXHR9LCBjb250ZXh0KTtcbn1cblxuLyoqXG4gKiBHZXRzIG5hbWUgb2YgZGVwZW5kZW5jeSB0eXBlLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtZXRlck5hbWUgTmFtZSBvZiBjb25zdHJ1Y3RvciBwYXJhbWV0ZXIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IE5hbWUgb2YgZGVwZW5kZW5jeSB0eXBlLlxuICovXG5mdW5jdGlvbiBnZXREZXBlbmRlbmN5TmFtZShwYXJhbWV0ZXJOYW1lKSB7XG5cdGlmICghREVQRU5ERU5DWV9SRUdFWFAudGVzdChwYXJhbWV0ZXJOYW1lKSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIHBhcmFtZXRlck5hbWUuc3Vic3RyKDEsIHBhcmFtZXRlck5hbWUubGVuZ3RoIC0gMSk7XG59XG5cbi8qKlxuICogR2V0cyBhbGwgcGFyYW1ldGVyIG5hbWVzIHVzZWQgaW4gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fSBBcnJheSBvZiBwYXJhbWV0ZXIgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmFtZXRlck5hbWVzKGNvbnN0cnVjdG9yKSB7XG5cdHZhciBzb3VyY2UgPSBjb25zdHJ1Y3Rvci50b1N0cmluZygpLFxuXHRcdHRva2VuaXplciA9IG5ldyBDb25zdHJ1Y3RvclRva2VuaXplcihzb3VyY2UpLFxuXHRcdHJlc3VsdCA9IFtdLFxuXHRcdHRva2VuID0ge1xuXHRcdFx0c3RhdGU6IENvbnN0cnVjdG9yVG9rZW5pemVyLlNUQVRFUy5OTyxcblx0XHRcdHN0YXJ0OiAwLFxuXHRcdFx0ZW5kOiAwXG5cdFx0fSxcblx0XHRhcmVQYXJhbWV0ZXJzU3RhcnRlZCA9IGZhbHNlO1xuXG5cdHdoaWxlIChcblx0XHR0b2tlbi5zdGF0ZSAhPT0gQ29uc3RydWN0b3JUb2tlbml6ZXIuU1RBVEVTLkVORCAmJlxuXHRcdHRva2VuLnN0YXRlICE9PSBDb25zdHJ1Y3RvclRva2VuaXplci5TVEFURVMuSUxMRUdBTCkge1xuXHRcdHRva2VuID0gdG9rZW5pemVyLm5leHQoKTtcblx0XHRpZiAodG9rZW4uc3RhdGUgPT09IENvbnN0cnVjdG9yVG9rZW5pemVyLlNUQVRFUy5QQVJFTlRIRVNFU19PUEVOKSB7XG5cdFx0XHRhcmVQYXJhbWV0ZXJzU3RhcnRlZCA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZVBhcmFtZXRlcnNTdGFydGVkICYmXG5cdFx0XHR0b2tlbi5zdGF0ZSA9PT0gQ29uc3RydWN0b3JUb2tlbml6ZXIuU1RBVEVTLklERU5USUZJRVIpIHtcblx0XHRcdHJlc3VsdC5wdXNoKHNvdXJjZS5zdWJzdHJpbmcodG9rZW4uc3RhcnQsIHRva2VuLmVuZCkpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufSIsIi8qXG4gKiBjYXRiZXJyeVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5J3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeSB0aGF0IGFyZSBub3QgZXh0ZXJuYWxseVxuICogbWFpbnRhaW5lZCBsaWJyYXJpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVIUjtcblxudmFyIFVIUkJhc2UgPSByZXF1aXJlKCcuLi9saWIvVUhSQmFzZScpLFxuXHRQcm9taXNlID0gcmVxdWlyZSgncHJvbWlzZScpLFxuXHRVUkkgPSByZXF1aXJlKCdjYXRiZXJyeS11cmknKS5VUkksXG5cdHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG5cbi8vIGlmIGJyb3dzZXIgc3RpbGwgZG9lcyBub3QgaGF2ZSBwcm9taXNlcyB0aGVuIGFkZCBpdC5cbmlmICghKCdQcm9taXNlJyBpbiB3aW5kb3cpKSB7XG5cdHdpbmRvdy5Qcm9taXNlID0gUHJvbWlzZTtcbn1cblxudXRpbC5pbmhlcml0cyhVSFIsIFVIUkJhc2UpO1xuXG52YXIgTk9OX1NBRkVfSEVBREVSUyA9IHtcblx0Y29va2llOiB0cnVlLFxuXHQnYWNjZXB0LWNoYXJzZXQnOiB0cnVlXG59O1xuXG52YXIgRVJST1JfQ09OTkVDVElPTiA9ICdDb25uZWN0aW9uIGVycm9yJyxcblx0RVJST1JfVElNRU9VVCA9ICdSZXF1ZXN0IHRpbWVvdXQnLFxuXHRFUlJPUl9BQk9SVEVEID0gJ1JlcXVlc3QgYWJvcnRlZCc7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgY2xpZW50LXNpZGUgSFRUUChTKSByZXF1ZXN0IGltcGxlbWVudGF0aW9uLlxuICogQHBhcmFtIHtXaW5kb3d9ICR3aW5kb3cgQ3VycmVudCB3aW5kb3cgb2JqZWN0LlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFVIUigkd2luZG93KSB7XG5cdFVIUkJhc2UuY2FsbCh0aGlzKTtcblx0dGhpcy53aW5kb3cgPSAkd2luZG93O1xufVxuXG4vKipcbiAqIEN1cnJlbnQgaW5zdGFuY2Ugb2Ygd2luZG93LlxuICogQHR5cGUge1dpbmRvd31cbiAqL1xuVUhSLnByb3RvdHlwZS53aW5kb3cgPSBudWxsO1xuXG4vKipcbiAqIERvZXMgcmVxdWVzdCB3aXRoIHNwZWNpZmllZCBwYXJhbWV0ZXJzIHVzaW5nIHByb3RvY29sIGltcGxlbWVudGF0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnMgUmVxdWVzdCBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtZXRlcnMubWV0aG9kIEhUVFAgbWV0aG9kLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtZXRlcnMudXJsIFVSTCBmb3IgcmVxdWVzdC5cbiAqIEBwYXJhbSB7VVJJfSBwYXJhbWV0ZXJzLnVyaSBVUkkgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnMuaGVhZGVycyBIVFRQIGhlYWRlcnMgdG8gc2VuZC5cbiAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gcGFyYW1ldGVycy5kYXRhIERhdGEgdG8gc2VuZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbWV0ZXJzLnRpbWVvdXQgUmVxdWVzdCB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBwYXJhbWV0ZXJzLnVuc2FmZUhUVFBTIElmIHRydWUgdGhlbiByZXF1ZXN0cyB0byBzZXJ2ZXJzIHdpdGhcbiAqIGludmFsaWQgSFRUUFMgY2VydGlmaWNhdGVzIGFyZSBhbGxvd2VkLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gUHJvbWlzZSBmb3IgcmVzdWx0IHdpdGggc3RhdHVzIG9iamVjdCBhbmQgY29udGVudC5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuVUhSLnByb3RvdHlwZS5fZG9SZXF1ZXN0ID0gZnVuY3Rpb24gKHBhcmFtZXRlcnMpIHtcblx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdE9iamVjdC5rZXlzKHBhcmFtZXRlcnMuaGVhZGVycylcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0aWYgKE5PTl9TQUZFX0hFQURFUlMuaGFzT3duUHJvcGVydHkobmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuXHRcdFx0XHRkZWxldGUgcGFyYW1ldGVycy5oZWFkZXJzW25hbWVdO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoZnVsZmlsbCwgcmVqZWN0KSB7XG5cdFx0dmFyIHJlcXVlc3RFcnJvciA9IG51bGwsXG5cdFx0XHR4aHIgPSBuZXcgc2VsZi53aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblxuXHRcdHhoci5vbmFib3J0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVxdWVzdEVycm9yID0gbmV3IEVycm9yKEVSUk9SX0FCT1JURUQpO1xuXHRcdFx0cmVqZWN0KHJlcXVlc3RFcnJvcik7XG5cdFx0fTtcblx0XHR4aHIub250aW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVxdWVzdEVycm9yID0gbmV3IEVycm9yKEVSUk9SX1RJTUVPVVQpO1xuXHRcdFx0cmVqZWN0KHJlcXVlc3RFcnJvcik7XG5cdFx0fTtcblx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlcXVlc3RFcnJvciA9IG5ldyBFcnJvcih4aHIuc3RhdHVzVGV4dCB8fCBFUlJPUl9DT05ORUNUSU9OKTtcblx0XHRcdHJlamVjdChyZXF1ZXN0RXJyb3IpO1xuXHRcdH07XG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gNCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAocmVxdWVzdEVycm9yKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciBzdGF0dXNPYmplY3QgPSBnZXRTdGF0dXNPYmplY3QoeGhyKSxcblx0XHRcdFx0Y29udGVudCA9IHNlbGYuY29udmVydFJlc3BvbnNlKFxuXHRcdFx0XHRcdHN0YXR1c09iamVjdC5oZWFkZXJzLFxuXHRcdFx0XHRcdHhoci5yZXNwb25zZVRleHRcblx0XHRcdFx0KTtcblx0XHRcdGZ1bGZpbGwoe1xuXHRcdFx0XHRzdGF0dXM6IHN0YXR1c09iamVjdCxcblx0XHRcdFx0Y29udGVudDogY29udGVudFxuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdHZhciB1c2VyID0gcGFyYW1ldGVycy51cmkuYXV0aG9yaXR5LnVzZXJJbmZvID9cblx0XHRcdFx0cGFyYW1ldGVycy51cmkuYXV0aG9yaXR5LnVzZXJJbmZvLnVzZXIgOiBudWxsLFxuXHRcdFx0cGFzc3dvcmQgPSBwYXJhbWV0ZXJzLnVyaS5hdXRob3JpdHkudXNlckluZm8gP1xuXHRcdFx0XHRwYXJhbWV0ZXJzLnVyaS5hdXRob3JpdHkudXNlckluZm8ucGFzc3dvcmQgOiBudWxsO1xuXHRcdHhoci5vcGVuKFxuXHRcdFx0cGFyYW1ldGVycy5tZXRob2QsIHBhcmFtZXRlcnMudXJpLnRvU3RyaW5nKCksIHRydWUsXG5cdFx0XHR1c2VyIHx8IHVuZGVmaW5lZCwgcGFzc3dvcmQgfHwgdW5kZWZpbmVkXG5cdFx0KTtcblx0XHR4aHIudGltZW91dCA9IHBhcmFtZXRlcnMudGltZW91dDtcblxuXHRcdGlmIChwYXJhbWV0ZXJzLndpdGhDcmVkZW50aWFscykge1xuXHRcdFx0eGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0T2JqZWN0LmtleXMocGFyYW1ldGVycy5oZWFkZXJzKVxuXHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKGhlYWRlck5hbWUpIHtcblx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcdFx0aGVhZGVyTmFtZSwgcGFyYW1ldGVycy5oZWFkZXJzW2hlYWRlck5hbWVdXG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblxuXHRcdHhoci5zZW5kKHBhcmFtZXRlcnMuZGF0YSk7XG5cdH0pO1xufTtcblxuLyoqXG4gKiBHZXRzIHN0YXRlIG9iamVjdCBmb3Igc3BlY2lmaWVkIGpRdWVyeSBYSFIgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q/fSB4aHIgWEhSIG9iamVjdC5cbiAqIEByZXR1cm5zIHt7Y29kZTogbnVtYmVyLCB0ZXh0OiBzdHJpbmcsIGhlYWRlcnM6IE9iamVjdH19IFN0YXR1cyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGdldFN0YXR1c09iamVjdCh4aHIpIHtcblx0dmFyIGhlYWRlcnMgPSB7fTtcblxuXHRpZiAoIXhocikge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjb2RlOiAwLFxuXHRcdFx0dGV4dDogJycsXG5cdFx0XHRoZWFkZXJzOiBoZWFkZXJzXG5cdFx0fTtcblx0fVxuXG5cdHhoclxuXHRcdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdC5zcGxpdCgnXFxuJylcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyKSB7XG5cdFx0XHR2YXIgZGVsaW1pdGVySW5kZXggPSBoZWFkZXIuaW5kZXhPZignOicpO1xuXHRcdFx0aWYgKGRlbGltaXRlckluZGV4IDw9IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGhlYWRlck5hbWUgPSBoZWFkZXJcblx0XHRcdFx0LnN1YnN0cmluZygwLCBkZWxpbWl0ZXJJbmRleClcblx0XHRcdFx0LnRyaW0oKVxuXHRcdFx0XHQudG9Mb3dlckNhc2UoKTtcblx0XHRcdGhlYWRlcnNbaGVhZGVyTmFtZV0gPSBoZWFkZXJcblx0XHRcdFx0LnN1YnN0cmluZyhkZWxpbWl0ZXJJbmRleCArIDEpXG5cdFx0XHRcdC50cmltKCk7XG5cdFx0fSk7XG5cblx0cmV0dXJuIHtcblx0XHQvLyBoYW5kbGUgSUU5IGJ1ZzogaHR0cDovL2dvby5nbC9pZHNwU3Jcblx0XHRjb2RlOiB4aHIuc3RhdHVzID09PSAxMjIzID8gMjA0IDogeGhyLnN0YXR1cyxcblx0XHR0ZXh0OiB4aHIuc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogeGhyLnN0YXR1c1RleHQsXG5cdFx0aGVhZGVyczogaGVhZGVyc1xuXHR9O1xufSIsIi8qXG4gKiBjYXRiZXJyeVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5J3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeSB0aGF0IGFyZSBub3QgZXh0ZXJuYWxseVxuICogbWFpbnRhaW5lZCBsaWJyYXJpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVUhSID0gcmVxdWlyZSgnLi9saWIvVUhSJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHQvKipcblx0ICogUmVnaXN0ZXJzIFVIUiBpbiBzZXJ2ZXItc2lkZSBzZXJ2aWNlIGxvY2F0b3IuXG5cdCAqIEBwYXJhbSB7U2VydmljZUxvY2F0b3J9IGxvY2F0b3IgQ2F0YmVycnkncyBzZXJ2aWNlIGxvY2F0b3IuXG5cdCAqL1xuXHRyZWdpc3RlcjogZnVuY3Rpb24gKGxvY2F0b3IpIHtcblx0XHR2YXIgY29uZmlnID0gbG9jYXRvci5yZXNvbHZlKCdjb25maWcnKTtcblx0XHRsb2NhdG9yLnJlZ2lzdGVyKCd1aHInLCBVSFIsIGNvbmZpZywgdHJ1ZSk7XG5cdH0sXG5cdFVIUjogVUhSXG59OyIsIi8qXG4gKiBjYXRiZXJyeVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5J3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeSB0aGF0IGFyZSBub3QgZXh0ZXJuYWxseVxuICogbWFpbnRhaW5lZCBsaWJyYXJpZXMuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVIUkJhc2U7XG5cbnZhciBjYXRiZXJyeVVyaSA9IHJlcXVpcmUoJ2NhdGJlcnJ5LXVyaScpLFxuXHRRdWVyeSA9IGNhdGJlcnJ5VXJpLlF1ZXJ5LFxuXHRVUkkgPSBjYXRiZXJyeVVyaS5VUkk7XG5cbnZhciBFUlJPUl9VTlNVUFBPUlRFRF9QUk9UT0NPTCA9ICdQcm90b2NvbCBpcyB1bnN1cHBvcnRlZCcsXG5cdEVSUk9SX1BBUkFNRVRFUlNfU0hPVUxEX0JFX09CSkVDVCA9ICdSZXF1ZXN0IHBhcmFtZXRlcnMgc2hvdWxkIGJlIG9iamVjdCcsXG5cdEVSUk9SX1VSTF9JU19SRVFVSVJFRCA9ICdVUkwgaXMgcmVxdWlyZWQgcGFyYW1ldGVyJyxcblx0RVJST1JfTUVUSE9EX0lTX1JFUVVJUkVEID0gJ1JlcXVlc3QgbWV0aG9kIGlzIHJlcXVpcmVkIHBhcmFtZXRlcicsXG5cdEVSUk9SX0hPU1RfSVNfUkVRVUlSRUQgPSAnSG9zdCBpbiBVUkwgaXMgcmVxdWlyZWQnLFxuXHRFUlJPUl9TQ0hFTUVfSVNfUkVRVUlSRUQgPSAnU2NoZW1lIGluIFVSTCBpcyByZXF1aXJlZCcsXG5cdEVSUk9SX1RJTUVPVVRfU0hPVUxEX0JFX05VTUJFUiA9ICdUaW1lb3V0IHNob3VsZCBiZSBhIG51bWJlcicsXG5cdERFRkFVTFRfVElNRU9VVCA9IDMwMDAwLFxuXHRIVFRQX1BST1RPQ09MX1JFR0VYUCA9IC9eKGh0dHApcz8kL2k7XG5cbnZhciBNRVRIT0RTID0ge1xuXHRHRVQ6ICdHRVQnLFxuXHRIRUFEOiAnSEVBRCcsXG5cdFBPU1Q6ICdQT1NUJyxcblx0UFVUOiAnUFVUJyxcblx0UEFUQ0g6ICdQQVRDSCcsXG5cdERFTEVURTogJ0RFTEVURScsXG5cdE9QVElPTlM6ICdPUFRJT05TJyxcblx0VFJBQ0U6ICdUUkFDRScsXG5cdENPTk5FQ1Q6ICdDT05ORUNUJ1xufTtcblxuVUhSQmFzZS5UWVBFUyA9IHtcblx0VVJMX0VOQ09ERUQ6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxuXHRKU09OOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFBMQUlOX1RFWFQ6ICd0ZXh0L3BsYWluJyxcblx0SFRNTDogJ3RleHQvaHRtbCdcbn07XG5cblVIUkJhc2UuQ0hBUlNFVCA9ICdVVEYtOCc7XG5cblVIUkJhc2UuREVGQVVMVF9HRU5FUkFMX0hFQURFUlMgPSB7XG5cdEFjY2VwdDogVUhSQmFzZS5UWVBFUy5KU09OICsgJzsgcT0wLjcsICcgK1xuXHRcdFVIUkJhc2UuVFlQRVMuSFRNTCArICc7IHE9MC4yLCAnICtcblx0XHRVSFJCYXNlLlRZUEVTLlBMQUlOX1RFWFQgKyAnOyBxPTAuMScsXG5cdCdBY2NlcHQtQ2hhcnNldCc6IFVIUkJhc2UuQ0hBUlNFVCArICc7IHE9MSdcbn07XG5cblVIUkJhc2UuQ0hBUlNFVF9QQVJBTUVURVIgPSAnOyBjaGFyc2V0PScgKyBVSFJCYXNlLkNIQVJTRVQ7XG5VSFJCYXNlLlVSTF9FTkNPREVEX0VOVElUWV9DT05URU5UX1RZUEUgPSBVSFJCYXNlLlRZUEVTLlVSTF9FTkNPREVEICtcblx0VUhSQmFzZS5DSEFSU0VUX1BBUkFNRVRFUjtcblxuVUhSQmFzZS5KU09OX0VOVElUWV9DT05URU5UX1RZUEUgPSBVSFJCYXNlLlRZUEVTLkpTT04gK1xuXHRVSFJCYXNlLkNIQVJTRVRfUEFSQU1FVEVSO1xuXG5VSFJCYXNlLlBMQUlOX1RFWFRfRU5USVRZX0NPTlRFTlRfVFlQRSA9IFVIUkJhc2UuVFlQRVMuUExBSU5fVEVYVCArXG5cdFVIUkJhc2UuQ0hBUlNFVF9QQVJBTUVURVI7XG5cbi8vIFRoaXMgbW9kdWxlIHdlcmUgZGV2ZWxvcGVkIHVzaW5nIEhUVFAvMS4xdjIgUkZDIDI2MTZcbi8vIChodHRwOi8vd3d3LnczLm9yZy9Qcm90b2NvbHMvcmZjMjYxNi8pXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIEJhc2ljIFVuaXZlcnNhbCBIVFRQKFMpIFJlcXVlc3QgaW1wbGVtZW50YXRpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gVUhSQmFzZSgpIHsgfVxuXG4vKipcbiAqIERvZXMgR0VUIHJlcXVlc3QgdG8gSFRUUCBzZXJ2ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCB0byByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3Q/fSBvcHRpb25zIFJlcXVlc3QgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSB7T2JqZWN0P30gb3B0aW9ucy5oZWFkZXJzIEhUVFAgaGVhZGVycyB0byBzZW5kLlxuICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCk/fSBvcHRpb25zLmRhdGEgRGF0YSB0byBzZW5kLlxuICogQHBhcmFtIHtudW1iZXI/fSBvcHRpb25zLnRpbWVvdXQgUmVxdWVzdCB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFuP30gb3B0aW9ucy51bnNhZmVIVFRQUyBJZiB0cnVlIHRoZW4gcmVxdWVzdHMgdG8gc2VydmVycyB3aXRoXG4gKiBpbnZhbGlkIEhUVFBTIGNlcnRpZmljYXRlcyBhcmUgYWxsb3dlZC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFByb21pc2UgZm9yIHJlc3VsdCB3aXRoIHN0YXR1cyBvYmplY3QgYW5kIGNvbnRlbnQuXG4gKi9cblVIUkJhc2UucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdHZhciBwYXJhbWV0ZXJzID0gT2JqZWN0LmNyZWF0ZShvcHRpb25zKTtcblx0cGFyYW1ldGVycy5tZXRob2QgPSBNRVRIT0RTLkdFVDtcblx0cGFyYW1ldGVycy51cmwgPSB1cmw7XG5cdHJldHVybiB0aGlzLnJlcXVlc3QocGFyYW1ldGVycyk7XG59O1xuXG4vKipcbiAqIERvZXMgUE9TVCByZXF1ZXN0IHRvIEhUVFAgc2VydmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBVUkwgdG8gcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0P30gb3B0aW9ucyBSZXF1ZXN0IHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0ge09iamVjdD99IG9wdGlvbnMuaGVhZGVycyBIVFRQIGhlYWRlcnMgdG8gc2VuZC5cbiAqIEBwYXJhbSB7KHN0cmluZ3xPYmplY3QpP30gb3B0aW9ucy5kYXRhIERhdGEgdG8gc2VuZC5cbiAqIEBwYXJhbSB7bnVtYmVyP30gb3B0aW9ucy50aW1lb3V0IFJlcXVlc3QgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj99IG9wdGlvbnMudW5zYWZlSFRUUFMgSWYgdHJ1ZSB0aGVuIHJlcXVlc3RzIHRvIHNlcnZlcnMgd2l0aFxuICogaW52YWxpZCBIVFRQUyBjZXJ0aWZpY2F0ZXMgYXJlIGFsbG93ZWQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBQcm9taXNlIGZvciByZXN1bHQgd2l0aCBzdGF0dXMgb2JqZWN0IGFuZCBjb250ZW50LlxuICovXG5VSFJCYXNlLnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0dmFyIHBhcmFtZXRlcnMgPSBPYmplY3QuY3JlYXRlKG9wdGlvbnMpO1xuXHRwYXJhbWV0ZXJzLm1ldGhvZCA9IE1FVEhPRFMuUE9TVDtcblx0cGFyYW1ldGVycy51cmwgPSB1cmw7XG5cdHJldHVybiB0aGlzLnJlcXVlc3QocGFyYW1ldGVycyk7XG59O1xuXG4vKipcbiAqIERvZXMgUFVUIHJlcXVlc3QgdG8gSFRUUCBzZXJ2ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCB0byByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3Q/fSBvcHRpb25zIFJlcXVlc3QgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSB7T2JqZWN0P30gb3B0aW9ucy5oZWFkZXJzIEhUVFAgaGVhZGVycyB0byBzZW5kLlxuICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCk/fSBvcHRpb25zLmRhdGEgRGF0YSB0byBzZW5kLlxuICogQHBhcmFtIHtudW1iZXI/fSBvcHRpb25zLnRpbWVvdXQgUmVxdWVzdCB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFuP30gb3B0aW9ucy51bnNhZmVIVFRQUyBJZiB0cnVlIHRoZW4gcmVxdWVzdHMgdG8gc2VydmVycyB3aXRoXG4gKiBpbnZhbGlkIEhUVFBTIGNlcnRpZmljYXRlcyBhcmUgYWxsb3dlZC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFByb21pc2UgZm9yIHJlc3VsdCB3aXRoIHN0YXR1cyBvYmplY3QgYW5kIGNvbnRlbnQuXG4gKi9cblVIUkJhc2UucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdHZhciBwYXJhbWV0ZXJzID0gT2JqZWN0LmNyZWF0ZShvcHRpb25zKTtcblx0cGFyYW1ldGVycy5tZXRob2QgPSBNRVRIT0RTLlBVVDtcblx0cGFyYW1ldGVycy51cmwgPSB1cmw7XG5cdHJldHVybiB0aGlzLnJlcXVlc3QocGFyYW1ldGVycyk7XG59O1xuXG4vKipcbiAqIERvZXMgUEFUQ0ggcmVxdWVzdCB0byBIVFRQIHNlcnZlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVVJMIHRvIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdD99IG9wdGlvbnMgUmVxdWVzdCBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIHtPYmplY3Q/fSBvcHRpb25zLmhlYWRlcnMgSFRUUCBoZWFkZXJzIHRvIHNlbmQuXG4gKiBAcGFyYW0geyhzdHJpbmd8T2JqZWN0KT99IG9wdGlvbnMuZGF0YSBEYXRhIHRvIHNlbmQuXG4gKiBAcGFyYW0ge251bWJlcj99IG9wdGlvbnMudGltZW91dCBSZXF1ZXN0IHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBvcHRpb25zLnVuc2FmZUhUVFBTIElmIHRydWUgdGhlbiByZXF1ZXN0cyB0byBzZXJ2ZXJzIHdpdGhcbiAqIGludmFsaWQgSFRUUFMgY2VydGlmaWNhdGVzIGFyZSBhbGxvd2VkLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gUHJvbWlzZSBmb3IgcmVzdWx0IHdpdGggc3RhdHVzIG9iamVjdCBhbmQgY29udGVudC5cbiAqL1xuVUhSQmFzZS5wcm90b3R5cGUucGF0Y2ggPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHR2YXIgcGFyYW1ldGVycyA9IE9iamVjdC5jcmVhdGUob3B0aW9ucyk7XG5cdHBhcmFtZXRlcnMubWV0aG9kID0gTUVUSE9EUy5QQVRDSDtcblx0cGFyYW1ldGVycy51cmwgPSB1cmw7XG5cdHJldHVybiB0aGlzLnJlcXVlc3QocGFyYW1ldGVycyk7XG59O1xuXG4vKipcbiAqIERvZXMgREVMRVRFIHJlcXVlc3QgdG8gSFRUUCBzZXJ2ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCB0byByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3Q/fSBvcHRpb25zIFJlcXVlc3QgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSB7T2JqZWN0P30gb3B0aW9ucy5oZWFkZXJzIEhUVFAgaGVhZGVycyB0byBzZW5kLlxuICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCk/fSBvcHRpb25zLmRhdGEgRGF0YSB0byBzZW5kLlxuICogQHBhcmFtIHtudW1iZXI/fSBvcHRpb25zLnRpbWVvdXQgUmVxdWVzdCB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFuP30gb3B0aW9ucy51bnNhZmVIVFRQUyBJZiB0cnVlIHRoZW4gcmVxdWVzdHMgdG8gc2VydmVycyB3aXRoXG4gKiBpbnZhbGlkIEhUVFBTIGNlcnRpZmljYXRlcyBhcmUgYWxsb3dlZC5cbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFByb21pc2UgZm9yIHJlc3VsdCB3aXRoIHN0YXR1cyBvYmplY3QgYW5kIGNvbnRlbnQuXG4gKi9cblVIUkJhc2UucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcblx0dmFyIHBhcmFtZXRlcnMgPSBPYmplY3QuY3JlYXRlKG9wdGlvbnMpO1xuXHRwYXJhbWV0ZXJzLm1ldGhvZCA9IE1FVEhPRFMuREVMRVRFO1xuXHRwYXJhbWV0ZXJzLnVybCA9IHVybDtcblx0cmV0dXJuIHRoaXMucmVxdWVzdChwYXJhbWV0ZXJzKTtcbn07XG5cbi8qKlxuICogRG9lcyByZXF1ZXN0IHdpdGggc3BlY2lmaWVkIHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1ldGVycyBSZXF1ZXN0IHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1ldGVycy5tZXRob2QgSFRUUCBtZXRob2QuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1ldGVycy51cmwgVVJMIGZvciByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3Q/fSBwYXJhbWV0ZXJzLmhlYWRlcnMgSFRUUCBoZWFkZXJzIHRvIHNlbmQuXG4gKiBAcGFyYW0geyhzdHJpbmd8T2JqZWN0KT99IHBhcmFtZXRlcnMuZGF0YSBEYXRhIHRvIHNlbmQuXG4gKiBAcGFyYW0ge251bWJlcj99IHBhcmFtZXRlcnMudGltZW91dCBSZXF1ZXN0IHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBwYXJhbWV0ZXJzLnVuc2FmZUhUVFBTIElmIHRydWUgdGhlbiByZXF1ZXN0c1xuICogdG8gc2VydmVycyB3aXRoIGludmFsaWQgSFRUUFMgY2VydGlmaWNhdGVzIGFyZSBhbGxvd2VkLlxuICogQHJldHVybnMge1Byb21pc2U8T2JqZWN0Pn0gUHJvbWlzZSBmb3IgcmVzdWx0IHdpdGggc3RhdHVzIG9iamVjdCBhbmQgY29udGVudC5cbiAqL1xuVUhSQmFzZS5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG5cdHZhciBzZWxmID0gdGhpcztcblx0cmV0dXJuIHRoaXMuX3ZhbGlkYXRlUmVxdWVzdChwYXJhbWV0ZXJzKVxuXHRcdC50aGVuKGZ1bmN0aW9uICh2YWxpZGF0ZWQpIHtcblx0XHRcdHJldHVybiBzZWxmLl9kb1JlcXVlc3QodmFsaWRhdGVkKTtcblx0XHR9KTtcbn07XG5cbi8qKlxuICogVmFsaWRhdGVzIFVIUiBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIHtPYmplY3R9IHBhcmFtZXRlcnMgUmVxdWVzdCBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtZXRlcnMubWV0aG9kIEhUVFAgbWV0aG9kLlxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtZXRlcnMudXJsIFVSTCBmb3IgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0P30gcGFyYW1ldGVycy5oZWFkZXJzIEhUVFAgaGVhZGVycyB0byBzZW5kLlxuICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCk/fSBwYXJhbWV0ZXJzLmRhdGEgRGF0YSB0byBzZW5kLlxuICogQHBhcmFtIHtudW1iZXI/fSBwYXJhbWV0ZXJzLnRpbWVvdXQgUmVxdWVzdCB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFuP30gcGFyYW1ldGVycy51bnNhZmVIVFRQUyBJZiB0cnVlIHRoZW4gcmVxdWVzdHNcbiAqIHRvIHNlcnZlcnMgd2l0aCBpbnZhbGlkIEhUVFBTIGNlcnRpZmljYXRlcyBhcmUgYWxsb3dlZC5cbiAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIGZvciBub3RoaW5nLlxuICogQHByaXZhdGVcbiAqL1xuLypqc2hpbnQgbWF4Y29tcGxleGl0eTpmYWxzZSAqL1xuVUhSQmFzZS5wcm90b3R5cGUuX3ZhbGlkYXRlUmVxdWVzdCA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7XG5cdGlmICghcGFyYW1ldGVycyB8fCB0eXBlb2YgKHBhcmFtZXRlcnMpICE9PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoRVJST1JfUEFSQU1FVEVSU19TSE9VTERfQkVfT0JKRUNUKSk7XG5cdH1cblxuXHR2YXIgdmFsaWRhdGVkID0gT2JqZWN0LmNyZWF0ZShwYXJhbWV0ZXJzKTtcblxuXHRpZiAodHlwZW9mIChwYXJhbWV0ZXJzLnVybCkgIT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihFUlJPUl9VUkxfSVNfUkVRVUlSRUQpKTtcblx0fVxuXHR2YWxpZGF0ZWQudXJpID0gbmV3IFVSSSh2YWxpZGF0ZWQudXJsKTtcblx0aWYgKCF2YWxpZGF0ZWQudXJpLnNjaGVtZSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoRVJST1JfU0NIRU1FX0lTX1JFUVVJUkVEKSk7XG5cdH1cblx0aWYgKCFIVFRQX1BST1RPQ09MX1JFR0VYUC50ZXN0KHZhbGlkYXRlZC51cmkuc2NoZW1lKSkge1xuXHRcdHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoRVJST1JfVU5TVVBQT1JURURfUFJPVE9DT0wpKTtcblx0fVxuXHRpZiAoIXZhbGlkYXRlZC51cmkuYXV0aG9yaXR5IHx8ICF2YWxpZGF0ZWQudXJpLmF1dGhvcml0eS5ob3N0KSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihFUlJPUl9IT1NUX0lTX1JFUVVJUkVEKSk7XG5cdH1cblx0aWYgKHR5cGVvZiAodmFsaWRhdGVkLm1ldGhvZCkgIT09ICdzdHJpbmcnIHx8XG5cdFx0ISh2YWxpZGF0ZWQubWV0aG9kIGluIE1FVEhPRFMpKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihFUlJPUl9NRVRIT0RfSVNfUkVRVUlSRUQpKTtcblx0fVxuXG5cdHZhbGlkYXRlZC50aW1lb3V0ID0gdmFsaWRhdGVkLnRpbWVvdXQgfHwgREVGQVVMVF9USU1FT1VUO1xuXHRpZiAodHlwZW9mICh2YWxpZGF0ZWQudGltZW91dCkgIT09ICdudW1iZXInKSB7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihFUlJPUl9USU1FT1VUX1NIT1VMRF9CRV9OVU1CRVIpKTtcblx0fVxuXG5cdHZhbGlkYXRlZC5oZWFkZXJzID0gdGhpcy5fY3JlYXRlSGVhZGVycyh2YWxpZGF0ZWQuaGVhZGVycyk7XG5cblx0aWYgKCF0aGlzLl9pc1Vwc3RyZWFtUmVxdWVzdChwYXJhbWV0ZXJzLm1ldGhvZCkgJiZcblx0XHR2YWxpZGF0ZWQuZGF0YSAmJiB0eXBlb2YgKHZhbGlkYXRlZC5kYXRhKSA9PT0gJ29iamVjdCcpIHtcblxuXHRcdHZhciBkYXRhS2V5cyA9IE9iamVjdC5rZXlzKHZhbGlkYXRlZC5kYXRhKTtcblxuXHRcdGlmIChkYXRhS2V5cy5sZW5ndGggPiAwICYmICF2YWxpZGF0ZWQudXJpLnF1ZXJ5KSB7XG5cdFx0XHR2YWxpZGF0ZWQudXJpLnF1ZXJ5ID0gbmV3IFF1ZXJ5KCcnKTtcblx0XHR9XG5cblx0XHRkYXRhS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHZhbGlkYXRlZC51cmkucXVlcnkudmFsdWVzW2tleV0gPSB2YWxpZGF0ZWQuZGF0YVtrZXldO1xuXHRcdH0pO1xuXHRcdHZhbGlkYXRlZC5kYXRhID0gbnVsbDtcblx0fSBlbHNlIHtcblx0XHR2YXIgZGF0YUFuZEhlYWRlcnMgPSB0aGlzLl9nZXREYXRhVG9TZW5kKFxuXHRcdFx0dmFsaWRhdGVkLmhlYWRlcnMsIHZhbGlkYXRlZC5kYXRhXG5cdFx0KTtcblx0XHR2YWxpZGF0ZWQuaGVhZGVycyA9IGRhdGFBbmRIZWFkZXJzLmhlYWRlcnM7XG5cdFx0dmFsaWRhdGVkLmRhdGEgPSBkYXRhQW5kSGVhZGVycy5kYXRhO1xuXHR9XG5cblx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWxpZGF0ZWQpO1xufTtcblxuLyoqXG4gKiBHZXRzIGRhdGEgZm9yIHNlbmRpbmcgdmlhIEhUVFAgcmVxdWVzdCB1c2luZyBDb250ZW50IFR5cGUgSFRUUCBoZWFkZXIuXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVycyBIVFRQIGhlYWRlcnMuXG4gKiBAcGFyYW0ge09iamVjdHxzdHJpbmd9IGRhdGEgRGF0YSB0byBzZW5kLlxuICogQHJldHVybnMge3toZWFkZXJzOiBPYmplY3QsIGRhdGE6IE9iamVjdHxzdHJpbmd9fSBEYXRhIGFuZCBoZWFkZXJzIHRvIHNlbmQuXG4gKiBAcHJpdmF0ZVxuICovXG5VSFJCYXNlLnByb3RvdHlwZS5fZ2V0RGF0YVRvU2VuZCA9IGZ1bmN0aW9uIChoZWFkZXJzLCBkYXRhKSB7XG5cdHZhciBmb3VuZCA9IGZpbmRDb250ZW50VHlwZShoZWFkZXJzKSxcblx0XHRjb250ZW50VHlwZUhlYWRlciA9IGZvdW5kLm5hbWUsXG5cdFx0Y29udGVudFR5cGUgPSBmb3VuZC50eXBlO1xuXG5cdGlmICghZGF0YSB8fCB0eXBlb2YgKGRhdGEpICE9PSAnb2JqZWN0Jykge1xuXHRcdGRhdGEgPSBkYXRhID8gU3RyaW5nKGRhdGEpIDogJyc7XG5cdFx0aWYgKCFjb250ZW50VHlwZSkge1xuXHRcdFx0aGVhZGVyc1tjb250ZW50VHlwZUhlYWRlcl0gPSBVSFJCYXNlLlBMQUlOX1RFWFRfRU5USVRZX0NPTlRFTlRfVFlQRTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdGhlYWRlcnM6IGhlYWRlcnMsXG5cdFx0XHRkYXRhOiBkYXRhXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjb250ZW50VHlwZSA9PT0gVUhSQmFzZS5UWVBFUy5KU09OKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGhlYWRlcnM6IGhlYWRlcnMsXG5cdFx0XHRkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKVxuXHRcdH07XG5cdH1cblxuXHQvLyBvdGhlcndpc2Ugb2JqZWN0IHdpbGwgYmUgc2VudCB3aXRoXG5cdC8vIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxuXHRoZWFkZXJzW2NvbnRlbnRUeXBlSGVhZGVyXSA9IFVIUkJhc2UuVVJMX0VOQ09ERURfRU5USVRZX0NPTlRFTlRfVFlQRTtcblxuXHR2YXIgcXVlcnkgPSBuZXcgUXVlcnkoKTtcblx0cXVlcnkudmFsdWVzID0gZGF0YTtcblx0cmV0dXJuIHtcblx0XHRoZWFkZXJzOiBoZWFkZXJzLFxuXHRcdGRhdGE6IHF1ZXJ5LnRvU3RyaW5nKClcblx0XHRcdC5yZXBsYWNlKC9cXCsvZywgJyUyQicpXG5cdFx0XHQucmVwbGFjZSgvJTIwL2csICcrJylcblx0fTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBIVFRQIGhlYWRlcnMgZm9yIHJlcXVlc3QgdXNpbmcgZGVmYXVsdHMgYW5kIGN1cnJlbnQgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbWV0ZXJIZWFkZXJzIEhUVFAgaGVhZGVycyBvZiBVSFIuXG4gKiBAcHJvdGVjdGVkXG4gKi9cblVIUkJhc2UucHJvdG90eXBlLl9jcmVhdGVIZWFkZXJzID0gZnVuY3Rpb24gKHBhcmFtZXRlckhlYWRlcnMpIHtcblx0aWYgKCFwYXJhbWV0ZXJIZWFkZXJzIHx8IHR5cGVvZiAocGFyYW1ldGVySGVhZGVycykgIT09ICdvYmplY3QnKSB7XG5cdFx0cGFyYW1ldGVySGVhZGVycyA9IHt9O1xuXHR9XG5cdHZhciBoZWFkZXJzID0ge307XG5cblx0T2JqZWN0LmtleXMoVUhSQmFzZS5ERUZBVUxUX0dFTkVSQUxfSEVBREVSUylcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyTmFtZSkge1xuXHRcdFx0aGVhZGVyc1toZWFkZXJOYW1lXSA9IFVIUkJhc2UuREVGQVVMVF9HRU5FUkFMX0hFQURFUlNbaGVhZGVyTmFtZV07XG5cdFx0fSk7XG5cblx0T2JqZWN0LmtleXMocGFyYW1ldGVySGVhZGVycylcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyTmFtZSkge1xuXHRcdFx0aWYgKHBhcmFtZXRlckhlYWRlcnNbaGVhZGVyTmFtZV0gPT09IG51bGwgfHxcblx0XHRcdFx0cGFyYW1ldGVySGVhZGVyc1toZWFkZXJOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGRlbGV0ZSBoZWFkZXJzW2hlYWRlck5hbWVdO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRoZWFkZXJzW2hlYWRlck5hbWVdID0gcGFyYW1ldGVySGVhZGVyc1toZWFkZXJOYW1lXTtcblx0XHR9KTtcblxuXHRyZXR1cm4gaGVhZGVycztcbn07XG5cbi8qKlxuICogRG9lcyByZXF1ZXN0IHdpdGggc3BlY2lmaWVkIHBhcmFtZXRlcnMgdXNpbmcgcHJvdG9jb2wgaW1wbGVtZW50YXRpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1ldGVycyBSZXF1ZXN0IHBhcmFtZXRlcnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1ldGVycy5tZXRob2QgSFRUUCBtZXRob2QuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFyYW1ldGVycy51cmwgVVJMIGZvciByZXF1ZXN0LlxuICogQHBhcmFtIHtVUkl9IHBhcmFtZXRlcnMudXJpIFVSSSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1ldGVycy5oZWFkZXJzIEhUVFAgaGVhZGVycyB0byBzZW5kLlxuICogQHBhcmFtIHtzdHJpbmd8T2JqZWN0fSBwYXJhbWV0ZXJzLmRhdGEgRGF0YSB0byBzZW5kLlxuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtZXRlcnMudGltZW91dCBSZXF1ZXN0IHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHBhcmFtZXRlcnMudW5zYWZlSFRUUFMgSWYgdHJ1ZSB0aGVuIHJlcXVlc3RzIHRvIHNlcnZlcnMgd2l0aFxuICogaW52YWxpZCBIVFRQUyBjZXJ0aWZpY2F0ZXMgYXJlIGFsbG93ZWQuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3Q+fSBQcm9taXNlIGZvciByZXN1bHQgd2l0aCBzdGF0dXMgb2JqZWN0IGFuZCBjb250ZW50LlxuICogQHByb3RlY3RlZFxuICogQGFic3RyYWN0XG4gKi9cbi8vIGpzY3M6ZGlzYWJsZSBkaXNhbGxvd1VudXNlZFBhcmFtc1xuVUhSQmFzZS5wcm90b3R5cGUuX2RvUmVxdWVzdCA9IGZ1bmN0aW9uIChwYXJhbWV0ZXJzKSB7IH07XG5cbi8qKlxuICogQ29udmVydHMgcmVzcG9uc2UgZGF0YSBhY2NvcmRpbmcgY29udGVudCB0eXBlLlxuICogQHBhcmFtIHtPYmplY3R9IGhlYWRlcnMgSFRUUCBoZWFkZXJzLlxuICogQHBhcmFtIHtzdHJpbmd9IHJlc3BvbnNlRGF0YSBEYXRhIGZyb20gcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7c3RyaW5nfE9iamVjdH0gQ29udmVydGVkIGRhdGEuXG4gKi9cblVIUkJhc2UucHJvdG90eXBlLmNvbnZlcnRSZXNwb25zZSA9IGZ1bmN0aW9uIChoZWFkZXJzLCByZXNwb25zZURhdGEpIHtcblx0aWYgKHR5cGVvZiAocmVzcG9uc2VEYXRhKSAhPT0gJ3N0cmluZycpIHtcblx0XHRyZXNwb25zZURhdGEgPSAnJztcblx0fVxuXHR2YXIgZm91bmQgPSBmaW5kQ29udGVudFR5cGUoaGVhZGVycyksXG5cdFx0Y29udGVudFR5cGUgPSBmb3VuZC50eXBlIHx8IFVIUkJhc2UuVFlQRVMuUExBSU5fVEVYVDtcblxuXHRzd2l0Y2ggKGNvbnRlbnRUeXBlKSB7XG5cdFx0Y2FzZSBVSFJCYXNlLlRZUEVTLkpTT046XG5cdFx0XHR2YXIganNvbjtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGpzb24gPSBKU09OLnBhcnNlKHJlc3BvbnNlRGF0YSk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdC8vIG5vdGhpbmcgdG8gZG9cblx0XHRcdH1cblx0XHRcdHJldHVybiBqc29uIHx8IHt9O1xuXHRcdGNhc2UgVUhSQmFzZS5UWVBFUy5VUkxfRU5DT0RFRDpcblx0XHRcdHZhciBvYmplY3Q7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgcXVlcnkgPSBuZXcgUXVlcnkocmVzcG9uc2VEYXRhLnJlcGxhY2UoJysnLCAnJTIwJykpO1xuXHRcdFx0XHRvYmplY3QgPSBxdWVyeS52YWx1ZXM7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdC8vIG5vdGhpbmcgdG8gZG9cblx0XHRcdH1cblx0XHRcdHJldHVybiBvYmplY3QgfHwge307XG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiByZXNwb25zZURhdGE7XG5cdH1cbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpcyBjdXJyZW50IHF1ZXJ5IG5lZWRzIHRvIHVzZSB1cHN0cmVhbS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2QgSFRUUCBtZXRob2QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gSXMgY3VycmVudCBIVFRQIG1ldGhvZCBtZWFucyB1cHN0cmVhbSB1c2FnZS5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuVUhSQmFzZS5wcm90b3R5cGUuX2lzVXBzdHJlYW1SZXF1ZXN0ID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuXHRyZXR1cm4gKFxuXHRcdG1ldGhvZCA9PT0gTUVUSE9EUy5QT1NUIHx8XG5cdFx0bWV0aG9kID09PSBNRVRIT0RTLlBVVCB8fFxuXHRcdG1ldGhvZCA9PT0gTUVUSE9EUy5QQVRDSFxuXHRcdCk7XG59O1xuXG4vKipcbiAqIEZpbmRzIGNvbnRlbnQgdHlwZSBoZWFkZXIgaW4gaGVhZGVycyBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gaGVhZGVycyBIVFRQIGhlYWRlcnMuXG4gKiBAcmV0dXJucyB7e25hbWU6IHN0cmluZywgdHlwZTogc3RyaW5nfX0gTmFtZSBvZiBoZWFkZXIgYW5kIGNvbnRlbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gZmluZENvbnRlbnRUeXBlKGhlYWRlcnMpIHtcblx0dmFyIGNvbnRlbnRUeXBlU3RyaW5nID0gJycsXG5cdFx0Y29udGVudFR5cGVIZWFkZXIgPSAnQ29udGVudC1UeXBlJztcblxuXHRPYmplY3Qua2V5cyhoZWFkZXJzKVxuXHRcdC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmIChrZXkudG9Mb3dlckNhc2UoKSAhPT0gJ2NvbnRlbnQtdHlwZScpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29udGVudFR5cGVIZWFkZXIgPSBrZXk7XG5cdFx0XHRjb250ZW50VHlwZVN0cmluZyA9IGhlYWRlcnNba2V5XTtcblx0XHR9KTtcblxuXHR2YXIgdHlwZUFuZFBhcmFtZXRlcnMgPSBjb250ZW50VHlwZVN0cmluZy5zcGxpdCgnOycpLFxuXHRcdGNvbnRlbnRUeXBlID0gdHlwZUFuZFBhcmFtZXRlcnNbMF0udG9Mb3dlckNhc2UoKTtcblx0cmV0dXJuIHtcblx0XHRuYW1lOiBjb250ZW50VHlwZUhlYWRlcixcblx0XHR0eXBlOiBjb250ZW50VHlwZVxuXHR9O1xufVxuIiwiLypcbiAqIGNhdGJlcnJ5XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IERlbmlzIFJlY2hrdW5vdiBhbmQgcHJvamVjdCBjb250cmlidXRvcnMuXG4gKlxuICogY2F0YmVycnkncyBsaWNlbnNlIGZvbGxvd3M6XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sXG4gKiBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLFxuICogcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAqIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuICogU09GVFdBUkUuXG4gKlxuICogVGhpcyBsaWNlbnNlIGFwcGxpZXMgdG8gYWxsIHBhcnRzIG9mIGNhdGJlcnJ5IHRoYXQgYXJlIG5vdCBleHRlcm5hbGx5XG4gKiBtYWludGFpbmVkIGxpYnJhcmllcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRVUkk6IHJlcXVpcmUoJy4vbGliL1VSSScpLFxuXHRBdXRob3JpdHk6IHJlcXVpcmUoJy4vbGliL0F1dGhvcml0eScpLFxuXHRVc2VySW5mbzogcmVxdWlyZSgnLi9saWIvVXNlckluZm8nKSxcblx0UXVlcnk6IHJlcXVpcmUoJy4vbGliL1F1ZXJ5Jylcbn07IiwiLypcbiAqIGNhdGJlcnJ5LXVyaVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5LXVyaSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnktdXJpIHRoYXQgYXJlIG5vdCBleHRlcm5hbGx5XG4gKiBtYWludGFpbmVkIGxpYnJhcmllcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aG9yaXR5O1xuXG52YXIgVXNlckluZm8gPSByZXF1aXJlKCcuL1VzZXJJbmZvJyksXG5cdHBlcmNlbnRFbmNvZGluZ0hlbHBlciA9IHJlcXVpcmUoJy4vcGVyY2VudEVuY29kaW5nSGVscGVyJyk7XG5cbnZhciBQT1JUX1JFR0VYUCA9IC9eXFxkKyQvLFxuXHRFUlJPUl9QT1JUID0gJ1VSSSBhdXRob3JpdHkgcG9ydCBtdXN0IHNhdGlzZnkgZXhwcmVzc2lvbiAnICtcblx0XHRQT1JUX1JFR0VYUC50b1N0cmluZygpO1xuXG4vKipcbiAqIENyZWF0ZXMgbmV3IGluc3RhbmNlIG9mIFVSSSBhdXRob3JpdHkgY29tcG9uZW50IHBhcnNlci5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMy4yXG4gKiBAcGFyYW0ge3N0cmluZz99IGF1dGhvcml0eVN0cmluZyBVUkkgYXV0aG9yaXR5IGNvbXBvbmVudCBzdHJpbmcuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQXV0aG9yaXR5KGF1dGhvcml0eVN0cmluZykge1xuXHRpZiAodHlwZW9mIChhdXRob3JpdHlTdHJpbmcpID09PSAnc3RyaW5nJyAmJiBhdXRob3JpdHlTdHJpbmcubGVuZ3RoID4gMCkge1xuXHRcdHZhciBmaXJzdEF0SW5kZXggPSBhdXRob3JpdHlTdHJpbmcuaW5kZXhPZignQCcpO1xuXHRcdGlmIChmaXJzdEF0SW5kZXggIT09IC0xKSB7XG5cdFx0XHR2YXIgdXNlckluZm9TdHJpbmcgPSBhdXRob3JpdHlTdHJpbmcuc3Vic3RyaW5nKDAsIGZpcnN0QXRJbmRleCk7XG5cdFx0XHR0aGlzLnVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHVzZXJJbmZvU3RyaW5nKTtcblx0XHRcdGF1dGhvcml0eVN0cmluZyA9IGF1dGhvcml0eVN0cmluZy5zdWJzdHJpbmcoZmlyc3RBdEluZGV4ICsgMSk7XG5cdFx0fVxuXG5cdFx0dmFyIGxhc3RDb2xvbkluZGV4ID0gYXV0aG9yaXR5U3RyaW5nLmxhc3RJbmRleE9mKCc6Jyk7XG5cdFx0aWYgKGxhc3RDb2xvbkluZGV4ICE9PSAtMSkge1xuXHRcdFx0dmFyIHBvcnRTdHJpbmcgPSBhdXRob3JpdHlTdHJpbmcuc3Vic3RyaW5nKGxhc3RDb2xvbkluZGV4ICsgMSk7XG5cdFx0XHRpZiAobGFzdENvbG9uSW5kZXggPT09IGF1dGhvcml0eVN0cmluZy5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdHRoaXMucG9ydCA9ICcnO1xuXHRcdFx0XHRhdXRob3JpdHlTdHJpbmcgPSBhdXRob3JpdHlTdHJpbmcuc3Vic3RyaW5nKDAsIGxhc3RDb2xvbkluZGV4KTtcblx0XHRcdH0gZWxzZSBpZiAoUE9SVF9SRUdFWFAudGVzdChwb3J0U3RyaW5nKSkge1xuXHRcdFx0XHR0aGlzLnBvcnQgPSBwb3J0U3RyaW5nO1xuXHRcdFx0XHRhdXRob3JpdHlTdHJpbmcgPSBhdXRob3JpdHlTdHJpbmcuc3Vic3RyaW5nKDAsIGxhc3RDb2xvbkluZGV4KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLmhvc3QgPSBwZXJjZW50RW5jb2RpbmdIZWxwZXIuZGVjb2RlKGF1dGhvcml0eVN0cmluZyk7XG5cdH1cbn1cblxuLyoqXG4gKiBDdXJyZW50IHVzZXIgaW5mb3JtYXRpb24uXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTMuMi4xXG4gKiBAdHlwZSB7VXNlckluZm99XG4gKi9cbkF1dGhvcml0eS5wcm90b3R5cGUudXNlckluZm8gPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgaG9zdC5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMy4yLjJcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cbkF1dGhvcml0eS5wcm90b3R5cGUuaG9zdCA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBwb3J0LlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjIuM1xuICogQHR5cGUge3N0cmluZ31cbiAqL1xuQXV0aG9yaXR5LnByb3RvdHlwZS5wb3J0ID0gbnVsbDtcblxuLyoqXG4gKiBDbG9uZXMgY3VycmVudCBhdXRob3JpdHkuXG4gKiBAcmV0dXJucyB7QXV0aG9yaXR5fSBOZXcgY2xvbmUgb2YgY3VycmVudCBvYmplY3QuXG4gKi9cbkF1dGhvcml0eS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBhdXRob3JpdHkgPSBuZXcgQXV0aG9yaXR5KCk7XG5cdGlmICh0aGlzLnVzZXJJbmZvKSB7XG5cdFx0YXV0aG9yaXR5LnVzZXJJbmZvID0gdGhpcy51c2VySW5mby5jbG9uZSgpO1xuXHR9XG5cdGlmICh0eXBlb2YgKHRoaXMuaG9zdCkgPT09ICdzdHJpbmcnKSB7XG5cdFx0YXV0aG9yaXR5Lmhvc3QgPSB0aGlzLmhvc3Q7XG5cdH1cblx0aWYgKHR5cGVvZiAodGhpcy5wb3J0KSA9PT0gJ3N0cmluZycpIHtcblx0XHRhdXRob3JpdHkucG9ydCA9IHRoaXMucG9ydDtcblx0fVxuXHRyZXR1cm4gYXV0aG9yaXR5O1xufTtcblxuLyoqXG4gKiBSZWNvbWJpbmUgYWxsIGF1dGhvcml0eSBjb21wb25lbnRzIGludG8gYXV0aG9yaXR5IHN0cmluZy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEF1dGhvcml0eSBjb21wb25lbnQgc3RyaW5nLlxuICovXG5BdXRob3JpdHkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgcmVzdWx0ID0gJyc7XG5cdGlmICh0aGlzLnVzZXJJbmZvKSB7XG5cdFx0cmVzdWx0ICs9IHRoaXMudXNlckluZm8udG9TdHJpbmcoKSArICdAJztcblx0fVxuXHRpZiAodGhpcy5ob3N0ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5ob3N0ICE9PSBudWxsKSB7XG5cdFx0dmFyIGhvc3QgPSBTdHJpbmcodGhpcy5ob3N0KTtcblx0XHRyZXN1bHQgKz0gcGVyY2VudEVuY29kaW5nSGVscGVyLmVuY29kZUhvc3QoaG9zdCk7XG5cdH1cblx0aWYgKHRoaXMucG9ydCAhPT0gdW5kZWZpbmVkICYmIHRoaXMucG9ydCAhPT0gbnVsbCkge1xuXHRcdHZhciBwb3J0ID0gU3RyaW5nKHRoaXMucG9ydCk7XG5cdFx0aWYgKHBvcnQubGVuZ3RoID4gMCAmJiAhUE9SVF9SRUdFWFAudGVzdChwb3J0KSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUk9SX1BPUlQpO1xuXHRcdH1cblx0XHRyZXN1bHQgKz0gJzonICsgcG9ydDtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufTsiLCIvKlxuICogY2F0YmVycnktdXJpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IERlbmlzIFJlY2hrdW5vdiBhbmQgcHJvamVjdCBjb250cmlidXRvcnMuXG4gKlxuICogY2F0YmVycnktdXJpJ3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeS11cmkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBRdWVyeTtcblxudmFyIHBlcmNlbnRFbmNvZGluZ0hlbHBlciA9IHJlcXVpcmUoJy4vcGVyY2VudEVuY29kaW5nSGVscGVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgVVJJIHF1ZXJ5IGNvbXBvbmVudCBwYXJzZXIuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTMuNFxuICogQHBhcmFtIHtzdHJpbmc/fSBxdWVyeVN0cmluZyBVUkkgcXVlcnkgY29tcG9uZW50IHN0cmluZy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBRdWVyeShxdWVyeVN0cmluZykge1xuXHRpZiAodHlwZW9mIChxdWVyeVN0cmluZykgPT09ICdzdHJpbmcnKSB7XG5cdFx0dGhpcy52YWx1ZXMgPSB7fTtcblxuXHRcdHF1ZXJ5U3RyaW5nXG5cdFx0XHQuc3BsaXQoJyYnKVxuXHRcdFx0LmZvckVhY2goZnVuY3Rpb24gKHBhaXIpIHtcblx0XHRcdFx0dmFyIHBhcnRzID0gcGFpci5zcGxpdCgnPScpLFxuXHRcdFx0XHRcdGtleSA9IHBlcmNlbnRFbmNvZGluZ0hlbHBlci5kZWNvZGUocGFydHNbMF0pO1xuXHRcdFx0XHRpZiAoIWtleSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoa2V5IGluIHRoaXMudmFsdWVzICYmXG5cdFx0XHRcdFx0ISh0aGlzLnZhbHVlc1trZXldIGluc3RhbmNlb2YgQXJyYXkpKSB7XG5cdFx0XHRcdFx0dGhpcy52YWx1ZXNba2V5XSA9IFt0aGlzLnZhbHVlc1trZXldXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB2YWx1ZSA9IHR5cGVvZiAocGFydHNbMV0pID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdFx0cGVyY2VudEVuY29kaW5nSGVscGVyLmRlY29kZShwYXJ0c1sxXSkgOiBudWxsO1xuXG5cdFx0XHRcdGlmICh0aGlzLnZhbHVlc1trZXldIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdFx0XHR0aGlzLnZhbHVlc1trZXldLnB1c2godmFsdWUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMudmFsdWVzW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgdGhpcyk7XG5cdH1cbn1cblxuLyoqXG4gKiBDdXJyZW50IHNldCBvZiB2YWx1ZXMgb2YgcXVlcnkuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5RdWVyeS5wcm90b3R5cGUudmFsdWVzID0gbnVsbDtcblxuLyoqXG4gKiBDbG9uZXMgY3VycmVudCBxdWVyeSB0byBhIG5ldyBvYmplY3QuXG4gKiBAcmV0dXJucyB7UXVlcnl9IE5ldyBjbG9uZSBvZiBjdXJyZW50IG9iamVjdC5cbiAqL1xuUXVlcnkucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgcXVlcnkgPSBuZXcgUXVlcnkoKTtcblx0aWYgKHRoaXMudmFsdWVzKSB7XG5cdFx0cXVlcnkudmFsdWVzID0ge307XG5cdFx0T2JqZWN0LmtleXModGhpcy52YWx1ZXMpXG5cdFx0XHQuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdHF1ZXJ5LnZhbHVlc1trZXldID0gdGhpcy52YWx1ZXNba2V5XTtcblx0XHRcdH0sIHRoaXMpO1xuXHR9XG5cdHJldHVybiBxdWVyeTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgY3VycmVudCBzZXQgb2YgcXVlcnkgdmFsdWVzIHRvIHN0cmluZy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFF1ZXJ5IGNvbXBvbmVudCBzdHJpbmcuXG4gKi9cblF1ZXJ5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKCF0aGlzLnZhbHVlcykge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdHZhciBxdWVyeVN0cmluZyA9ICcnO1xuXHRPYmplY3Qua2V5cyh0aGlzLnZhbHVlcylcblx0XHQuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHR2YXIgdmFsdWVzID0gdGhpcy52YWx1ZXNba2V5XSBpbnN0YW5jZW9mIEFycmF5ID9cblx0XHRcdFx0dGhpcy52YWx1ZXNba2V5XSA6IFt0aGlzLnZhbHVlc1trZXldXTtcblxuXHRcdFx0dmFsdWVzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHF1ZXJ5U3RyaW5nICs9ICcmJyArIHBlcmNlbnRFbmNvZGluZ0hlbHBlclxuXHRcdFx0XHRcdC5lbmNvZGVRdWVyeVN1YkNvbXBvbmVudChrZXkpO1xuXHRcdFx0XHRpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG5cdFx0XHRcdHF1ZXJ5U3RyaW5nICs9ICc9JyArXG5cdFx0XHRcdFx0cGVyY2VudEVuY29kaW5nSGVscGVyLmVuY29kZVF1ZXJ5U3ViQ29tcG9uZW50KHZhbHVlKTtcblx0XHRcdH0pO1xuXHRcdH0sIHRoaXMpO1xuXG5cdHJldHVybiBxdWVyeVN0cmluZy5yZXBsYWNlKC9eJi8sICcnKTtcbn07IiwiLypcbiAqIGNhdGJlcnJ5XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IERlbmlzIFJlY2hrdW5vdiBhbmQgcHJvamVjdCBjb250cmlidXRvcnMuXG4gKlxuICogY2F0YmVycnkncyBsaWNlbnNlIGZvbGxvd3M6XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb25cbiAqIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uXG4gKiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sXG4gKiBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLFxuICogcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSxcbiAqIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sXG4gKiBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuICogaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuICogT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKlxuICogVGhpcyBsaWNlbnNlIGFwcGxpZXMgdG8gYWxsIHBhcnRzIG9mIGNhdGJlcnJ5IHRoYXQgYXJlIG5vdCBleHRlcm5hbGx5XG4gKiBtYWludGFpbmVkIGxpYnJhcmllcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVVJJO1xuXG52YXIgQXV0aG9yaXR5ID0gcmVxdWlyZSgnLi9BdXRob3JpdHknKSxcblx0cGVyY2VudEVuY29kaW5nSGVscGVyID0gcmVxdWlyZSgnLi9wZXJjZW50RW5jb2RpbmdIZWxwZXInKSxcblx0UXVlcnkgPSByZXF1aXJlKCcuL1F1ZXJ5Jyk7XG5cbi8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I2FwcGVuZGl4LUJcbnZhciBVUklfUEFSU0VfUkVHRVhQID0gbmV3IFJlZ0V4cChcblx0XHQnXigoW146Lz8jXSspOik/KC8vKFteLz8jXSopKT8oW14/I10qKShcXFxcPyhbXiNdKikpPygjKC4qKSk/J1xuXHQpLFxuXHQvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTMuMVxuXHRTQ0hFTUVfUkVHRVhQID0gL15bYS16XStbYS16XFxkXFwrXFwuLV0qJC9pLFxuXHRFUlJPUl9TQ0hFTUUgPSAnVVJJIHNjaGVtZSBtdXN0IHNhdGlzZnkgZXhwcmVzc2lvbiAnICtcblx0XHRTQ0hFTUVfUkVHRVhQLnRvU3RyaW5nKCksXG5cdEVSUk9SX0JBU0VfU0NIRU1FID0gJ1NjaGVtZSBjb21wb25lbnQgaXMgcmVxdWlyZWQgdG8gYmUgcHJlc2VudCAnICtcblx0XHQnaW4gYSBiYXNlIFVSSSc7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgVVJJIGFjY29yZGluZyB0byBSRkMgMzk4Ni5cbiAqIEBwYXJhbSB7c3RyaW5nP30gdXJpU3RyaW5nIFVSSSBzdHJpbmcgdG8gcGFyc2UgY29tcG9uZW50cy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBVUkkodXJpU3RyaW5nKSB7XG5cdGlmICh0eXBlb2YgKHVyaVN0cmluZykgIT09ICdzdHJpbmcnKSB7XG5cdFx0dXJpU3RyaW5nID0gJyc7XG5cdH1cblxuXHQvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNhcHBlbmRpeC1CXG5cdHZhciBtYXRjaGVzID0gdXJpU3RyaW5nLm1hdGNoKFVSSV9QQVJTRV9SRUdFWFApO1xuXG5cdGlmIChtYXRjaGVzKSB7XG5cdFx0aWYgKHR5cGVvZiAobWF0Y2hlc1syXSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHR0aGlzLnNjaGVtZSA9IHBlcmNlbnRFbmNvZGluZ0hlbHBlci5kZWNvZGUobWF0Y2hlc1syXSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgKG1hdGNoZXNbNF0pID09PSAnc3RyaW5nJykge1xuXHRcdFx0dGhpcy5hdXRob3JpdHkgPSBuZXcgQXV0aG9yaXR5KG1hdGNoZXNbNF0pO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIChtYXRjaGVzWzVdKSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHRoaXMucGF0aCA9IHBlcmNlbnRFbmNvZGluZ0hlbHBlci5kZWNvZGVQYXRoKG1hdGNoZXNbNV0pO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIChtYXRjaGVzWzddKSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHRoaXMucXVlcnkgPSBuZXcgUXVlcnkobWF0Y2hlc1s3XSk7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgKG1hdGNoZXNbOV0pID09PSAnc3RyaW5nJykge1xuXHRcdFx0dGhpcy5mcmFnbWVudCA9IHBlcmNlbnRFbmNvZGluZ0hlbHBlci5kZWNvZGUobWF0Y2hlc1s5XSk7XG5cdFx0fVxuXHR9XG59XG5cbi8qKlxuICogQ3VycmVudCBVUkkgc2NoZW1lLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjFcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cblVSSS5wcm90b3R5cGUuc2NoZW1lID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IFVSSSBhdXRob3JpdHkuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTMuMlxuICogQHR5cGUge0F1dGhvcml0eX1cbiAqL1xuVVJJLnByb3RvdHlwZS5hdXRob3JpdHkgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgVVJJIHBhdGguXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTMuM1xuICogQHR5cGUge3N0cmluZ31cbiAqL1xuVVJJLnByb3RvdHlwZS5wYXRoID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IFVSSSBxdWVyeS5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMy40XG4gKiBAdHlwZSB7UXVlcnl9XG4gKi9cblVSSS5wcm90b3R5cGUucXVlcnkgPSBudWxsO1xuXG4vKipcbiAqIEN1cnJlbnQgVVJJIGZyYWdtZW50LlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjVcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cblVSSS5wcm90b3R5cGUuZnJhZ21lbnQgPSBudWxsO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgVVJJIHJlZmVyZW5jZSB0aGF0IG1pZ2h0IGJlIHJlbGF0aXZlIHRvIGEgZ2l2ZW4gYmFzZSBVUklcbiAqIGludG8gdGhlIHJlZmVyZW5jZSdzIHRhcmdldCBVUkkuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTUuMlxuICogQHBhcmFtIHtVUkl9IGJhc2VVcmkgQmFzZSBVUkkuXG4gKiBAcmV0dXJucyB7VVJJfSBSZXNvbHZlZCBVUkkuXG4gKi9cblVSSS5wcm90b3R5cGUucmVzb2x2ZVJlbGF0aXZlID0gZnVuY3Rpb24gKGJhc2VVcmkpIHtcblx0aWYgKCFiYXNlVXJpLnNjaGVtZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihFUlJPUl9CQVNFX1NDSEVNRSk7XG5cdH1cblxuXHRyZXR1cm4gdHJhbnNmb3JtUmVmZXJlbmNlKGJhc2VVcmksIHRoaXMpO1xufTtcblxuLyoqXG4gKiBDbG9uZXMgY3VycmVudCBVUkkgdG8gYSBuZXcgb2JqZWN0LlxuICogQHJldHVybnMge1VSSX0gTmV3IGNsb25lIG9mIGN1cnJlbnQgb2JqZWN0LlxuICovXG5VUkkucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgdXJpID0gbmV3IFVSSSgpO1xuXG5cdGlmICh0eXBlb2YgKHRoaXMuc2NoZW1lKSA9PT0gJ3N0cmluZycpIHtcblx0XHR1cmkuc2NoZW1lID0gdGhpcy5zY2hlbWU7XG5cdH1cblxuXHRpZiAodGhpcy5hdXRob3JpdHkpIHtcblx0XHR1cmkuYXV0aG9yaXR5ID0gdGhpcy5hdXRob3JpdHkuY2xvbmUoKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgKHRoaXMucGF0aCkgPT09ICdzdHJpbmcnKSB7XG5cdFx0dXJpLnBhdGggPSB0aGlzLnBhdGg7XG5cdH1cblxuXHRpZiAodGhpcy5xdWVyeSkge1xuXHRcdHVyaS5xdWVyeSA9IHRoaXMucXVlcnkuY2xvbmUoKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgKHRoaXMuZnJhZ21lbnQpID09PSAnc3RyaW5nJykge1xuXHRcdHVyaS5mcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQ7XG5cdH1cblxuXHRyZXR1cm4gdXJpO1xufTtcblxuLyoqXG4gKiBSZWNvbXBvc2VzIFVSSSBjb21wb25lbnRzIHRvIFVSSSBzdHJpbmcsXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTUuM1xuICogQHJldHVybnMge3N0cmluZ30gVVJJIHN0cmluZy5cbiAqL1xuVVJJLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIHJlc3VsdCA9ICcnO1xuXG5cdGlmICh0aGlzLnNjaGVtZSAhPT0gdW5kZWZpbmVkICYmIHRoaXMuc2NoZW1lICE9PSBudWxsKSB7XG5cdFx0dmFyIHNjaGVtZSA9IFN0cmluZyh0aGlzLnNjaGVtZSk7XG5cdFx0aWYgKCFTQ0hFTUVfUkVHRVhQLnRlc3Qoc2NoZW1lKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKEVSUk9SX1NDSEVNRSk7XG5cdFx0fVxuXHRcdHJlc3VsdCArPSBzY2hlbWUgKyAnOic7XG5cdH1cblxuXHRpZiAodGhpcy5hdXRob3JpdHkpIHtcblx0XHRyZXN1bHQgKz0gJy8vJyArIHRoaXMuYXV0aG9yaXR5LnRvU3RyaW5nKCk7XG5cdH1cblxuXHR2YXIgcGF0aCA9IHRoaXMucGF0aCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMucGF0aCA9PT0gbnVsbCA/XG5cdFx0JycgOiBTdHJpbmcodGhpcy5wYXRoKTtcblx0cmVzdWx0ICs9IHBlcmNlbnRFbmNvZGluZ0hlbHBlci5lbmNvZGVQYXRoKHBhdGgpO1xuXG5cdGlmICh0aGlzLnF1ZXJ5KSB7XG5cdFx0cmVzdWx0ICs9ICc/JyArIHRoaXMucXVlcnkudG9TdHJpbmcoKTtcblx0fVxuXG5cdGlmICh0aGlzLmZyYWdtZW50ICE9PSB1bmRlZmluZWQgJiYgdGhpcy5mcmFnbWVudCAhPT0gbnVsbCkge1xuXHRcdHZhciBmcmFnbWVudCA9IFN0cmluZyh0aGlzLmZyYWdtZW50KTtcblx0XHRyZXN1bHQgKz0gJyMnICsgcGVyY2VudEVuY29kaW5nSGVscGVyLmVuY29kZUZyYWdtZW50KGZyYWdtZW50KTtcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgcmVmZXJlbmNlIGZvciByZWxhdGl2ZSByZXNvbHV0aW9uLlxuICogV2hvbGUgYWxnb3JpdGhtIGhhcyBiZWVuIHRha2VuIGZyb21cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tNS4yLjJcbiAqIEBwYXJhbSB7VVJJfSBiYXNlVXJpIEJhc2UgVVJJIGZvciByZXNvbHV0aW9uLlxuICogQHBhcmFtIHtVUkl9IHJlZmVyZW5jZVVyaSBSZWZlcmVuY2UgVVJJIHRvIHJlc29sdmUuXG4gKiBAcmV0dXJucyB7VVJJfSBDb21wb25lbnRzIG9mIHRhcmdldCBVUkkuXG4gKi9cbi8qanNoaW50IG1heGRlcHRoOmZhbHNlICovXG4vKmpzaGludCBtYXhjb21wbGV4aXR5OmZhbHNlICovXG5mdW5jdGlvbiB0cmFuc2Zvcm1SZWZlcmVuY2UoYmFzZVVyaSwgcmVmZXJlbmNlVXJpKSB7XG5cdHZhciB0YXJnZXRVcmkgPSBuZXcgVVJJKCcnKTtcblxuXHRpZiAocmVmZXJlbmNlVXJpLnNjaGVtZSkge1xuXHRcdHRhcmdldFVyaS5zY2hlbWUgPSByZWZlcmVuY2VVcmkuc2NoZW1lO1xuXHRcdHRhcmdldFVyaS5hdXRob3JpdHkgPSByZWZlcmVuY2VVcmkuYXV0aG9yaXR5ID9cblx0XHRcdHJlZmVyZW5jZVVyaS5hdXRob3JpdHkuY2xvbmUoKSA6IHJlZmVyZW5jZVVyaS5hdXRob3JpdHk7XG5cdFx0dGFyZ2V0VXJpLnBhdGggPSByZW1vdmVEb3RTZWdtZW50cyhyZWZlcmVuY2VVcmkucGF0aCk7XG5cdFx0dGFyZ2V0VXJpLnF1ZXJ5ID0gcmVmZXJlbmNlVXJpLnF1ZXJ5ID9cblx0XHRcdHJlZmVyZW5jZVVyaS5xdWVyeS5jbG9uZSgpIDogcmVmZXJlbmNlVXJpLnF1ZXJ5O1xuXHR9IGVsc2Uge1xuXHRcdGlmIChyZWZlcmVuY2VVcmkuYXV0aG9yaXR5KSB7XG5cdFx0XHR0YXJnZXRVcmkuYXV0aG9yaXR5ID0gcmVmZXJlbmNlVXJpLmF1dGhvcml0eSA/XG5cdFx0XHRcdHJlZmVyZW5jZVVyaS5hdXRob3JpdHkuY2xvbmUoKSA6IHJlZmVyZW5jZVVyaS5hdXRob3JpdHk7XG5cdFx0XHR0YXJnZXRVcmkucGF0aCA9IHJlbW92ZURvdFNlZ21lbnRzKHJlZmVyZW5jZVVyaS5wYXRoKTtcblx0XHRcdHRhcmdldFVyaS5xdWVyeSA9IHJlZmVyZW5jZVVyaS5xdWVyeSA/XG5cdFx0XHRcdHJlZmVyZW5jZVVyaS5xdWVyeS5jbG9uZSgpIDogcmVmZXJlbmNlVXJpLnF1ZXJ5O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAocmVmZXJlbmNlVXJpLnBhdGggPT09ICcnKSB7XG5cdFx0XHRcdHRhcmdldFVyaS5wYXRoID0gYmFzZVVyaS5wYXRoO1xuXHRcdFx0XHRpZiAocmVmZXJlbmNlVXJpLnF1ZXJ5KSB7XG5cdFx0XHRcdFx0dGFyZ2V0VXJpLnF1ZXJ5ID0gcmVmZXJlbmNlVXJpLnF1ZXJ5LmNsb25lKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGFyZ2V0VXJpLnF1ZXJ5ID0gYmFzZVVyaS5xdWVyeSA/XG5cdFx0XHRcdFx0XHRiYXNlVXJpLnF1ZXJ5LmNsb25lKCkgOiBiYXNlVXJpLnF1ZXJ5O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAocmVmZXJlbmNlVXJpLnBhdGhbMF0gPT09ICcvJykge1xuXHRcdFx0XHRcdHRhcmdldFVyaS5wYXRoID1cblx0XHRcdFx0XHRcdHJlbW92ZURvdFNlZ21lbnRzKHJlZmVyZW5jZVVyaS5wYXRoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0YXJnZXRVcmkucGF0aCA9XG5cdFx0XHRcdFx0XHRtZXJnZShiYXNlVXJpLCByZWZlcmVuY2VVcmkpO1xuXHRcdFx0XHRcdHRhcmdldFVyaS5wYXRoID1cblx0XHRcdFx0XHRcdHJlbW92ZURvdFNlZ21lbnRzKHRhcmdldFVyaS5wYXRoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0YXJnZXRVcmkucXVlcnkgPSByZWZlcmVuY2VVcmkucXVlcnkgP1xuXHRcdFx0XHRcdHJlZmVyZW5jZVVyaS5xdWVyeS5jbG9uZSgpIDogcmVmZXJlbmNlVXJpLnF1ZXJ5O1xuXHRcdFx0fVxuXHRcdFx0dGFyZ2V0VXJpLmF1dGhvcml0eSA9IGJhc2VVcmkuYXV0aG9yaXR5ID9cblx0XHRcdFx0YmFzZVVyaS5hdXRob3JpdHkuY2xvbmUoKSA6IGJhc2VVcmkuYXV0aG9yaXR5O1xuXHRcdH1cblx0XHR0YXJnZXRVcmkuc2NoZW1lID0gYmFzZVVyaS5zY2hlbWU7XG5cdH1cblxuXHR0YXJnZXRVcmkuZnJhZ21lbnQgPSByZWZlcmVuY2VVcmkuZnJhZ21lbnQ7XG5cdHJldHVybiB0YXJnZXRVcmk7XG59XG5cbi8qKlxuICogTWVyZ2VzIGEgcmVsYXRpdmUtcGF0aCByZWZlcmVuY2Ugd2l0aCB0aGUgcGF0aCBvZiB0aGUgYmFzZSBVUkkuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTUuMi4zXG4gKiBAcGFyYW0ge1VSSX0gYmFzZVVyaSBDb21wb25lbnRzIG9mIGJhc2UgVVJJLlxuICogQHBhcmFtIHtVUkl9IHJlZmVyZW5jZVVyaSBDb21wb25lbnRzIG9mIHJlZmVyZW5jZSBVUkkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBNZXJnZWQgcGF0aC5cbiAqL1xuZnVuY3Rpb24gbWVyZ2UoYmFzZVVyaSwgcmVmZXJlbmNlVXJpKSB7XG5cdGlmIChiYXNlVXJpLmF1dGhvcml0eSAmJiBiYXNlVXJpLnBhdGggPT09ICcnKSB7XG5cdFx0cmV0dXJuICcvJyArIHJlZmVyZW5jZVVyaS5wYXRoO1xuXHR9XG5cblx0dmFyIHNlZ21lbnRzU3RyaW5nID0gYmFzZVVyaS5wYXRoLmluZGV4T2YoJy8nKSAhPT0gLTEgP1xuXHRcdGJhc2VVcmkucGF0aC5yZXBsYWNlKC9cXC9bXlxcL10rJC8sICcvJykgOiAnJztcblxuXHRyZXR1cm4gc2VnbWVudHNTdHJpbmcgKyByZWZlcmVuY2VVcmkucGF0aDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGRvdHMgc2VnbWVudHMgZnJvbSBVUkkgcGF0aC5cbiAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tNS4yLjRcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmlQYXRoIFVSSSBwYXRoIHdpdGggcG9zc2libGUgZG90IHNlZ21lbnRzLlxuICogQHJldHVybnMge3N0cmluZ30gVVJJIHBhdGggd2l0aG91dCBkb3Qgc2VnbWVudHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZURvdFNlZ21lbnRzKHVyaVBhdGgpIHtcblx0aWYgKCF1cmlQYXRoKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0dmFyIGlucHV0QnVmZmVyID0gdXJpUGF0aCxcblx0XHRuZXdCdWZmZXIgPSAnJyxcblx0XHRuZXh0U2VnbWVudCA9ICcnLFxuXHRcdG91dHB1dEJ1ZmZlciA9ICcnO1xuXG5cdHdoaWxlIChpbnB1dEJ1ZmZlci5sZW5ndGggIT09IDApIHtcblxuXHRcdC8vIElmIHRoZSBpbnB1dCBidWZmZXIgYmVnaW5zIHdpdGggYSBwcmVmaXggb2YgXCIuLi9cIiBvciBcIi4vXCIsXG5cdFx0Ly8gdGhlbiByZW1vdmUgdGhhdCBwcmVmaXggZnJvbSB0aGUgaW5wdXQgYnVmZmVyXG5cdFx0bmV3QnVmZmVyID0gaW5wdXRCdWZmZXIucmVwbGFjZSgvXlxcLj9cXC5cXC8vLCAnJyk7XG5cdFx0aWYgKG5ld0J1ZmZlciAhPT0gaW5wdXRCdWZmZXIpIHtcblx0XHRcdGlucHV0QnVmZmVyID0gbmV3QnVmZmVyO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Ly8gaWYgdGhlIGlucHV0IGJ1ZmZlciBiZWdpbnMgd2l0aCBhIHByZWZpeCBvZiBcIi8uL1wiIG9yIFwiLy5cIixcblx0XHQvLyB3aGVyZSBcIi5cIiBpcyBhIGNvbXBsZXRlIHBhdGggc2VnbWVudCwgdGhlbiByZXBsYWNlIHRoYXRcblx0XHQvLyBwcmVmaXggd2l0aCBcIi9cIiBpbiB0aGUgaW5wdXQgYnVmZmVyXG5cdFx0bmV3QnVmZmVyID0gaW5wdXRCdWZmZXIucmVwbGFjZSgvXigoXFwvXFwuXFwvKXwoXFwvXFwuJCkpLywgJy8nKTtcblx0XHRpZiAobmV3QnVmZmVyICE9PSBpbnB1dEJ1ZmZlcikge1xuXHRcdFx0aW5wdXRCdWZmZXIgPSBuZXdCdWZmZXI7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHQvLyBpZiB0aGUgaW5wdXQgYnVmZmVyIGJlZ2lucyB3aXRoIGEgcHJlZml4IG9mIFwiLy4uL1wiIG9yIFwiLy4uXCIsXG5cdFx0Ly8gd2hlcmUgXCIuLlwiIGlzIGEgY29tcGxldGUgcGF0aCBzZWdtZW50LCB0aGVuIHJlcGxhY2UgdGhhdFxuXHRcdC8vIHByZWZpeCB3aXRoIFwiL1wiIGluIHRoZSBpbnB1dCBidWZmZXIgYW5kIHJlbW92ZSB0aGUgbGFzdFxuXHRcdC8vIHNlZ21lbnQgYW5kIGl0cyBwcmVjZWRpbmcgXCIvXCIgKGlmIGFueSkgZnJvbSB0aGUgb3V0cHV0XG5cdFx0Ly8gYnVmZmVyXG5cdFx0bmV3QnVmZmVyID0gaW5wdXRCdWZmZXIucmVwbGFjZSgvXigoXFwvXFwuXFwuXFwvKXwoXFwvXFwuXFwuJCkpLywgJy8nKTtcblx0XHRpZiAobmV3QnVmZmVyICE9PSBpbnB1dEJ1ZmZlcikge1xuXHRcdFx0b3V0cHV0QnVmZmVyID0gb3V0cHV0QnVmZmVyLnJlcGxhY2UoL1xcL1teXFwvXSskLywgJycpO1xuXHRcdFx0aW5wdXRCdWZmZXIgPSBuZXdCdWZmZXI7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHQvLyBpZiB0aGUgaW5wdXQgYnVmZmVyIGNvbnNpc3RzIG9ubHkgb2YgXCIuXCIgb3IgXCIuLlwiLCB0aGVuIHJlbW92ZVxuXHRcdC8vIHRoYXQgZnJvbSB0aGUgaW5wdXQgYnVmZmVyXG5cdFx0aWYgKGlucHV0QnVmZmVyID09PSAnLicgfHwgaW5wdXRCdWZmZXIgPT09ICcuLicpIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblxuXHRcdC8vIG1vdmUgdGhlIGZpcnN0IHBhdGggc2VnbWVudCBpbiB0aGUgaW5wdXQgYnVmZmVyIHRvIHRoZSBlbmQgb2Zcblx0XHQvLyB0aGUgb3V0cHV0IGJ1ZmZlciwgaW5jbHVkaW5nIHRoZSBpbml0aWFsIFwiL1wiIGNoYXJhY3RlciAoaWZcblx0XHQvLyBhbnkpIGFuZCBhbnkgc3Vic2VxdWVudCBjaGFyYWN0ZXJzIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZyxcblx0XHQvLyB0aGUgbmV4dCBcIi9cIiBjaGFyYWN0ZXIgb3IgdGhlIGVuZCBvZiB0aGUgaW5wdXQgYnVmZmVyXG5cdFx0bmV4dFNlZ21lbnQgPSAvXlxcLz9bXlxcL10qKFxcL3wkKS8uZXhlYyhpbnB1dEJ1ZmZlcilbMF07XG5cdFx0bmV4dFNlZ21lbnQgPSBuZXh0U2VnbWVudC5yZXBsYWNlKC8oW15cXC9dKShcXC8kKS8sICckMScpO1xuXHRcdGlucHV0QnVmZmVyID0gaW5wdXRCdWZmZXIuc3Vic3RyaW5nKG5leHRTZWdtZW50Lmxlbmd0aCk7XG5cdFx0b3V0cHV0QnVmZmVyICs9IG5leHRTZWdtZW50O1xuXHR9XG5cblx0cmV0dXJuIG91dHB1dEJ1ZmZlcjtcbn0iLCIvKlxuICogY2F0YmVycnktdXJpXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IERlbmlzIFJlY2hrdW5vdiBhbmQgcHJvamVjdCBjb250cmlidXRvcnMuXG4gKlxuICogY2F0YmVycnktdXJpJ3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeS11cmkgdGhhdCBhcmUgbm90IGV4dGVybmFsbHlcbiAqIG1haW50YWluZWQgbGlicmFyaWVzLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBVc2VySW5mbztcblxudmFyIHBlcmNlbnRFbmNvZGluZ0hlbHBlciA9IHJlcXVpcmUoJy4vcGVyY2VudEVuY29kaW5nSGVscGVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBuZXcgaW5zdGFuY2Ugb2YgdXNlciBpbmZvcm1hdGlvbiBjb21wb25lbnQgcGFyc2VyLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjIuMVxuICogQHBhcmFtIHtzdHJpbmc/fSB1c2VySW5mb1N0cmluZyBVc2VyIGluZm9ybWF0aW9uIGNvbXBvbmVudCBzdHJpbmcuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gVXNlckluZm8odXNlckluZm9TdHJpbmcpIHtcblx0aWYgKHR5cGVvZiAodXNlckluZm9TdHJpbmcpID09PSAnc3RyaW5nJyAmJiB1c2VySW5mb1N0cmluZy5sZW5ndGggPiAwKSB7XG5cdFx0dmFyIHBhcnRzID0gdXNlckluZm9TdHJpbmcuc3BsaXQoJzonKTtcblx0XHRpZiAodHlwZW9mIChwYXJ0c1swXSkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHR0aGlzLnVzZXIgPSBwZXJjZW50RW5jb2RpbmdIZWxwZXIuZGVjb2RlKHBhcnRzWzBdKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiAocGFydHNbMV0pID09PSAnc3RyaW5nJykge1xuXHRcdFx0dGhpcy5wYXNzd29yZCA9IHBlcmNlbnRFbmNvZGluZ0hlbHBlci5kZWNvZGUocGFydHNbMV0pO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEN1cnJlbnQgdXNlciBjb21wb25lbnQuXG4gKiBAdHlwZSB7c3RyaW5nfVxuICovXG5Vc2VySW5mby5wcm90b3R5cGUudXNlciA9IG51bGw7XG5cbi8qKlxuICogQ3VycmVudCBwYXNzd29yZC5cbiAqIEB0eXBlIHtzdHJpbmd9XG4gKi9cblVzZXJJbmZvLnByb3RvdHlwZS5wYXNzd29yZCA9IG51bGw7XG5cbi8qKlxuICogQ2xvbmVzIGN1cnJlbnQgdXNlciBpbmZvcm1hdGlvbi5cbiAqIEByZXR1cm5zIHtVc2VySW5mb30gTmV3IGNsb25lIG9mIGN1cnJlbnQgb2JqZWN0LlxuICovXG5Vc2VySW5mby5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciB1c2VySW5mbyA9IG5ldyBVc2VySW5mbygpO1xuXHRpZiAodHlwZW9mICh0aGlzLnVzZXIpID09PSAnc3RyaW5nJykge1xuXHRcdHVzZXJJbmZvLnVzZXIgPSB0aGlzLnVzZXI7XG5cdH1cblx0aWYgKHR5cGVvZiAodGhpcy5wYXNzd29yZCkgPT09ICdzdHJpbmcnKSB7XG5cdFx0dXNlckluZm8ucGFzc3dvcmQgPSB0aGlzLnBhc3N3b3JkO1xuXHR9XG5cdHJldHVybiB1c2VySW5mbztcbn07XG5cbi8qKlxuICogUmVjb21iaW5lcyB1c2VyIGluZm9ybWF0aW9uIGNvbXBvbmVudHMgdG8gdXNlckluZm8gc3RyaW5nLlxuICogQHJldHVybnMge3N0cmluZ30gVXNlciBpbmZvcm1hdGlvbiBjb21wb25lbnQgc3RyaW5nLlxuICovXG5Vc2VySW5mby5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciByZXN1bHQgPSAnJztcblx0aWYgKHRoaXMudXNlciAhPT0gdW5kZWZpbmVkICYmIHRoaXMudXNlciAhPT0gbnVsbCkge1xuXHRcdHZhciB1c2VyID0gU3RyaW5nKHRoaXMudXNlcik7XG5cdFx0cmVzdWx0ICs9IHBlcmNlbnRFbmNvZGluZ0hlbHBlclxuXHRcdFx0LmVuY29kZVVzZXJJbmZvU3ViQ29tcG9uZW50KHVzZXIpO1xuXHR9XG5cdGlmICh0aGlzLnBhc3N3b3JkICE9PSB1bmRlZmluZWQgJiYgdGhpcy5wYXNzd29yZCAhPT0gbnVsbCkge1xuXHRcdHZhciBwYXNzd29yZCA9IFN0cmluZyh0aGlzLnBhc3N3b3JkKTtcblx0XHRyZXN1bHQgKz0gJzonICsgcGVyY2VudEVuY29kaW5nSGVscGVyXG5cdFx0XHQuZW5jb2RlVXNlckluZm9TdWJDb21wb25lbnQocGFzc3dvcmQpO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwiLypcbiAqIGNhdGJlcnJ5LXVyaVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNCBEZW5pcyBSZWNoa3Vub3YgYW5kIHByb2plY3QgY29udHJpYnV0b3JzLlxuICpcbiAqIGNhdGJlcnJ5LXVyaSdzIGxpY2Vuc2UgZm9sbG93czpcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbixcbiAqIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsXG4gKiBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLFxuICogYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbyxcbiAqIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4gKiBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4gKiBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBUaGlzIGxpY2Vuc2UgYXBwbGllcyB0byBhbGwgcGFydHMgb2YgY2F0YmVycnktdXJpIHRoYXQgYXJlIG5vdCBleHRlcm5hbGx5XG4gKiBtYWludGFpbmVkIGxpYnJhcmllcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMi4xXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHQvLyBcXHVEODAwLVxcdURCRkYgXFx1REMwMC1cXHVERkZGXG5cdC8vIHN1cnJvZ2F0ZXMgcGFpcnMgbGlrZSBlbW9qaSB3ZSBzaG91bGQgaWdub3JlXG5cdC8qKlxuXHQgKiBFbmNvZGVzIGF1dGhvcml0eSB1c2VyIGluZm9ybWF0aW9uIHN1Yi1jb21wb25lbnQgYWNjb3JkaW5nIHRvIFJGQyAzOTg2LlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIENvbXBvbmVudCB0byBlbmNvZGUuXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IEVuY29kZWQgY29tcG9uZW50LlxuXHQgKi9cblx0ZW5jb2RlVXNlckluZm9TdWJDb21wb25lbnQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoXG5cdFx0XHQvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTMuMi4xXG5cdFx0XHQvW15cXHdcXC5+XFwtIVxcJCYnXFwoXFwpXFwqXFwrLDs9XFx1RDgwMC1cXHVEQkZGXFx1REMwMC1cXHVERkZGXS9nLFxuXHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50XG5cdFx0KTtcblx0fSxcblx0LyoqXG5cdCAqIEVuY29kZXMgYXV0aG9yaXR5IGhvc3QgY29tcG9uZW50IGFjY29yZGluZyB0byBSRkMgMzk4Ni5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBDb21wb25lbnQgdG8gZW5jb2RlLlxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSBFbmNvZGVkIGNvbXBvbmVudC5cblx0ICovXG5cdGVuY29kZUhvc3Q6IGZ1bmN0aW9uIChzdHJpbmcpIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoXG5cdFx0XHQvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzk4NiNzZWN0aW9uLTMuMi4yXG5cdFx0XHQvW15cXHdcXC5+XFwtIVxcJCYnXFwoXFwpXFwqXFwrLDs9OlxcW1xcXVxcdUQ4MDAtXFx1REJGRlxcdURDMDAtXFx1REZGRl0vZyxcblx0XHRcdGVuY29kZVVSSUNvbXBvbmVudFxuXHRcdCk7XG5cdH0sXG5cdC8qKlxuXHQgKiBFbmNvZGVzIFVSSSBwYXRoIGNvbXBvbmVudCBhY2NvcmRpbmcgdG8gUkZDIDM5ODYuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgQ29tcG9uZW50IHRvIGVuY29kZS5cblx0ICogQHJldHVybnMge3N0cmluZ30gRW5jb2RlZCBjb21wb25lbnQuXG5cdCAqL1xuXHRlbmNvZGVQYXRoOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5zcGxpdCgvJTJmL2kpXG5cdFx0XHQubWFwKGZ1bmN0aW9uIChwYXJ0KSB7XG5cdFx0XHRcdHJldHVybiBwYXJ0LnJlcGxhY2UoXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjNcblx0XHRcdFx0XHQvW15cXHdcXC5+XFwtIVxcJCYnXFwoXFwpXFwqXFwrLDs9OkBcXC9cXHVEODAwLVxcdURCRkZcXHVEQzAwLVxcdURGRkZdL2csXG5cdFx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50XG5cdFx0XHRcdCk7XG5cdFx0XHR9KVxuXHRcdFx0LnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VycmVudCkge1xuXHRcdFx0XHRpZiAoIXByZXYpIHtcblx0XHRcdFx0XHRyZXR1cm4gY3VycmVudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWN1cnJlbnQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJldjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcHJldiArICclMkYnICsgY3VycmVudDtcblx0XHRcdH0sICcnKTtcblx0fSxcblx0LyoqXG5cdCAqIEVuY29kZXMgcXVlcnkgc3ViLWNvbXBvbmVudCBhY2NvcmRpbmcgdG8gUkZDIDM5ODYuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgQ29tcG9uZW50IHRvIGVuY29kZS5cblx0ICogQHJldHVybnMge3N0cmluZ30gRW5jb2RlZCBjb21wb25lbnQuXG5cdCAqL1xuXHRlbmNvZGVRdWVyeVN1YkNvbXBvbmVudDogZnVuY3Rpb24gKHN0cmluZykge1xuXHRcdHJldHVybiBzdHJpbmcucmVwbGFjZShcblx0XHRcdC8vIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2I3NlY3Rpb24tMy40XG5cdFx0XHQvW15cXHdcXC5+XFwtIVxcJCdcXChcXClcXCpcXCssOzpAXFwvXFw/XFx1RDgwMC1cXHVEQkZGXFx1REMwMC1cXHVERkZGXS9nLFxuXHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50XG5cdFx0KTtcblx0fSxcblxuXHQvKipcblx0ICogRW5jb2RlcyBVUkkgZnJhZ21lbnQgY29tcG9uZW50IGFjY29yZGluZyB0byBSRkMgMzk4Ni5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBDb21wb25lbnQgdG8gZW5jb2RlLlxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSBFbmNvZGVkIGNvbXBvbmVudC5cblx0ICovXG5cdGVuY29kZUZyYWdtZW50OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKFxuXHRcdFx0Ly8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM5ODYjc2VjdGlvbi0zLjVcblx0XHRcdC9bXlxcd1xcLn5cXC0hXFwkJidcXChcXClcXCpcXCssOz06QFxcL1xcP1xcdUQ4MDAtXFx1REJGRlxcdURDMDAtXFx1REZGRl0vZyxcblx0XHRcdGVuY29kZVVSSUNvbXBvbmVudFxuXHRcdCk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIERlY29kZXMgcGVyY2VudCBlbmNvZGVkIGNvbXBvbmVudC5cblx0ICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBDb21wb25lbnQgdG8gZGVjb2RlLlxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSBEZWNvZGVkIGNvbXBvbmVudC5cblx0ICovXG5cdGRlY29kZTogZnVuY3Rpb24gKHN0cmluZykge1xuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyaW5nKTtcblx0fSxcblxuXHQvKipcblx0ICogRGVjb2RlcyBwZXJjZW50IGVuY29kZWQgcGF0aCBjb21wb25lbnQuXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgQ29tcG9uZW50IHRvIGRlY29kZS5cblx0ICogQHJldHVybnMge3N0cmluZ30gRGVjb2RlZCBwYXRoIGNvbXBvbmVudC5cblx0ICovXG5cdGRlY29kZVBhdGg6IGZ1bmN0aW9uIChzdHJpbmcpIHtcblx0XHRyZXR1cm4gc3RyaW5nLnNwbGl0KC8lMmYvaSlcblx0XHRcdC5tYXAoZGVjb2RlVVJJQ29tcG9uZW50KVxuXHRcdFx0LnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VycmVudCkge1xuXHRcdFx0XHRpZiAoIXByZXYpIHtcblx0XHRcdFx0XHRyZXR1cm4gY3VycmVudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWN1cnJlbnQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJldjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcHJldiArICclMkYnICsgY3VycmVudDtcblx0XHRcdH0sICcnKTtcblx0fVxufTsiLCIvLyBDcmVhdGUgYSByYW5nZSBvYmplY3QgZm9yIGVmZmljZW50bHkgcmVuZGVyaW5nIHN0cmluZ3MgdG8gZWxlbWVudHMuXG52YXIgcmFuZ2U7XG5cbmZ1bmN0aW9uIGVtcHR5KG8pIHtcbiAgICBmb3IgKHZhciBrIGluIG8pIHtcbiAgICAgICAgaWYgKG8uaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gdG9FbGVtZW50KHN0cikge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICByYW5nZS5zZWxlY3ROb2RlKGRvY3VtZW50LmJvZHkpO1xuICAgIH1cblxuICAgIHZhciBmcmFnbWVudDtcbiAgICBpZiAocmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KSB7XG4gICAgICAgIGZyYWdtZW50ID0gcmFuZ2UuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHN0cik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdib2R5Jyk7XG4gICAgICAgIGZyYWdtZW50LmlubmVySFRNTCA9IHN0cjtcbiAgICB9XG4gICAgcmV0dXJuIGZyYWdtZW50LmNoaWxkTm9kZXNbMF07XG59XG5cbnZhciBzcGVjaWFsRWxIYW5kbGVycyA9IHtcbiAgICAvKipcbiAgICAgKiBOZWVkZWQgZm9yIElFLiBBcHBhcmVudGx5IElFIGRvZXNuJ3QgdGhpbmtcbiAgICAgKiB0aGF0IFwic2VsZWN0ZWRcIiBpcyBhbiBhdHRyaWJ1dGUgd2hlbiByZWFkaW5nXG4gICAgICogb3ZlciB0aGUgYXR0cmlidXRlcyB1c2luZyBzZWxlY3RFbC5hdHRyaWJ1dGVzXG4gICAgICovXG4gICAgT1BUSU9OOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgaWYgKChmcm9tRWwuc2VsZWN0ZWQgPSB0b0VsLnNlbGVjdGVkKSkge1xuICAgICAgICAgICAgZnJvbUVsLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcm9tRWwucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcsICcnKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGhlIFwidmFsdWVcIiBhdHRyaWJ1dGUgaXMgc3BlY2lhbCBmb3IgdGhlIDxpbnB1dD4gZWxlbWVudFxuICAgICAqIHNpbmNlIGl0IHNldHMgdGhlIGluaXRpYWwgdmFsdWUuIENoYW5naW5nIHRoZSBcInZhbHVlXCJcbiAgICAgKiBhdHRyaWJ1dGUgd2l0aG91dCBjaGFuZ2luZyB0aGUgXCJ2YWx1ZVwiIHByb3BlcnR5IHdpbGwgaGF2ZVxuICAgICAqIG5vIGVmZmVjdCBzaW5jZSBpdCBpcyBvbmx5IHVzZWQgdG8gdGhlIHNldCB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBTaW1pbGFyIGZvciB0aGUgXCJjaGVja2VkXCIgYXR0cmlidXRlLlxuICAgICAqL1xuICAgIElOUFVUOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgZnJvbUVsLmNoZWNrZWQgPSB0b0VsLmNoZWNrZWQ7XG5cbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPSB0b0VsLnZhbHVlKSB7XG4gICAgICAgICAgICBmcm9tRWwudmFsdWUgPSB0b0VsLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0b0VsLmhhc0F0dHJpYnV0ZSgnY2hlY2tlZCcpKSB7XG4gICAgICAgICAgICBmcm9tRWwucmVtb3ZlQXR0cmlidXRlKCdjaGVja2VkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRvRWwuaGFzQXR0cmlidXRlKCd2YWx1ZScpKSB7XG4gICAgICAgICAgICBmcm9tRWwucmVtb3ZlQXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIFRFWFRBUkVBOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gdG9FbC52YWx1ZTtcbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgZnJvbUVsLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZnJvbUVsLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIGZyb21FbC5maXJzdENoaWxkLm5vZGVWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8qKlxuICogTG9vcCBvdmVyIGFsbCBvZiB0aGUgYXR0cmlidXRlcyBvbiB0aGUgdGFyZ2V0IG5vZGUgYW5kIG1ha2Ugc3VyZSB0aGVcbiAqIG9yaWdpbmFsIERPTSBub2RlIGhhcyB0aGUgc2FtZSBhdHRyaWJ1dGVzLiBJZiBhbiBhdHRyaWJ1dGVcbiAqIGZvdW5kIG9uIHRoZSBvcmlnaW5hbCBub2RlIGlzIG5vdCBvbiB0aGUgbmV3IG5vZGUgdGhlbiByZW1vdmUgaXQgZnJvbVxuICogdGhlIG9yaWdpbmFsIG5vZGVcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSBmcm9tTm9kZVxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IHRvTm9kZVxuICovXG5mdW5jdGlvbiBtb3JwaEF0dHJzKGZyb21Ob2RlLCB0b05vZGUpIHtcbiAgICB2YXIgYXR0cnMgPSB0b05vZGUuYXR0cmlidXRlcztcbiAgICB2YXIgaTtcbiAgICB2YXIgYXR0cjtcbiAgICB2YXIgYXR0ck5hbWU7XG4gICAgdmFyIGF0dHJWYWx1ZTtcbiAgICB2YXIgZm91bmRBdHRycyA9IHt9O1xuXG4gICAgZm9yIChpPWF0dHJzLmxlbmd0aC0xOyBpPj0wOyBpLS0pIHtcbiAgICAgICAgYXR0ciA9IGF0dHJzW2ldO1xuICAgICAgICBpZiAoYXR0ci5zcGVjaWZpZWQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgICAgIGF0dHJWYWx1ZSA9IGF0dHIudmFsdWU7XG4gICAgICAgICAgICBmb3VuZEF0dHJzW2F0dHJOYW1lXSA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChmcm9tTm9kZS5nZXRBdHRyaWJ1dGUoYXR0ck5hbWUpICE9PSBhdHRyVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWxldGUgYW55IGV4dHJhIGF0dHJpYnV0ZXMgZm91bmQgb24gdGhlIG9yaWdpbmFsIERPTSBlbGVtZW50IHRoYXQgd2VyZW4ndFxuICAgIC8vIGZvdW5kIG9uIHRoZSB0YXJnZXQgZWxlbWVudC5cbiAgICBhdHRycyA9IGZyb21Ob2RlLmF0dHJpYnV0ZXM7XG5cbiAgICBmb3IgKGk9YXR0cnMubGVuZ3RoLTE7IGk+PTA7IGktLSkge1xuICAgICAgICBhdHRyID0gYXR0cnNbaV07XG4gICAgICAgIGlmIChhdHRyLnNwZWNpZmllZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0ci5uYW1lO1xuICAgICAgICAgICAgaWYgKCFmb3VuZEF0dHJzLmhhc093blByb3BlcnR5KGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQ29waWVzIHRoZSBjaGlsZHJlbiBvZiBvbmUgRE9NIGVsZW1lbnQgdG8gYW5vdGhlciBET00gZWxlbWVudFxuICovXG5mdW5jdGlvbiBtb3ZlQ2hpbGRyZW4oZnJvbUVsLCB0b0VsKSB7XG4gICAgdmFyIGN1ckNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUoY3VyQ2hpbGQpIHtcbiAgICAgICAgdmFyIG5leHRDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB0b0VsLmFwcGVuZENoaWxkKGN1ckNoaWxkKTtcbiAgICAgICAgY3VyQ2hpbGQgPSBuZXh0Q2hpbGQ7XG4gICAgfVxuICAgIHJldHVybiB0b0VsO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0R2V0Tm9kZUtleShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUuaWQ7XG59XG5cbmZ1bmN0aW9uIG1vcnBoZG9tKGZyb21Ob2RlLCB0b05vZGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdG9Ob2RlID09PSAnc3RyaW5nJykge1xuICAgICAgICB0b05vZGUgPSB0b0VsZW1lbnQodG9Ob2RlKTtcbiAgICB9XG5cbiAgICB2YXIgc2F2ZWRFbHMgPSB7fTsgLy8gVXNlZCB0byBzYXZlIG9mZiBET00gZWxlbWVudHMgd2l0aCBJRHNcbiAgICB2YXIgdW5tYXRjaGVkRWxzID0ge307XG4gICAgdmFyIGdldE5vZGVLZXkgPSBvcHRpb25zLmdldE5vZGVLZXkgfHwgZGVmYXVsdEdldE5vZGVLZXk7XG4gICAgdmFyIG9uTm9kZURpc2NhcmRlZCA9IG9wdGlvbnMub25Ob2RlRGlzY2FyZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlTW9ycGhFbCA9IG9wdGlvbnMub25CZWZvcmVNb3JwaEVsIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlTW9ycGhFbENoaWxkcmVuID0gb3B0aW9ucy5vbkJlZm9yZU1vcnBoRWxDaGlsZHJlbiB8fCBub29wO1xuICAgIHZhciBvbkJlZm9yZU5vZGVEaXNjYXJkZWQgPSBvcHRpb25zLm9uQmVmb3JlTm9kZURpc2NhcmRlZCB8fCBub29wO1xuICAgIHZhciBjaGlsZHJlbk9ubHkgPSBvcHRpb25zLmNoaWxkcmVuT25seSA9PT0gdHJ1ZTtcbiAgICB2YXIgbW92ZWRFbHMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHJlbW92ZU5vZGVIZWxwZXIobm9kZSwgbmVzdGVkSW5TYXZlZEVsKSB7XG4gICAgICAgIHZhciBpZCA9IGdldE5vZGVLZXkobm9kZSk7XG4gICAgICAgIC8vIElmIHRoZSBub2RlIGhhcyBhbiBJRCB0aGVuIHNhdmUgaXQgb2ZmIHNpbmNlIHdlIHdpbGwgd2FudFxuICAgICAgICAvLyB0byByZXVzZSBpdCBpbiBjYXNlIHRoZSB0YXJnZXQgRE9NIHRyZWUgaGFzIGEgRE9NIGVsZW1lbnRcbiAgICAgICAgLy8gd2l0aCB0aGUgc2FtZSBJRFxuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHNhdmVkRWxzW2lkXSA9IG5vZGU7XG4gICAgICAgIH0gZWxzZSBpZiAoIW5lc3RlZEluU2F2ZWRFbCkge1xuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIG5vdCBuZXN0ZWQgaW4gYSBzYXZlZCBlbGVtZW50IHRoZW4gd2Uga25vdyB0aGF0IHRoaXMgbm9kZSBoYXMgYmVlblxuICAgICAgICAgICAgLy8gY29tcGxldGVseSBkaXNjYXJkZWQgYW5kIHdpbGwgbm90IGV4aXN0IGluIHRoZSBmaW5hbCBET00uXG4gICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgdmFyIGN1ckNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICAgICAgd2hpbGUoY3VyQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVOb2RlSGVscGVyKGN1ckNoaWxkLCBuZXN0ZWRJblNhdmVkRWwgfHwgaWQpO1xuICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YWxrRGlzY2FyZGVkQ2hpbGROb2Rlcyhub2RlKSB7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICB2YXIgY3VyQ2hpbGQgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB3aGlsZShjdXJDaGlsZCkge1xuXG5cbiAgICAgICAgICAgICAgICBpZiAoIWdldE5vZGVLZXkoY3VyQ2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byBoYW5kbGUgbm9kZXMgdGhhdCBkb24ndCBoYXZlIGFuIElEIHRvIGF2b2lkIGRvdWJsZVxuICAgICAgICAgICAgICAgICAgICAvLyB3YWxraW5nIHRoZSBzYW1lIHNhdmVkIGVsZW1lbnQuXG5cbiAgICAgICAgICAgICAgICAgICAgb25Ob2RlRGlzY2FyZGVkKGN1ckNoaWxkKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXYWxrIHJlY3Vyc2l2ZWx5XG4gICAgICAgICAgICAgICAgICAgIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKGN1ckNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjdXJDaGlsZCA9IGN1ckNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlLCBwYXJlbnROb2RlLCBhbHJlYWR5VmlzaXRlZCkge1xuICAgICAgICBpZiAob25CZWZvcmVOb2RlRGlzY2FyZGVkKG5vZGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgaWYgKGFscmVhZHlWaXNpdGVkKSB7XG4gICAgICAgICAgICBpZiAoIWdldE5vZGVLZXkobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQobm9kZSk7XG4gICAgICAgICAgICAgICAgd2Fsa0Rpc2NhcmRlZENoaWxkTm9kZXMobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW1vdmVOb2RlSGVscGVyKG5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9ycGhFbChmcm9tRWwsIHRvRWwsIGFscmVhZHlWaXNpdGVkLCBjaGlsZHJlbk9ubHkpIHtcbiAgICAgICAgdmFyIHRvRWxLZXkgPSBnZXROb2RlS2V5KHRvRWwpO1xuICAgICAgICBpZiAodG9FbEtleSkge1xuICAgICAgICAgICAgLy8gSWYgYW4gZWxlbWVudCB3aXRoIGFuIElEIGlzIGJlaW5nIG1vcnBoZWQgdGhlbiBpdCBpcyB3aWxsIGJlIGluIHRoZSBmaW5hbFxuICAgICAgICAgICAgLy8gRE9NIHNvIGNsZWFyIGl0IG91dCBvZiB0aGUgc2F2ZWQgZWxlbWVudHMgY29sbGVjdGlvblxuICAgICAgICAgICAgZGVsZXRlIHNhdmVkRWxzW3RvRWxLZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjaGlsZHJlbk9ubHkpIHtcbiAgICAgICAgICAgIGlmIChvbkJlZm9yZU1vcnBoRWwoZnJvbUVsLCB0b0VsKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1vcnBoQXR0cnMoZnJvbUVsLCB0b0VsKTtcblxuICAgICAgICAgICAgaWYgKG9uQmVmb3JlTW9ycGhFbENoaWxkcmVuKGZyb21FbCwgdG9FbCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyb21FbC50YWdOYW1lICE9ICdURVhUQVJFQScpIHtcbiAgICAgICAgICAgIHZhciBjdXJUb05vZGVDaGlsZCA9IHRvRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIHZhciBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbUVsLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICB2YXIgY3VyVG9Ob2RlSWQ7XG5cbiAgICAgICAgICAgIHZhciBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB2YXIgdG9OZXh0U2libGluZztcbiAgICAgICAgICAgIHZhciBzYXZlZEVsO1xuICAgICAgICAgICAgdmFyIHVubWF0Y2hlZEVsO1xuXG4gICAgICAgICAgICBvdXRlcjogd2hpbGUoY3VyVG9Ob2RlQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICB0b05leHRTaWJsaW5nID0gY3VyVG9Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgY3VyVG9Ob2RlSWQgPSBnZXROb2RlS2V5KGN1clRvTm9kZUNoaWxkKTtcblxuICAgICAgICAgICAgICAgIHdoaWxlKGN1ckZyb21Ob2RlQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ckZyb21Ob2RlSWQgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICBmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWxyZWFkeVZpc2l0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUlkICYmICh1bm1hdGNoZWRFbCA9IHVubWF0Y2hlZEVsc1tjdXJGcm9tTm9kZUlkXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bm1hdGNoZWRFbC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChjdXJGcm9tTm9kZUNoaWxkLCB1bm1hdGNoZWRFbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ycGhFbChjdXJGcm9tTm9kZUNoaWxkLCB1bm1hdGNoZWRFbCwgYWxyZWFkeVZpc2l0ZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VyRnJvbU5vZGVUeXBlID0gY3VyRnJvbU5vZGVDaGlsZC5ub2RlVHlwZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSBjdXJUb05vZGVDaGlsZC5ub2RlVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzQ29tcGF0aWJsZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVUeXBlID09PSAxKSB7IC8vIEJvdGggbm9kZXMgYmVpbmcgY29tcGFyZWQgYXJlIEVsZW1lbnQgbm9kZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVDaGlsZC50YWdOYW1lID09PSBjdXJUb05vZGVDaGlsZC50YWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgY29tcGF0aWJsZSBET00gZWxlbWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckZyb21Ob2RlSWQgfHwgY3VyVG9Ob2RlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGVpdGhlciBET00gZWxlbWVudCBoYXMgYW4gSUQgdGhlbiB3ZSBoYW5kbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRob3NlIGRpZmZlcmVudGx5IHNpbmNlIHdlIHdhbnQgdG8gbWF0Y2ggdXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ5IElEXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlSWQgPT09IGN1ckZyb21Ob2RlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0NvbXBhdGlibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbXBhdGlibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgY29tcGF0aWJsZSBET00gZWxlbWVudHMgc28gdHJhbnNmb3JtIHRoZSBjdXJyZW50IFwiZnJvbVwiIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gbWF0Y2ggdGhlIGN1cnJlbnQgdGFyZ2V0IERPTSBub2RlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3JwaEVsKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkLCBhbHJlYWR5VmlzaXRlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJGcm9tTm9kZVR5cGUgPT09IDMpIHsgLy8gQm90aCBub2RlcyBiZWluZyBjb21wYXJlZCBhcmUgVGV4dCBub2Rlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltcGx5IHVwZGF0ZSBub2RlVmFsdWUgb24gdGhlIG9yaWdpbmFsIG5vZGUgdG8gY2hhbmdlIHRoZSB0ZXh0IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZC5ub2RlVmFsdWUgPSBjdXJUb05vZGVDaGlsZC5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbXBhdGlibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyRnJvbU5vZGVDaGlsZCA9IGZyb21OZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIGNvbXBhdGlibGUgbWF0Y2ggc28gcmVtb3ZlIHRoZSBvbGQgbm9kZSBmcm9tIHRoZSBET00gYW5kIGNvbnRpbnVlIHRyeWluZ1xuICAgICAgICAgICAgICAgICAgICAvLyB0byBmaW5kIGEgbWF0Y2ggaW4gdGhlIG9yaWdpbmFsIERPTVxuICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgYWxyZWFkeVZpc2l0ZWQpO1xuICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjdXJUb05vZGVJZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHNhdmVkRWwgPSBzYXZlZEVsc1tjdXJUb05vZGVJZF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3JwaEVsKHNhdmVkRWwsIGN1clRvTm9kZUNoaWxkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gc2F2ZWRFbDsgLy8gV2Ugd2FudCB0byBhcHBlbmQgdGhlIHNhdmVkIGVsZW1lbnQgaW5zdGVhZFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGN1cnJlbnQgRE9NIGVsZW1lbnQgaW4gdGhlIHRhcmdldCB0cmVlIGhhcyBhbiBJRFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IHdlIGRpZCBub3QgZmluZCBhIG1hdGNoIGluIGFueSBvZiB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2libGluZ3MuIFdlIGp1c3QgcHV0IHRoZSB0YXJnZXQgZWxlbWVudCBpbiB0aGUgb2xkIERPTSB0cmVlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBidXQgaWYgd2UgbGF0ZXIgZmluZCBhbiBlbGVtZW50IGluIHRoZSBvbGQgRE9NIHRyZWUgdGhhdCBoYXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgbWF0Y2hpbmcgSUQgdGhlbiB3ZSB3aWxsIHJlcGxhY2UgdGhlIHRhcmdldCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIG9sZCBlbGVtZW50IGFuZCBtb3JwaCB0aGUgb2xkIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHVubWF0Y2hlZEVsc1tjdXJUb05vZGVJZF0gPSBjdXJUb05vZGVDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElmIHdlIGdvdCB0aGlzIGZhciB0aGVuIHdlIGRpZCBub3QgZmluZCBhIGNhbmRpZGF0ZSBtYXRjaCBmb3Igb3VyIFwidG8gbm9kZVwiXG4gICAgICAgICAgICAgICAgLy8gYW5kIHdlIGV4aGF1c3RlZCBhbGwgb2YgdGhlIGNoaWxkcmVuIFwiZnJvbVwiIG5vZGVzLiBUaGVyZWZvcmUsIHdlIHdpbGwganVzdFxuICAgICAgICAgICAgICAgIC8vIGFwcGVuZCB0aGUgY3VycmVudCBcInRvIG5vZGVcIiB0byB0aGUgZW5kXG4gICAgICAgICAgICAgICAgZnJvbUVsLmFwcGVuZENoaWxkKGN1clRvTm9kZUNoaWxkKTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJUb05vZGVDaGlsZC5ub2RlVHlwZSA9PT0gMSAmJiAoY3VyVG9Ob2RlSWQgfHwgY3VyVG9Ob2RlQ2hpbGQuZmlyc3RDaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnQgdGhhdCB3YXMganVzdCBhZGRlZCB0byB0aGUgb3JpZ2luYWwgRE9NIG1heSBoYXZlXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvbWUgbmVzdGVkIGVsZW1lbnRzIHdpdGggYSBrZXkvSUQgdGhhdCBuZWVkcyB0byBiZSBtYXRjaGVkIHVwXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpdGggb3RoZXIgZWxlbWVudHMuIFdlJ2xsIGFkZCB0aGUgZWxlbWVudCB0byBhIGxpc3Qgc28gdGhhdCB3ZVxuICAgICAgICAgICAgICAgICAgICAvLyBjYW4gbGF0ZXIgcHJvY2VzcyB0aGUgbmVzdGVkIGVsZW1lbnRzIGlmIHRoZXJlIGFyZSBhbnkgdW5tYXRjaGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGtleWVkIGVsZW1lbnRzIHRoYXQgd2VyZSBkaXNjYXJkZWRcbiAgICAgICAgICAgICAgICAgICAgbW92ZWRFbHMucHVzaChjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSB0b05leHRTaWJsaW5nO1xuICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdlIGhhdmUgcHJvY2Vzc2VkIGFsbCBvZiB0aGUgXCJ0byBub2Rlc1wiLiBJZiBjdXJGcm9tTm9kZUNoaWxkIGlzIG5vbi1udWxsIHRoZW5cbiAgICAgICAgICAgIC8vIHdlIHN0aWxsIGhhdmUgc29tZSBmcm9tIG5vZGVzIGxlZnQgb3ZlciB0aGF0IG5lZWQgdG8gYmUgcmVtb3ZlZFxuICAgICAgICAgICAgd2hpbGUoY3VyRnJvbU5vZGVDaGlsZCkge1xuICAgICAgICAgICAgICAgIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgcmVtb3ZlTm9kZShjdXJGcm9tTm9kZUNoaWxkLCBmcm9tRWwsIGFscmVhZHlWaXNpdGVkKTtcbiAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNwZWNpYWxFbEhhbmRsZXIgPSBzcGVjaWFsRWxIYW5kbGVyc1tmcm9tRWwudGFnTmFtZV07XG4gICAgICAgIGlmIChzcGVjaWFsRWxIYW5kbGVyKSB7XG4gICAgICAgICAgICBzcGVjaWFsRWxIYW5kbGVyKGZyb21FbCwgdG9FbCk7XG4gICAgICAgIH1cbiAgICB9IC8vIEVORDogbW9ycGhFbCguLi4pXG5cbiAgICB2YXIgbW9ycGhlZE5vZGUgPSBmcm9tTm9kZTtcbiAgICB2YXIgbW9ycGhlZE5vZGVUeXBlID0gbW9ycGhlZE5vZGUubm9kZVR5cGU7XG4gICAgdmFyIHRvTm9kZVR5cGUgPSB0b05vZGUubm9kZVR5cGU7XG5cbiAgICBpZiAoIWNoaWxkcmVuT25seSkge1xuICAgICAgICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgd2UgYXJlIGdpdmVuIHR3byBET00gbm9kZXMgdGhhdCBhcmUgbm90XG4gICAgICAgIC8vIGNvbXBhdGlibGUgKGUuZy4gPGRpdj4gLS0+IDxzcGFuPiBvciA8ZGl2PiAtLT4gVEVYVClcbiAgICAgICAgaWYgKG1vcnBoZWROb2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKHRvTm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZnJvbU5vZGUudGFnTmFtZSAhPT0gdG9Ob2RlLnRhZ05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgb25Ob2RlRGlzY2FyZGVkKGZyb21Ob2RlKTtcbiAgICAgICAgICAgICAgICAgICAgbW9ycGhlZE5vZGUgPSBtb3ZlQ2hpbGRyZW4oZnJvbU5vZGUsIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodG9Ob2RlLnRhZ05hbWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEdvaW5nIGZyb20gYW4gZWxlbWVudCBub2RlIHRvIGEgdGV4dCBub2RlXG4gICAgICAgICAgICAgICAgbW9ycGhlZE5vZGUgPSB0b05vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobW9ycGhlZE5vZGVUeXBlID09PSAzKSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgICAgaWYgKHRvTm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICAgICAgICBtb3JwaGVkTm9kZS5ub2RlVmFsdWUgPSB0b05vZGUubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBtb3JwaGVkTm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGV4dCBub2RlIHRvIHNvbWV0aGluZyBlbHNlXG4gICAgICAgICAgICAgICAgbW9ycGhlZE5vZGUgPSB0b05vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9ycGhlZE5vZGUgPT09IHRvTm9kZSkge1xuICAgICAgICAvLyBUaGUgXCJ0byBub2RlXCIgd2FzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIFwiZnJvbSBub2RlXCJcbiAgICAgICAgLy8gc28gd2UgaGFkIHRvIHRvc3Mgb3V0IHRoZSBcImZyb20gbm9kZVwiIGFuZCB1c2UgdGhlIFwidG8gbm9kZVwiXG4gICAgICAgIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbW9ycGhFbChtb3JwaGVkTm9kZSwgdG9Ob2RlLCBmYWxzZSwgY2hpbGRyZW5Pbmx5KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2hhdCB3ZSB3aWxsIGRvIGhlcmUgaXMgd2FsayB0aGUgdHJlZSBmb3IgdGhlIERPTSBlbGVtZW50XG4gICAgICAgICAqIHRoYXQgd2FzIG1vdmVkIGZyb20gdGhlIHRhcmdldCBET00gdHJlZSB0byB0aGUgb3JpZ2luYWxcbiAgICAgICAgICogRE9NIHRyZWUgYW5kIHdlIHdpbGwgbG9vayBmb3Iga2V5ZWQgZWxlbWVudHMgdGhhdCBjb3VsZFxuICAgICAgICAgKiBiZSBtYXRjaGVkIHRvIGtleWVkIGVsZW1lbnRzIHRoYXQgd2VyZSBlYXJsaWVyIGRpc2NhcmRlZC5cbiAgICAgICAgICogSWYgd2UgZmluZCBhIG1hdGNoIHRoZW4gd2Ugd2lsbCBtb3ZlIHRoZSBzYXZlZCBlbGVtZW50XG4gICAgICAgICAqIGludG8gdGhlIGZpbmFsIERPTSB0cmVlXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgaGFuZGxlTW92ZWRFbCA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICB2YXIgY3VyQ2hpbGQgPSBlbC5maXJzdENoaWxkO1xuICAgICAgICAgICAgd2hpbGUoY3VyQ2hpbGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSBjdXJDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzYXZlZEVsID0gc2F2ZWRFbHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNhdmVkRWwgJiYgKGN1ckNoaWxkLnRhZ05hbWUgPT09IHNhdmVkRWwudGFnTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHNhdmVkRWwsIGN1ckNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vcnBoRWwoc2F2ZWRFbCwgY3VyQ2hpbGQsIHRydWUgLyogYWxyZWFkeSB2aXNpdGVkIHRoZSBzYXZlZCBlbCB0cmVlICovKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gbmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW1wdHkoc2F2ZWRFbHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VyQ2hpbGQubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTW92ZWRFbChjdXJDaGlsZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY3VyQ2hpbGQgPSBuZXh0U2libGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBUaGUgbG9vcCBiZWxvdyBpcyB1c2VkIHRvIHBvc3NpYmx5IG1hdGNoIHVwIGFueSBkaXNjYXJkZWRcbiAgICAgICAgLy8gZWxlbWVudHMgaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlIHdpdGggZWxlbWVuZXRzIGZyb20gdGhlXG4gICAgICAgIC8vIHRhcmdldCB0cmVlIHRoYXQgd2VyZSBtb3ZlZCBvdmVyIHdpdGhvdXQgdmlzaXRpbmcgdGhlaXJcbiAgICAgICAgLy8gY2hpbGRyZW5cbiAgICAgICAgaWYgKCFlbXB0eShzYXZlZEVscykpIHtcbiAgICAgICAgICAgIGhhbmRsZU1vdmVkRWxzTG9vcDpcbiAgICAgICAgICAgIHdoaWxlIChtb3ZlZEVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbW92ZWRFbHNUZW1wID0gbW92ZWRFbHM7XG4gICAgICAgICAgICAgICAgbW92ZWRFbHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8bW92ZWRFbHNUZW1wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYW5kbGVNb3ZlZEVsKG1vdmVkRWxzVGVtcFtpXSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBhcmUgbm8gbW9yZSB1bm1hdGNoZWQgZWxlbWVudHMgc28gY29tcGxldGVseSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBsb29wXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhayBoYW5kbGVNb3ZlZEVsc0xvb3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJlIHRoZSBcIm9uTm9kZURpc2NhcmRlZFwiIGV2ZW50IGZvciBhbnkgc2F2ZWQgZWxlbWVudHNcbiAgICAgICAgLy8gdGhhdCBuZXZlciBmb3VuZCBhIG5ldyBob21lIGluIHRoZSBtb3JwaGVkIERPTVxuICAgICAgICBmb3IgKHZhciBzYXZlZEVsSWQgaW4gc2F2ZWRFbHMpIHtcbiAgICAgICAgICAgIGlmIChzYXZlZEVscy5oYXNPd25Qcm9wZXJ0eShzYXZlZEVsSWQpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNhdmVkRWwgPSBzYXZlZEVsc1tzYXZlZEVsSWRdO1xuICAgICAgICAgICAgICAgIG9uTm9kZURpc2NhcmRlZChzYXZlZEVsKTtcbiAgICAgICAgICAgICAgICB3YWxrRGlzY2FyZGVkQ2hpbGROb2RlcyhzYXZlZEVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICghY2hpbGRyZW5Pbmx5ICYmIG1vcnBoZWROb2RlICE9PSBmcm9tTm9kZSAmJiBmcm9tTm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIC8vIElmIHdlIGhhZCB0byBzd2FwIG91dCB0aGUgZnJvbSBub2RlIHdpdGggYSBuZXcgbm9kZSBiZWNhdXNlIHRoZSBvbGRcbiAgICAgICAgLy8gbm9kZSB3YXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgdGFyZ2V0IG5vZGUgdGhlbiB3ZSBuZWVkIHRvXG4gICAgICAgIC8vIHJlcGxhY2UgdGhlIG9sZCBET00gbm9kZSBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuIFRoaXMgaXMgb25seVxuICAgICAgICAvLyBwb3NzaWJsZSBpZiB0aGUgb3JpZ2luYWwgRE9NIG5vZGUgd2FzIHBhcnQgb2YgYSBET00gdHJlZSB3aGljaFxuICAgICAgICAvLyB3ZSBrbm93IGlzIHRoZSBjYXNlIGlmIGl0IGhhcyBhIHBhcmVudCBub2RlLlxuICAgICAgICBmcm9tTm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChtb3JwaGVkTm9kZSwgZnJvbU5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBtb3JwaGVkTm9kZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtb3JwaGRvbTtcbiIsIi8qanNoaW50IG5vZGU6dHJ1ZSAqL1xyXG5cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgbWluaW1hbERlc2MgPSBbJ2gnLCAnbWluJywgJ3MnLCAnbXMnLCAnzrxzJywgJ25zJ107XHJcbnZhciB2ZXJib3NlRGVzYyA9IFsnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgJ21pbGxpc2Vjb25kJywgJ21pY3Jvc2Vjb25kJywgJ25hbm9zZWNvbmQnXTtcclxudmFyIGNvbnZlcnQgPSBbNjAqNjAsIDYwLCAxLCAxZTYsIDFlMywgMV07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzb3VyY2UsIG9wdHMpIHtcclxuXHR2YXIgdmVyYm9zZSwgcHJlY2lzZSwgaSwgc3BvdCwgc291cmNlQXRTdGVwLCB2YWxBdFN0ZXAsIGRlY2ltYWxzLCBzdHJBdFN0ZXAsIHJlc3VsdHM7XHJcblxyXG5cdHZlcmJvc2UgPSBmYWxzZTtcclxuXHRwcmVjaXNlID0gZmFsc2U7XHJcblx0aWYgKG9wdHMpIHtcclxuXHRcdHZlcmJvc2UgPSBvcHRzLnZlcmJvc2UgfHwgZmFsc2U7XHJcblx0XHRwcmVjaXNlID0gb3B0cy5wcmVjaXNlIHx8IGZhbHNlO1xyXG5cdH1cclxuXHJcblx0aWYgKCFBcnJheS5pc0FycmF5KHNvdXJjZSkgfHwgc291cmNlLmxlbmd0aCAhPT0gMikge1xyXG5cdFx0cmV0dXJuICcnO1xyXG5cdH1cclxuXHRpZiAodHlwZW9mIHNvdXJjZVswXSAhPT0gJ251bWJlcicgfHwgdHlwZW9mIHNvdXJjZVsxXSAhPT0gJ251bWJlcicpIHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblxyXG5cdHJlc3VsdHMgPSAnJztcclxuXHJcblx0Ly8gZm9yZWFjaCB1bml0XHJcblx0Zm9yIChpID0gMDsgaSA8IDY7IGkrKykge1xyXG5cdFx0c3BvdCA9IGkgPCAzID8gMCA6IDE7IC8vIGdyYWJiaW5nIGZpcnN0IG9yIHNlY29uZCBzcG90IGluIHNvdXJjZSBhcnJheVxyXG5cdFx0c291cmNlQXRTdGVwID0gc291cmNlW3Nwb3RdO1xyXG5cdFx0aWYgKGkgIT09IDMgJiYgaSAhPT0gMCkge1xyXG5cdFx0XHRzb3VyY2VBdFN0ZXAgPSBzb3VyY2VBdFN0ZXAgJSBjb252ZXJ0W2ktMV07IC8vIHRyaW0gb2ZmIHByZXZpb3VzIHBvcnRpb25zXHJcblx0XHR9XHJcblx0XHRpZiAoaSA9PT0gMikge1xyXG5cdFx0XHRzb3VyY2VBdFN0ZXAgKz0gc291cmNlWzFdLzFlOTsgLy8gZ2V0IHBhcnRpYWwgc2Vjb25kcyBmcm9tIG90aGVyIHBvcnRpb24gb2YgdGhlIGFycmF5XHJcblx0XHR9XHJcblx0XHR2YWxBdFN0ZXAgPSBzb3VyY2VBdFN0ZXAgLyBjb252ZXJ0W2ldOyAvLyB2YWwgYXQgdGhpcyB1bml0XHJcblx0XHRpZiAodmFsQXRTdGVwID49IDEpIHtcclxuXHRcdFx0aWYgKHZlcmJvc2UpIHtcclxuXHRcdFx0XHR2YWxBdFN0ZXAgPSBNYXRoLmZsb29yKHZhbEF0U3RlcCk7IC8vIGRlYWwgaW4gd2hvbGUgdW5pdHMsIHN1YnNlcXVlbnQgbGFwcyB3aWxsIGdldCB0aGUgZGVjaW1hbCBwb3J0aW9uXHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFwcmVjaXNlKSB7XHJcblx0XHRcdFx0Ly8gZG9uJ3QgZmxpbmcgdG9vIG1hbnkgZGVjaW1hbHNcclxuXHRcdFx0XHRkZWNpbWFscyA9IHZhbEF0U3RlcCA+PSAxMCA/IDAgOiAyO1xyXG5cdFx0XHRcdHN0ckF0U3RlcCA9IHZhbEF0U3RlcC50b0ZpeGVkKGRlY2ltYWxzKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzdHJBdFN0ZXAgPSB2YWxBdFN0ZXAudG9TdHJpbmcoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoc3RyQXRTdGVwLmluZGV4T2YoJy4nKSA+IC0xICYmIHN0ckF0U3RlcFtzdHJBdFN0ZXAubGVuZ3RoLTFdID09PSAnMCcpIHtcclxuXHRcdFx0XHRzdHJBdFN0ZXAgPSBzdHJBdFN0ZXAucmVwbGFjZSgvXFwuPzArJC8sJycpOyAvLyByZW1vdmUgdHJhaWxpbmcgemVyb3NcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAocmVzdWx0cykge1xyXG5cdFx0XHRcdHJlc3VsdHMgKz0gJyAnOyAvLyBhcHBlbmQgc3BhY2UgaWYgd2UgaGF2ZSBhIHByZXZpb3VzIHZhbHVlXHJcblx0XHRcdH1cclxuXHRcdFx0cmVzdWx0cyArPSBzdHJBdFN0ZXA7IC8vIGFwcGVuZCB0aGUgdmFsdWVcclxuXHRcdFx0Ly8gYXBwZW5kIHVuaXRzXHJcblx0XHRcdGlmICh2ZXJib3NlKSB7XHJcblx0XHRcdFx0cmVzdWx0cyArPSAnICcrdmVyYm9zZURlc2NbaV07XHJcblx0XHRcdFx0aWYgKHN0ckF0U3RlcCAhPT0gJzEnKSB7XHJcblx0XHRcdFx0XHRyZXN1bHRzICs9ICdzJztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVzdWx0cyArPSAnICcrbWluaW1hbERlc2NbaV07XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCF2ZXJib3NlKSB7XHJcblx0XHRcdFx0YnJlYWs7IC8vIHZlcmJvc2UgZ2V0cyBhcyBtYW55IGdyb3VwcyBhcyBuZWNlc3NhcnksIHRoZSByZXN0IGdldCBvbmx5IG9uZVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcmVzdWx0cztcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliJylcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFzYXAgPSByZXF1aXJlKCdhc2FwL3JhdycpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxuLy8gU3RhdGVzOlxuLy9cbi8vIDAgLSBwZW5kaW5nXG4vLyAxIC0gZnVsZmlsbGVkIHdpdGggX3ZhbHVlXG4vLyAyIC0gcmVqZWN0ZWQgd2l0aCBfdmFsdWVcbi8vIDMgLSBhZG9wdGVkIHRoZSBzdGF0ZSBvZiBhbm90aGVyIHByb21pc2UsIF92YWx1ZVxuLy9cbi8vIG9uY2UgdGhlIHN0YXRlIGlzIG5vIGxvbmdlciBwZW5kaW5nICgwKSBpdCBpcyBpbW11dGFibGVcblxuLy8gQWxsIGBfYCBwcmVmaXhlZCBwcm9wZXJ0aWVzIHdpbGwgYmUgcmVkdWNlZCB0byBgX3tyYW5kb20gbnVtYmVyfWBcbi8vIGF0IGJ1aWxkIHRpbWUgdG8gb2JmdXNjYXRlIHRoZW0gYW5kIGRpc2NvdXJhZ2UgdGhlaXIgdXNlLlxuLy8gV2UgZG9uJ3QgdXNlIHN5bWJvbHMgb3IgT2JqZWN0LmRlZmluZVByb3BlcnR5IHRvIGZ1bGx5IGhpZGUgdGhlbVxuLy8gYmVjYXVzZSB0aGUgcGVyZm9ybWFuY2UgaXNuJ3QgZ29vZCBlbm91Z2guXG5cblxuLy8gdG8gYXZvaWQgdXNpbmcgdHJ5L2NhdGNoIGluc2lkZSBjcml0aWNhbCBmdW5jdGlvbnMsIHdlXG4vLyBleHRyYWN0IHRoZW0gdG8gaGVyZS5cbnZhciBMQVNUX0VSUk9SID0gbnVsbDtcbnZhciBJU19FUlJPUiA9IHt9O1xuZnVuY3Rpb24gZ2V0VGhlbihvYmopIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gb2JqLnRoZW47XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgTEFTVF9FUlJPUiA9IGV4O1xuICAgIHJldHVybiBJU19FUlJPUjtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cnlDYWxsT25lKGZuLCBhKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGZuKGEpO1xuICB9IGNhdGNoIChleCkge1xuICAgIExBU1RfRVJST1IgPSBleDtcbiAgICByZXR1cm4gSVNfRVJST1I7XG4gIH1cbn1cbmZ1bmN0aW9uIHRyeUNhbGxUd28oZm4sIGEsIGIpIHtcbiAgdHJ5IHtcbiAgICBmbihhLCBiKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBMQVNUX0VSUk9SID0gZXg7XG4gICAgcmV0dXJuIElTX0VSUk9SO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcblxuZnVuY3Rpb24gUHJvbWlzZShmbikge1xuICBpZiAodHlwZW9mIHRoaXMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZXMgbXVzdCBiZSBjb25zdHJ1Y3RlZCB2aWEgbmV3Jyk7XG4gIH1cbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vdCBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgdGhpcy5fNDUgPSAwO1xuICB0aGlzLl84MSA9IDA7XG4gIHRoaXMuXzY1ID0gbnVsbDtcbiAgdGhpcy5fNTQgPSBudWxsO1xuICBpZiAoZm4gPT09IG5vb3ApIHJldHVybjtcbiAgZG9SZXNvbHZlKGZuLCB0aGlzKTtcbn1cblByb21pc2UuXzEwID0gbnVsbDtcblByb21pc2UuXzk3ID0gbnVsbDtcblByb21pc2UuXzYxID0gbm9vcDtcblxuUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIGlmICh0aGlzLmNvbnN0cnVjdG9yICE9PSBQcm9taXNlKSB7XG4gICAgcmV0dXJuIHNhZmVUaGVuKHRoaXMsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgfVxuICB2YXIgcmVzID0gbmV3IFByb21pc2Uobm9vcCk7XG4gIGhhbmRsZSh0aGlzLCBuZXcgSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcmVzKSk7XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBzYWZlVGhlbihzZWxmLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICByZXR1cm4gbmV3IHNlbGYuY29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXMgPSBuZXcgUHJvbWlzZShub29wKTtcbiAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIGhhbmRsZShzZWxmLCBuZXcgSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcmVzKSk7XG4gIH0pO1xufTtcbmZ1bmN0aW9uIGhhbmRsZShzZWxmLCBkZWZlcnJlZCkge1xuICB3aGlsZSAoc2VsZi5fODEgPT09IDMpIHtcbiAgICBzZWxmID0gc2VsZi5fNjU7XG4gIH1cbiAgaWYgKFByb21pc2UuXzEwKSB7XG4gICAgUHJvbWlzZS5fMTAoc2VsZik7XG4gIH1cbiAgaWYgKHNlbGYuXzgxID09PSAwKSB7XG4gICAgaWYgKHNlbGYuXzQ1ID09PSAwKSB7XG4gICAgICBzZWxmLl80NSA9IDE7XG4gICAgICBzZWxmLl81NCA9IGRlZmVycmVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2VsZi5fNDUgPT09IDEpIHtcbiAgICAgIHNlbGYuXzQ1ID0gMjtcbiAgICAgIHNlbGYuXzU0ID0gW3NlbGYuXzU0LCBkZWZlcnJlZF07XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNlbGYuXzU0LnB1c2goZGVmZXJyZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICBoYW5kbGVSZXNvbHZlZChzZWxmLCBkZWZlcnJlZCk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVJlc29sdmVkKHNlbGYsIGRlZmVycmVkKSB7XG4gIGFzYXAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNiID0gc2VsZi5fODEgPT09IDEgPyBkZWZlcnJlZC5vbkZ1bGZpbGxlZCA6IGRlZmVycmVkLm9uUmVqZWN0ZWQ7XG4gICAgaWYgKGNiID09PSBudWxsKSB7XG4gICAgICBpZiAoc2VsZi5fODEgPT09IDEpIHtcbiAgICAgICAgcmVzb2x2ZShkZWZlcnJlZC5wcm9taXNlLCBzZWxmLl82NSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoZGVmZXJyZWQucHJvbWlzZSwgc2VsZi5fNjUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gdHJ5Q2FsbE9uZShjYiwgc2VsZi5fNjUpO1xuICAgIGlmIChyZXQgPT09IElTX0VSUk9SKSB7XG4gICAgICByZWplY3QoZGVmZXJyZWQucHJvbWlzZSwgTEFTVF9FUlJPUik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc29sdmUoZGVmZXJyZWQucHJvbWlzZSwgcmV0KTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVzb2x2ZShzZWxmLCBuZXdWYWx1ZSkge1xuICAvLyBQcm9taXNlIFJlc29sdXRpb24gUHJvY2VkdXJlOiBodHRwczovL2dpdGh1Yi5jb20vcHJvbWlzZXMtYXBsdXMvcHJvbWlzZXMtc3BlYyN0aGUtcHJvbWlzZS1yZXNvbHV0aW9uLXByb2NlZHVyZVxuICBpZiAobmV3VmFsdWUgPT09IHNlbGYpIHtcbiAgICByZXR1cm4gcmVqZWN0KFxuICAgICAgc2VsZixcbiAgICAgIG5ldyBUeXBlRXJyb3IoJ0EgcHJvbWlzZSBjYW5ub3QgYmUgcmVzb2x2ZWQgd2l0aCBpdHNlbGYuJylcbiAgICApO1xuICB9XG4gIGlmIChcbiAgICBuZXdWYWx1ZSAmJlxuICAgICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgKSB7XG4gICAgdmFyIHRoZW4gPSBnZXRUaGVuKG5ld1ZhbHVlKTtcbiAgICBpZiAodGhlbiA9PT0gSVNfRVJST1IpIHtcbiAgICAgIHJldHVybiByZWplY3Qoc2VsZiwgTEFTVF9FUlJPUik7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRoZW4gPT09IHNlbGYudGhlbiAmJlxuICAgICAgbmV3VmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlXG4gICAgKSB7XG4gICAgICBzZWxmLl84MSA9IDM7XG4gICAgICBzZWxmLl82NSA9IG5ld1ZhbHVlO1xuICAgICAgZmluYWxlKHNlbGYpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRvUmVzb2x2ZSh0aGVuLmJpbmQobmV3VmFsdWUpLCBzZWxmKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgc2VsZi5fODEgPSAxO1xuICBzZWxmLl82NSA9IG5ld1ZhbHVlO1xuICBmaW5hbGUoc2VsZik7XG59XG5cbmZ1bmN0aW9uIHJlamVjdChzZWxmLCBuZXdWYWx1ZSkge1xuICBzZWxmLl84MSA9IDI7XG4gIHNlbGYuXzY1ID0gbmV3VmFsdWU7XG4gIGlmIChQcm9taXNlLl85Nykge1xuICAgIFByb21pc2UuXzk3KHNlbGYsIG5ld1ZhbHVlKTtcbiAgfVxuICBmaW5hbGUoc2VsZik7XG59XG5mdW5jdGlvbiBmaW5hbGUoc2VsZikge1xuICBpZiAoc2VsZi5fNDUgPT09IDEpIHtcbiAgICBoYW5kbGUoc2VsZiwgc2VsZi5fNTQpO1xuICAgIHNlbGYuXzU0ID0gbnVsbDtcbiAgfVxuICBpZiAoc2VsZi5fNDUgPT09IDIpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuXzU0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBoYW5kbGUoc2VsZiwgc2VsZi5fNTRbaV0pO1xuICAgIH1cbiAgICBzZWxmLl81NCA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcHJvbWlzZSl7XG4gIHRoaXMub25GdWxmaWxsZWQgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IG51bGw7XG4gIHRoaXMub25SZWplY3RlZCA9IHR5cGVvZiBvblJlamVjdGVkID09PSAnZnVuY3Rpb24nID8gb25SZWplY3RlZCA6IG51bGw7XG4gIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG59XG5cbi8qKlxuICogVGFrZSBhIHBvdGVudGlhbGx5IG1pc2JlaGF2aW5nIHJlc29sdmVyIGZ1bmN0aW9uIGFuZCBtYWtlIHN1cmVcbiAqIG9uRnVsZmlsbGVkIGFuZCBvblJlamVjdGVkIGFyZSBvbmx5IGNhbGxlZCBvbmNlLlxuICpcbiAqIE1ha2VzIG5vIGd1YXJhbnRlZXMgYWJvdXQgYXN5bmNocm9ueS5cbiAqL1xuZnVuY3Rpb24gZG9SZXNvbHZlKGZuLCBwcm9taXNlKSB7XG4gIHZhciBkb25lID0gZmFsc2U7XG4gIHZhciByZXMgPSB0cnlDYWxsVHdvKGZuLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgIGRvbmUgPSB0cnVlO1xuICAgIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgaWYgKGRvbmUpIHJldHVybjtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgfSlcbiAgaWYgKCFkb25lICYmIHJlcyA9PT0gSVNfRVJST1IpIHtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICByZWplY3QocHJvbWlzZSwgTEFTVF9FUlJPUik7XG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFByb21pc2UgPSByZXF1aXJlKCcuL2NvcmUuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuUHJvbWlzZS5wcm90b3R5cGUuZG9uZSA9IGZ1bmN0aW9uIChvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICB2YXIgc2VsZiA9IGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLnRoZW4uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRoaXM7XG4gIHNlbGYudGhlbihudWxsLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSwgMCk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy9UaGlzIGZpbGUgY29udGFpbnMgdGhlIEVTNiBleHRlbnNpb25zIHRvIHRoZSBjb3JlIFByb21pc2VzL0ErIEFQSVxuXG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJy4vY29yZS5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5cbi8qIFN0YXRpYyBGdW5jdGlvbnMgKi9cblxudmFyIFRSVUUgPSB2YWx1ZVByb21pc2UodHJ1ZSk7XG52YXIgRkFMU0UgPSB2YWx1ZVByb21pc2UoZmFsc2UpO1xudmFyIE5VTEwgPSB2YWx1ZVByb21pc2UobnVsbCk7XG52YXIgVU5ERUZJTkVEID0gdmFsdWVQcm9taXNlKHVuZGVmaW5lZCk7XG52YXIgWkVSTyA9IHZhbHVlUHJvbWlzZSgwKTtcbnZhciBFTVBUWVNUUklORyA9IHZhbHVlUHJvbWlzZSgnJyk7XG5cbmZ1bmN0aW9uIHZhbHVlUHJvbWlzZSh2YWx1ZSkge1xuICB2YXIgcCA9IG5ldyBQcm9taXNlKFByb21pc2UuXzYxKTtcbiAgcC5fODEgPSAxO1xuICBwLl82NSA9IHZhbHVlO1xuICByZXR1cm4gcDtcbn1cblByb21pc2UucmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSByZXR1cm4gdmFsdWU7XG5cbiAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gTlVMTDtcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiBVTkRFRklORUQ7XG4gIGlmICh2YWx1ZSA9PT0gdHJ1ZSkgcmV0dXJuIFRSVUU7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHJldHVybiBGQUxTRTtcbiAgaWYgKHZhbHVlID09PSAwKSByZXR1cm4gWkVSTztcbiAgaWYgKHZhbHVlID09PSAnJykgcmV0dXJuIEVNUFRZU1RSSU5HO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICB2YXIgdGhlbiA9IHZhbHVlLnRoZW47XG4gICAgICBpZiAodHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKHRoZW4uYmluZCh2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICByZWplY3QoZXgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZVByb21pc2UodmFsdWUpO1xufTtcblxuUHJvbWlzZS5hbGwgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc29sdmUoW10pO1xuICAgIHZhciByZW1haW5pbmcgPSBhcmdzLmxlbmd0aDtcbiAgICBmdW5jdGlvbiByZXMoaSwgdmFsKSB7XG4gICAgICBpZiAodmFsICYmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWwudGhlbiA9PT0gUHJvbWlzZS5wcm90b3R5cGUudGhlbikge1xuICAgICAgICAgIHdoaWxlICh2YWwuXzgxID09PSAzKSB7XG4gICAgICAgICAgICB2YWwgPSB2YWwuXzY1O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodmFsLl84MSA9PT0gMSkgcmV0dXJuIHJlcyhpLCB2YWwuXzY1KTtcbiAgICAgICAgICBpZiAodmFsLl84MSA9PT0gMikgcmVqZWN0KHZhbC5fNjUpO1xuICAgICAgICAgIHZhbC50aGVuKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHJlcyhpLCB2YWwpO1xuICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0aGVuID0gdmFsLnRoZW47XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKHRoZW4uYmluZCh2YWwpKTtcbiAgICAgICAgICAgIHAudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgIHJlcyhpLCB2YWwpO1xuICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFyZ3NbaV0gPSB2YWw7XG4gICAgICBpZiAoLS1yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgcmVzb2x2ZShhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXMoaSwgYXJnc1tpXSk7XG4gICAgfVxuICB9KTtcbn07XG5cblByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVqZWN0KHZhbHVlKTtcbiAgfSk7XG59O1xuXG5Qcm9taXNlLnJhY2UgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFsdWVzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpe1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLyogUHJvdG90eXBlIE1ldGhvZHMgKi9cblxuUHJvbWlzZS5wcm90b3R5cGVbJ2NhdGNoJ10gPSBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0ZWQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFByb21pc2UgPSByZXF1aXJlKCcuL2NvcmUuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXSA9IGZ1bmN0aW9uIChmKSB7XG4gIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmKCkpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmKCkpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9jb3JlLmpzJyk7XG5yZXF1aXJlKCcuL2RvbmUuanMnKTtcbnJlcXVpcmUoJy4vZmluYWxseS5qcycpO1xucmVxdWlyZSgnLi9lczYtZXh0ZW5zaW9ucy5qcycpO1xucmVxdWlyZSgnLi9ub2RlLWV4dGVuc2lvbnMuanMnKTtcbnJlcXVpcmUoJy4vc3luY2hyb25vdXMuanMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIHRoZW4vcHJvbWlzZSBzcGVjaWZpYyBleHRlbnNpb25zIHRoYXQgYXJlIG9ubHkgdXNlZnVsXG4vLyBmb3Igbm9kZS5qcyBpbnRlcm9wXG5cbnZhciBQcm9taXNlID0gcmVxdWlyZSgnLi9jb3JlLmpzJyk7XG52YXIgYXNhcCA9IHJlcXVpcmUoJ2FzYXAnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlO1xuXG4vKiBTdGF0aWMgRnVuY3Rpb25zICovXG5cblByb21pc2UuZGVub2RlaWZ5ID0gZnVuY3Rpb24gKGZuLCBhcmd1bWVudENvdW50KSB7XG4gIGlmIChcbiAgICB0eXBlb2YgYXJndW1lbnRDb3VudCA9PT0gJ251bWJlcicgJiYgYXJndW1lbnRDb3VudCAhPT0gSW5maW5pdHlcbiAgKSB7XG4gICAgcmV0dXJuIGRlbm9kZWlmeVdpdGhDb3VudChmbiwgYXJndW1lbnRDb3VudCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRlbm9kZWlmeVdpdGhvdXRDb3VudChmbik7XG4gIH1cbn1cblxudmFyIGNhbGxiYWNrRm4gPSAoXG4gICdmdW5jdGlvbiAoZXJyLCByZXMpIHsnICtcbiAgJ2lmIChlcnIpIHsgcmooZXJyKTsgfSBlbHNlIHsgcnMocmVzKTsgfScgK1xuICAnfSdcbik7XG5mdW5jdGlvbiBkZW5vZGVpZnlXaXRoQ291bnQoZm4sIGFyZ3VtZW50Q291bnQpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudENvdW50OyBpKyspIHtcbiAgICBhcmdzLnB1c2goJ2EnICsgaSk7XG4gIH1cbiAgdmFyIGJvZHkgPSBbXG4gICAgJ3JldHVybiBmdW5jdGlvbiAoJyArIGFyZ3Muam9pbignLCcpICsgJykgeycsXG4gICAgJ3ZhciBzZWxmID0gdGhpczsnLFxuICAgICdyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJzLCByaikgeycsXG4gICAgJ3ZhciByZXMgPSBmbi5jYWxsKCcsXG4gICAgWydzZWxmJ10uY29uY2F0KGFyZ3MpLmNvbmNhdChbY2FsbGJhY2tGbl0pLmpvaW4oJywnKSxcbiAgICAnKTsnLFxuICAgICdpZiAocmVzICYmJyxcbiAgICAnKHR5cGVvZiByZXMgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIHJlcyA9PT0gXCJmdW5jdGlvblwiKSAmJicsXG4gICAgJ3R5cGVvZiByZXMudGhlbiA9PT0gXCJmdW5jdGlvblwiJyxcbiAgICAnKSB7cnMocmVzKTt9JyxcbiAgICAnfSk7JyxcbiAgICAnfTsnXG4gIF0uam9pbignJyk7XG4gIHJldHVybiBGdW5jdGlvbihbJ1Byb21pc2UnLCAnZm4nXSwgYm9keSkoUHJvbWlzZSwgZm4pO1xufVxuZnVuY3Rpb24gZGVub2RlaWZ5V2l0aG91dENvdW50KGZuKSB7XG4gIHZhciBmbkxlbmd0aCA9IE1hdGgubWF4KGZuLmxlbmd0aCAtIDEsIDMpO1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZuTGVuZ3RoOyBpKyspIHtcbiAgICBhcmdzLnB1c2goJ2EnICsgaSk7XG4gIH1cbiAgdmFyIGJvZHkgPSBbXG4gICAgJ3JldHVybiBmdW5jdGlvbiAoJyArIGFyZ3Muam9pbignLCcpICsgJykgeycsXG4gICAgJ3ZhciBzZWxmID0gdGhpczsnLFxuICAgICd2YXIgYXJnczsnLFxuICAgICd2YXIgYXJnTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsnLFxuICAgICdpZiAoYXJndW1lbnRzLmxlbmd0aCA+ICcgKyBmbkxlbmd0aCArICcpIHsnLFxuICAgICdhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggKyAxKTsnLFxuICAgICdmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeycsXG4gICAgJ2FyZ3NbaV0gPSBhcmd1bWVudHNbaV07JyxcbiAgICAnfScsXG4gICAgJ30nLFxuICAgICdyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJzLCByaikgeycsXG4gICAgJ3ZhciBjYiA9ICcgKyBjYWxsYmFja0ZuICsgJzsnLFxuICAgICd2YXIgcmVzOycsXG4gICAgJ3N3aXRjaCAoYXJnTGVuZ3RoKSB7JyxcbiAgICBhcmdzLmNvbmNhdChbJ2V4dHJhJ10pLm1hcChmdW5jdGlvbiAoXywgaW5kZXgpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICdjYXNlICcgKyAoaW5kZXgpICsgJzonICtcbiAgICAgICAgJ3JlcyA9IGZuLmNhbGwoJyArIFsnc2VsZiddLmNvbmNhdChhcmdzLnNsaWNlKDAsIGluZGV4KSkuY29uY2F0KCdjYicpLmpvaW4oJywnKSArICcpOycgK1xuICAgICAgICAnYnJlYWs7J1xuICAgICAgKTtcbiAgICB9KS5qb2luKCcnKSxcbiAgICAnZGVmYXVsdDonLFxuICAgICdhcmdzW2FyZ0xlbmd0aF0gPSBjYjsnLFxuICAgICdyZXMgPSBmbi5hcHBseShzZWxmLCBhcmdzKTsnLFxuICAgICd9JyxcbiAgICBcbiAgICAnaWYgKHJlcyAmJicsXG4gICAgJyh0eXBlb2YgcmVzID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiByZXMgPT09IFwiZnVuY3Rpb25cIikgJiYnLFxuICAgICd0eXBlb2YgcmVzLnRoZW4gPT09IFwiZnVuY3Rpb25cIicsXG4gICAgJykge3JzKHJlcyk7fScsXG4gICAgJ30pOycsXG4gICAgJ307J1xuICBdLmpvaW4oJycpO1xuXG4gIHJldHVybiBGdW5jdGlvbihcbiAgICBbJ1Byb21pc2UnLCAnZm4nXSxcbiAgICBib2R5XG4gICkoUHJvbWlzZSwgZm4pO1xufVxuXG5Qcm9taXNlLm5vZGVpZnkgPSBmdW5jdGlvbiAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgdmFyIGNhbGxiYWNrID1cbiAgICAgIHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09ICdmdW5jdGlvbicgPyBhcmdzLnBvcCgpIDogbnVsbDtcbiAgICB2YXIgY3R4ID0gdGhpcztcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykubm9kZWlmeShjYWxsYmFjaywgY3R4KTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgaWYgKGNhbGxiYWNrID09PSBudWxsIHx8IHR5cGVvZiBjYWxsYmFjayA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIHJlamVjdChleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXNhcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbGJhY2suY2FsbChjdHgsIGV4KTtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuUHJvbWlzZS5wcm90b3R5cGUubm9kZWlmeSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgY3R4KSB7XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRoaXM7XG5cbiAgdGhpcy50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2suY2FsbChjdHgsIG51bGwsIHZhbHVlKTtcbiAgICB9KTtcbiAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGJhY2suY2FsbChjdHgsIGVycik7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJy4vY29yZS5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5Qcm9taXNlLmVuYWJsZVN5bmNocm9ub3VzID0gZnVuY3Rpb24gKCkge1xuICBQcm9taXNlLnByb3RvdHlwZS5pc1BlbmRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSgpID09IDA7XG4gIH07XG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNGdWxmaWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSgpID09IDE7XG4gIH07XG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNSZWplY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0YXRlKCkgPT0gMjtcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fODEgPT09IDMpIHtcbiAgICAgIHJldHVybiB0aGlzLl82NS5nZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBnZXQgYSB2YWx1ZSBvZiBhbiB1bmZ1bGZpbGxlZCBwcm9taXNlLicpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl82NTtcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5nZXRSZWFzb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuXzgxID09PSAzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fNjUuZ2V0UmVhc29uKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZ2V0IGEgcmVqZWN0aW9uIHJlYXNvbiBvZiBhIG5vbi1yZWplY3RlZCBwcm9taXNlLicpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl82NTtcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fODEgPT09IDMpIHtcbiAgICAgIHJldHVybiB0aGlzLl82NS5nZXRTdGF0ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fODEgPT09IC0xIHx8IHRoaXMuXzgxID09PSAtMikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuXzgxO1xuICB9O1xufTtcblxuUHJvbWlzZS5kaXNhYmxlU3luY2hyb25vdXMgPSBmdW5jdGlvbigpIHtcbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNQZW5kaW5nID0gdW5kZWZpbmVkO1xuICBQcm9taXNlLnByb3RvdHlwZS5pc0Z1bGZpbGxlZCA9IHVuZGVmaW5lZDtcbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNSZWplY3RlZCA9IHVuZGVmaW5lZDtcbiAgUHJvbWlzZS5wcm90b3R5cGUuZ2V0VmFsdWUgPSB1bmRlZmluZWQ7XG4gIFByb21pc2UucHJvdG90eXBlLmdldFJlYXNvbiA9IHVuZGVmaW5lZDtcbiAgUHJvbWlzZS5wcm90b3R5cGUuZ2V0U3RhdGUgPSB1bmRlZmluZWQ7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIHJhd0FzYXAgcHJvdmlkZXMgZXZlcnl0aGluZyB3ZSBuZWVkIGV4Y2VwdCBleGNlcHRpb24gbWFuYWdlbWVudC5cbnZhciByYXdBc2FwID0gcmVxdWlyZShcIi4vcmF3XCIpO1xuLy8gUmF3VGFza3MgYXJlIHJlY3ljbGVkIHRvIHJlZHVjZSBHQyBjaHVybi5cbnZhciBmcmVlVGFza3MgPSBbXTtcbi8vIFdlIHF1ZXVlIGVycm9ycyB0byBlbnN1cmUgdGhleSBhcmUgdGhyb3duIGluIHJpZ2h0IG9yZGVyIChGSUZPKS5cbi8vIEFycmF5LWFzLXF1ZXVlIGlzIGdvb2QgZW5vdWdoIGhlcmUsIHNpbmNlIHdlIGFyZSBqdXN0IGRlYWxpbmcgd2l0aCBleGNlcHRpb25zLlxudmFyIHBlbmRpbmdFcnJvcnMgPSBbXTtcbnZhciByZXF1ZXN0RXJyb3JUaHJvdyA9IHJhd0FzYXAubWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKHRocm93Rmlyc3RFcnJvcik7XG5cbmZ1bmN0aW9uIHRocm93Rmlyc3RFcnJvcigpIHtcbiAgICBpZiAocGVuZGluZ0Vycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgcGVuZGluZ0Vycm9ycy5zaGlmdCgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDYWxscyBhIHRhc2sgYXMgc29vbiBhcyBwb3NzaWJsZSBhZnRlciByZXR1cm5pbmcsIGluIGl0cyBvd24gZXZlbnQsIHdpdGggcHJpb3JpdHlcbiAqIG92ZXIgb3RoZXIgZXZlbnRzIGxpa2UgYW5pbWF0aW9uLCByZWZsb3csIGFuZCByZXBhaW50LiBBbiBlcnJvciB0aHJvd24gZnJvbSBhblxuICogZXZlbnQgd2lsbCBub3QgaW50ZXJydXB0LCBub3IgZXZlbiBzdWJzdGFudGlhbGx5IHNsb3cgZG93biB0aGUgcHJvY2Vzc2luZyBvZlxuICogb3RoZXIgZXZlbnRzLCBidXQgd2lsbCBiZSByYXRoZXIgcG9zdHBvbmVkIHRvIGEgbG93ZXIgcHJpb3JpdHkgZXZlbnQuXG4gKiBAcGFyYW0ge3tjYWxsfX0gdGFzayBBIGNhbGxhYmxlIG9iamVjdCwgdHlwaWNhbGx5IGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBub1xuICogYXJndW1lbnRzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGFzYXA7XG5mdW5jdGlvbiBhc2FwKHRhc2spIHtcbiAgICB2YXIgcmF3VGFzaztcbiAgICBpZiAoZnJlZVRhc2tzLmxlbmd0aCkge1xuICAgICAgICByYXdUYXNrID0gZnJlZVRhc2tzLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJhd1Rhc2sgPSBuZXcgUmF3VGFzaygpO1xuICAgIH1cbiAgICByYXdUYXNrLnRhc2sgPSB0YXNrO1xuICAgIHJhd0FzYXAocmF3VGFzayk7XG59XG5cbi8vIFdlIHdyYXAgdGFza3Mgd2l0aCByZWN5Y2xhYmxlIHRhc2sgb2JqZWN0cy4gIEEgdGFzayBvYmplY3QgaW1wbGVtZW50c1xuLy8gYGNhbGxgLCBqdXN0IGxpa2UgYSBmdW5jdGlvbi5cbmZ1bmN0aW9uIFJhd1Rhc2soKSB7XG4gICAgdGhpcy50YXNrID0gbnVsbDtcbn1cblxuLy8gVGhlIHNvbGUgcHVycG9zZSBvZiB3cmFwcGluZyB0aGUgdGFzayBpcyB0byBjYXRjaCB0aGUgZXhjZXB0aW9uIGFuZCByZWN5Y2xlXG4vLyB0aGUgdGFzayBvYmplY3QgYWZ0ZXIgaXRzIHNpbmdsZSB1c2UuXG5SYXdUYXNrLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHRoaXMudGFzay5jYWxsKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGFzYXAub25lcnJvcikge1xuICAgICAgICAgICAgLy8gVGhpcyBob29rIGV4aXN0cyBwdXJlbHkgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gICAgICAgICAgICAvLyBJdHMgbmFtZSB3aWxsIGJlIHBlcmlvZGljYWxseSByYW5kb21pemVkIHRvIGJyZWFrIGFueSBjb2RlIHRoYXRcbiAgICAgICAgICAgIC8vIGRlcGVuZHMgb24gaXRzIGV4aXN0ZW5jZS5cbiAgICAgICAgICAgIGFzYXAub25lcnJvcihlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJbiBhIHdlYiBicm93c2VyLCBleGNlcHRpb25zIGFyZSBub3QgZmF0YWwuIEhvd2V2ZXIsIHRvIGF2b2lkXG4gICAgICAgICAgICAvLyBzbG93aW5nIGRvd24gdGhlIHF1ZXVlIG9mIHBlbmRpbmcgdGFza3MsIHdlIHJldGhyb3cgdGhlIGVycm9yIGluIGFcbiAgICAgICAgICAgIC8vIGxvd2VyIHByaW9yaXR5IHR1cm4uXG4gICAgICAgICAgICBwZW5kaW5nRXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgcmVxdWVzdEVycm9yVGhyb3coKTtcbiAgICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMudGFzayA9IG51bGw7XG4gICAgICAgIGZyZWVUYXNrc1tmcmVlVGFza3MubGVuZ3RoXSA9IHRoaXM7XG4gICAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBVc2UgdGhlIGZhc3Rlc3QgbWVhbnMgcG9zc2libGUgdG8gZXhlY3V0ZSBhIHRhc2sgaW4gaXRzIG93biB0dXJuLCB3aXRoXG4vLyBwcmlvcml0eSBvdmVyIG90aGVyIGV2ZW50cyBpbmNsdWRpbmcgSU8sIGFuaW1hdGlvbiwgcmVmbG93LCBhbmQgcmVkcmF3XG4vLyBldmVudHMgaW4gYnJvd3NlcnMuXG4vL1xuLy8gQW4gZXhjZXB0aW9uIHRocm93biBieSBhIHRhc2sgd2lsbCBwZXJtYW5lbnRseSBpbnRlcnJ1cHQgdGhlIHByb2Nlc3Npbmcgb2Zcbi8vIHN1YnNlcXVlbnQgdGFza3MuIFRoZSBoaWdoZXIgbGV2ZWwgYGFzYXBgIGZ1bmN0aW9uIGVuc3VyZXMgdGhhdCBpZiBhblxuLy8gZXhjZXB0aW9uIGlzIHRocm93biBieSBhIHRhc2ssIHRoYXQgdGhlIHRhc2sgcXVldWUgd2lsbCBjb250aW51ZSBmbHVzaGluZyBhc1xuLy8gc29vbiBhcyBwb3NzaWJsZSwgYnV0IGlmIHlvdSB1c2UgYHJhd0FzYXBgIGRpcmVjdGx5LCB5b3UgYXJlIHJlc3BvbnNpYmxlIHRvXG4vLyBlaXRoZXIgZW5zdXJlIHRoYXQgbm8gZXhjZXB0aW9ucyBhcmUgdGhyb3duIGZyb20geW91ciB0YXNrLCBvciB0byBtYW51YWxseVxuLy8gY2FsbCBgcmF3QXNhcC5yZXF1ZXN0Rmx1c2hgIGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG5tb2R1bGUuZXhwb3J0cyA9IHJhd0FzYXA7XG5mdW5jdGlvbiByYXdBc2FwKHRhc2spIHtcbiAgICBpZiAoIXF1ZXVlLmxlbmd0aCkge1xuICAgICAgICByZXF1ZXN0Rmx1c2goKTtcbiAgICAgICAgZmx1c2hpbmcgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBFcXVpdmFsZW50IHRvIHB1c2gsIGJ1dCBhdm9pZHMgYSBmdW5jdGlvbiBjYWxsLlxuICAgIHF1ZXVlW3F1ZXVlLmxlbmd0aF0gPSB0YXNrO1xufVxuXG52YXIgcXVldWUgPSBbXTtcbi8vIE9uY2UgYSBmbHVzaCBoYXMgYmVlbiByZXF1ZXN0ZWQsIG5vIGZ1cnRoZXIgY2FsbHMgdG8gYHJlcXVlc3RGbHVzaGAgYXJlXG4vLyBuZWNlc3NhcnkgdW50aWwgdGhlIG5leHQgYGZsdXNoYCBjb21wbGV0ZXMuXG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbi8vIGByZXF1ZXN0Rmx1c2hgIGlzIGFuIGltcGxlbWVudGF0aW9uLXNwZWNpZmljIG1ldGhvZCB0aGF0IGF0dGVtcHRzIHRvIGtpY2tcbi8vIG9mZiBhIGBmbHVzaGAgZXZlbnQgYXMgcXVpY2tseSBhcyBwb3NzaWJsZS4gYGZsdXNoYCB3aWxsIGF0dGVtcHQgdG8gZXhoYXVzdFxuLy8gdGhlIGV2ZW50IHF1ZXVlIGJlZm9yZSB5aWVsZGluZyB0byB0aGUgYnJvd3NlcidzIG93biBldmVudCBsb29wLlxudmFyIHJlcXVlc3RGbHVzaDtcbi8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgbmV4dCB0YXNrIHRvIGV4ZWN1dGUgaW4gdGhlIHRhc2sgcXVldWUuIFRoaXMgaXNcbi8vIHByZXNlcnZlZCBiZXR3ZWVuIGNhbGxzIHRvIGBmbHVzaGAgc28gdGhhdCBpdCBjYW4gYmUgcmVzdW1lZCBpZlxuLy8gYSB0YXNrIHRocm93cyBhbiBleGNlcHRpb24uXG52YXIgaW5kZXggPSAwO1xuLy8gSWYgYSB0YXNrIHNjaGVkdWxlcyBhZGRpdGlvbmFsIHRhc2tzIHJlY3Vyc2l2ZWx5LCB0aGUgdGFzayBxdWV1ZSBjYW4gZ3Jvd1xuLy8gdW5ib3VuZGVkLiBUbyBwcmV2ZW50IG1lbW9yeSBleGhhdXN0aW9uLCB0aGUgdGFzayBxdWV1ZSB3aWxsIHBlcmlvZGljYWxseVxuLy8gdHJ1bmNhdGUgYWxyZWFkeS1jb21wbGV0ZWQgdGFza3MuXG52YXIgY2FwYWNpdHkgPSAxMDI0O1xuXG4vLyBUaGUgZmx1c2ggZnVuY3Rpb24gcHJvY2Vzc2VzIGFsbCB0YXNrcyB0aGF0IGhhdmUgYmVlbiBzY2hlZHVsZWQgd2l0aFxuLy8gYHJhd0FzYXBgIHVubGVzcyBhbmQgdW50aWwgb25lIG9mIHRob3NlIHRhc2tzIHRocm93cyBhbiBleGNlcHRpb24uXG4vLyBJZiBhIHRhc2sgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgYGZsdXNoYCBlbnN1cmVzIHRoYXQgaXRzIHN0YXRlIHdpbGwgcmVtYWluXG4vLyBjb25zaXN0ZW50IGFuZCB3aWxsIHJlc3VtZSB3aGVyZSBpdCBsZWZ0IG9mZiB3aGVuIGNhbGxlZCBhZ2Fpbi5cbi8vIEhvd2V2ZXIsIGBmbHVzaGAgZG9lcyBub3QgbWFrZSBhbnkgYXJyYW5nZW1lbnRzIHRvIGJlIGNhbGxlZCBhZ2FpbiBpZiBhblxuLy8gZXhjZXB0aW9uIGlzIHRocm93bi5cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHdoaWxlIChpbmRleCA8IHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICAgIC8vIEFkdmFuY2UgdGhlIGluZGV4IGJlZm9yZSBjYWxsaW5nIHRoZSB0YXNrLiBUaGlzIGVuc3VyZXMgdGhhdCB3ZSB3aWxsXG4gICAgICAgIC8vIGJlZ2luIGZsdXNoaW5nIG9uIHRoZSBuZXh0IHRhc2sgdGhlIHRhc2sgdGhyb3dzIGFuIGVycm9yLlxuICAgICAgICBpbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgcXVldWVbY3VycmVudEluZGV4XS5jYWxsKCk7XG4gICAgICAgIC8vIFByZXZlbnQgbGVha2luZyBtZW1vcnkgZm9yIGxvbmcgY2hhaW5zIG9mIHJlY3Vyc2l2ZSBjYWxscyB0byBgYXNhcGAuXG4gICAgICAgIC8vIElmIHdlIGNhbGwgYGFzYXBgIHdpdGhpbiB0YXNrcyBzY2hlZHVsZWQgYnkgYGFzYXBgLCB0aGUgcXVldWUgd2lsbFxuICAgICAgICAvLyBncm93LCBidXQgdG8gYXZvaWQgYW4gTyhuKSB3YWxrIGZvciBldmVyeSB0YXNrIHdlIGV4ZWN1dGUsIHdlIGRvbid0XG4gICAgICAgIC8vIHNoaWZ0IHRhc2tzIG9mZiB0aGUgcXVldWUgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gZXhlY3V0ZWQuXG4gICAgICAgIC8vIEluc3RlYWQsIHdlIHBlcmlvZGljYWxseSBzaGlmdCAxMDI0IHRhc2tzIG9mZiB0aGUgcXVldWUuXG4gICAgICAgIGlmIChpbmRleCA+IGNhcGFjaXR5KSB7XG4gICAgICAgICAgICAvLyBNYW51YWxseSBzaGlmdCBhbGwgdmFsdWVzIHN0YXJ0aW5nIGF0IHRoZSBpbmRleCBiYWNrIHRvIHRoZVxuICAgICAgICAgICAgLy8gYmVnaW5uaW5nIG9mIHRoZSBxdWV1ZS5cbiAgICAgICAgICAgIGZvciAodmFyIHNjYW4gPSAwLCBuZXdMZW5ndGggPSBxdWV1ZS5sZW5ndGggLSBpbmRleDsgc2NhbiA8IG5ld0xlbmd0aDsgc2NhbisrKSB7XG4gICAgICAgICAgICAgICAgcXVldWVbc2Nhbl0gPSBxdWV1ZVtzY2FuICsgaW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVldWUubGVuZ3RoIC09IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgaW5kZXggPSAwO1xuICAgIGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIGByZXF1ZXN0Rmx1c2hgIGlzIGltcGxlbWVudGVkIHVzaW5nIGEgc3RyYXRlZ3kgYmFzZWQgb24gZGF0YSBjb2xsZWN0ZWQgZnJvbVxuLy8gZXZlcnkgYXZhaWxhYmxlIFNhdWNlTGFicyBTZWxlbml1bSB3ZWIgZHJpdmVyIHdvcmtlciBhdCB0aW1lIG9mIHdyaXRpbmcuXG4vLyBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC8xbUctNVVZR3VwNXF4R2RFTVdraFA2QldDejA1M05VYjJFMVFvVVRVMTZ1QS9lZGl0I2dpZD03ODM3MjQ1OTNcblxuLy8gU2FmYXJpIDYgYW5kIDYuMSBmb3IgZGVza3RvcCwgaVBhZCwgYW5kIGlQaG9uZSBhcmUgdGhlIG9ubHkgYnJvd3NlcnMgdGhhdFxuLy8gaGF2ZSBXZWJLaXRNdXRhdGlvbk9ic2VydmVyIGJ1dCBub3QgdW4tcHJlZml4ZWQgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11c3QgdXNlIGBnbG9iYWxgIGluc3RlYWQgb2YgYHdpbmRvd2AgdG8gd29yayBpbiBib3RoIGZyYW1lcyBhbmQgd2ViXG4vLyB3b3JrZXJzLiBgZ2xvYmFsYCBpcyBhIHByb3Zpc2lvbiBvZiBCcm93c2VyaWZ5LCBNciwgTXJzLCBvciBNb3AuXG52YXIgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcblxuLy8gTXV0YXRpb25PYnNlcnZlcnMgYXJlIGRlc2lyYWJsZSBiZWNhdXNlIHRoZXkgaGF2ZSBoaWdoIHByaW9yaXR5IGFuZCB3b3JrXG4vLyByZWxpYWJseSBldmVyeXdoZXJlIHRoZXkgYXJlIGltcGxlbWVudGVkLlxuLy8gVGhleSBhcmUgaW1wbGVtZW50ZWQgaW4gYWxsIG1vZGVybiBicm93c2Vycy5cbi8vXG4vLyAtIEFuZHJvaWQgNC00LjNcbi8vIC0gQ2hyb21lIDI2LTM0XG4vLyAtIEZpcmVmb3ggMTQtMjlcbi8vIC0gSW50ZXJuZXQgRXhwbG9yZXIgMTFcbi8vIC0gaVBhZCBTYWZhcmkgNi03LjFcbi8vIC0gaVBob25lIFNhZmFyaSA3LTcuMVxuLy8gLSBTYWZhcmkgNi03XG5pZiAodHlwZW9mIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXF1ZXN0Rmx1c2ggPSBtYWtlUmVxdWVzdENhbGxGcm9tTXV0YXRpb25PYnNlcnZlcihmbHVzaCk7XG5cbi8vIE1lc3NhZ2VDaGFubmVscyBhcmUgZGVzaXJhYmxlIGJlY2F1c2UgdGhleSBnaXZlIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIEhUTUxcbi8vIHRhc2sgcXVldWUsIGFyZSBpbXBsZW1lbnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMCwgU2FmYXJpIDUuMC0xLCBhbmQgT3BlcmFcbi8vIDExLTEyLCBhbmQgaW4gd2ViIHdvcmtlcnMgaW4gbWFueSBlbmdpbmVzLlxuLy8gQWx0aG91Z2ggbWVzc2FnZSBjaGFubmVscyB5aWVsZCB0byBhbnkgcXVldWVkIHJlbmRlcmluZyBhbmQgSU8gdGFza3MsIHRoZXlcbi8vIHdvdWxkIGJlIGJldHRlciB0aGFuIGltcG9zaW5nIHRoZSA0bXMgZGVsYXkgb2YgdGltZXJzLlxuLy8gSG93ZXZlciwgdGhleSBkbyBub3Qgd29yayByZWxpYWJseSBpbiBJbnRlcm5ldCBFeHBsb3JlciBvciBTYWZhcmkuXG5cbi8vIEludGVybmV0IEV4cGxvcmVyIDEwIGlzIHRoZSBvbmx5IGJyb3dzZXIgdGhhdCBoYXMgc2V0SW1tZWRpYXRlIGJ1dCBkb2VzXG4vLyBub3QgaGF2ZSBNdXRhdGlvbk9ic2VydmVycy5cbi8vIEFsdGhvdWdoIHNldEltbWVkaWF0ZSB5aWVsZHMgdG8gdGhlIGJyb3dzZXIncyByZW5kZXJlciwgaXQgd291bGQgYmVcbi8vIHByZWZlcnJhYmxlIHRvIGZhbGxpbmcgYmFjayB0byBzZXRUaW1lb3V0IHNpbmNlIGl0IGRvZXMgbm90IGhhdmVcbi8vIHRoZSBtaW5pbXVtIDRtcyBwZW5hbHR5LlxuLy8gVW5mb3J0dW5hdGVseSB0aGVyZSBhcHBlYXJzIHRvIGJlIGEgYnVnIGluIEludGVybmV0IEV4cGxvcmVyIDEwIE1vYmlsZSAoYW5kXG4vLyBEZXNrdG9wIHRvIGEgbGVzc2VyIGV4dGVudCkgdGhhdCByZW5kZXJzIGJvdGggc2V0SW1tZWRpYXRlIGFuZFxuLy8gTWVzc2FnZUNoYW5uZWwgdXNlbGVzcyBmb3IgdGhlIHB1cnBvc2VzIG9mIEFTQVAuXG4vLyBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EvaXNzdWVzLzM5NlxuXG4vLyBUaW1lcnMgYXJlIGltcGxlbWVudGVkIHVuaXZlcnNhbGx5LlxuLy8gV2UgZmFsbCBiYWNrIHRvIHRpbWVycyBpbiB3b3JrZXJzIGluIG1vc3QgZW5naW5lcywgYW5kIGluIGZvcmVncm91bmRcbi8vIGNvbnRleHRzIGluIHRoZSBmb2xsb3dpbmcgYnJvd3NlcnMuXG4vLyBIb3dldmVyLCBub3RlIHRoYXQgZXZlbiB0aGlzIHNpbXBsZSBjYXNlIHJlcXVpcmVzIG51YW5jZXMgdG8gb3BlcmF0ZSBpbiBhXG4vLyBicm9hZCBzcGVjdHJ1bSBvZiBicm93c2Vycy5cbi8vXG4vLyAtIEZpcmVmb3ggMy0xM1xuLy8gLSBJbnRlcm5ldCBFeHBsb3JlciA2LTlcbi8vIC0gaVBhZCBTYWZhcmkgNC4zXG4vLyAtIEx5bnggMi44Ljdcbn0gZWxzZSB7XG4gICAgcmVxdWVzdEZsdXNoID0gbWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKGZsdXNoKTtcbn1cblxuLy8gYHJlcXVlc3RGbHVzaGAgcmVxdWVzdHMgdGhhdCB0aGUgaGlnaCBwcmlvcml0eSBldmVudCBxdWV1ZSBiZSBmbHVzaGVkIGFzXG4vLyBzb29uIGFzIHBvc3NpYmxlLlxuLy8gVGhpcyBpcyB1c2VmdWwgdG8gcHJldmVudCBhbiBlcnJvciB0aHJvd24gaW4gYSB0YXNrIGZyb20gc3RhbGxpbmcgdGhlIGV2ZW50XG4vLyBxdWV1ZSBpZiB0aGUgZXhjZXB0aW9uIGhhbmRsZWQgYnkgTm9kZS5qc+KAmXNcbi8vIGBwcm9jZXNzLm9uKFwidW5jYXVnaHRFeGNlcHRpb25cIilgIG9yIGJ5IGEgZG9tYWluLlxucmF3QXNhcC5yZXF1ZXN0Rmx1c2ggPSByZXF1ZXN0Rmx1c2g7XG5cbi8vIFRvIHJlcXVlc3QgYSBoaWdoIHByaW9yaXR5IGV2ZW50LCB3ZSBpbmR1Y2UgYSBtdXRhdGlvbiBvYnNlcnZlciBieSB0b2dnbGluZ1xuLy8gdGhlIHRleHQgb2YgYSB0ZXh0IG5vZGUgYmV0d2VlbiBcIjFcIiBhbmQgXCItMVwiLlxuZnVuY3Rpb24gbWFrZVJlcXVlc3RDYWxsRnJvbU11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spIHtcbiAgICB2YXIgdG9nZ2xlID0gMTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIik7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShub2RlLCB7Y2hhcmFjdGVyRGF0YTogdHJ1ZX0pO1xuICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcbiAgICAgICAgdG9nZ2xlID0gLXRvZ2dsZTtcbiAgICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlO1xuICAgIH07XG59XG5cbi8vIFRoZSBtZXNzYWdlIGNoYW5uZWwgdGVjaG5pcXVlIHdhcyBkaXNjb3ZlcmVkIGJ5IE1hbHRlIFVibCBhbmQgd2FzIHRoZVxuLy8gb3JpZ2luYWwgZm91bmRhdGlvbiBmb3IgdGhpcyBsaWJyYXJ5LlxuLy8gaHR0cDovL3d3dy5ub25ibG9ja2luZy5pby8yMDExLzA2L3dpbmRvd25leHR0aWNrLmh0bWxcblxuLy8gU2FmYXJpIDYuMC41IChhdCBsZWFzdCkgaW50ZXJtaXR0ZW50bHkgZmFpbHMgdG8gY3JlYXRlIG1lc3NhZ2UgcG9ydHMgb24gYVxuLy8gcGFnZSdzIGZpcnN0IGxvYWQuIFRoYW5rZnVsbHksIHRoaXMgdmVyc2lvbiBvZiBTYWZhcmkgc3VwcG9ydHNcbi8vIE11dGF0aW9uT2JzZXJ2ZXJzLCBzbyB3ZSBkb24ndCBuZWVkIHRvIGZhbGwgYmFjayBpbiB0aGF0IGNhc2UuXG5cbi8vIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21NZXNzYWdlQ2hhbm5lbChjYWxsYmFjaykge1xuLy8gICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4vLyAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBjYWxsYmFjaztcbi8vICAgICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdENhbGwoKSB7XG4vLyAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoMCk7XG4vLyAgICAgfTtcbi8vIH1cblxuLy8gRm9yIHJlYXNvbnMgZXhwbGFpbmVkIGFib3ZlLCB3ZSBhcmUgYWxzbyB1bmFibGUgdG8gdXNlIGBzZXRJbW1lZGlhdGVgXG4vLyB1bmRlciBhbnkgY2lyY3Vtc3RhbmNlcy5cbi8vIEV2ZW4gaWYgd2Ugd2VyZSwgdGhlcmUgaXMgYW5vdGhlciBidWcgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4vLyBJdCBpcyBub3Qgc3VmZmljaWVudCB0byBhc3NpZ24gYHNldEltbWVkaWF0ZWAgdG8gYHJlcXVlc3RGbHVzaGAgYmVjYXVzZVxuLy8gYHNldEltbWVkaWF0ZWAgbXVzdCBiZSBjYWxsZWQgKmJ5IG5hbWUqIGFuZCB0aGVyZWZvcmUgbXVzdCBiZSB3cmFwcGVkIGluIGFcbi8vIGNsb3N1cmUuXG4vLyBOZXZlciBmb3JnZXQuXG5cbi8vIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21TZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbi8vICAgICByZXR1cm4gZnVuY3Rpb24gcmVxdWVzdENhbGwoKSB7XG4vLyAgICAgICAgIHNldEltbWVkaWF0ZShjYWxsYmFjayk7XG4vLyAgICAgfTtcbi8vIH1cblxuLy8gU2FmYXJpIDYuMCBoYXMgYSBwcm9ibGVtIHdoZXJlIHRpbWVycyB3aWxsIGdldCBsb3N0IHdoaWxlIHRoZSB1c2VyIGlzXG4vLyBzY3JvbGxpbmcuIFRoaXMgcHJvYmxlbSBkb2VzIG5vdCBpbXBhY3QgQVNBUCBiZWNhdXNlIFNhZmFyaSA2LjAgc3VwcG9ydHNcbi8vIG11dGF0aW9uIG9ic2VydmVycywgc28gdGhhdCBpbXBsZW1lbnRhdGlvbiBpcyB1c2VkIGluc3RlYWQuXG4vLyBIb3dldmVyLCBpZiB3ZSBldmVyIGVsZWN0IHRvIHVzZSB0aW1lcnMgaW4gU2FmYXJpLCB0aGUgcHJldmFsZW50IHdvcmstYXJvdW5kXG4vLyBpcyB0byBhZGQgYSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgdGhhdCBjYWxscyBmb3IgYSBmbHVzaC5cblxuLy8gYHNldFRpbWVvdXRgIGRvZXMgbm90IGNhbGwgdGhlIHBhc3NlZCBjYWxsYmFjayBpZiB0aGUgZGVsYXkgaXMgbGVzcyB0aGFuXG4vLyBhcHByb3hpbWF0ZWx5IDcgaW4gd2ViIHdvcmtlcnMgaW4gRmlyZWZveCA4IHRocm91Z2ggMTgsIGFuZCBzb21ldGltZXMgbm90XG4vLyBldmVuIHRoZW4uXG5cbmZ1bmN0aW9uIG1ha2VSZXF1ZXN0Q2FsbEZyb21UaW1lcihjYWxsYmFjaykge1xuICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcbiAgICAgICAgLy8gV2UgZGlzcGF0Y2ggYSB0aW1lb3V0IHdpdGggYSBzcGVjaWZpZWQgZGVsYXkgb2YgMCBmb3IgZW5naW5lcyB0aGF0XG4gICAgICAgIC8vIGNhbiByZWxpYWJseSBhY2NvbW1vZGF0ZSB0aGF0IHJlcXVlc3QuIFRoaXMgd2lsbCB1c3VhbGx5IGJlIHNuYXBwZWRcbiAgICAgICAgLy8gdG8gYSA0IG1pbGlzZWNvbmQgZGVsYXksIGJ1dCBvbmNlIHdlJ3JlIGZsdXNoaW5nLCB0aGVyZSdzIG5vIGRlbGF5XG4gICAgICAgIC8vIGJldHdlZW4gZXZlbnRzLlxuICAgICAgICB2YXIgdGltZW91dEhhbmRsZSA9IHNldFRpbWVvdXQoaGFuZGxlVGltZXIsIDApO1xuICAgICAgICAvLyBIb3dldmVyLCBzaW5jZSB0aGlzIHRpbWVyIGdldHMgZnJlcXVlbnRseSBkcm9wcGVkIGluIEZpcmVmb3hcbiAgICAgICAgLy8gd29ya2Vycywgd2UgZW5saXN0IGFuIGludGVydmFsIGhhbmRsZSB0aGF0IHdpbGwgdHJ5IHRvIGZpcmVcbiAgICAgICAgLy8gYW4gZXZlbnQgMjAgdGltZXMgcGVyIHNlY29uZCB1bnRpbCBpdCBzdWNjZWVkcy5cbiAgICAgICAgdmFyIGludGVydmFsSGFuZGxlID0gc2V0SW50ZXJ2YWwoaGFuZGxlVGltZXIsIDUwKTtcblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVUaW1lcigpIHtcbiAgICAgICAgICAgIC8vIFdoaWNoZXZlciB0aW1lciBzdWNjZWVkcyB3aWxsIGNhbmNlbCBib3RoIHRpbWVycyBhbmRcbiAgICAgICAgICAgIC8vIGV4ZWN1dGUgdGhlIGNhbGxiYWNrLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRIYW5kbGUpO1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbEhhbmRsZSk7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLy8gVGhpcyBpcyBmb3IgYGFzYXAuanNgIG9ubHkuXG4vLyBJdHMgbmFtZSB3aWxsIGJlIHBlcmlvZGljYWxseSByYW5kb21pemVkIHRvIGJyZWFrIGFueSBjb2RlIHRoYXQgZGVwZW5kcyBvblxuLy8gaXRzIGV4aXN0ZW5jZS5cbnJhd0FzYXAubWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyID0gbWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyO1xuXG4vLyBBU0FQIHdhcyBvcmlnaW5hbGx5IGEgbmV4dFRpY2sgc2hpbSBpbmNsdWRlZCBpbiBRLiBUaGlzIHdhcyBmYWN0b3JlZCBvdXRcbi8vIGludG8gdGhpcyBBU0FQIHBhY2thZ2UuIEl0IHdhcyBsYXRlciBhZGFwdGVkIHRvIFJTVlAgd2hpY2ggbWFkZSBmdXJ0aGVyXG4vLyBhbWVuZG1lbnRzLiBUaGVzZSBkZWNpc2lvbnMsIHBhcnRpY3VsYXJseSB0byBtYXJnaW5hbGl6ZSBNZXNzYWdlQ2hhbm5lbCBhbmRcbi8vIHRvIGNhcHR1cmUgdGhlIE11dGF0aW9uT2JzZXJ2ZXIgaW1wbGVtZW50YXRpb24gaW4gYSBjbG9zdXJlLCB3ZXJlIGludGVncmF0ZWRcbi8vIGJhY2sgaW50byBBU0FQIHByb3Blci5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90aWxkZWlvL3JzdnAuanMvYmxvYi9jZGRmNzIzMjU0NmE5Y2Y4NTg1MjRiNzVjZGU2ZjllZGY3MjYyMGE3L2xpYi9yc3ZwL2FzYXAuanNcbiIsIi8qKlxuICogZGlnaXRzIDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9kaWdpdHM+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLTIwMTUgSm9uIFNjaGxpbmtlcnRcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHBhZCA9IHJlcXVpcmUoJ3BhZC1sZWZ0Jyk7XG52YXIgbG9uZ2VzdCA9IHJlcXVpcmUoJ2xvbmdlc3QnKTtcblxuLyoqXG4gKiBFeHBvc2UgYGRpZ2l0c2BcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpZ2l0cztcblxuLyoqXG4gKiBMZWZ0IHBhZCB0aGUgZ2l2ZW4gYHZhbHVlYCB3aXRoIHRoZSBzcGVjaWZpZWQgYG51bWJlcmAgb2YgemVyb3NcbiAqIG9yIGFsdGVybmF0ZSBgY2hhcmFjdGVyYC5cbiAqXG4gKiBgYGBqc1xuICogZGlnaXRzKCdhYmMnLCAxMCk7XG4gKiAvLz0+ICcwMDAwMDAwMDAwYWJjJ1xuICpcbiAqIGRpZ2l0cygnYWJjJywgMTAsICd+Jyk7XG4gKiAvLz0+ICd+fn5+fn5+fn5+YWJjJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGB2YWx1ZWBcbiAqIEBwYXJhbSB7U3RyaW5nfSBgbnVtYmVyYFxuICogQHJldHVybiB7U3RyaW5nfSBgY2hhcmFjdGVyYFxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaWdpdHModmFsLCBudW0sIGNoKSB7XG4gIHJldHVybiBwYWQodmFsLCBudW0gLSB2YWwubGVuZ3RoLCBjaCk7XG59XG5cbi8qKlxuICogUGFkIGxlZnQgcGFkIGVhY2ggdmFsdWUgaW4gdGhlIGdpdmVuIGBhcnJheWAgdG8gYWxpZ24gd2l0aCB0aGVcbiAqIGxvbmdlc3QgaXRlbS9udW1iZXIgaW4gdGhlIGFycmF5LiBaZXJvcyBhcmUgdXNlZCBieSBkZWZhdWx0LCBidXRcbiAqIGEgY3VzdG9tIGBjaGFyYWN0ZXJgIGNhbiBiZSBwYXNzZWQgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cbiAqXG4gKiAqKkV4YW1wbGUqKlxuICpcbiAqIGBgYGpzXG4gKiBkaWdpdHMuZWFjaChbMSwgMTAwLCAxMDAwXSlcbiAqIC8vPT4gWycwMDAxJywgJzAxMDAnLCAnMTAwMCddXG4gKlxuICogZGlnaXRzLmVhY2goW2EsIGJiLCBjY2NdLCAnICcpXG4gKiAvLz0+IFsnICBhJywgJyBiYicsICdjY2MnXVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGBhcnJgIFRoZSBhcnJheSBvZiB2YWx1ZXMgdG8gcGFkLlxuICogQHBhcmFtIHtOdW1iZXJ9IGBsZW5gIEFtb3VudCB0byBwYWQgdGhlIG51bWJlci5cbiAqIEByZXR1cm4ge1N0cmluZ30gUGFkZGVkIG51bWJlclxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5kaWdpdHMuZWFjaCA9IGZ1bmN0aW9uKGFyciwgY2gpIHtcbiAgdmFyIGxlbiA9IGxvbmdlc3QoYXJyKS5sZW5ndGg7XG5cbiAgcmV0dXJuIGFyci5tYXAoZnVuY3Rpb24oZWxlKSB7XG4gICAgcmV0dXJuIGRpZ2l0cyhlbGUsIGxlbiwgY2gpO1xuICB9KTtcbn07XG5cbi8qKlxuICogU3RyaXAgbGVhZGluZyBkaWdpdHMgZnJvbSBhIHN0cmluZ1xuICpcbiAqIGBgYGpzXG4gKiBkaWdpdHMuc3RyaXBsZWZ0KCcwMTBmb28ubWQnKTtcbiAqIC8vID0+IFwiZm9vLm1kXCJcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gYHN0cmBcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5kaWdpdHMuc3RyaXBsZWZ0ID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxcZCtcXC0/L2csICcnKTtcbn07XG5cbi8qKlxuICogU3RyaXAgdHJhaWxpbmcgZGlnaXRzIGZyb20gYSBzdHJpbmdcbiAqXG4gKiBgYGBqc1xuICogZGlnaXRzLnN0cmlwcmlnaHQoJ2JhcjAxMC5tZCcpO1xuICogLy8gPT4gXCJiYXIubWRcIlxuICogYGBgXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGBzdHJgXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cblxuZGlnaXRzLnN0cmlwcmlnaHQgPSBmdW5jdGlvbihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXC0/XFxkKyQvZywgJycpO1xufTtcblxuLyoqXG4gKiBDb3VudCBkaWdpdHMgb24gdGhlIGxlZnQgc2lkZSBvZiBhIHN0cmluZ1xuICpcbiAqIGBgYGpzXG4gKiBkaWdpdHMuY291bnRsZWZ0KCcwMDEtZm9vLm1kJyk7XG4gKiAvLz0+IDNcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSAge1N0cmluZ30gYHN0cmBcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5kaWdpdHMuY291bnRsZWZ0ID0gZnVuY3Rpb24oc3RyKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyLm1hdGNoKC9eXFxkKy9nKSkubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBDb3VudCBkaWdpdHMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgYSBzdHJpbmdcbiAqXG4gKiBgYGBqc1xuICogZGlnaXRzLmNvdW50bGVmdCgnZm9vLTAwMS5tZCcpO1xuICogLy89PiAzXG4gKiBgYGBcbiAqIEBwYXJhbSAge1N0cmluZ30gYHN0cmBcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuXG5kaWdpdHMuY291bnRyaWdodCA9IGZ1bmN0aW9uKHN0cikge1xuICByZXR1cm4gU3RyaW5nKHN0ci5tYXRjaCgvXFxkKyQvZykpLmxlbmd0aDtcbn07XG4iLCIvKipcbiAqIGxvbmdlc3QgaXRlbSBpbiBhbiBhcnJheVxuICogQ29weXJpZ2h0IChjKSAyMDE0IEpvbiBTY2hsaW5rZXJ0LCBjb250cmlidXRvcnMuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycikge1xuICB2YXIgYyA9IDAsXG4gICAgbGVuID0gMCxcbiAgICBsID0gMCxcbiAgICBpZHggPSBhcnIubGVuZ3RoO1xuICBpZiAoaWR4KSB7XG4gICAgd2hpbGUgKGlkeC0tKSB7XG4gICAgICBsZW4gPSBhcnJbaWR4XS5sZW5ndGg7XG4gICAgICBpZiAobGVuID4gYykge1xuICAgICAgICBsID0gaWR4O1xuICAgICAgICBjID0gbGVuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYXJyW2xdO1xufTsiLCIvKiFcbiAqIHBhZC1sZWZ0IDxodHRwczovL2dpdGh1Yi5jb20vam9uc2NobGlua2VydC9wYWQtbGVmdD5cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgSm9uIFNjaGxpbmtlcnQsIGNvbnRyaWJ1dG9ycy5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciByZXBlYXQgPSByZXF1aXJlKCdyZXBlYXQtc3RyaW5nJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFkTGVmdCh2YWwsIG51bSwgc3RyKSB7XG4gIHJldHVybiByZXBlYXQoc3RyIHx8ICcwJywgbnVtKSArIHZhbDtcbn07XG4iLCIvKiFcbiAqIHJlcGVhdC1zdHJpbmcgPGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L3JlcGVhdC1zdHJpbmc+XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE0IEpvbiBTY2hsaW5rZXJ0LCBjb250cmlidXRvcnMuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KHN0ciwgY291bnQpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVwZWF0LXN0cmluZyBleHBlY3RzIGEgc3RyaW5nLicpO1xuICB9XG5cbiAgaWYgKGNvdW50IDwgMSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciByZXN1bHQgPSAnJztcbiAgd2hpbGUgKGNvdW50ID4gMCkge1xuICAgIGlmIChjb3VudCAmIDEpIHtcbiAgICAgIHJlc3VsdCArPSBzdHI7XG4gICAgfVxuICAgIGNvdW50ID4+PSAxO1xuICAgIHN0ciArPSBzdHI7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGpzY3M6ZGlzYWJsZSBtYXhpbXVtTGluZUxlbmd0aFxuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIGRlZmluaXRpb25zIG9mIHJ1bGVzIGhvdyBsb2NhdGlvbiBVUkxzIGFyZSB0cmFuc2xhdGVkXG4vLyB0byBcInJlbmRlclwiIG1ldGhvZHMgb2YgY2F0YmVycnkncyBtb2R1bGVzLlxuLy9cbi8vIEZvcm1hdDpcbi8vIC9zb21lLzpwYXJhbWV0ZXJbbW9kdWxlMSxtb2R1bGUyLG1vZHVsZTNdXG4vL1xuLy8gTW9yZSBkZXRhaWxzIGhlcmU6XG4vLyBodHRwczovL2dpdGh1Yi5jb20vY2F0YmVycnkvY2F0YmVycnkvYmxvYi9tYXN0ZXIvZG9jcy9pbmRleC5tZCN1cmwtcm91dGUtZGVmaW5pdGlvblxuXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgICAnLzpwYWdlW1BhZ2VzXScsXG4gICAgLy9pZCDQvNCw0YHRgtC10YDQsFxuICAgIHtcbiAgICAgICAgZXhwcmVzc2lvbjogL1xcLyhbXFwvXFxkXSspJC9pLFxuICAgICAgICBtYXA6IGZ1bmN0aW9uICh1cmxQYXRoKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHVybFBhdGgucGF0aC5tYXRjaCgvXFwvKFtcXC9cXGRdKykkL2kpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAnbWFzdGVyL01hc3Rlckl0ZW0nOiB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IG1hdGNoZXNbMV1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFBhZ2VzOiB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2U6IFwibWFzdGVyLXBhZ2VcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy/RgdGC0LDRgtGM0Y8g0LzQsNGB0YLQtdGA0LBcbiAgICB7XG4gICAgICAgIGV4cHJlc3Npb246ICcvXFwvKFtcXC9cXGRdKylcXC9hcnRpY2xlXFwvKFtcXC9cXGRdKykkL2knLFxuICAgICAgICBtYXA6IGZ1bmN0aW9uICh1cmxQYXRoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFBhZ2VzOiB7XG4gICAgICAgICAgICAgICAgICAgIHBhZ2U6IFwibWFzdGVyLWFydGljbGVcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8g0L/Rg9GC0Yw6INGA0YPQsdGA0LjQutCwL9C/0L7QtNGA0YPQsdGA0LjQutCwXG4gICAgLy8g0L/Rg9GC0Yw6INGA0YPQsdGA0LjQutCwL9C/0L7QtNGA0YPQsdGA0LjQutCwL9GC0LXQs1xuICAgIC8vINC/0YPRgtGMOiDRgNGD0LHRgNC40LrQsC/Qv9C+0LTRgNGD0LHRgNC40LrQsC/RgdC10LrRhtC40Y9cbiAgICAvLyDQv9GD0YLRjDog0YDRg9Cx0YDQuNC60LAv0L/QvtC00YDRg9Cx0YDQuNC60LAv0YLQtdCzL9GB0LXQutGG0LjRj1xuICAgIHtcbiAgICAgICAgZXhwcmVzc2lvbjogL15cXC8oW15cXC9cXGRdKylcXC8oW15cXC9cXGRdKylcXC8/KCg/IXZpZGVvfHNhbGV8c292ZXR5fGNvbXBhbnkpW15cXC9cXGRdKyk/XFwvPyh2aWRlb3xzYWxlfHNvdmV0eXxjb21wYW55KT8kL2ksXG4gICAgICAgIG1hcDogZnVuY3Rpb24gKHVybFBhdGgpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gdXJsUGF0aC5wYXRoLm1hdGNoKC9eXFwvKFteXFwvXFxkXSspXFwvKFteXFwvXFxkXSspXFwvPygoPyF2aWRlb3xzYWxlfHNvdmV0eXxjb21wYW55KVteXFwvXFxkXSspP1xcLz8odmlkZW98c2FsZXxzb3ZldHl8Y29tcGFueSk/JC9pKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJ3J1YnJpa2EvUnVicmlrYSc6IHtcbiAgICAgICAgICAgICAgICAgICAgcnVicmlrYTogbWF0Y2hlc1sxXSxcbiAgICAgICAgICAgICAgICAgICAgcG9kcnVicmlrYTogbWF0Y2hlc1syXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgVGFnOiB7XG4gICAgICAgICAgICAgICAgICAgIHRhZzogbWF0Y2hlc1szXSxcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbjogbWF0Y2hlc1s0XVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgUGFnZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgcGFnZTogXCJtYXN0ZXItcnVicmlrYVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyDQv9GD0YLRjDogL19fL3BhZ2UvOmlkXG4gICAge1xuICAgICAgICBleHByZXNzaW9uOiAvXlxcLyhbXlxcL1xcZF0rKVxcL3BhZ2VcXC8oXFxkKykvaSxcbiAgICAgICAgbWFwOiBmdW5jdGlvbiAodXJsUGF0aCkge1xuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSB1cmxQYXRoLnBhdGgubWF0Y2goL15cXC8oW15cXC9cXGRdKylcXC9wYWdlXFwvKFxcZCspL2kpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBQYWdlczoge1xuICAgICAgICAgICAgICAgICAgICBwYWdlOiBtYXRjaGVzWzFdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBQYWdpbmF0b3I6IHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IG1hdGNoZXNbMl1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSxcbiAgICAvLyDQv9GD0YLRjDogL3NhbGVcbiAgICAvLyDQv9GD0YLRjDogL3NvdmV0eVxuICAgIC8vINC/0YPRgtGMOiAvdmlkZW9cbiAgICAvLyDQv9GD0YLRjDogL19fL3BhZ2UvOmlkXG4gICAgLy8g0L/Rg9GC0Yw6IC9fXy9jYXRlZ29yeS86aWRcbiAgICAvLyDQv9GD0YLRjDogL19fL2NhdGVnb3J5LzppZC9wYWdlLzppZFxuICAgIHtcbiAgICAgICAgZXhwcmVzc2lvbjogL15cXC8oc2FsZXxzb3ZldHl8dmlkZW8pKFxcL2NhdGFsb2dcXC8oXFxkKykpPyhcXC9wYWdlXFwvKFxcZCspKT8kL2ksXG4gICAgICAgIG1hcDogZnVuY3Rpb24gKHVybFBhdGgpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gdXJsUGF0aC5wYXRoLm1hdGNoKC9eXFwvKHNhbGV8c292ZXR5fHZpZGVvKShcXC9jYXRhbG9nXFwvKFxcZCspKT8oXFwvcGFnZVxcLyhcXGQrKSk/JC9pKTtcbiAgICAgICAgICAgIHZhciBuYW1lQ2FwaXRhbGl6ZUZpcnN0TGV0dGVyID0gbWF0Y2hlc1sxXS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG1hdGNoZXNbMV0uc2xpY2UoMSk7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB7fTtcblxuICAgICAgICAgICAgc3RhdGUuUGFnZXMgPSB7XG4gICAgICAgICAgICAgICAgcGFnZTogbWF0Y2hlc1sxXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN0YXRlWydydWJyaWthL1J1YnJpa2F0b3InICsgbmFtZUNhcGl0YWxpemVGaXJzdExldHRlcl0gPSB7XG4gICAgICAgICAgICAgICAgY2F0YWxvZzogbWF0Y2hlc1szXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN0YXRlLlBhZ2luYXRvciA9IHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTogbWF0Y2hlc1s1XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgLy8g0L/Rg9GC0Yw6IC9uZXdzL2l0ZW0vOmlkXG4gICAgLy8g0L/Rg9GC0Yw6IC92YWNhbmN5L2l0ZW0vOmlkXG4gICAgLy8g0L/Rg9GC0Yw6IC9rb25rdXJzL2l0ZW0vOmlkXG4gICAge1xuICAgICAgICBleHByZXNzaW9uOiAvXlxcLyhuZXdzfHZhY2FuY3l8a29ua3VycylcXC9pdGVtXFwvKFxcZCspJC9pLFxuICAgICAgICBtYXA6IGZ1bmN0aW9uICh1cmxQYXRoKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHVybFBhdGgucGF0aC5tYXRjaCgvXlxcLyhuZXdzfHZhY2FuY3l8a29ua3VycylcXC9pdGVtXFwvKFxcZCspJC9pKTtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHt9O1xuXG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gbWF0Y2hlc1sxXTtcblxuICAgICAgICAgICAgc3RhdGUuUGFnZXMgPSB7XG4gICAgICAgICAgICAgICAgcGFnZTogc3RyaW5nICsgXCItaXRlbVwiXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc3RhdGVbJ290aGVyLycgKyBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSkgKyBcIkl0ZW1cIl0gPSB7XG4gICAgICAgICAgICAgICAgaXRlbTogbWF0Y2hlc1syXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfVxuICAgIH1cbl07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkaWdpdHMgPSByZXF1aXJlKCdkaWdpdHMnKTtcblxudmFyIERhdGVzID0gcmVxdWlyZSgnLi91dGlscy9kYXRlcycpO1xudmFyIFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChIYW5kbGViYXJzKSB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVwZWF0ICBoZWxwZXJcbiAgICAgICAgICogQHBhcmFtICB7TnVtYmVyfSBuICAgICAgIG51bWJlciBvZiBpdGVyYXRpb25zXG4gICAgICAgICAqIEBwYXJhbSAge1t0eXBlXX0gb3B0aW9ucyBbZGVzY3JpcHRpb25dXG4gICAgICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICAgICAqL1xuICAgICAgICByZXBlYXQ6IGZ1bmN0aW9uIChuLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIHZhciBfZGF0YSA9IHt9LFxuICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAnJyxcbiAgICAgICAgICAgICAgICBjb3VudCA9IG4gLSAxO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5fZGF0YSkge1xuICAgICAgICAgICAgICAgIF9kYXRhID0gSGFuZGxlYmFycy5jcmVhdGVGcmFtZShvcHRpb25zLl9kYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIF9kYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogZGlnaXRzLnBhZCgoaSArIDEpLCB7YXV0bzogbn0pXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb250ZW50ICs9IG9wdGlvbnMuZm4odGhpcywge2RhdGE6IF9kYXRhfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEhhbmRsZWJhcnMuU2FmZVN0cmluZyhjb250ZW50KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSWYgaGVscGVyIHdpdGggcGFyYW1zXG4gICAgICAgICAqIEBwYXJhbSAge1t0eXBlXX0gYSAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAgICAgKiBAcGFyYW0gIHtbdHlwZV19IGIgICAgICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgICAgICogQHBhcmFtICB7U3RyaW5nfSBvcHRpb25zICBvcGVyYXRpb25cbiAgICAgICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgICBbZGVzY3JpcHRpb25dXG4gICAgICAgICAqL1xuICAgICAgICBpczogZnVuY3Rpb24gKGxlZnRPcGVyYW5kLCBvcGVyYXRpb24sIHJpZ2h0T3BlcmFuZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIGEgPSBsZWZ0T3BlcmFuZCB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICBiID0gcmlnaHRPcGVyYW5kIHx8IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAob3BlcmF0aW9uICYmIHR5cGVvZiBvcGVyYXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChvcGVyYXRpb24pIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBOb3Qgc3RyaWN0bHkgZXF1YWxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnPT0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgPT0gYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU3RyaWN0bHkgZXF1YWxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnPT09JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID09PSBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBhID4gYiBjaGVja2luZ1xuICAgICAgICAgICAgICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID4gYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYSA+PSBiIGNoZWNraW5nXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJz49JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID49IGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgPCBiIGNoZWNraW5nXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyBhIDw9IGIgY2hlY2tpbmdcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnPD0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgPD0gYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWN0aW9uLCBpZiBvcGVyYXRpb24gaXMgdW5rbm93blxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdPcGVyYXRpb24gaXMgdW5rbm93biFcXG5cImlzXCIgaGVscGVyIHN1cHBvcnRzIG9ubHk6XFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiPT1cIixcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCI9PT1cIixcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCI+XCIsXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiPj1cIixcXG4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCI8XCIsXFxuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiPD1cIixcXG4nXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPcGVyYXRpb24gaGF2ZSB0byBiZSByZWNpdmVkIGFuZCBoYXZlIHRvIGJlIGEgc3RyaW5nJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3RyIHRvIGxvd2VyIGNhc2VcbiAgICAgICAgICogQHBhcmFtICB7U3RyaW5nfSBzdHIgW2Rlc2NyaXB0aW9uXVxuICAgICAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICBbZGVzY3JpcHRpb25dXG4gICAgICAgICAqL1xuICAgICAgICB0b0xvd2VyQ2FzZTogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBzdHIudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdHIgdG8gdXBwZXIgY2FzZVxuICAgICAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHN0ciBbZGVzY3JpcHRpb25dXG4gICAgICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgICAgICovXG4gICAgICAgIHRvVXBwZXJDYXNlOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0ciAhPSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHN0ci50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gc3RyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhcGl0YWxpemUgZmlyc3Qgc3ltYm9sIG9mIHN0clxuICAgICAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHN0ciBbZGVzY3JpcHRpb25dXG4gICAgICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICAgIFtkZXNjcmlwdGlvbl1cbiAgICAgICAgICovXG4gICAgICAgIGNhcGl0YWxpemVGaXJzdDogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBzdHIudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIHdoaXRlc3BhY2VzIGZyb20gcmVjaXZlZCBkYXRhIHRvIGhlbHBlclxuICAgICAgICAgKiBAcGFyYW0gIHtbdHlwZV19IG9wdGlvbnMgW2Rlc2NyaXB0aW9uXVxuICAgICAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAgICAgKi9cbiAgICAgICAgc3RyaXA6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICAgICAgdmFyIF9kYXRhID0ge30sXG4gICAgICAgICAgICAgICAgY29udGVudCA9ICcnO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5fZGF0YSkge1xuICAgICAgICAgICAgICAgIF9kYXRhID0gSGFuZGxlYmFycy5jcmVhdGVGcmFtZShvcHRpb25zLl9kYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGVudCA9IG9wdGlvbnMuZm4odGhpcywge2RhdGE6IF9kYXRhfSkucmVwbGFjZSgvPihcXHMrKTwvZywgJz48Jyk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgSGFuZGxlYmFycy5TYWZlU3RyaW5nKGNvbnRlbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN0cmlwVGFnczogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgc3RyID0gc3RyLnJlcGxhY2UoLzwhLS1bXl0qLS0+L2csICcnKTtcbiAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvPFxcLz9bXj5dKz4vZ2ksICcnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzdHJpcFN0eWxlOiBmdW5jdGlvbiAoc3RyKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyBzdHlsZT1cIlteXCJdKlwiL2csICcnKVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB7e2Zvcm1hdERhdGF9fVxuICAgICAgICAgKiBQb3J0IG9mIGZvcm1hdERhdGUtanMgbGlicmFyeSAoaHR0cDovL2JpdC5seS8xOGVvMnh3KVxuICAgICAgICAgKiBAcGFyYW0gIHtbdHlwZV19IGRhdGUgICBbZGVzY3JpcHRpb25dXG4gICAgICAgICAqIEBwYXJhbSAge1t0eXBlXX0gZm9ybWF0IFtkZXNjcmlwdGlvbl1cbiAgICAgICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAgICAgKi9cbiAgICAgICAgZm9ybWF0RGF0ZTogZnVuY3Rpb24gKGRhdGUsIGZvcm1hdCkge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIERhdGVzLmZvcm1hdChkYXRlLCBmb3JtYXQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB7e25vd319XG4gICAgICAgICAqIEBwYXJhbSAge1t0eXBlXX0gZm9ybWF0IFtkZXNjcmlwdGlvbl1cbiAgICAgICAgICogQHJldHVybiB7W3R5cGVdfSAgICAgICAgW2Rlc2NyaXB0aW9uXVxuICAgICAgICAgKi9cbiAgICAgICAgbm93OiBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICBpZiAoVXRpbHMuaXNVbmRlZmluZWQoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMuZm9ybWF0KGRhdGUsIGZvcm1hdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHt7aTE4bn19XG4gICAgICAgICAqIEBhdXRob3I6IExhdXJlbnQgR29kZXJyZSA8aHR0cHM6Ly9naXRodWIuY29tL0xhdXJlbnRHb2RlcnJyZT5cbiAgICAgICAgICogQHBhcmFtICB7U3RyaW5nfSBjb250ZXh0XG4gICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICAgICAqIEBleGFtcGxlOiA8aHR0cHM6Ly9naXRodWIuY29tL2Fzc2VtYmxlL2J1dHRvbnM+IChTZWUgdGhlIFwiYnV0dG9uLWkxOG5cIiBleGFtcGxlKVxuICAgICAgICAgKi9cbiAgICAgICAgaTE4bjogZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBsYW5ndWFnZSA9IHZvaWQgMDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHRocm93ICdLZXkgbXVzdCBiZSBvZiB0eXBlIFxcJ3N0cmluZ1xcJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxhbmd1YWdlID0gKHR5cGVvZiBvcHRpb25zLmhhc2gubGFuZ3VhZ2UgPT09ICdzdHJpbmcnID8gb3B0aW9ucy5oYXNoLmxhbmd1YWdlIDogdGhpcy5sYW5ndWFnZSk7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ1RoZSBcXCdsYW5ndWFnZVxcJyBwYXJhbWV0ZXIgaXMgbm90IGRlZmluZWQnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbbGFuZ3VhZ2VdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ05vIHN0cmluZ3MgZm91bmQgZm9yIGxhbmd1YWdlIFxcJ1wiICsgbGFuZ3VhZ2UgKyBcIlxcJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpc1tsYW5ndWFnZV1bY29udGV4dF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyAnTm8gc3RyaW5nIGZvciBrZXkgXFwnXCIgKyBjb250ZXh0ICsgXCJcXCcgZm9yIGxhbmd1YWdlIFxcJ1wiICsgbGFuZ3VhZ2UgKyBcIlxcJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzW2xhbmd1YWdlXVtjb250ZXh0XTtcbiAgICAgICAgfSxcbiAgICAgICAgaWNvbjogZnVuY3Rpb24gKG5hbWUsIHNlbGVjdG9yLCBzeXMpIHtcbiAgICAgICAgICAgIHZhciBjbCA9ICdpY29uIGljb25fJyArIG5hbWU7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGNsICs9IFwiIFwiICsgc2VsZWN0b3I7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgSGFuZGxlYmFycy5TYWZlU3RyaW5nKFxuICAgICAgICAgICAgICAgICc8c3ZnIHJvbGU9XCJpbWdcIiB0aXRsZT1cImljb25fJyArIG5hbWUgKyAnXCIgY2xhc3M9XCInICsgY2wgKyAnXCI+JyArXG4gICAgICAgICAgICAgICAgJzx1c2UgeGxpbms6aHJlZj1cIi9pY29uLXN2Zy9zdmctc3ltYm9scy5zdmcjaWNvbl8nICsgbmFtZSArICdcIi8+JyArXG4gICAgICAgICAgICAgICAgJzwvc3ZnPidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIGltZ1NyYzogZnVuY3Rpb24gKGltZ0lkLCB3aWR0aCwgaGVpZ2h0LCBzeXMpIHtcbiAgICAgICAgICAgIHZhciBpbWdTcmMgPSAnaHR0cDovL2FwaS1mbS5wcmVzZW50LXRsdC5ydS9maWxlcz9rZXk9JyArIGltZ0lkO1xuICAgICAgICAgICAgdmFyIHR5cGVXaWR0aCA9IHR5cGVvZiB3aWR0aDtcbiAgICAgICAgICAgIHZhciB3aWR0aE51bWJlciA9ICh0eXBlb2Ygd2lkdGgpID09IFwibnVtYmVyXCI7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0TnVtYmVyID0gKHR5cGVvZiBoZWlnaHQpID09IFwibnVtYmVyXCI7XG5cbiAgICAgICAgICAgIGlmICh3aWR0aE51bWJlciAmJiBoZWlnaHROdW1iZXIgJiYgKHdpZHRoID09IGhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICBpbWdTcmMgPSBpbWdTcmMgKyAnJnNxdWFyZT0nICsgaGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoKHR5cGVXaWR0aCAhPSBcInVuZGVmaW5lZFwiKSAmJiBoZWlnaHROdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1nU3JjID0gaW1nU3JjICsgJyZ3aWR0aD0nICsgd2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgodHlwZVdpZHRoICE9IFwidW5kZWZpbmVkXCIpICYmIGhlaWdodE51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBpbWdTcmMgPSBpbWdTcmMgKyAnJmhlaWdodD0nICsgaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coaW1nU3JjKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSGFuZGxlYmFycy5TYWZlU3RyaW5nKGltZ1NyYyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldE51bUVuZGluZzogZnVuY3Rpb24gKGlOdW1iZXIsIGFFbmRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgc0VuZGluZywgaTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YoaU51bWJlcikgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgYUVuZGluZ3MgPSBhRW5kaW5ncy5zcGxpdCgnLCAnKTtcbiAgICAgICAgICAgIGlOdW1iZXIgPSBpTnVtYmVyICUgMTAwO1xuICAgICAgICAgICAgaWYgKGlOdW1iZXIgPj0gMTEgJiYgaU51bWJlciA8PSAxOSkge1xuICAgICAgICAgICAgICAgIHNFbmRpbmcgPSBhRW5kaW5nc1syXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGkgPSBpTnVtYmVyICUgMTA7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgKDEpOlxuICAgICAgICAgICAgICAgICAgICAgICAgc0VuZGluZyA9IGFFbmRpbmdzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgKDIpOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICgzKTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAoNCk6XG4gICAgICAgICAgICAgICAgICAgICAgICBzRW5kaW5nID0gYUVuZGluZ3NbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNFbmRpbmcgPSBhRW5kaW5nc1syXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEhhbmRsZWJhcnMuU2FmZVN0cmluZyhpTnVtYmVyICsgJyAnICsgc0VuZGluZyk7XG4gICAgICAgIH1cbiAgICB9O1xufTsiLCIvKipcbiAqIEhhbmRsZWJhcnMgSGVscGVycyBVdGlsc1xuICogaHR0cDovL2dpdGh1Yi5jb20vYXNzZW1ibGUvaGFuZGxlYmFycy1oZWxwZXJzXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMgSm9uIFNjaGxpbmtlcnQsIEJyaWFuIFdvb2R3YXJkLCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRGF0ZXMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5EYXRlcy5wYWROdW1iZXIgPSBmdW5jdGlvbiAobnVtLCBjb3VudCwgcGFkQ2hhcmFjdGVyKSB7XG5cbiAgICBpZiAodHlwZW9mIHBhZENoYXJhY3RlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcGFkQ2hhcmFjdGVyID0gJzAnO1xuICAgIH1cblxuICAgIHZhciBsZW5EaWZmID0gY291bnQgLSBTdHJpbmcobnVtKS5sZW5ndGg7XG4gICAgdmFyIHBhZGRpbmcgPSAnJztcblxuICAgIGlmIChsZW5EaWZmID4gMCkge1xuICAgICAgICB3aGlsZSAobGVuRGlmZi0tKSB7XG4gICAgICAgICAgICBwYWRkaW5nICs9IHBhZENoYXJhY3RlcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFkZGluZyArIG51bTtcbn07XG5cbkRhdGVzLmRheU9mWWVhciA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgdmFyIG9uZUphbiA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG5cbiAgICByZXR1cm4gTWF0aC5jZWlsKChkYXRlIC0gb25lSmFuKSAvIDg2NDAwMDAwKTtcbn07XG5cbkRhdGVzLndlZWtPZlllYXIgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIHZhciBvbmVKYW4gPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICAgIHJldHVybiBNYXRoLmNlaWwoKCgoZGF0ZSAtIG9uZUphbikgLyA4NjQwMDAwMCkgKyBvbmVKYW4uZ2V0RGF5KCkgKyAxKSAvIDcpO1xufTtcblxuRGF0ZXMuaXNvV2Vla09mWWVhciA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgdmFyIHRhcmdldCA9IG5ldyBEYXRlKGRhdGUudmFsdWVPZigpKTtcbiAgICB2YXIgZGF5TnIgPSAoZGF0ZS5nZXREYXkoKSArIDYpICUgNztcbiAgICB0YXJnZXQuc2V0RGF0ZSh0YXJnZXQuZ2V0RGF0ZSgpIC0gZGF5TnIgKyAzKTtcbiAgICB2YXIgamFuNCA9IG5ldyBEYXRlKHRhcmdldC5nZXRGdWxsWWVhcigpLCAwLCA0KTtcbiAgICB2YXIgZGF5RGlmZiA9ICh0YXJnZXQgLSBqYW40KSAvIDg2NDAwMDAwO1xuXG4gICAgcmV0dXJuIDEgKyBNYXRoLmNlaWwoZGF5RGlmZiAvIDcpO1xufTtcblxuRGF0ZXMudHdlbGV2ZUhvdXIgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgIGlmIChkYXRlLmdldEhvdXJzKCkgPiAxMikge1xuICAgICAgICByZXR1cm4gZGF0ZS5nZXRIb3VycygpIC0gMTI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTtcbn07XG5cbkRhdGVzLnRpbWVab25lT2Zmc2V0ID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICB2YXIgaG91cnNEaWZmID0gLWRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDYwO1xuICAgIHZhciByZXN1bHQgPSBEYXRlcy5wYWROdW1iZXIoTWF0aC5hYnMoaG91cnNEaWZmKSwgNCk7XG5cbiAgICByZXR1cm4gKGhvdXJzRGlmZiA+IDAgPyAnKycgOiAnLScpICsgcmVzdWx0O1xufTtcblxuRGF0ZXMuZm9ybWF0ID0gZnVuY3Rpb24gKGRhdGUsIGZvcm1hdCkge1xuICAgIHZhciBtYXRjaCA9IG51bGw7XG4gICAgcmV0dXJuIGZvcm1hdC5yZXBsYWNlKERhdGVzLmZvcm1hdHMsIGZ1bmN0aW9uIChtLCBwKSB7XG4gICAgICAgIHN3aXRjaCAocCkge1xuICAgICAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVzLmFiYnJldmlhdGVkV2Vla2RheXNbZGF0ZS5nZXREYXkoKV07XG4gICAgICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMuZnVsbFdlZWtkYXlzW2RhdGUuZ2V0RGF5KCldO1xuICAgICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVzLmFiYnJldmlhdGVkTW9udGhzW2RhdGUuZ2V0TW9udGgoKV07XG4gICAgICAgICAgICBjYXNlICdCJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMuZ2V0RnVsbE1vdW50aChkYXRlLmdldE1vbnRoKCksIFwiUnVcIik7XG4gICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZS50b0xvY2FsZVN0cmluZygpO1xuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoZGF0ZS5nZXRGdWxsWWVhcigpIC8gMTAwKTtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlcy5wYWROdW1iZXIoZGF0ZS5nZXREYXRlKCksIDIpO1xuICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVzLmZvcm1hdChkYXRlLCAnJW0vJWQvJXknKTtcbiAgICAgICAgICAgIGNhc2UgJ2UnOlxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlcy5wYWROdW1iZXIoZGF0ZS5nZXREYXRlKCksIDIsICcgJyk7XG4gICAgICAgICAgICBjYXNlICdGJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMuZm9ybWF0KGRhdGUsICclWS0lbS0lZCcpO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVzLmZvcm1hdChkYXRlLCAnJWInKTtcbiAgICAgICAgICAgIGNhc2UgJ0gnOlxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlcy5wYWROdW1iZXIoZGF0ZS5nZXRIb3VycygpLCAyKTtcbiAgICAgICAgICAgIGNhc2UgJ0knOlxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlcy5wYWROdW1iZXIoRGF0ZXMudHdlbGV2ZUhvdXIoZGF0ZSksIDIpO1xuICAgICAgICAgICAgY2FzZSAnaic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVzLnBhZE51bWJlcihEYXRlcy5kYXlPZlllYXIoZGF0ZSksIDMpO1xuICAgICAgICAgICAgY2FzZSAnayc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVzLnBhZE51bWJlcihkYXRlLmdldEhvdXJzKCksIDIsICcgJyk7XG4gICAgICAgICAgICBjYXNlICdsJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMucGFkTnVtYmVyKERhdGVzLnR3ZWxldmVIb3VyKGRhdGUpLCAyLCAnICcpO1xuICAgICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVzLnBhZE51bWJlcihkYXRlLmdldE1pbGxpc2Vjb25kcygpLCAzKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlcy5wYWROdW1iZXIoZGF0ZS5nZXRNb250aCgpICsgMSwgMik7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMucGFkTnVtYmVyKGRhdGUuZ2V0TWludXRlcygpLCAyKTtcbiAgICAgICAgICAgIGNhc2UgJ24nOlxuICAgICAgICAgICAgICAgIHJldHVybiAnXFxuJztcbiAgICAgICAgICAgIGNhc2UgJ3AnOlxuICAgICAgICAgICAgICAgIGlmIChkYXRlLmdldEhvdXJzKCkgPiAxMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1BNJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0FNJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdQJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMuZm9ybWF0KGRhdGUsICclcCcpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBjYXNlICdyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMuZm9ybWF0KGRhdGUsICclSTolTTolUyAlcCcpO1xuICAgICAgICAgICAgY2FzZSAnUic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVzLmZvcm1hdChkYXRlLCAnJUg6JU0nKTtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlLmdldFRpbWUoKSAvIDEwMDA7XG4gICAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMucGFkTnVtYmVyKGRhdGUuZ2V0U2Vjb25kcygpLCAyKTtcbiAgICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnXFx0JztcbiAgICAgICAgICAgIGNhc2UgJ1QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlcy5mb3JtYXQoZGF0ZSwgJyVIOiVNOiVTJyk7XG4gICAgICAgICAgICBjYXNlICd1JzpcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZS5nZXREYXkoKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gNztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZS5nZXREYXkoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdVJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMucGFkTnVtYmVyKERhdGVzLndlZWtPZlllYXIoZGF0ZSksIDIpO1xuICAgICAgICAgICAgY2FzZSAndic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVzLmZvcm1hdChkYXRlLCAnJWUtJWItJVknKTtcbiAgICAgICAgICAgIGNhc2UgJ1YnOlxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlcy5wYWROdW1iZXIoRGF0ZXMuaXNvV2Vla09mWWVhcihkYXRlKSwgMik7XG4gICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gRGF0ZXMucGFkTnVtYmVyKERhdGVzLndlZWtPZlllYXIoZGF0ZSksIDIpO1xuICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIERhdGVzLnBhZE51bWJlcihkYXRlLmdldERheSgpLCAyKTtcbiAgICAgICAgICAgIGNhc2UgJ3gnOlxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpO1xuICAgICAgICAgICAgY2FzZSAnWCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGUudG9Mb2NhbGVUaW1lU3RyaW5nKCk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKGRhdGUuZ2V0RnVsbFllYXIoKSkuc3Vic3RyaW5nKDIpO1xuICAgICAgICAgICAgY2FzZSAnWSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICAgIGNhc2UgJ3onOlxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlcy50aW1lWm9uZU9mZnNldChkYXRlKTtcbiAgICAgICAgICAgIGNhc2UgJ1onOlxuICAgICAgICAgICAgICAgIHJldHVybiBEYXRlcy5mdWxsTW9udGhzUnVQW2RhdGUuZ2V0TW9udGgoKV07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuRGF0ZXMuZm9ybWF0cyA9IC8lKGF8QXxifEJ8Y3xDfGR8RHxlfEV8RnxofEh8SXxqfGt8bHxMfG18TXxufHB8UHxyfFJ8c3xTfHR8VHx1fFV8dnxWfFd8d3x4fFh8eXxZfHp8WikvZztcblxuRGF0ZXMuYWJicmV2aWF0ZWRXZWVrZGF5cyA9IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodXInLCAnRnJpJywgJ1NhdCddO1xuRGF0ZXMuZnVsbFdlZWtkYXlzID0gWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddO1xuRGF0ZXMuYWJicmV2aWF0ZWRNb250aHMgPSBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ107XG5EYXRlcy5mdWxsTW9udGhzID0gWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ107XG5cbkRhdGVzLmZ1bGxNb250aHNSdVAgPSBbJ9Cv0L3QstCw0YDRjycsICfQpNC10LLRgNCw0LvRjycsICfQnNCw0YDRgtCwJywgJ9CQ0L/RgNC10LvRjycsICfQnNCw0Y8nLCAn0JjRjtC90Y8nLCAn0JjRjtC70Y8nLCAn0JDQstCz0YPRgdGC0LAnLCAn0KHQtdC90YLRj9Cx0YDRjycsICfQntC60YLRj9Cx0YDRjycsICfQndC+0Y/QsdGA0Y8nLCAn0JTQtdC60LDQsdGA0Y8nXTtcbkRhdGVzLmZ1bGxNb250aHNSdSA9IFsn0K/QvdCy0LDRgNGMJywgJ9Ck0LXQstGA0LDQu9GMJywgJ9Cc0LDRgNGCJywgJ9CQ0L/RgNC10LvRjCcsICfQnNCw0LknLCAn0JjRjtC90YwnLCAn0JjRjtC70YwnLCAn0JDQstCz0YPRgdGCJywgJ9Ch0LXQvdGC0Y/QsdGA0YwnLCAn0J7QutGC0Y/QsdGA0YwnLCAn0J3QvtGP0LHRgNGMJywgJ9CU0LXQutCw0LHRgNGMJ107XG5cbkRhdGVzLmdldEZ1bGxNb3VudGggPSBmdW5jdGlvbiAobnVtLCBsYW5nKSB7XG4gICAgaWYgKGxhbmcgPT0gXCJSdVwiKVxuICAgICAgICByZXR1cm4gRGF0ZXMuZnVsbE1vbnRoc1J1O1xuICAgIHJldHVybiBEYXRlcy5mdWxsTW9udGhzO1xufVxuXG4iLCIvKipcbiAqIEhhbmRsZWJhcnMgSGVscGVyczogVXRpbHNcbiAqIGh0dHA6Ly9naXRodWIuY29tL2Fzc2VtYmxlL2hhbmRsZWJhcnMtaGVscGVyc1xuICogQ29weXJpZ2h0IChjKSAyMDEzLCAyMDE0IEpvbiBTY2hsaW5rZXJ0LCBCcmlhbiBXb29kd2FyZCwgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCkuXG4gKi9cbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgaXNVbmRlZmluZWQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB2YWx1ZS50b1N0cmluZygpID09PSAnW29iamVjdCBGdW5jdGlvbl0nIHx8ICh2YWx1ZS5oYXNoICE9IG51bGwpO1xuICAgIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYWxsIGhlbHBlcnMuXG4gICAgICogQHBhcmFtIHtTZXJ2aWNlTG9jYXRvcn0gbG9jYXRvciBDYXRiZXJyeSdzIHNlcnZpY2UgbG9jYXRvci5cbiAgICAgKi9cbiAgICByZWdpc3RlcjogZnVuY3Rpb24gKGxvY2F0b3IpIHtcbiAgICAgICAgdmFyIGNvbmZpZyA9IGxvY2F0b3IucmVzb2x2ZSgnY29uZmlnJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlYmFycyA9IGxvY2F0b3IucmVzb2x2ZSgnaGFuZGxlYmFycycpO1xuICAgICAgICAgICAgdmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hhbmRsZWJhcnMtaGVscGVyJykoaGFuZGxlYmFycyk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGhlbHBlcnMpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcihuYW1lLCBoZWxwZXJzW25hbWVdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkby5cbiAgICAgICAgfVxuICAgIH1cbn07IiwiLypcbiAqIGNhdGJlcnJ5LWhhbmRsZWJhcnNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeS1oYW5kbGViYXJzJ3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeS1oYW5kbGViYXJzIHRoYXQgYXJlXG4gKiBub3QgZXh0ZXJuYWxseSBtYWludGFpbmVkIGxpYnJhcmllcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVGVtcGxhdGVQcm92aWRlcjtcblxuLyoqXG4gKiBDcmVhdGVzIG5ldyBpbnN0YW5jZSBvZiBIYW5kbGViYXJzIHRlbXBsYXRlIHByb3ZpZGVyLlxuICogQHBhcmFtIHtIYW5kbGViYXJzfSAkaGFuZGxlYmFycyBIYW5kbGViYXJzIGZhY3RvcnkuXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gVGVtcGxhdGVQcm92aWRlcigkaGFuZGxlYmFycykge1xuXHR0aGlzLl9oYW5kbGViYXJzID0gJGhhbmRsZWJhcnM7XG5cdHRoaXMuX3RlbXBsYXRlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbi8qKlxuICogQ3VycmVudCBIYW5kbGViYXJzIGZhY3RvcnkuXG4gKiBAdHlwZSB7SGFuZGxlYmFyc31cbiAqIEBwcml2YXRlXG4gKi9cblRlbXBsYXRlUHJvdmlkZXIucHJvdG90eXBlLl9oYW5kbGViYXJzID0gbnVsbDtcblxuLyoqXG4gKiBDdXJyZW50IHNldCBvZiByZWdpc3RlcmVkIHRlbXBsYXRlcy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAcHJpdmF0ZVxuICovXG5UZW1wbGF0ZVByb3ZpZGVyLnByb3RvdHlwZS5fdGVtcGxhdGVzID0gbnVsbDtcblxuLyoqXG4gKiBSZWdpc3RlcnMgY29tcGlsZWQgKHByZWNvbXBpbGVkKSBIYW5kbGViYXJzIHRlbXBsYXRlLlxuICogaHR0cDovL2hhbmRsZWJhcnNqcy5jb20vcmVmZXJlbmNlLmh0bWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRlbXBsYXRlIG5hbWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcGlsZWQgQ29tcGlsZWQgdGVtcGxhdGUgc291cmNlLlxuICovXG5UZW1wbGF0ZVByb3ZpZGVyLnByb3RvdHlwZS5yZWdpc3RlckNvbXBpbGVkID0gZnVuY3Rpb24gKG5hbWUsIGNvbXBpbGVkKSB7XG5cdC8vIGpzaGludCBldmlsOnRydWVcblx0dmFyIHNwZWNzID0gbmV3IEZ1bmN0aW9uKCdyZXR1cm4gJyArIGNvbXBpbGVkICsgJzsnKTtcblx0dGhpcy5fdGVtcGxhdGVzW25hbWVdID0gdGhpcy5faGFuZGxlYmFycy50ZW1wbGF0ZShzcGVjcygpKTtcbn07XG5cbi8qKlxuICogUmVuZGVycyB0ZW1wbGF0ZSB3aXRoIHNwZWNpZmllZCBkYXRhLlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0ZW1wbGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIERhdGEgY29udGV4dCBmb3IgdGVtcGxhdGUuXG4gKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBQcm9taXNlIGZvciByZW5kZXJlZCBIVE1MLlxuICovXG5UZW1wbGF0ZVByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAobmFtZSwgZGF0YSkge1xuXHRpZiAoIShuYW1lIGluIHRoaXMuX3RlbXBsYXRlcykpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdObyBzdWNoIHRlbXBsYXRlJykpO1xuXHR9XG5cblx0dmFyIHByb21pc2U7XG5cdHRyeSB7XG5cdFx0cHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh0aGlzLl90ZW1wbGF0ZXNbbmFtZV0oZGF0YSkpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cHJvbWlzZSA9IFByb21pc2UucmVqZWN0KGUpO1xuXHR9XG5cdHJldHVybiBwcm9taXNlO1xufTsiLCIvKiFcblxuIGhhbmRsZWJhcnMgdjIuMC4wXG5cbkNvcHlyaWdodCAoQykgMjAxMS0yMDE0IGJ5IFllaHVkYSBLYXR6XG5cblBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG5JTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cblRIRSBTT0ZUV0FSRS5cblxuQGxpY2Vuc2VcbiovXG4vKiBleHBvcnRlZCBIYW5kbGViYXJzICovXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5IYW5kbGViYXJzID0gcm9vdC5IYW5kbGViYXJzIHx8IGZhY3RvcnkoKTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4vLyBoYW5kbGViYXJzL3NhZmUtc3RyaW5nLmpzXG52YXIgX19tb2R1bGUzX18gPSAoZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgX19leHBvcnRzX187XG4gIC8vIEJ1aWxkIG91dCBvdXIgYmFzaWMgU2FmZVN0cmluZyB0eXBlXG4gIGZ1bmN0aW9uIFNhZmVTdHJpbmcoc3RyaW5nKSB7XG4gICAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG4gIH1cblxuICBTYWZlU3RyaW5nLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIlwiICsgdGhpcy5zdHJpbmc7XG4gIH07XG5cbiAgX19leHBvcnRzX18gPSBTYWZlU3RyaW5nO1xuICByZXR1cm4gX19leHBvcnRzX187XG59KSgpO1xuXG4vLyBoYW5kbGViYXJzL3V0aWxzLmpzXG52YXIgX19tb2R1bGUyX18gPSAoZnVuY3Rpb24oX19kZXBlbmRlbmN5MV9fKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgX19leHBvcnRzX18gPSB7fTtcbiAgLypqc2hpbnQgLVcwMDQgKi9cbiAgdmFyIFNhZmVTdHJpbmcgPSBfX2RlcGVuZGVuY3kxX187XG5cbiAgdmFyIGVzY2FwZSA9IHtcbiAgICBcIiZcIjogXCImYW1wO1wiLFxuICAgIFwiPFwiOiBcIiZsdDtcIixcbiAgICBcIj5cIjogXCImZ3Q7XCIsXG4gICAgJ1wiJzogXCImcXVvdDtcIixcbiAgICBcIidcIjogXCImI3gyNztcIixcbiAgICBcImBcIjogXCImI3g2MDtcIlxuICB9O1xuXG4gIHZhciBiYWRDaGFycyA9IC9bJjw+XCInYF0vZztcbiAgdmFyIHBvc3NpYmxlID0gL1smPD5cIidgXS87XG5cbiAgZnVuY3Rpb24gZXNjYXBlQ2hhcihjaHIpIHtcbiAgICByZXR1cm4gZXNjYXBlW2Nocl07XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmQob2JqIC8qICwgLi4uc291cmNlICovKSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBhcmd1bWVudHNbaV0pIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcmd1bWVudHNbaV0sIGtleSkpIHtcbiAgICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIF9fZXhwb3J0c19fLmV4dGVuZCA9IGV4dGVuZDt2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICBfX2V4cG9ydHNfXy50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAvLyBTb3VyY2VkIGZyb20gbG9kYXNoXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9sb2Rhc2gvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHRcbiAgdmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG4gIH07XG4gIC8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoaXNGdW5jdGlvbigveC8pKSB7XG4gICAgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICAgIH07XG4gIH1cbiAgdmFyIGlzRnVuY3Rpb247XG4gIF9fZXhwb3J0c19fLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpID8gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScgOiBmYWxzZTtcbiAgfTtcbiAgX19leHBvcnRzX18uaXNBcnJheSA9IGlzQXJyYXk7XG5cbiAgZnVuY3Rpb24gZXNjYXBlRXhwcmVzc2lvbihzdHJpbmcpIHtcbiAgICAvLyBkb24ndCBlc2NhcGUgU2FmZVN0cmluZ3MsIHNpbmNlIHRoZXkncmUgYWxyZWFkeSBzYWZlXG4gICAgaWYgKHN0cmluZyBpbnN0YW5jZW9mIFNhZmVTdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcudG9TdHJpbmcoKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9IGVsc2UgaWYgKCFzdHJpbmcpIHtcbiAgICAgIHJldHVybiBzdHJpbmcgKyAnJztcbiAgICB9XG5cbiAgICAvLyBGb3JjZSBhIHN0cmluZyBjb252ZXJzaW9uIGFzIHRoaXMgd2lsbCBiZSBkb25lIGJ5IHRoZSBhcHBlbmQgcmVnYXJkbGVzcyBhbmRcbiAgICAvLyB0aGUgcmVnZXggdGVzdCB3aWxsIGRvIHRoaXMgdHJhbnNwYXJlbnRseSBiZWhpbmQgdGhlIHNjZW5lcywgY2F1c2luZyBpc3N1ZXMgaWZcbiAgICAvLyBhbiBvYmplY3QncyB0byBzdHJpbmcgaGFzIGVzY2FwZWQgY2hhcmFjdGVycyBpbiBpdC5cbiAgICBzdHJpbmcgPSBcIlwiICsgc3RyaW5nO1xuXG4gICAgaWYoIXBvc3NpYmxlLnRlc3Qoc3RyaW5nKSkgeyByZXR1cm4gc3RyaW5nOyB9XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGJhZENoYXJzLCBlc2NhcGVDaGFyKTtcbiAgfVxuXG4gIF9fZXhwb3J0c19fLmVzY2FwZUV4cHJlc3Npb24gPSBlc2NhcGVFeHByZXNzaW9uO2Z1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBfX2V4cG9ydHNfXy5pc0VtcHR5ID0gaXNFbXB0eTtmdW5jdGlvbiBhcHBlbmRDb250ZXh0UGF0aChjb250ZXh0UGF0aCwgaWQpIHtcbiAgICByZXR1cm4gKGNvbnRleHRQYXRoID8gY29udGV4dFBhdGggKyAnLicgOiAnJykgKyBpZDtcbiAgfVxuXG4gIF9fZXhwb3J0c19fLmFwcGVuZENvbnRleHRQYXRoID0gYXBwZW5kQ29udGV4dFBhdGg7XG4gIHJldHVybiBfX2V4cG9ydHNfXztcbn0pKF9fbW9kdWxlM19fKTtcblxuLy8gaGFuZGxlYmFycy9leGNlcHRpb24uanNcbnZhciBfX21vZHVsZTRfXyA9IChmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIHZhciBfX2V4cG9ydHNfXztcblxuICB2YXIgZXJyb3JQcm9wcyA9IFsnZGVzY3JpcHRpb24nLCAnZmlsZU5hbWUnLCAnbGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cbiAgZnVuY3Rpb24gRXhjZXB0aW9uKG1lc3NhZ2UsIG5vZGUpIHtcbiAgICB2YXIgbGluZTtcbiAgICBpZiAobm9kZSAmJiBub2RlLmZpcnN0TGluZSkge1xuICAgICAgbGluZSA9IG5vZGUuZmlyc3RMaW5lO1xuXG4gICAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIG5vZGUuZmlyc3RDb2x1bW47XG4gICAgfVxuXG4gICAgdmFyIHRtcCA9IEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG4gICAgLy8gVW5mb3J0dW5hdGVseSBlcnJvcnMgYXJlIG5vdCBlbnVtZXJhYmxlIGluIENocm9tZSAoYXQgbGVhc3QpLCBzbyBgZm9yIHByb3AgaW4gdG1wYCBkb2Vzbid0IHdvcmsuXG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgZXJyb3JQcm9wcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICB0aGlzW2Vycm9yUHJvcHNbaWR4XV0gPSB0bXBbZXJyb3JQcm9wc1tpZHhdXTtcbiAgICB9XG5cbiAgICBpZiAobGluZSkge1xuICAgICAgdGhpcy5saW5lTnVtYmVyID0gbGluZTtcbiAgICAgIHRoaXMuY29sdW1uID0gbm9kZS5maXJzdENvbHVtbjtcbiAgICB9XG4gIH1cblxuICBFeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbiAgX19leHBvcnRzX18gPSBFeGNlcHRpb247XG4gIHJldHVybiBfX2V4cG9ydHNfXztcbn0pKCk7XG5cbi8vIGhhbmRsZWJhcnMvYmFzZS5qc1xudmFyIF9fbW9kdWxlMV9fID0gKGZ1bmN0aW9uKF9fZGVwZW5kZW5jeTFfXywgX19kZXBlbmRlbmN5Ml9fKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgX19leHBvcnRzX18gPSB7fTtcbiAgdmFyIFV0aWxzID0gX19kZXBlbmRlbmN5MV9fO1xuICB2YXIgRXhjZXB0aW9uID0gX19kZXBlbmRlbmN5Ml9fO1xuXG4gIHZhciBWRVJTSU9OID0gXCIyLjAuMFwiO1xuICBfX2V4cG9ydHNfXy5WRVJTSU9OID0gVkVSU0lPTjt2YXIgQ09NUElMRVJfUkVWSVNJT04gPSA2O1xuICBfX2V4cG9ydHNfXy5DT01QSUxFUl9SRVZJU0lPTiA9IENPTVBJTEVSX1JFVklTSU9OO1xuICB2YXIgUkVWSVNJT05fQ0hBTkdFUyA9IHtcbiAgICAxOiAnPD0gMS4wLnJjLjInLCAvLyAxLjAucmMuMiBpcyBhY3R1YWxseSByZXYyIGJ1dCBkb2Vzbid0IHJlcG9ydCBpdFxuICAgIDI6ICc9PSAxLjAuMC1yYy4zJyxcbiAgICAzOiAnPT0gMS4wLjAtcmMuNCcsXG4gICAgNDogJz09IDEueC54JyxcbiAgICA1OiAnPT0gMi4wLjAtYWxwaGEueCcsXG4gICAgNjogJz49IDIuMC4wLWJldGEuMSdcbiAgfTtcbiAgX19leHBvcnRzX18uUkVWSVNJT05fQ0hBTkdFUyA9IFJFVklTSU9OX0NIQU5HRVM7XG4gIHZhciBpc0FycmF5ID0gVXRpbHMuaXNBcnJheSxcbiAgICAgIGlzRnVuY3Rpb24gPSBVdGlscy5pc0Z1bmN0aW9uLFxuICAgICAgdG9TdHJpbmcgPSBVdGlscy50b1N0cmluZyxcbiAgICAgIG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblxuICBmdW5jdGlvbiBIYW5kbGViYXJzRW52aXJvbm1lbnQoaGVscGVycywgcGFydGlhbHMpIHtcbiAgICB0aGlzLmhlbHBlcnMgPSBoZWxwZXJzIHx8IHt9O1xuICAgIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcblxuICAgIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnModGhpcyk7XG4gIH1cblxuICBfX2V4cG9ydHNfXy5IYW5kbGViYXJzRW52aXJvbm1lbnQgPSBIYW5kbGViYXJzRW52aXJvbm1lbnQ7SGFuZGxlYmFyc0Vudmlyb25tZW50LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXG4gICAgbG9nZ2VyOiBsb2dnZXIsXG4gICAgbG9nOiBsb2csXG5cbiAgICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSwgZm4pIHtcbiAgICAgIGlmICh0b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICAgIGlmIChmbikgeyB0aHJvdyBuZXcgRXhjZXB0aW9uKCdBcmcgbm90IHN1cHBvcnRlZCB3aXRoIG11bHRpcGxlIGhlbHBlcnMnKTsgfVxuICAgICAgICBVdGlscy5leHRlbmQodGhpcy5oZWxwZXJzLCBuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGVscGVyc1tuYW1lXSA9IGZuO1xuICAgICAgfVxuICAgIH0sXG4gICAgdW5yZWdpc3RlckhlbHBlcjogZnVuY3Rpb24obmFtZSkge1xuICAgICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgICB9LFxuXG4gICAgcmVnaXN0ZXJQYXJ0aWFsOiBmdW5jdGlvbihuYW1lLCBwYXJ0aWFsKSB7XG4gICAgICBpZiAodG9TdHJpbmcuY2FsbChuYW1lKSA9PT0gb2JqZWN0VHlwZSkge1xuICAgICAgICBVdGlscy5leHRlbmQodGhpcy5wYXJ0aWFscywgIG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wYXJ0aWFsc1tuYW1lXSA9IHBhcnRpYWw7XG4gICAgICB9XG4gICAgfSxcbiAgICB1bnJlZ2lzdGVyUGFydGlhbDogZnVuY3Rpb24obmFtZSkge1xuICAgICAgZGVsZXRlIHRoaXMucGFydGlhbHNbbmFtZV07XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMoaW5zdGFuY2UpIHtcbiAgICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignaGVscGVyTWlzc2luZycsIGZ1bmN0aW9uKC8qIFthcmdzLCBdb3B0aW9ucyAqLykge1xuICAgICAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAvLyBBIG1pc3NpbmcgZmllbGQgaW4gYSB7e2Zvb319IGNvbnN0dWN0LlxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJNaXNzaW5nIGhlbHBlcjogJ1wiICsgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV0ubmFtZSArIFwiJ1wiKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdibG9ja0hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgICBmbiA9IG9wdGlvbnMuZm47XG5cbiAgICAgIGlmKGNvbnRleHQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGZuKHRoaXMpO1xuICAgICAgfSBlbHNlIGlmKGNvbnRleHQgPT09IGZhbHNlIHx8IGNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gaW52ZXJzZSh0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgICBpZihjb250ZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaWRzID0gW29wdGlvbnMubmFtZV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gaW52ZXJzZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgICAgIHZhciBkYXRhID0gY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gVXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLm5hbWUpO1xuICAgICAgICAgIG9wdGlvbnMgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdNdXN0IHBhc3MgaXRlcmF0b3IgdG8gI2VhY2gnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZuID0gb3B0aW9ucy5mbiwgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZTtcbiAgICAgIHZhciBpID0gMCwgcmV0ID0gXCJcIiwgZGF0YTtcblxuICAgICAgdmFyIGNvbnRleHRQYXRoO1xuICAgICAgaWYgKG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmlkcykge1xuICAgICAgICBjb250ZXh0UGF0aCA9IFV0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGdW5jdGlvbihjb250ZXh0KSkgeyBjb250ZXh0ID0gY29udGV4dC5jYWxsKHRoaXMpOyB9XG5cbiAgICAgIGlmIChvcHRpb25zLmRhdGEpIHtcbiAgICAgICAgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGlmKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChpc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICAgICAgZm9yKHZhciBqID0gY29udGV4dC5sZW5ndGg7IGk8ajsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgICAgICBkYXRhLmluZGV4ID0gaTtcbiAgICAgICAgICAgICAgZGF0YS5maXJzdCA9IChpID09PSAwKTtcbiAgICAgICAgICAgICAgZGF0YS5sYXN0ICA9IChpID09PSAoY29udGV4dC5sZW5ndGgtMSkpO1xuXG4gICAgICAgICAgICAgIGlmIChjb250ZXh0UGF0aCkge1xuICAgICAgICAgICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBjb250ZXh0UGF0aCArIGk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRbaV0sIHsgZGF0YTogZGF0YSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yKHZhciBrZXkgaW4gY29udGV4dCkge1xuICAgICAgICAgICAgaWYoY29udGV4dC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgIGlmKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmtleSA9IGtleTtcbiAgICAgICAgICAgICAgICBkYXRhLmluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBkYXRhLmZpcnN0ID0gKGkgPT09IDApO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgICAgICAgICBkYXRhLmNvbnRleHRQYXRoID0gY29udGV4dFBhdGggKyBrZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldCA9IHJldCArIGZuKGNvbnRleHRba2V5XSwge2RhdGE6IGRhdGF9KTtcbiAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZihpID09PSAwKXtcbiAgICAgICAgcmV0ID0gaW52ZXJzZSh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9KTtcblxuICAgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdpZicsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihjb25kaXRpb25hbCkpIHsgY29uZGl0aW9uYWwgPSBjb25kaXRpb25hbC5jYWxsKHRoaXMpOyB9XG5cbiAgICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVuZGVyIHRoZSBwb3NpdGl2ZSBwYXRoIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgYW5kIG5vdCBlbXB0eS5cbiAgICAgIC8vIFRoZSBgaW5jbHVkZVplcm9gIG9wdGlvbiBtYXkgYmUgc2V0IHRvIHRyZWF0IHRoZSBjb25kdGlvbmFsIGFzIHB1cmVseSBub3QgZW1wdHkgYmFzZWQgb24gdGhlXG4gICAgICAvLyBiZWhhdmlvciBvZiBpc0VtcHR5LiBFZmZlY3RpdmVseSB0aGlzIGRldGVybWluZXMgaWYgMCBpcyBoYW5kbGVkIGJ5IHRoZSBwb3NpdGl2ZSBwYXRoIG9yIG5lZ2F0aXZlLlxuICAgICAgaWYgKCghb3B0aW9ucy5oYXNoLmluY2x1ZGVaZXJvICYmICFjb25kaXRpb25hbCkgfHwgVXRpbHMuaXNFbXB0eShjb25kaXRpb25hbCkpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ3VubGVzcycsIGZ1bmN0aW9uKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2UuaGVscGVyc1snaWYnXS5jYWxsKHRoaXMsIGNvbmRpdGlvbmFsLCB7Zm46IG9wdGlvbnMuaW52ZXJzZSwgaW52ZXJzZTogb3B0aW9ucy5mbiwgaGFzaDogb3B0aW9ucy5oYXNofSk7XG4gICAgfSk7XG5cbiAgICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignd2l0aCcsIGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRleHQpKSB7IGNvbnRleHQgPSBjb250ZXh0LmNhbGwodGhpcyk7IH1cblxuICAgICAgdmFyIGZuID0gb3B0aW9ucy5mbjtcblxuICAgICAgaWYgKCFVdGlscy5pc0VtcHR5KGNvbnRleHQpKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IFV0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pO1xuICAgICAgICAgIG9wdGlvbnMgPSB7ZGF0YTpkYXRhfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9nJywgZnVuY3Rpb24obWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgdmFyIGxldmVsID0gb3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsID8gcGFyc2VJbnQob3B0aW9ucy5kYXRhLmxldmVsLCAxMCkgOiAxO1xuICAgICAgaW5zdGFuY2UubG9nKGxldmVsLCBtZXNzYWdlKTtcbiAgICB9KTtcblxuICAgIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb29rdXAnLCBmdW5jdGlvbihvYmosIGZpZWxkKSB7XG4gICAgICByZXR1cm4gb2JqICYmIG9ialtmaWVsZF07XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbG9nZ2VyID0ge1xuICAgIG1ldGhvZE1hcDogeyAwOiAnZGVidWcnLCAxOiAnaW5mbycsIDI6ICd3YXJuJywgMzogJ2Vycm9yJyB9LFxuXG4gICAgLy8gU3RhdGUgZW51bVxuICAgIERFQlVHOiAwLFxuICAgIElORk86IDEsXG4gICAgV0FSTjogMixcbiAgICBFUlJPUjogMyxcbiAgICBsZXZlbDogMyxcblxuICAgIC8vIGNhbiBiZSBvdmVycmlkZGVuIGluIHRoZSBob3N0IGVudmlyb25tZW50XG4gICAgbG9nOiBmdW5jdGlvbihsZXZlbCwgbWVzc2FnZSkge1xuICAgICAgaWYgKGxvZ2dlci5sZXZlbCA8PSBsZXZlbCkge1xuICAgICAgICB2YXIgbWV0aG9kID0gbG9nZ2VyLm1ldGhvZE1hcFtsZXZlbF07XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZVttZXRob2RdKSB7XG4gICAgICAgICAgY29uc29sZVttZXRob2RdLmNhbGwoY29uc29sZSwgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIF9fZXhwb3J0c19fLmxvZ2dlciA9IGxvZ2dlcjtcbiAgdmFyIGxvZyA9IGxvZ2dlci5sb2c7XG4gIF9fZXhwb3J0c19fLmxvZyA9IGxvZztcbiAgdmFyIGNyZWF0ZUZyYW1lID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGZyYW1lID0gVXRpbHMuZXh0ZW5kKHt9LCBvYmplY3QpO1xuICAgIGZyYW1lLl9wYXJlbnQgPSBvYmplY3Q7XG4gICAgcmV0dXJuIGZyYW1lO1xuICB9O1xuICBfX2V4cG9ydHNfXy5jcmVhdGVGcmFtZSA9IGNyZWF0ZUZyYW1lO1xuICByZXR1cm4gX19leHBvcnRzX187XG59KShfX21vZHVsZTJfXywgX19tb2R1bGU0X18pO1xuXG4vLyBoYW5kbGViYXJzL3J1bnRpbWUuanNcbnZhciBfX21vZHVsZTVfXyA9IChmdW5jdGlvbihfX2RlcGVuZGVuY3kxX18sIF9fZGVwZW5kZW5jeTJfXywgX19kZXBlbmRlbmN5M19fKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgX19leHBvcnRzX18gPSB7fTtcbiAgdmFyIFV0aWxzID0gX19kZXBlbmRlbmN5MV9fO1xuICB2YXIgRXhjZXB0aW9uID0gX19kZXBlbmRlbmN5Ml9fO1xuICB2YXIgQ09NUElMRVJfUkVWSVNJT04gPSBfX2RlcGVuZGVuY3kzX18uQ09NUElMRVJfUkVWSVNJT047XG4gIHZhciBSRVZJU0lPTl9DSEFOR0VTID0gX19kZXBlbmRlbmN5M19fLlJFVklTSU9OX0NIQU5HRVM7XG4gIHZhciBjcmVhdGVGcmFtZSA9IF9fZGVwZW5kZW5jeTNfXy5jcmVhdGVGcmFtZTtcblxuICBmdW5jdGlvbiBjaGVja1JldmlzaW9uKGNvbXBpbGVySW5mbykge1xuICAgIHZhciBjb21waWxlclJldmlzaW9uID0gY29tcGlsZXJJbmZvICYmIGNvbXBpbGVySW5mb1swXSB8fCAxLFxuICAgICAgICBjdXJyZW50UmV2aXNpb24gPSBDT01QSUxFUl9SRVZJU0lPTjtcblxuICAgIGlmIChjb21waWxlclJldmlzaW9uICE9PSBjdXJyZW50UmV2aXNpb24pIHtcbiAgICAgIGlmIChjb21waWxlclJldmlzaW9uIDwgY3VycmVudFJldmlzaW9uKSB7XG4gICAgICAgIHZhciBydW50aW1lVmVyc2lvbnMgPSBSRVZJU0lPTl9DSEFOR0VTW2N1cnJlbnRSZXZpc2lvbl0sXG4gICAgICAgICAgICBjb21waWxlclZlcnNpb25zID0gUkVWSVNJT05fQ0hBTkdFU1tjb21waWxlclJldmlzaW9uXTtcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIlRlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGFuIG9sZGVyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuIFwiK1xuICAgICAgICAgICAgICBcIlBsZWFzZSB1cGRhdGUgeW91ciBwcmVjb21waWxlciB0byBhIG5ld2VyIHZlcnNpb24gKFwiK3J1bnRpbWVWZXJzaW9ucytcIikgb3IgZG93bmdyYWRlIHlvdXIgcnVudGltZSB0byBhbiBvbGRlciB2ZXJzaW9uIChcIitjb21waWxlclZlcnNpb25zK1wiKS5cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBVc2UgdGhlIGVtYmVkZGVkIHZlcnNpb24gaW5mbyBzaW5jZSB0aGUgcnVudGltZSBkb2Vzbid0IGtub3cgYWJvdXQgdGhpcyByZXZpc2lvbiB5ZXRcbiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIlRlbXBsYXRlIHdhcyBwcmVjb21waWxlZCB3aXRoIGEgbmV3ZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gXCIrXG4gICAgICAgICAgICAgIFwiUGxlYXNlIHVwZGF0ZSB5b3VyIHJ1bnRpbWUgdG8gYSBuZXdlciB2ZXJzaW9uIChcIitjb21waWxlckluZm9bMV0rXCIpLlwiKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfX2V4cG9ydHNfXy5jaGVja1JldmlzaW9uID0gY2hlY2tSZXZpc2lvbjsvLyBUT0RPOiBSZW1vdmUgdGhpcyBsaW5lIGFuZCBicmVhayB1cCBjb21waWxlUGFydGlhbFxuXG4gIGZ1bmN0aW9uIHRlbXBsYXRlKHRlbXBsYXRlU3BlYywgZW52KSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAoIWVudikge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIk5vIGVudmlyb25tZW50IHBhc3NlZCB0byB0ZW1wbGF0ZVwiKTtcbiAgICB9XG4gICAgaWYgKCF0ZW1wbGF0ZVNwZWMgfHwgIXRlbXBsYXRlU3BlYy5tYWluKSB7XG4gICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCdVbmtub3duIHRlbXBsYXRlIG9iamVjdDogJyArIHR5cGVvZiB0ZW1wbGF0ZVNwZWMpO1xuICAgIH1cblxuICAgIC8vIE5vdGU6IFVzaW5nIGVudi5WTSByZWZlcmVuY2VzIHJhdGhlciB0aGFuIGxvY2FsIHZhciByZWZlcmVuY2VzIHRocm91Z2hvdXQgdGhpcyBzZWN0aW9uIHRvIGFsbG93XG4gICAgLy8gZm9yIGV4dGVybmFsIHVzZXJzIHRvIG92ZXJyaWRlIHRoZXNlIGFzIHBzdWVkby1zdXBwb3J0ZWQgQVBJcy5cbiAgICBlbnYuVk0uY2hlY2tSZXZpc2lvbih0ZW1wbGF0ZVNwZWMuY29tcGlsZXIpO1xuXG4gICAgdmFyIGludm9rZVBhcnRpYWxXcmFwcGVyID0gZnVuY3Rpb24ocGFydGlhbCwgaW5kZW50LCBuYW1lLCBjb250ZXh0LCBoYXNoLCBoZWxwZXJzLCBwYXJ0aWFscywgZGF0YSwgZGVwdGhzKSB7XG4gICAgICBpZiAoaGFzaCkge1xuICAgICAgICBjb250ZXh0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb250ZXh0LCBoYXNoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IGVudi5WTS5pbnZva2VQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgbmFtZSwgY29udGV4dCwgaGVscGVycywgcGFydGlhbHMsIGRhdGEsIGRlcHRocyk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBlbnYuY29tcGlsZSkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHsgaGVscGVyczogaGVscGVycywgcGFydGlhbHM6IHBhcnRpYWxzLCBkYXRhOiBkYXRhLCBkZXB0aHM6IGRlcHRocyB9O1xuICAgICAgICBwYXJ0aWFsc1tuYW1lXSA9IGVudi5jb21waWxlKHBhcnRpYWwsIHsgZGF0YTogZGF0YSAhPT0gdW5kZWZpbmVkLCBjb21wYXQ6IHRlbXBsYXRlU3BlYy5jb21wYXQgfSwgZW52KTtcbiAgICAgICAgcmVzdWx0ID0gcGFydGlhbHNbbmFtZV0oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICAgIHZhciBsaW5lcyA9IHJlc3VsdC5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBsaW5lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghbGluZXNbaV0gJiYgaSArIDEgPT09IGwpIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxpbmVzW2ldID0gaW5kZW50ICsgbGluZXNbaV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IGxpbmVzLmpvaW4oJ1xcbicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiVGhlIHBhcnRpYWwgXCIgKyBuYW1lICsgXCIgY291bGQgbm90IGJlIGNvbXBpbGVkIHdoZW4gcnVubmluZyBpbiBydW50aW1lLW9ubHkgbW9kZVwiKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gSnVzdCBhZGQgd2F0ZXJcbiAgICB2YXIgY29udGFpbmVyID0ge1xuICAgICAgbG9va3VwOiBmdW5jdGlvbihkZXB0aHMsIG5hbWUpIHtcbiAgICAgICAgdmFyIGxlbiA9IGRlcHRocy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpZiAoZGVwdGhzW2ldICYmIGRlcHRoc1tpXVtuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVwdGhzW2ldW25hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGxhbWJkYTogZnVuY3Rpb24oY3VycmVudCwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGN1cnJlbnQgPT09ICdmdW5jdGlvbicgPyBjdXJyZW50LmNhbGwoY29udGV4dCkgOiBjdXJyZW50O1xuICAgICAgfSxcblxuICAgICAgZXNjYXBlRXhwcmVzc2lvbjogVXRpbHMuZXNjYXBlRXhwcmVzc2lvbixcbiAgICAgIGludm9rZVBhcnRpYWw6IGludm9rZVBhcnRpYWxXcmFwcGVyLFxuXG4gICAgICBmbjogZnVuY3Rpb24oaSkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGVTcGVjW2ldO1xuICAgICAgfSxcblxuICAgICAgcHJvZ3JhbXM6IFtdLFxuICAgICAgcHJvZ3JhbTogZnVuY3Rpb24oaSwgZGF0YSwgZGVwdGhzKSB7XG4gICAgICAgIHZhciBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0sXG4gICAgICAgICAgICBmbiA9IHRoaXMuZm4oaSk7XG4gICAgICAgIGlmIChkYXRhIHx8IGRlcHRocykge1xuICAgICAgICAgIHByb2dyYW1XcmFwcGVyID0gcHJvZ3JhbSh0aGlzLCBpLCBmbiwgZGF0YSwgZGVwdGhzKTtcbiAgICAgICAgfSBlbHNlIGlmICghcHJvZ3JhbVdyYXBwZXIpIHtcbiAgICAgICAgICBwcm9ncmFtV3JhcHBlciA9IHRoaXMucHJvZ3JhbXNbaV0gPSBwcm9ncmFtKHRoaXMsIGksIGZuKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvZ3JhbVdyYXBwZXI7XG4gICAgICB9LFxuXG4gICAgICBkYXRhOiBmdW5jdGlvbihkYXRhLCBkZXB0aCkge1xuICAgICAgICB3aGlsZSAoZGF0YSAmJiBkZXB0aC0tKSB7XG4gICAgICAgICAgZGF0YSA9IGRhdGEuX3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0sXG4gICAgICBtZXJnZTogZnVuY3Rpb24ocGFyYW0sIGNvbW1vbikge1xuICAgICAgICB2YXIgcmV0ID0gcGFyYW0gfHwgY29tbW9uO1xuXG4gICAgICAgIGlmIChwYXJhbSAmJiBjb21tb24gJiYgKHBhcmFtICE9PSBjb21tb24pKSB7XG4gICAgICAgICAgcmV0ID0gVXRpbHMuZXh0ZW5kKHt9LCBjb21tb24sIHBhcmFtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9LFxuXG4gICAgICBub29wOiBlbnYuVk0ubm9vcCxcbiAgICAgIGNvbXBpbGVySW5mbzogdGVtcGxhdGVTcGVjLmNvbXBpbGVyXG4gICAgfTtcblxuICAgIHZhciByZXQgPSBmdW5jdGlvbihjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHZhciBkYXRhID0gb3B0aW9ucy5kYXRhO1xuXG4gICAgICByZXQuX3NldHVwKG9wdGlvbnMpO1xuICAgICAgaWYgKCFvcHRpb25zLnBhcnRpYWwgJiYgdGVtcGxhdGVTcGVjLnVzZURhdGEpIHtcbiAgICAgICAgZGF0YSA9IGluaXREYXRhKGNvbnRleHQsIGRhdGEpO1xuICAgICAgfVxuICAgICAgdmFyIGRlcHRocztcbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlRGVwdGhzKSB7XG4gICAgICAgIGRlcHRocyA9IG9wdGlvbnMuZGVwdGhzID8gW2NvbnRleHRdLmNvbmNhdChvcHRpb25zLmRlcHRocykgOiBbY29udGV4dF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0ZW1wbGF0ZVNwZWMubWFpbi5jYWxsKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgZGF0YSwgZGVwdGhzKTtcbiAgICB9O1xuICAgIHJldC5pc1RvcCA9IHRydWU7XG5cbiAgICByZXQuX3NldHVwID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKCFvcHRpb25zLnBhcnRpYWwpIHtcbiAgICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBjb250YWluZXIubWVyZ2Uob3B0aW9ucy5oZWxwZXJzLCBlbnYuaGVscGVycyk7XG5cbiAgICAgICAgaWYgKHRlbXBsYXRlU3BlYy51c2VQYXJ0aWFsKSB7XG4gICAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gY29udGFpbmVyLm1lcmdlKG9wdGlvbnMucGFydGlhbHMsIGVudi5wYXJ0aWFscyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRhaW5lci5oZWxwZXJzID0gb3B0aW9ucy5oZWxwZXJzO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcHRpb25zLnBhcnRpYWxzO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXQuX2NoaWxkID0gZnVuY3Rpb24oaSwgZGF0YSwgZGVwdGhzKSB7XG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocyAmJiAhZGVwdGhzKSB7XG4gICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oJ211c3QgcGFzcyBwYXJlbnQgZGVwdGhzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9ncmFtKGNvbnRhaW5lciwgaSwgdGVtcGxhdGVTcGVjW2ldLCBkYXRhLCBkZXB0aHMpO1xuICAgIH07XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuXG4gIF9fZXhwb3J0c19fLnRlbXBsYXRlID0gdGVtcGxhdGU7ZnVuY3Rpb24gcHJvZ3JhbShjb250YWluZXIsIGksIGZuLCBkYXRhLCBkZXB0aHMpIHtcbiAgICB2YXIgcHJvZyA9IGZ1bmN0aW9uKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICByZXR1cm4gZm4uY2FsbChjb250YWluZXIsIGNvbnRleHQsIGNvbnRhaW5lci5oZWxwZXJzLCBjb250YWluZXIucGFydGlhbHMsIG9wdGlvbnMuZGF0YSB8fCBkYXRhLCBkZXB0aHMgJiYgW2NvbnRleHRdLmNvbmNhdChkZXB0aHMpKTtcbiAgICB9O1xuICAgIHByb2cucHJvZ3JhbSA9IGk7XG4gICAgcHJvZy5kZXB0aCA9IGRlcHRocyA/IGRlcHRocy5sZW5ndGggOiAwO1xuICAgIHJldHVybiBwcm9nO1xuICB9XG5cbiAgX19leHBvcnRzX18ucHJvZ3JhbSA9IHByb2dyYW07ZnVuY3Rpb24gaW52b2tlUGFydGlhbChwYXJ0aWFsLCBuYW1lLCBjb250ZXh0LCBoZWxwZXJzLCBwYXJ0aWFscywgZGF0YSwgZGVwdGhzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7IHBhcnRpYWw6IHRydWUsIGhlbHBlcnM6IGhlbHBlcnMsIHBhcnRpYWxzOiBwYXJ0aWFscywgZGF0YTogZGF0YSwgZGVwdGhzOiBkZXB0aHMgfTtcblxuICAgIGlmKHBhcnRpYWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihcIlRoZSBwYXJ0aWFsIFwiICsgbmFtZSArIFwiIGNvdWxkIG5vdCBiZSBmb3VuZFwiKTtcbiAgICB9IGVsc2UgaWYocGFydGlhbCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICByZXR1cm4gcGFydGlhbChjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBfX2V4cG9ydHNfXy5pbnZva2VQYXJ0aWFsID0gaW52b2tlUGFydGlhbDtmdW5jdGlvbiBub29wKCkgeyByZXR1cm4gXCJcIjsgfVxuXG4gIF9fZXhwb3J0c19fLm5vb3AgPSBub29wO2Z1bmN0aW9uIGluaXREYXRhKGNvbnRleHQsIGRhdGEpIHtcbiAgICBpZiAoIWRhdGEgfHwgISgncm9vdCcgaW4gZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBkYXRhID8gY3JlYXRlRnJhbWUoZGF0YSkgOiB7fTtcbiAgICAgIGRhdGEucm9vdCA9IGNvbnRleHQ7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIHJldHVybiBfX2V4cG9ydHNfXztcbn0pKF9fbW9kdWxlMl9fLCBfX21vZHVsZTRfXywgX19tb2R1bGUxX18pO1xuXG4vLyBoYW5kbGViYXJzLnJ1bnRpbWUuanNcbnZhciBfX21vZHVsZTBfXyA9IChmdW5jdGlvbihfX2RlcGVuZGVuY3kxX18sIF9fZGVwZW5kZW5jeTJfXywgX19kZXBlbmRlbmN5M19fLCBfX2RlcGVuZGVuY3k0X18sIF9fZGVwZW5kZW5jeTVfXykge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgdmFyIF9fZXhwb3J0c19fO1xuICAvKmdsb2JhbHMgSGFuZGxlYmFyczogdHJ1ZSAqL1xuICB2YXIgYmFzZSA9IF9fZGVwZW5kZW5jeTFfXztcblxuICAvLyBFYWNoIG9mIHRoZXNlIGF1Z21lbnQgdGhlIEhhbmRsZWJhcnMgb2JqZWN0LiBObyBuZWVkIHRvIHNldHVwIGhlcmUuXG4gIC8vIChUaGlzIGlzIGRvbmUgdG8gZWFzaWx5IHNoYXJlIGNvZGUgYmV0d2VlbiBjb21tb25qcyBhbmQgYnJvd3NlIGVudnMpXG4gIHZhciBTYWZlU3RyaW5nID0gX19kZXBlbmRlbmN5Ml9fO1xuICB2YXIgRXhjZXB0aW9uID0gX19kZXBlbmRlbmN5M19fO1xuICB2YXIgVXRpbHMgPSBfX2RlcGVuZGVuY3k0X187XG4gIHZhciBydW50aW1lID0gX19kZXBlbmRlbmN5NV9fO1xuXG4gIC8vIEZvciBjb21wYXRpYmlsaXR5IGFuZCB1c2FnZSBvdXRzaWRlIG9mIG1vZHVsZSBzeXN0ZW1zLCBtYWtlIHRoZSBIYW5kbGViYXJzIG9iamVjdCBhIG5hbWVzcGFjZVxuICB2YXIgY3JlYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgICBVdGlscy5leHRlbmQoaGIsIGJhc2UpO1xuICAgIGhiLlNhZmVTdHJpbmcgPSBTYWZlU3RyaW5nO1xuICAgIGhiLkV4Y2VwdGlvbiA9IEV4Y2VwdGlvbjtcbiAgICBoYi5VdGlscyA9IFV0aWxzO1xuICAgIGhiLmVzY2FwZUV4cHJlc3Npb24gPSBVdGlscy5lc2NhcGVFeHByZXNzaW9uO1xuXG4gICAgaGIuVk0gPSBydW50aW1lO1xuICAgIGhiLnRlbXBsYXRlID0gZnVuY3Rpb24oc3BlYykge1xuICAgICAgcmV0dXJuIHJ1bnRpbWUudGVtcGxhdGUoc3BlYywgaGIpO1xuICAgIH07XG5cbiAgICByZXR1cm4gaGI7XG4gIH07XG5cbiAgdmFyIEhhbmRsZWJhcnMgPSBjcmVhdGUoKTtcbiAgSGFuZGxlYmFycy5jcmVhdGUgPSBjcmVhdGU7XG5cbiAgSGFuZGxlYmFyc1snZGVmYXVsdCddID0gSGFuZGxlYmFycztcblxuICBfX2V4cG9ydHNfXyA9IEhhbmRsZWJhcnM7XG4gIHJldHVybiBfX2V4cG9ydHNfXztcbn0pKF9fbW9kdWxlMV9fLCBfX21vZHVsZTNfXywgX19tb2R1bGU0X18sIF9fbW9kdWxlMl9fLCBfX21vZHVsZTVfXyk7XG5cbiAgcmV0dXJuIF9fbW9kdWxlMF9fO1xufSkpO1xuIiwiLypcbiAqIGNhdGJlcnJ5LWhhbmRsZWJhcnNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgRGVuaXMgUmVjaGt1bm92IGFuZCBwcm9qZWN0IGNvbnRyaWJ1dG9ycy5cbiAqXG4gKiBjYXRiZXJyeS1oYW5kbGViYXJzJ3MgbGljZW5zZSBmb2xsb3dzOlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuICogaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbiAqIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4gKiBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuICogc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbiAqIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1NcbiAqIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICpcbiAqIFRoaXMgbGljZW5zZSBhcHBsaWVzIHRvIGFsbCBwYXJ0cyBvZiBjYXRiZXJyeS1oYW5kbGViYXJzIHRoYXRcbiAqIGFyZSBub3QgZXh0ZXJuYWxseSBtYWludGFpbmVkIGxpYnJhcmllcy5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBIYW5kbGViYXJzID0gcmVxdWlyZSgnLi9saWIvdmVuZG9ycy9oYW5kbGViYXJzJyksXG4gICAgVGVtcGxhdGVQcm92aWRlciA9IHJlcXVpcmUoJy4vbGliL1RlbXBsYXRlUHJvdmlkZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcmVnaXN0ZXI6IGZ1bmN0aW9uIChsb2NhdG9yLCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgICAgICBsb2NhdG9yLnJlZ2lzdGVySW5zdGFuY2UoJ2hhbmRsZWJhcnMnLCBIYW5kbGViYXJzKTtcbiAgICAgICAgbG9jYXRvci5yZWdpc3RlcigndGVtcGxhdGVQcm92aWRlcicsIFRlbXBsYXRlUHJvdmlkZXIsIGNvbmZpZywgdHJ1ZSk7XG4gICAgfSxcbiAgICBIYW5kbGViYXJzOiBIYW5kbGViYXJzLFxuICAgIFRlbXBsYXRlUHJvdmlkZXI6IFRlbXBsYXRlUHJvdmlkZXJcbn07XG4iXX0=
