@function breakpoint-make-resolutions($resolution) {
    $length: length($resolution);

    $output: ();

    @if $length == 2 {
        $feature: '';
        $value: '';

        // Find which is number
        @if type-of(nth($resolution, 1)) == 'number' {
            $value: nth($resolution, 1);
        }
        @else {
            $value: nth($resolution, 2);
        }

        // Determine min/max/standard
        @if index($resolution, 'min-resolution') {
            $feature: 'min-';
        }
        @else if index($resolution, 'max-resolution') {
            $feature: 'max-';
        }

        $standard: '(#{$feature}resolution: #{$value})';

        // If we're not dealing with dppx,
        @if unit($value) != 'dppx' {
            $base: 96dpi;
            @if unit($value) == 'dpcm' {
                $base: 243.84dpcm;
            }
            // Write out feature tests
            $webkit: '';
            $moz: '';
            $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / $base})';
            $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / $base})';
            // Append to output
            $output: append($output, $standard, space);
            $output: append($output, $webkit, space);
            $output: append($output, $moz, space);
        }
        @else {
            $webkit: '';
            $moz: '';
            $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / 1dppx})';
            $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / 1dppx})';
            $fallback: '(#{$feature}resolution: #{$value / 1dppx * 96dpi})';
            // Append to output
            $output: append($output, $standard, space);
            $output: append($output, $webkit, space);
            $output: append($output, $moz, space);
            $output: append($output, $fallback, space);
        }

    }

    @return $output;
}


@function breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first) {
    $leader: '';
    // If we're forcing
    @if not ($empty-media) or not ($first) {
        $leader: 'and ';
    }

    @if breakpoint-get('transform resolutions') and $query-resolution {
        $resolutions: breakpoint-make-resolutions($query-resolution);
        $length: length($resolutions);
        $query-holder: '';

        @for $i from 1 through $length {
            $query: '#{$query-print} #{$leader}#{nth($resolutions, $i)}';
            @if $i == 1 {
                $query-holder: $query;
            }
            @else {
                $query-holder: '#{$query-holder}, #{$query}';
            }
        }

        @return $query-holder;
    }
    @else {
        // Return with attached resolution
        @return $query-print;
    }
}